{"version":3,"file":"static/js/8898.134c0f80.chunk.js","mappings":"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","sources":["pages/client/proposal/CreateProposal.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport ReactSelect from \"react-select\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, inputLabelClassNameReactSelect, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { createProposal } from \"../proposal/proposalFeatures/_proposal_reducers\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\n\nfunction CreateProposal() {\n  const { loading: proposalLoading } = useSelector(state => state.proposal);\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { employeList } = useSelector((state) => state.employe);\n\n  const { companyList } = useSelector((state) => state.company);\n  const { countryListData, companyListLoading } = useSelector((state) => state.country);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n\n  useEffect(() => {\n    setValue(\"PDMobileCode\", \"+91\");\n  }, [countryListData]);\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (companyId && userType === \"company\" || userType === \"admin\") {\n      dispatch(\n        directorSearch({\n          text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n        })\n      );\n    }\n  }, [companyId]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      \"directorId\": \"\",\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      name: data?.name,\n      email: data?.email,\n      mobile: {\n        code: data?.code,\n        number: data?.number,\n      },\n      employeId: data?.employee?.value,\n      description: data?.remark,\n      fee: data?.amount,\n    };\n    dispatch(createProposal(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  useEffect(() => {\n    fetchEmployeListData()\n  }, [branchId])\n  const fetchEmployeListData = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isPagination: false,\n      departmentId: \"\",\n      designationId: \"\",\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? companyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n          ? branchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n    };\n\n    dispatch(employeSearch(reqPayload));\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      // onFocus={() => {\n                      //   dispatch(\n                      //     companySearch({\n                      //       text: \"\",\n                      //       sort: true,\n                      //       status: true,\n                      //       isPagination: false,\n                      //     })\n                      //   );\n                      // }}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((type) => (\n                    <option key={type?._id} value={type?._id}>\n                      {type?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDBranchId\"\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ?\n                        (<Select.Option disabled>\n                          <Loader />\n                        </Select.Option>)\n                        :\n                        (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))\n                      }\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.name\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.name.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Handling Employee <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"employee\"\n                control={control}\n                rules={{ required: \"Employee is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    {...field}\n                    options={sortByPropertyAlphabetically(employeList, 'fullName')?.map((employee) => ({\n                      value: employee?._id,\n                      label: employee?.fullName,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.employee ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                    placeholder=\"Select Employee\"\n                  />\n                )}\n              />\n              {errors.employee && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.employee.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Email <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"email\", {\n                  required: \"Email is required\",\n                  pattern: {\n                    value:\n                      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                    message: \"Please enter a valid email address\",\n                  },\n                })}\n                className={` ${inputClassName} ${errors.email ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Email\"\n              />\n              {errors.email && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.email.message}\n                </p>\n              )}\n            </div>\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  Code <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"code\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n                {errors[`code`] && (\n                  <p className=\"text-red-500 text-sm mt-2\">\n                    {errors[`code`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`number`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`number`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`number`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`number`].message}\n                  </p>\n                )}\n              </div>\n             \n            </div>\n             <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Remark <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"remark\", {\n                    required: \"Remark is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.remark\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Remark\"\n                />\n                {errors.remark && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.remark.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Amount <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"amount\", {\n                    required: \"Amount is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.amount\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Amount\"\n                />\n                {errors.amount && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.amount.message}\n                  </p>\n                )}\n              </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={proposalLoading}\n              className={`${proposalLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {proposalLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateProposal\n"],"names":["loading","proposalLoading","useSelector","state","proposal","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","employeList","employe","companyList","company","countryListData","companyListLoading","country","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","companySearch","text","sort","status","isPagination","branchSearch","_id","directorSearch","fetchEmployeListData","reqPayload","isTL","isHR","departmentId","designationId","employeSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$employee","finalPayload","email","mobile","code","number","employeId","employee","value","description","remark","fee","amount","createProposal","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","disabled","Loader","map","type","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab","sortByPropertyAlphabetically","PDBranchId","inputClassName","placeholder","_ref3","_sortByPropertyAlphab2","ReactSelect","options","label","classNamePrefix","inputLabelClassNameReactSelect","pattern","_ref4","CustomMobileCodePicker","minLength","maxLength","onInput","e","target","length","slice"],"sourceRoot":""}