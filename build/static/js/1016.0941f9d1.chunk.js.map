{"version":3,"file":"static/js/1016.0941f9d1.chunk.js","mappings":"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","sources":["pages/financeManagement/cashbook/Editcashbook.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { domainName, inputClassName, inputDisabledClassName, inputLabelClassName, inputLabelClassNameReactSelect } from \"../../../constents/global\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport ReactSelect from \"react-select\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { expenseTypeSearch } from \"../../global/other/ExpenseHead/expenseTypeFeature/_expenseType_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { getcashbookDetails, updatecashbook } from \"./cashbookFeature/_cashbook_reducers\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\n\nconst Editcashbook = () => {\n  const { loading: cashbookLoading } = useSelector(\n    (state) => state.cashbook\n  );\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    reset,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { employeList } = useSelector((state) => state.employe);\n\n  const { expenseTypeList } = useSelector((state) => state.expenceHead);\n  const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n  const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n\n  const [isPreview, setIsPreview] = useState(false);\n  const [formData, setFormData] = useState({\n    attachments: []\n  });\n  const { cashbookDetails } = useSelector(\n    (state) => state.cashbook\n  );\n\n  const { cashbookIdEnc } = useParams();\n  const cashbookId = decrypt(cashbookIdEnc);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: cashbookId,\n      companyId: cashbookDetails?.companyId,\n      directorId: cashbookDetails?.directorId,\n      branchId: cashbookDetails?.branchId,\n      \"employeId\": userInfoglobal?.userType !== \"employe\" ? data?.employee?.value : userInfoglobal?.userType === \"employe\" ? userInfoglobal?._id : null,\n      \"expenseTypeId\": data?.expencehead?.value,\n      \"expenseFor\": data?.expenseFor,\n      \"amount\": + data?.amount,\n      \"naration\": data?.naration,\n      // \"attachment\": data?.fileUploadLink,\n      \"GSTamount\": 0,\n      \"totalAmount\": + data?.amount,\n      date: data?.date,\n      attachment: formData?.attachments,\n    };\n    dispatch(updatecashbook(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  // useEffect(() => {\n  //   if (\n  //     CompanyId ||\n  //     userInfoglobal?.userType === \"company\" ||\n  //     userInfoglobal?.userType === \"companyDirector\"\n  //   ) {\n  //     dispatch(\n  //       branchSearch({\n  //         text: \"\",\n  //         sort: true,\n  //         status: true,\n  //         companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n  //       })\n  //     );\n  //   }\n  // }, [CompanyId])\n  // useEffect(() => {\n  //   if (userInfoglobal?.userType === \"admin\") {\n  //     dispatch(\n  //       companySearch({\n  //         text: \"\",\n  //         sort: true,\n  //         status: true,\n  //         isPagination: false,\n  //       })\n  //     );\n  //   }\n  // }, []);\n  // const handleFileChange = (file) => {\n  //   dispatch(\n  //     fileUploadFunc({\n  //       filePath: file,\n  //       isVideo: false,\n  //       isMultiple: false,\n  //     })\n  //   ).then((data) => {\n  //     if (!data.error) {\n  //       setValue('fileUploadLink', data?.payload?.data)\n  //     }\n  //   });\n  // };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setFormData(prev => ({\n          ...prev,\n          attachments: [...prev?.attachments || [], res?.payload?.data]\n        }));\n      }\n    });\n  };\n\n  const handleRemoveFile = (index) => {\n    setFormData(prev => {\n      const updatedAttachments = prev?.attachments.filter((_, i) => i !== index);\n      return { ...prev, attachments: updatedAttachments };\n    });\n  };\n\n\n  useEffect(() => {\n    dispatch(getcashbookDetails({\n      _id: cashbookId\n    }))\n  }, [])\n\n  useEffect(() => {\n    if (cashbookDetails) {\n      setValue(\"expenseFor\", cashbookDetails?.expenseFor)\n      setValue(\"amount\", cashbookDetails?.amount)\n      setValue(\"naration\", cashbookDetails?.naration)\n      // setValue(\"fileUploadLink\", cashbookDetails?.attachment)\n      setValue(\"gstAmount\", cashbookDetails?.GSTamount)\n      setValue(\"totalAmount\", cashbookDetails?.totalAmount)\n      setValue(\"date\", dayjs(cashbookDetails?.date))\n      setFormData({\n        attachments: cashbookDetails?.attachment\n      });\n      const reqPayload = {\n        text: \"\",\n        status: true,\n        sort: true,\n        isTL: \"\",\n        isHR: \"\",\n        isPagination: false,\n        departmentId: '',\n        designationId: '',\n        companyId: cashbookDetails?.companyId,\n        branchId: cashbookDetails?.branchId,\n      };\n\n      dispatch(employeSearch(reqPayload)).then((response) => {\n        if (!response.error) {\n\n          const selectedEmployees = response?.payload?.data?.docs?.find((employee) => cashbookDetails?.employeId === employee._id)\n          setValue(\"employee\", { value: selectedEmployees._id, label: selectedEmployees.fullName })\n        }\n\n      })\n      dispatch(expenseTypeSearch({\n        directorId: \"\",\n        companyId: cashbookDetails?.companyId,\n        branchId: cashbookDetails?.branchId,\n        text: \"\",\n        sort: true,\n        status: \"\",\n        isPagination: false,\n      }\n      )).then((response) => {\n        if (!response.error) {\n          const selectedEmployees = response?.payload?.data?.docs\n            ?.find((employee) => cashbookDetails?.expenseTypeId === employee._id)\n          const employeepayload = {\n            value: selectedEmployees?._id,\n            label: selectedEmployees?.name,\n          }\n          setValue(\"expencehead\", employeepayload)\n        }\n\n      })\n\n    }\n  }, [cashbookDetails])\n  useEffect(() => {\n    setValue('totalAmount', Number(watch('amount')) + Number(watch('gstAmount')))\n  }, [watch('amount'), watch('gstAmount')])\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 md:gap-8 md:my-1 px-3 md:mt-4\">\n            {/* {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n              Company <span className=\"text-red-600\">*</span>\n            </label>\n            <select\n              {...register(\"PDCompanyId\", {\n                required: \"company is required\",\n              })}\n              className={` ${inputClassName} ${errors.PDCompanyId\n                ? \"border-[1px] \"\n                : \"border-gray-300\"\n                }`}\n            >\n              <option className=\"\" value=\"\">\n                Select Comapany\n              </option>\n              {companyList?.map((type) => (\n                <option value={type?._id}>{type?.fullName}</option>\n              ))}\n            </select>\n            {errors.PDCompanyId && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.PDCompanyId.message}\n              </p>\n            )}\n          </div>}\n          {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n              Branch <span className=\"text-red-600\">*</span>\n            </label>\n            <select\n              {...register(\"PDBranchId\", {\n                required: \"Branch is required\",\n              })}\n              className={` ${inputClassName} ${errors.PDBranchId\n                ? \"border-[1px] \"\n                : \"border-gray-300\"\n                }`}\n            >\n              <option className=\"\" value=\"\">\n                Select Branch\n              </option>\n              {branchList?.map((type) => (\n                <option value={type?._id}>{type?.fullName}</option>\n              ))}\n            </select>\n            {errors.PDBranchId && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.PDBranchId.message}\n              </p>\n            )}\n          </div>} */}\n\n            {/* <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n              Expence For<span className=\"text-red-600\">*</span>\n            </label>\n            <select\n              {...register(\"expenseFor\",)}\n              className={`${inputClassName}  ${errors.expenseFor\n                ? \"border-[1px] \"\n                : \"border-gray-300\"\n                } `}\n            >\n              <option value=''>\n                select Type\n              </option>\n              <option value='head'>\n                Expence Head\n              </option>\n              <option value='employe'>\n                Employee\n              </option>\n            </select>\n            {errors.expenseFor && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.expenseFor.message}\n              </p>\n            )}\n          </div> */}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Expence Head</label>\n              <Controller\n                name=\"expencehead\"\n                control={control}\n                rules={{ required: \"Expence Head is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    // onFocus={() => {\n                    //   const reqPayload = {\n                    //     directorId: \"\",\n                    //     companyId: userInfoglobal?.userType === \"admin\"\n                    //         ? CompanyId\n                    //         : userInfoglobal?.userType === \"company\"\n                    //           ? userInfoglobal?._id\n                    //           : userInfoglobal?.companyId,\n                    //     branchId:userInfoglobal?.userType === \"company\" ||\n                    //         userInfoglobal?.userType === \"admin\" ||\n                    //         userInfoglobal?.userType === \"companyDirector\"\n                    //         ? BranchId\n                    //         : userInfoglobal?.userType === \"companyBranch\"\n                    //           ? userInfoglobal?._id\n                    //           : userInfoglobal?.branchId,\n                    //     text: \"\",\n                    //     sort: true,\n                    //     status: \"\",\n                    //     isPagination: true,\n                    //   }\n\n                    //   dispatch(expenseTypeSearch(reqPayload));\n                    // }}\n                    // API call triggers only when focused\n                    {...field}\n                    options={expenseTypeList?.map((expence) => ({\n                      value: expence?._id,\n                      label: expence?.name,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.expencehead ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Expence Head\"\n                  />\n                )}\n              />\n              {errors.expencehead && <p className=\"text-red-500 text-sm\">{errors.expencehead.message}</p>}\n            </div>\n\n\n            {userInfoglobal?.userType !== \"employee\" && <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Employee</label>\n              <Controller\n                name=\"employee\"\n                control={control}\n                rules={{ required: \"Employee is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    {...field}\n                    onFocus={() => {\n                      const reqPayload = {\n                        text: \"\",\n                        status: true,\n                        sort: true,\n                        isTL: \"\",\n                        isHR: \"\",\n                        isPagination: false,\n                        departmentId: '',\n                        designationId: '',\n                        companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n                        branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n                      };\n\n                      dispatch(employeSearch(reqPayload));\n                    }}\n                    options={employeList?.map((employee) => ({\n                      value: employee?._id,\n                      label: employee?.fullName,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.employee ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Employee\"\n                  />\n                )}\n              />\n              {errors.employee && <p className=\"text-red-500 text-sm\">{errors.employee.message}</p>}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Amount<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                 step=\"0.01\"\n                {...register(\"amount\", {\n                  required: \"Amount is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.amount ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.amount.message}\n                </p>\n              )}\n            </div>\n            {/* <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n             Gst Amount\n            </label>\n            <input\n              type=\"number\"\n              {...register(\"gstAmount\")}\n              className={` ${inputClassName} ${errors.gstAmount ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              placeholder=\"Enter Gst Amount\"\n            />\n            {errors.gstAmount && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.gstAmount.message}\n              </p>\n            )}\n          </div> */}\n            {/* <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n             Total Amount\n            </label>\n            <input\n              type=\"number\"\n              disabled\n              {...register(\"totalAmount\")}\n              className={` ${inputDisabledClassName} ${errors.totalAmount ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              placeholder=\"Enter Total Amount\"\n            />\n            {errors.totalAmount && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.totalAmount.message}\n              </p>\n            )}\n          </div> */}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration<span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.naration ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>Date</label>\n              <Controller\n                name=\"date\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                    disabledDate={(current) => {\n                      if (!current) return true;\n\n                      const today = dayjs().startOf('day');\n                      const currentDate = current.startOf('day');\n                      const dayOfMonth = today.date();\n\n                      if (dayOfMonth <= 5) {\n                        // --- Last 5 days of previous month ---\n                        const prevMonth = today.subtract(1, 'month');\n                        const endOfPrevMonth = prevMonth.endOf('month').startOf('day');\n                        const startOfLast5PrevMonth = prevMonth\n                          .date(endOfPrevMonth.date() - 4)\n                          .startOf('day');\n\n                        const isInLast5PrevMonth =\n                          (currentDate.isAfter(startOfLast5PrevMonth) || currentDate.isSame(startOfLast5PrevMonth)) &&\n                          (currentDate.isBefore(endOfPrevMonth) || currentDate.isSame(endOfPrevMonth));\n\n                        // --- Current month: 1st to today ---\n                        const startOfCurrentMonth = today.startOf('month');\n                        const isFromStartToToday =\n                          (currentDate.isAfter(startOfCurrentMonth) || currentDate.isSame(startOfCurrentMonth)) &&\n                          (currentDate.isBefore(today) || currentDate.isSame(today));\n\n                        return !(isInLast5PrevMonth || isFromStartToToday);\n                      } else {\n                        // After 5th of month: allow only past dates in current month\n                        const startOfCurrentMonth = today.startOf('month');\n\n                        const isInCurrentMonth =\n                          (currentDate.isAfter(startOfCurrentMonth) || currentDate.isSame(startOfCurrentMonth)) &&\n                          (currentDate.isBefore(today) || currentDate.isSame(today));\n\n                        return !isInCurrentMonth;\n                      }\n                    }}\n                  />\n                )}\n              />\n              {errors.date && <p className=\"text-red-500 text-sm\">Date is required</p>}\n            </div>\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                File  Upload\n              </label>\n\n              <Controller\n                name=\"fileUpload\"\n                control={control}\n\n                render={({ field }) => (\n                  <>\n                    <input\n                      type=\"file\"\n                      id=\"file-upload\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={(e) => {\n                        field.onChange(e);\n                        handleFileChange(e.target.files[0]);\n                      }}\n                    />\n                    <br />\n                    <label\n                      htmlFor=\"file-upload\"\n                      className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                    >\n                      File Upload\n                    </label>\n                    {errors.fileUpload && (\n                      <p className=\"text-red-600 text-sm mt-1\">{errors.fileUpload.message}</p>\n                    )}\n                  </>\n                )}\n              />\n              {watch('fileUploadLink') && <img\n                src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('fileUploadLink')}`}\n                alt=\"Uploaded\"\n                className=\"w-20 h-20 shadow rounded-sm\"\n              />}\n            </div> */}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Documents\n              </label>\n              {!isPreview ? (\n                <div className=\"space-y-4\">\n                  <input type=\"file\" onChange={handleFileChange} className=\"hidden\" id=\"file-upload\" />\n                  <label htmlFor=\"file-upload\" className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-600 bg-white cursor-pointer\">\n                    <FaRegFile className=\"mr-2\" /> Add Documents\n                  </label>\n\n                  <div className=\"space-y-2\">\n                    {formData?.attachments?.map((file, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                        <a\n                          href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                          className=\"flex items-center space-x-2\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <FaRegFile className=\"text-gray-500\" />\n                          <span className=\"text-sm text-gray-600\">{file}</span>\n                        </a>\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveFile(index)}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          <FaTimes />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {/* Attachments preview logic */}\n                </div>\n              )}\n            </div>\n\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={cashbookLoading}\n              className={`${cashbookLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {cashbookLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default Editcashbook;\n"],"names":["Editcashbook","_formData$attachments","loading","cashbookLoading","useSelector","state","cashbook","register","handleSubmit","control","watch","reset","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","company","branchList","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","employeList","employe","expenseTypeList","expenceHead","CompanyId","useWatch","name","defaultValue","BranchId","isPreview","setIsPreview","useState","formData","setFormData","attachments","cashbookDetails","cashbookIdEnc","useParams","cashbookId","decrypt","useEffect","getcashbookDetails","_id","expenseFor","amount","naration","GSTamount","totalAmount","dayjs","date","attachment","reqPayload","text","status","sort","isTL","isHR","isPagination","departmentId","designationId","companyId","branchId","employeSearch","then","response","error","_response$payload","_response$payload$dat","_response$payload$dat2","selectedEmployees","payload","data","docs","find","employee","employeId","value","label","fullName","expenseTypeSearch","directorId","_response$payload2","_response$payload2$da","_response$payload2$da2","expenseTypeId","employeepayload","Number","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_data$employee","_data$expencehead","finalPayload","userType","expencehead","updatecashbook","inputLabelClassName","Controller","rules","required","render","_ref","field","ReactSelect","_objectSpread","options","map","expence","classNamePrefix","inputLabelClassNameReactSelect","placeholder","message","_ref2","onFocus","type","step","inputClassName","_ref3","CustomDatePicker","disabledDate","current","today","startOf","currentDate","prevMonth","subtract","endOfPrevMonth","endOf","startOfLast5PrevMonth","isInLast5PrevMonth","isAfter","isSame","isBefore","startOfCurrentMonth","isFromStartToToday","onChange","e","reqData","filePath","target","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","prev","_res$payload2","id","htmlFor","FaRegFile","file","index","href","process","rel","onClick","updatedAttachments","filter","_","i","handleRemoveFile","FaTimes","disabled","Loader"],"sourceRoot":""}