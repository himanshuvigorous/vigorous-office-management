{"version":3,"file":"static/js/5750.9e1a6f5e.chunk.js","mappings":"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","sources":["pages/global/other/officeAddressManagement/CreateOfficeAddress.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputerrorClassNameAutoComplete, inputLabelClassName, optionLabelForBankSlect } from \"../../../../constents/global\";\nimport { branchSearch, getBranchDetails } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { AutoComplete, Image, Input, Select } from \"antd\";\nimport { citySearch } from \"../../address/city/CityFeatures/_city_reducers\";\nimport { stateSearch } from \"../../address/state/featureStates/_state_reducers\";\nimport { countrySearch } from \"../../address/country/CountryFeatures/_country_reducers\";\nimport BranchDetails from \"../../../client/clientManagement/BranchDetails\";\nimport { fileUploadFunc } from \"../fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { createofficeAddress } from \"./officeAddressFeature/_office_address_reducers\";\nimport ReactQuill from \"react-quill\";\nimport CustomMobileCodePicker from \"../../../../global_layouts/MobileCode/MobileCodePicker\";\nimport Swal from \"sweetalert2\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\nconst CreateOfficeAddress = () => {\n  const headerRef = useRef([])\n  const footerRef = useRef([])\n  const { loading: officeAddressLoading } = useSelector(\n    (state) => state.officeAddress\n  );\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const [editorValue, setEditorValue] = useState(``);\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const { branchDetailsData, loading: bankListLoading } = useSelector((state) => state.branch);\n\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"bankAccountId\": data?.PDBankId,\n      \"address\": {\n        \"street\": data?.PDAddress,\n        \"city\": data?.PDCity,\n        \"state\": data?.PDState,\n        \"country\": data?.PDCountry,\n        \"pinCode\": data?.PDPinCode\n      },\n      \"type\": \"invoice\",\n      \"firmName\": data?.PDfirmName,\n      \"tagName\": data?.PDTagName,\n      \"mobile\": {\n        \"code\": data?.PDMobileCode,\n        \"number\": data?.PDMobileNo\n      },\n      prefix: data?.PDPrefix,\n      startInvoiceCount: data?.startInvoiceCount,\n      \"email\": data?.PDEmail,\n      \"gstNumber\": data?.PDGstNumber,\n      \"panNumber\": data?.PDPanNumber,\n      \"designation\": data?.PDDesignation,\n      \"headerImage\": data?.headerfileUplaodLink,\n      \"signatureImage\": data?.footerfileUplaodLink,\n      \"signatureName\": data?.PDSignatureAuthority,\n      prefix: data?.PDPrefix,\n      isGSTEnabled: data?.isGstEnabled === \"true\" ? true : false,\n      upiId: data?.upiId,\n      termsAndCond: editorValue,\n      \"invoiceName\": data?.invoiceName,\n    \"receiptName\": data?.receiptName,\n    \"advanceName\": data?.advanceName\n\n    };\n    dispatch(createofficeAddress(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (BranchId || (userInfoglobal?.userType !== \"company\" && userInfoglobal?.userType !== \"companyDirector\" && userInfoglobal?.userType !== \"admin\")) {\n      dispatch(getBranchDetails({\n        _id: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"admin\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId\n      }))\n    }\n  }, [BranchId])\n  const handleHeaderFileChange = (file) => {\n    if (!file) return;\n    const isPdf = file.type === 'application/pdf';\n    const filePreviewUrl = URL.createObjectURL(file); // Generate preview URL for non-PDF files\n\n    // Show SweetAlert confirmation before uploading\n    Swal.fire({\n      title: 'Preview your file',\n      html: `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n                <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n                ${isPdf\n          ? `<p style=\"font-size: 16px; color: #074173;\">${file.name}</p>`\n          : `<img src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">`\n        }\n                <br>\n            </div>\n        `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm!',\n      cancelButtonText: 'Cancel',\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Proceed with file upload only if the user confirms\n        dispatch(\n          fileUploadFunc({\n            filePath: file,\n            isVideo: false,\n            isMultiple: false,\n          })\n        ).then((data) => {\n          if (!data.error) {\n            setValue('headerfileUplaodLink', data?.payload?.data);\n          }\n        }).then(() => {\n          if (headerRef.current) headerRef.current.value = ''\n        })\n      } else {\n          if (headerRef.current) headerRef.current.value = ''\n      }\n    });\n  };\n\n  const handleFooterFileChange = (file) => {\n    if (!file) return;\n    const isPdf = file.type === 'application/pdf';\n    const filePreviewUrl = URL.createObjectURL(file); // Generate preview URL for non-PDF files\n\n    // Show SweetAlert confirmation before uploading\n    Swal.fire({\n      title: 'Preview your file',\n      html: `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n                <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n                ${isPdf\n          ? `<p style=\"font-size: 16px; color: #074173;\">${file.name}</p>`\n          : `<img src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">`\n        }\n                <br>\n            </div>\n        `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm!',\n      cancelButtonText: 'Cancel',\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Proceed with file upload only if the user confirms\n        dispatch(\n          fileUploadFunc({\n            filePath: file,\n            isVideo: false,\n            isMultiple: false,\n          })\n        ).then((data) => {\n          if (!data.error) {\n            setValue('footerfileUplaodLink', data?.payload?.data);\n          }\n        }).then(() => {\n          if (footerRef.current) footerRef.current.value = ''\n        })\n      } else {\n          if (footerRef.current) footerRef.current.value = ''\n      }\n    });\n  };\n\n  const handleEditorChange = (value) => {\n    setEditorValue(value);\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Branch\"\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Bank<span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n\n                {...register(\"PDBankId\",)}\n                className={`${inputClassName}  ${errors.PDBankId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n              // onFocus={handleFocusCompany}\n              >\n\n                <option value=''>\n                  select bank\n                </option>\n                {\n                  branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                  branchDetailsData.data.bankData.map((type) => (\n                    <option key={type._id} value={type._id}>\n                      {`${type.bankName} (${type.branchName})`}\n\n                    </option>\n                  ))\n                }\n              </select> */}\n              <Controller\n                name=\"PDBankId\"\n                control={control}\n                rules={{ required: \"Bank is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBankId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select BANK\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Bank</Select.Option>\n                    {\n                      bankListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> :\n                        (branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                          branchDetailsData.data.bankData.map((type) => (\n                            <Select.Option key={type._id} value={type._id}>\n                              {/* {`${type.bankName} (${type.branchName})`} */}\n {optionLabelForBankSlect(type)}\n                            </Select.Option>\n                          )))\n                    }\n                  </Select>\n                )}\n              />\n              {errors.PDBankId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBankId.message}\n                </p>\n              )}\n            </div>\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Type<span className=\"text-red-600\">*</span>\n              </label>\n            \n             \n              <Controller\n                name=\"PDType\"\n                control={control}\n                rules={{ required: \"PDType is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select PDType\"\n                  >\n                    <Select.Option value=''>\n                      select Type\n                    </Select.Option>\n                    <Select.Option value='invoice'>\n                      Invoice\n                    </Select.Option>\n                    <Select.Option value='receipt'>\n                      Receipt\n                    </Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.PDType && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDType.message}\n                </p>\n              )}\n            </div> */}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Firm Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDfirmName\", {\n                  required: \"Firm Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDfirmName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Firm Name\"\n              />\n              {errors.PDfirmName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDfirmName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Tag Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDTagName\", {\n                  required: \"Tag Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDTagName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Tag Name\"\n              />\n              {errors.PDTagName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDTagName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                invoice Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"invoiceName\", {\n                  required: \"invoice Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.invoiceName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter invoice Name\"\n              />\n              {errors.invoiceName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.invoiceName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                receipt Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"receiptName\", {\n                  required: \"receipt Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.receiptName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter receipt Name\"\n              />\n              {errors.receiptName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.receiptName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                advance Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"advanceName\", {\n                  required: \"advance Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.advanceName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter advance Name\"\n              />\n              {errors.advanceName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.advanceName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Invoice Prefix<span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDPrefix\", {\n                              required: \"Invoice Prefix is required\",\n            \n                            })}\n                            className={` ${inputClassName} ${errors.PDPrefix ? \"border-[1px] \" : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Invoice Prefix\"\n                          />\n                          {errors.PDPrefix && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDPrefix.message}\n                            </p>\n                          )}\n                        </div>\n            <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Start Invoice Count<span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"number\"\n                            {...register(\"startInvoiceCount\", {\n                              required: \"Start Invoice Count is required\",\n            \n                            })}\n                            className={` ${inputClassName} ${errors.startInvoiceCount ? \"border-[1px] \" : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Start Invoice Count\"\n                          />\n                          {errors.startInvoiceCount && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.startInvoiceCount.message}\n                            </p>\n                          )}\n                        </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                GST Number\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDGstNumber\", {\n              \n                  pattern: {\n                    value: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}[Z]{1}[0-9A-Z]{1}$/,\n                    message: \"Invalid GST Number format (29AAACH7409R1ZX)\",\n                  },\n\n                })}\n                className={` ${inputClassName} ${errors.PDGstNumber ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter GST Number\"\n                maxLength={15}\n              />\n              {errors.PDGstNumber && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDGstNumber.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Pan Number<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDPanNumber\", {\n                  required: \"Pan Number is required\",\n                  pattern: {\n                    value: /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/,\n                    message: \"Invalid PAN card format (ABCDE1234E)\",\n                  }\n                })}\n                className={` ${inputClassName} ${errors.PDPanNumber ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Pan Number\"\n              />\n              {errors.PDPanNumber && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDPanNumber.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Upi Id<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"upiId\", {\n                  required: \"Upi Id is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.upiId ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Upi Id\"\n              />\n              {errors.upiId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.upiId.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Designation<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDDesignation\", {\n                  required: \"Designation is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDDesignation ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Designation\"\n              />\n              {errors.PDDesignation && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDDesignation.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                SignatureAuthority Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDSignatureAuthority\", {\n                  required: \"Signature Authority is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDSignatureAuthority ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                showSearch\n                filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                }\n                placeholder=\"Enter SignatureAuthority\"\n              />\n              {errors.PDSignatureAuthority && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDSignatureAuthority.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Gst Enabled</label>\n              <select\n                {...register(\"isGstEnabled\", {\n                })}\n                className={`${inputClassName} bg-white ${errors.isGstEnabled ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n              >\n                <option value={true}>Yes</option>\n                <option value={false}>No</option>\n              </select>\n              {errors.isGstEnabled && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.isGstEnabled.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            \n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Header Upload \n              </label>\n\n              <div className=\"flex flex-col\">\n\n                <Controller\n                  name=\"headerfileUpload\"\n                  control={control}\n                  accept=\"image/*\"\n                 \n                  render={({ field }) => (\n                    <>\n                      <input\n                        type=\"file\"\n                        ref={headerRef}\n                        id=\"file-upload\"\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          field.onChange(e);\n                          handleHeaderFileChange(e.target.files[0]);\n                        }}\n                      />\n                      <br />\n                      <label\n                        htmlFor=\"file-upload\"\n                        className=\"bg-header text-white  py-1.5 w-36 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                      >\n                        Header Upload\n                      </label>\n                      {errors.headerfileUpload && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.headerfileUpload.message}</p>\n                      )}\n                    </>\n                  )}\n                />\n                {watch('headerfileUplaodLink') &&\n                  // <img\n                  //   src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('headerfileUplaodLink')}`}\n                  //   alt=\"Uploaded\"\n                  //   className=\"w-20 h-20 shadow rounded-sm\"\n                  // />\n                  <Image\n                    width={90}\n                    height={90}\n                    src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('headerfileUplaodLink')}`}\n                    className=\"w-20 h-20 shadow rounded-sm\"\n                  />\n                }\n\n              </div>\n            </div>\n\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Signature Upload \n              </label>\n              <div className=\"flex flex-col\">\n                <Controller\n                  name=\"footerfileUpload\"\n                  control={control}\n                  \n                  render={({ field }) => (\n                    <>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        id=\"footer-file-upload\"\n                        ref={footerRef}\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          field.onChange(e);\n                          handleFooterFileChange(e.target.files[0]);\n                        }}\n                      />\n                      <br />\n                      <label\n                        htmlFor=\"footer-file-upload\"\n                        className=\"bg-header text-white  w-36  py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                      >\n                        Footer Upload\n                      </label>\n                      {errors.footerfileUpload && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.footerfileUpload.message}</p>\n                      )}\n                    </>\n                  )}\n                />\n                {/* {watch('footerfileUplaodLink') && <img\n                src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('footerfileUplaodLink')}`}\n                alt=\"Uploaded\"\n                className=\"w-20 h-20 shadow rounded-sm\"\n              />} */}\n\n                {watch('footerfileUplaodLink') &&\n\n                  <Image\n                    width={90}\n                    height={90}\n                    src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('footerfileUplaodLink')}`}\n                    className=\"w-20 h-20 shadow rounded-sm\"\n                  />\n                }\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-4 col-span-2\">\n            <ReactQuill\n              value={editorValue}\n              onChange={handleEditorChange}\n              placeholder=\"Write the email body here\"\n              modules={{\n                toolbar: [\n                  [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n                  [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                  ['bold', 'italic', 'underline', 'strike'],\n                  [{ 'align': [] }],\n                  ['link', 'image', 'video'],\n                  ['blockquote', 'code-block'],\n                  ['clean']\n                ],\n              }}\n              formats={['header', 'font', 'list', 'bold', 'italic', 'underline', 'link', 'align', 'clean']}\n            />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Email<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"email\"\n                {...register(\"PDEmail\", {\n                  required: \"Email is required\",\n                  pattern: {\n                    value:\n                      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                    message: \"Please enter a valid email address\",\n                  },\n                })}\n                className={` ${inputClassName} ${errors.PDEmail ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Email\"\n              />\n              {errors.PDEmail && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDEmail.message}\n                </p>\n              )}\n            </div>\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  code<span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDMobileCode\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n\n                {errors[`PDMobileCode`] && (\n                  <p className={`${inputerrorClassNameAutoComplete}`}>\n                    {errors[`PDMobileCode`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No<span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`PDMobileNo`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`PDMobileNo`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`PDMobileNo`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`PDMobileNo`].message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Primary Address<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDAddress\", {\n                  required: \"Address  is required\",\n                })}\n                className={`${inputClassName} ${errors.PDAddress\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Address \"\n              />\n              {errors.PDAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDAddress.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 px-3\">\n            <div>\n              <div className={`${inputLabelClassName}`}>\n                Country <span className=\"text-red-600\">*</span>\n              </div>\n              <Controller\n                control={control}\n                name=\"PDCountry\"\n                rules={{ required: \"Country is required\" }}\n                render={({ field }) => (\n                  <AutoComplete\n                    className=\"w-full\"\n                    {...field}\n                    onChange={(value) => {\n                      // Directly handle country change by using setValue from React Hook Form\n                      field.onChange(value); // Update the value in the form control\n                    }}\n                    options={countryListData?.docs?.map((type) => ({\n                      value: type?.name,\n                    }))}\n                  >\n                    <input\n                      placeholder=\"Enter Country\"\n                      onFocus={() => {\n                        dispatch(\n                          countrySearch({\n                            isPagination: false,\n                            text: \"\",\n                            sort: true,\n                            status: true,\n                          })\n                        );\n                      }}\n                      className={`${inputClassName} ${errors.PDCountry\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    />\n                  </AutoComplete>\n                )}\n              />\n              {errors.PDCountry && (\n                <p className={`${inputerrorClassNameAutoComplete}`}>\n                  {errors.PDCountry.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <div className={`${inputLabelClassName}`}>\n                State <span className=\"text-red-600\">*</span>\n              </div>\n              <Controller\n                control={control}\n                name=\"PDState\"\n                rules={{ required: \"State is required\" }}\n                render={({ field }) => (\n                  <AutoComplete\n                    className=\"w-full\"\n                    {...field}\n                    onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                    options={stateListData?.docs?.map((type) => ({\n                      value: type?.name,\n                    }))}\n                  >\n                    <input\n                      placeholder=\"Enter State\"\n                      onFocus={() => {\n                        dispatch(\n                          stateSearch({\n                            isPagination: false,\n                            text: \"\",\n                            countryName: watch('PDCountry'),\n                            sort: true,\n                            status: true,\n                          })\n                        );\n                      }}\n                      className={`${inputClassName} ${errors.PDState\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    />\n                  </AutoComplete>\n                )}\n              />\n              {errors.PDState && (\n                <p className={`${inputerrorClassNameAutoComplete}`}>\n                  {errors.PDState.message}\n                </p>\n              )}\n            </div>\n\n            {/* City Field */}\n            <div>\n              <div className={`${inputLabelClassName}`}>\n                City <span className=\"text-red-600\">*</span>\n              </div>\n              <Controller\n                control={control}\n                name=\"PDCity\"\n                rules={{ required: \"City is required\" }}\n                render={({ field }) => (\n                  <AutoComplete\n                    className=\"w-full\"\n                    {...field}\n                    onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                    options={cityListData?.docs?.map((type) => ({\n                      value: type?.name,\n                    }))}\n                  >\n                    <input\n                      onFocus={() => {\n                        dispatch(\n                          citySearch({\n                            isPagination: false,\n                            text: \"\",\n                            sort: true,\n                            status: true,\n                            stateName: watch('PDState'),\n                          })\n                        );\n                      }}\n                      placeholder=\"Enter City\"\n                      className={`${inputClassName} ${errors.PDCity\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    />\n                  </AutoComplete>\n                )}\n              />\n              {errors.PDCity && (\n                <p className={`${inputerrorClassNameAutoComplete}`}>\n                  {errors.PDCity.message}\n                </p>\n              )}\n            </div>\n\n            {/* Pin Code Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Pin Code <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"PDPinCode\"\n                rules={{ required: \"Pin Code is required\" }}\n                render={({ field }) => (\n                  <input\n                    {...field}\n                    type=\"number\"\n                    placeholder=\"Enter Pin Code\"\n                    maxLength={6}\n                    onInput={(e) => {\n                      if (e.target.value.length > 6) {\n                        e.target.value = e.target.value.slice(0, 6);\n                      }\n                    }}\n                    className={`${inputClassName} ${errors.PDPinCode\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                      }`}\n                  />\n                )}\n              />\n              {errors.PDPinCode && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDPinCode.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex mt-4 justify-end\">\n            <button\n              type=\"submit\"\n              disabled={officeAddressLoading}\n              className={`${officeAddressLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {officeAddressLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateOfficeAddress;\n"],"names":["CreateOfficeAddress","headerRef","useRef","footerRef","loading","officeAddressLoading","useSelector","state","officeAddress","register","handleSubmit","control","watch","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","editorValue","setEditorValue","useState","countryListData","country","stateListData","states","cityListData","city","CompanyId","useWatch","name","defaultValue","BranchId","branchDetailsData","bankListLoading","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","getBranchDetails","branchId","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","PDBranchId","PDBankId","PDAddress","PDCity","PDState","PDCountry","PDPinCode","PDfirmName","PDTagName","PDMobileCode","PDMobileNo","prefix","PDPrefix","startInvoiceCount","PDEmail","PDGstNumber","PDPanNumber","PDDesignation","headerfileUplaodLink","footerfileUplaodLink","PDSignatureAuthority","isGSTEnabled","isGstEnabled","upiId","termsAndCond","invoiceName","receiptName","advanceName","createofficeAddress","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","message","_ref2","placeholder","_ref3","_branchDetailsData$da","_branchDetailsData$da2","bankData","length","optionLabelForBankSlect","inputClassName","pattern","maxLength","accept","_ref4","_Fragment","ref","id","onChange","e","file","isPdf","filePreviewUrl","URL","createObjectURL","Swal","title","html","showCancelButton","confirmButtonText","cancelButtonText","result","isConfirmed","fileUploadFunc","filePath","isVideo","isMultiple","_data$payload","payload","current","handleHeaderFileChange","target","files","htmlFor","headerfileUpload","Image","width","height","src","process","_ref5","_data$payload2","handleFooterFileChange","footerfileUpload","ReactQuill","modules","toolbar","formats","_ref6","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","onInput","slice","_ref7","_countryListData$docs","AutoComplete","options","docs","onFocus","countrySearch","_ref8","_stateListData$docs","stateSearch","countryName","_ref9","_cityListData$docs","citySearch","stateName","_ref0","Loader"],"sourceRoot":""}