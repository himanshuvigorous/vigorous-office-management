{"version":3,"file":"static/js/4375.12356765.chunk.js","mappings":"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","sources":["pages/Project management/ProjectManagement/Createprojectmanagement.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  customDayjs,\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport { useEffect, useState } from \"react\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { Button, message, Select, Upload, Checkbox } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { ServerManagementSearch } from \"../../ServerManagement/serverManagementFeatures/_server-management_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { projectCategorySearch } from \"../ProjectCategory/projectCategoryFeatures/_projectCategory_reducers\";\nimport { UploadOutlined, PlusOutlined, CloseOutlined } from '@ant-design/icons';\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport dayjs from \"dayjs\";\nimport { projectserviceSearch } from \"../ProjectServices/projectserviceFeatures/_projectservice_reducers\";\nimport { createprojectmanagementFunc } from \"./ProjectManagementFeatures/_ProjectManagement_reducers\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\n\n// Enums\nconst PROJECT_TYPE_ARR = [\"service\", \"product\"];\nconst PROJECT_PRIORITY_ARR = [\"Low\", \"Medium\", \"High\"];\nconst PROJECT_BILLING_TYPE_ARR = [\"isBillable\", \"Fixed\"];\nconst PROJECT_BILLING_DURATION_ARR = [\"Weekly\", \"Monthly\", \"Yearly\"];\nconst WEEKDAY_ARR = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\nconst MONTH_ARR = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst SERVICE_TYPE_ARR = [\"service\", \"server\"];\n\nfunction CreateProjectManagement() {\n  const { loading: projectManagementLoader } = useSelector((state) => state.projectManagement);\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm({\n    defaultValues: {\n      billing: {\n        duration: \"Weekly\",\n        schedule: {\n          weekly: { day: \"Monday\" },\n          monthly: { date: 1 },\n          quartAndYearly: { month: \"January\", date: 1 }\n        }\n      },\n      projectType: \"product\",\n      priority: \"Medium\",\n      billingType: \"isBillable\",\n      employeIds: [],\n      items: [], // Changed from services to items to include both services and servers\n      tags: [],\n      filePath: [],\n      subTotal: 0,\n      finalAmount: 0\n    }\n  });\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n\n  // Selectors\n  const { loading: employeeLoading, employeList } = useSelector((state) => state.employe);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { clientList, loading: clientLoading } = useSelector((state) => state.client);\n  const { ServerManagementList, loading: serverLoading } = useSelector(state => state.serverManagement);\n  const { projectCategoryList, loading: projectCategoryLoading } = useSelector((state) => state.projectCategory);\n  const { projectserviceList, loading: projectservicesLoading } = useSelector((state) => state.projectservice);\n\n  // Local state\n  const [documents, setDocuments] = useState([]);\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"items\"\n  });\n  // Watched values\n  const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n  const branchId = useWatch({ control, name: \"PDBranchId\", defaultValue: '' });\n  const items = useWatch({ control, name: \"items\", defaultValue: [] });\n\n  // Calculate totals whenever relevant fields change\n  useEffect(() => {\n    const subTotal = (items || []).reduce((sum, item) => sum + (Number(item?.amount) || 0), 0);\n    const finalAmount = subTotal;\n    setValue(\"subTotal\", subTotal);\n    setValue(\"finalAmount\", finalAmount);\n  }, [items, setValue]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id :\n        userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\" ||\n        userInfoglobal?.userType === \"company\") ? data?.PDBranchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      managerId: \"\",\n      teamLeadId: data?.employee || \"\",\n      clientId: data?.client || \"\",\n      categoryId: data?.projectCategory || \"\",\n      employeIds: data?.employeIds || [],\n      customerName: data.customerName,\n      title: data.title,\n      startUpFee: +data?.startUpFee,\n      projectType: data.projectType,\n      priority: data.priority,\n      billingType: data.billingType,\n      billing: data.billing,\n      services: data.items?.map((item) => ({\n        type: item.type,\n        amount: item.amount ? +item.amount : 0,\n        name:\n          item.type === \"service\"\n            ? projectserviceList.find(service => service._id === item.expenseId)?.name\n            : item.type === \"server\"\n              ? ServerManagementList.find(server => server._id === item.expenseId)?.serverName\n              : item?.name,\n\n        expenseId: item.type === \"service\" ? (item.expenseId || \"\") : null,\n        serverId: item.type === \"server\" ? (item.expenseId || \"\") : null,\n        GSTRate: + item?.GSTRate,\n        GSTAmount: + item?.GSTAmount,\n        amountAfterGST: +item?.amountAfterGST,\n        remark: item.remark || \"\"\n      })) || [],\n      subTotal: data.items?.length>0 ? + data.subTotal : 0,\n      GSTTotal: data.items?.length>0 ? +data?.GSTTotal : 0,\n      finalWithGSTAmount: data.items?.length>0 ? + data?.finalWithGSTAmount: 0,\n      startDate: customDayjs(data.startDate),\n      deadlineDate: customDayjs(data.deadlineDate),\n      description: data.description,\n      filePath: documents\n    };\n\n\n    dispatch(createprojectmanagementFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  // Data fetching functions (same as before)\n  const reportingOption = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isManager: '',\n      isPagination: false,\n      departmentId: '',\n      designationId: \"\",\n      companyId: userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      isBranch: true,\n      isDirector: true\n    };\n    dispatch(employeSearch(reqPayload));\n  };\n\n  const fetchClientdata = () => {\n    dispatch(clientSearch({\n      companyId: userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      groupId: \"\",\n      directorId: \"\",\n      organizationId: \"\",\n      industryId: \"\",\n      text: \"\",\n      sort: true,\n      status: true,\n      isPagination: false,\n    }));\n  };\n\n  const fetchServerData = () => {\n    dispatch(ServerManagementSearch({\n      companyId: userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      text: '',\n      sort: true,\n      status: '',\n      isPagination: false,\n    }));\n  };\n\n  const fetchProjectCategoryData = () => {\n    dispatch(projectCategorySearch({\n      companyId: userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      text: '',\n      sort: true,\n      status: '',\n      isPagination: false,\n    }));\n  };\n\n  const fetchProjectServices = () => {\n    dispatch(projectserviceSearch({\n      companyId: userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      text: '',\n      sort: true,\n      status: '',\n      isPagination: false,\n    }));\n  };\n\n  useEffect(() => {\n    if (CompanyId || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") {\n      dispatch(branchSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: userInfoglobal?.userType === \"admin\" ? CompanyId :\n          userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n            userInfoglobal?.companyId,\n      }));\n    }\n  }, [CompanyId]);\n\n  useEffect(() => {\n    reportingOption();\n    fetchClientdata();\n    fetchServerData();\n    fetchProjectCategoryData();\n    fetchProjectServices();\n  }, [branchId]);\n\n\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setDocuments((prev) => [...prev, res.payload.data]);\n      }\n    });\n  };\n\n  const handleRemoveFile = (index) => {\n    setDocuments((prev) => {\n      const updatedDocuments = prev.filter((_, i) => i !== index);\n      return updatedDocuments;\n    });\n  };\n  const calculateGST = (index, amount, gstRate) => {\n    const gstAmount = (amount * gstRate) / 100;\n    const amountAfterGST = amount + gstAmount;\n\n    setValue(`items.${index}.GSTAmount`, gstAmount);\n    setValue(`items.${index}.amountAfterGST`, amountAfterGST);\n\n    // Update financial summary\n    updateFinancialSummary();\n  };\n\n  const calculateSubtotal = () => {\n    const items = watch('items') || [];\n    return items.reduce((sum, item) => sum + (item.amount || 0), 0);\n  };\n\n  const calculateTotalGST = () => {\n    const items = watch('items') || [];\n    return items.reduce((sum, item) => sum + (item.GSTAmount || 0), 0);\n  };\n\n  const calculateTotalWithGST = () => {\n    const items = watch('items') || [];\n    return items.reduce((sum, item) => sum + (item.amountAfterGST || 0), 0);\n  };\n\n  const updateFinancialSummary = () => {\n    const subtotal = calculateSubtotal();\n    const totalGST = calculateTotalGST();\n    const totalWithGST = calculateTotalWithGST();\n\n    setValue('subTotal', subtotal);\n    setValue('GSTTotal', totalGST);\n    setValue('finalWithGSTAmount', totalWithGST);\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">Create New Project</h1>\n\n          {/* Basic Information Section */}\n          <div className=\" p-2 \">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Basic Information</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Branch Selection (for admin/company/director) */}\n              {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" ||\n                userInfoglobal?.userType === \"companyDirector\") && (\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Branch <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"PDBranchId\"\n                      control={control}\n                      rules={{ required: \"Branch is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          placeholder=\"Select Branch\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Branch</Select.Option>\n                          {branchListloading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                            (branchList?.map((type) => (\n                              <Select.Option key={type?._id} value={type?._id}>\n                                {type?.fullName}\n                              </Select.Option>\n                            )))}\n                        </Select>\n                      )}\n                    />\n                    {errors.PDBranchId && (\n                      <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>\n                    )}\n                  </div>\n                )}\n              {/* Project Title */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Title <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"title\", { required: \"Title is required\" })}\n                  className={`${inputClassName} ${errors.title ? \"border-[1px] \" : \"border-gray-300\"}`}\n                  placeholder=\"Project Title\"\n                />\n                {errors.title && (\n                  <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n                )}\n              </div>\n\n              {/* Customer Name */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Customer Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"customerName\", { required: \"Customer name is required\" })}\n                  className={`${inputClassName} ${errors.customerName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                  placeholder=\"Customer Name\"\n                />\n                {errors.customerName && (\n                  <p className=\"text-red-500 text-sm\">{errors.customerName.message}</p>\n                )}\n              </div>\n\n\n\n\n              {/* Client */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Client <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"client\"\n                  control={control}\n                  rules={{ required: \"Client is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      className={`${inputAntdSelectClassName} ${errors.client ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    >\n                      <Select.Option value=\"\">Select client</Select.Option>\n                      {clientLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        (sortByPropertyAlphabetically(clientList, 'fullName')?.map((element) => (\n                          <Select.Option value={element?._id}>\n                            {element?.fullName}\n                          </Select.Option>\n                        )))}\n                    </Select>\n                  )}\n                />\n                {errors.client && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.client.message}</p>\n                )}\n              </div>\n\n              {/* Project Category */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Project Category <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"projectCategory\"\n                  control={control}\n                  rules={{ required: \"Project Category is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      <Select.Option value=\"\">Select Project Category</Select.Option>\n                      {projectCategoryLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        (sortByPropertyAlphabetically(projectCategoryList, 'name')?.map((element) => (\n                          <Select.Option value={element?._id}>\n                            {element?.name}\n                          </Select.Option>\n                        )))}\n                    </Select>\n                  )}\n                />\n                {errors.projectCategory && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.projectCategory.message}</p>\n                )}\n              </div>\n\n              {/* Project Type */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Project Type <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"projectType\"\n                  rules={{ required: \"Project type is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      {PROJECT_TYPE_ARR.map(type => (\n                        <Select.Option key={type} value={type}>\n                          {type.charAt(0).toUpperCase() + type.slice(1)}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.projectType && (\n                  <p className=\"text-red-500 text-sm\">{errors.projectType.message}</p>\n                )}\n              </div>\n              {/* Project Handling Employee */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Project Handling Employee <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"employee\"\n                  rules={{ required: \"employee is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      className={`${inputAntdSelectClassName} mt-2`}\n                    >\n                      <Select.Option value=\"\" selected>Select Project Handling Employee</Select.Option>\n                      {employeeLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        sortByPropertyAlphabetically(employeList, 'fullName')?.map((element, index) => (\n                          <Select.Option key={index} value={element?._id}>\n                            {element?.fullName}\n                          </Select.Option>\n                        ))\n                      }\n                    </Select>\n                  )}\n                />\n                {errors.employee && (\n                  <p className=\"text-red-500 text-sm\">{errors.employee.message}</p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Start Up Fee</label>\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"number\"\n                    step=\"0.01\"\n\n                    {...register(`startUpFee`, {})}\n                    className={`${inputClassName}`}\n                    placeholder=\"Start Up Fee\"\n                  />\n                  {errors.startUpFee && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.startUpFee?.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              {/* Priority */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Priority <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"priority\"\n                  rules={{ required: \"Priority is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      {PROJECT_PRIORITY_ARR.map(priority => (\n                        <Select.Option key={priority} value={priority}>\n                          {priority}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.priority && (\n                  <p className=\"text-red-500 text-sm\">{errors.priority.message}</p>\n                )}\n              </div>\n\n\n\n              {/* Dates */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Start Date <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"startDate\"\n                  control={control}\n                  rules={{ required: \"Start date is required\" }}\n                  render={({ field }) => (\n                    <CustomDatePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n                {errors.startDate && (\n                  <p className=\"text-red-500 text-sm\">{errors.startDate.message}</p>\n                )}\n              </div>\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Deadline Date</label>\n                <Controller\n                  name=\"deadlineDate\"\n                  control={control}\n                  render={({ field }) => (\n                    <CustomDatePicker\n                      field={field}\n                      disabledDate={(current) => {\n                        const startDate = watch(\"startDate\");\n                        return startDate && current && current.isBefore(dayjs(startDate), \"day\");\n                      }}\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Billing Information Section */}\n          <div className=\" p-2 \">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Billing Information</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Billing Type */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Billing Type <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"billingType\"\n                  rules={{ required: \"Billing type is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      {PROJECT_BILLING_TYPE_ARR.map(type => (\n                        <Select.Option key={type} value={type}>\n                          {type === \"isBillable\" ? \"Billable\" : \"Fixed\"}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.billingType && (\n                  <p className=\"text-red-500 text-sm\">{errors.billingType.message}</p>\n                )}\n              </div>\n\n              {/* Billing Section */}\n              {watch(\"billingType\") === \"isBillable\" && (\n                <>\n                  {/* Billing Duration */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Billing Duration</label>\n                    <Controller\n                      control={control}\n                      name=\"billing.duration\"\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName}`}\n                        >\n                          {PROJECT_BILLING_DURATION_ARR.map(duration => (\n                            <Select.Option key={duration} value={duration}>\n                              {duration}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                  </div>\n\n                  {/* Billing Schedule */}\n                  {watch(\"billing.duration\") === \"Weekly\" && (\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>Billing Day</label>\n                      <Controller\n                        control={control}\n                        name=\"billing.schedule.weekly.day\"\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName}`}\n                          >\n                            {WEEKDAY_ARR.map(day => (\n                              <Select.Option key={day} value={day}>{day}</Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                    </div>\n                  )}\n\n                  {watch(\"billing.duration\") === \"Monthly\" && (\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>Billing Date</label>\n                      <Controller\n                        control={control}\n                        name=\"billing.schedule.monthly.date\"\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName}`}\n                          >\n                            {Array.from({ length: 31 }, (_, i) => i + 1).map(date => (\n                              <Select.Option key={date} value={date}>{date}</Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                    </div>\n                  )}\n\n                  {(watch(\"billing.duration\") === \"Quarterly\" || watch(\"billing.duration\") === \"Yearly\") && (\n                    <>\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>Billing Month</label>\n                        <Controller\n                          control={control}\n                          name=\"billing.schedule.quartAndYearly.month\"\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              className={`${inputAntdSelectClassName}`}\n                            >\n                              {MONTH_ARR.map(month => (\n                                <Select.Option key={month} value={month}>{month}</Select.Option>\n                              ))}\n                            </Select>\n                          )}\n                        />\n                      </div>\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>Billing Date</label>\n                        <Controller\n                          control={control}\n                          name=\"billing.schedule.quartAndYearly.date\"\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              className={`${inputAntdSelectClassName}`}\n                            >\n                              {Array.from({ length: 31 }, (_, i) => i + 1).map(date => (\n                                <Select.Option key={date} value={date}>{date}</Select.Option>\n                              ))}\n                            </Select>\n                          )}\n                        />\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n\n          {/* Services/Servers Section */}\n          <div className=\"p-2\">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">\n              Services & Servers\n            </h2>\n\n            <div className=\"space-y-4\">\n              {fields.map((field, index) => (\n                <div key={field.id} className=\"grid grid-cols-1 md:grid-cols-4 gap-2 border rounded p-2\">\n                  {/* Type - col-span-2 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Type</label>\n                    <Controller\n                      control={control}\n                      name={`items.${index}.type`}\n                      rules={{ required: 'Type is required' }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName}`}\n                          placeholder=\"Select Type\"\n                          onChange={(value) => {\n                            field.onChange(value);\n                            // Reset expenseId when type changes\n                            setValue(`items.${index}.expenseId`, \"\");\n                            setValue(`items.${index}.name`, \"\");\n                          }}\n                        >\n                          <Select.Option value=\"\">Select Type</Select.Option>\n                          {['service', 'server', 'other'].map((type) => (\n                            <Select.Option key={type} value={type}>\n                              {type.charAt(0).toUpperCase() + type.slice(1)}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.items?.[index]?.type && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.type?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Service/Server/Other Name - col-span-3 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      {watch(`items.${index}.type`) === 'service' ? 'Service' :\n                        watch(`items.${index}.type`) === 'server' ? 'Server' : 'Name'}\n                    </label>\n                    {watch(`items.${index}.type`) === 'other' ? (\n                      <Controller\n                        name={`items.${index}.name`}\n                        control={control}\n                        rules={{ required: 'Name is required' }}\n                        render={({ field }) => (\n                          <input\n                            {...field}\n                            type=\"text\"\n                            className={`${inputClassName}`}\n                            placeholder=\"Enter name\"\n                          />\n                        )}\n                      />\n                    ) : (\n                      <Controller\n                        control={control}\n                        name={`items.${index}.expenseId`}\n                        rules={{\n                          required: `${watch(`items.${index}.type`) === 'service' ? 'Service' : 'Server'} is required`,\n                        }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            loading={watch(`items.${index}.type`) === 'service' ? projectservicesLoading : serverLoading}\n                            className={`${inputAntdSelectClassName}`}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                            onChange={(value, option) => {\n                              field.onChange(value);\n                              // Set the name when item is selected\n                              const name = option?.children || \"\";\n                              setValue(`items.${index}.name`, name);\n                            }}\n                          >\n                            <Select.Option value=\"\">\n                              Select {watch(`items.${index}.type`) === 'service' ? 'Service' : 'Server'}\n                            </Select.Option>\n                            {watch(`items.${index}.type`) === 'service' ? (\n                              projectservicesLoading ? (\n                                <Select.Option disabled>\n                                  <ListLoader />\n                                </Select.Option>\n                              ) : (\n                                sortByPropertyAlphabetically(projectserviceList, 'name')?.map((type) => (\n                                  <Select.Option key={type?._id} value={type?._id}>\n                                    {type?.name}\n                                  </Select.Option>\n                                ))\n                              )\n                            ) : serverLoading ? (\n                              <Select.Option disabled>\n                                <ListLoader />\n                              </Select.Option>\n                            ) : (\n                              sortByPropertyAlphabetically(ServerManagementList, 'serverName')?.map(\n                                (server) => (\n                                  <Select.Option key={server?._id} value={server?._id}>\n                                    {server?.serverName}\n                                  </Select.Option>\n                                )\n                              )\n                            )}\n                          </Select>\n                        )}\n                      />\n                    )}\n                    {errors.items?.[index]?.expenseId && watch(`items.${index}.type`) !== 'other' && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.expenseId?.message}\n                      </p>\n                    )}\n                    {errors.items?.[index]?.name && watch(`items.${index}.type`) === 'other' && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.name?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Amount - col-span-2 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Amount</label>\n                    <Controller\n                      name={`items.${index}.amount`}\n                      control={control}\n                      rules={{ required: 'Amount is required', min: 0 }}\n                      render={({ field }) => (\n                        <input\n                          {...field}\n                          type=\"number\"\n                          step=\"0.01\"\n                          min=\"0\"\n                          className={`${inputClassName}`}\n                          placeholder=\"Amount\"\n                          onChange={(e) => {\n                            const value = parseFloat(e.target.value) || 0;\n                            field.onChange(value);\n                            // Recalculate GST when amount changes\n                            const gstRate = watch(`items.${index}.GSTRate`) || 0;\n                            calculateGST(index, value, gstRate);\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.items?.[index]?.amount && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.amount?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* GST Rate - col-span-1 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>GST %</label>\n                    <Controller\n                      name={`items.${index}.GSTRate`}\n                      control={control}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName}`}\n                          placeholder=\"GST %\"\n                          onChange={(value) => {\n                            field.onChange(value);\n                            // Recalculate GST when rate changes\n                            const amount = watch(`items.${index}.amount`) || 0;\n                            calculateGST(index, amount, value);\n                          }}\n                        >\n                          <Select.Option value={0}>0%</Select.Option>\n                          <Select.Option value={5}>5%</Select.Option>\n                          <Select.Option value={12}>12%</Select.Option>\n                          <Select.Option value={18}>18%</Select.Option>\n                          <Select.Option value={28}>28%</Select.Option>\n                        </Select>\n                      )}\n                    />\n                  </div>\n\n                  {/* GST Amount (display only) - col-span-1 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>GST Amt</label>\n                    <div className={`${inputClassName} bg-gray-100 flex items-center justify-center`}>\n                      ₹{(watch(`items.${index}.GSTAmount`) || 0).toFixed(2)}\n                    </div>\n                  </div>\n\n                  {/* Total with GST (display only) - col-span-1 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Total</label>\n                    <div className={`${inputClassName} bg-gray-100 flex items-center justify-center`}>\n                      ₹{(watch(`items.${index}.amountAfterGST`) || 0).toFixed(2)}\n                    </div>\n                  </div>\n\n                  {/* Remark and Remove - col-span-1 on md, full on mobile */}\n                  <div className=\"flex items-end md:col-span-2 w-full\">\n                    <div className=\"w-full\" >\n                      <label className={`${inputLabelClassName}`}>Remark</label>\n                      <Controller\n                        name={`items.${index}.remark`}\n                        control={control}\n                        render={({ field }) => (\n                          <input\n                            {...field}\n                            type=\"text\"\n                            className={`${inputClassName} flex-grow`}\n                            placeholder=\"Remark\"\n                          />\n                        )}\n                      />\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() => remove(index)}\n                      className=\"ml-2 text-red-500 h-10 px-2 flex items-center justify-center bg-red-50 rounded\"\n                    >\n                      <CloseOutlined />\n                    </button>\n                  </div>\n                </div>\n              ))}\n\n              {/* Add Button */}\n              <button\n                type=\"button\"\n                onClick={() => append({\n                  type: \"\",\n                  expenseId: \"\",\n                  name: \"\",\n                  amount: 0,\n                  GSTRate: 0,\n                  GSTAmount: 0,\n                  amountAfterGST: 0,\n                  remark: \"\"\n                })}\n                className=\"mt-2 text-blue-500 flex items-center\"\n              >\n                <PlusOutlined className=\"mr-1\" /> Add Item\n              </button>\n            </div>\n          </div>\n\n          {/* Financial Summary */}\n          <div className=\"p-2\">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Financial Summary</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"bg-blue-50 p-3 rounded\">\n                <p className=\"text-gray-600\">Subtotal:</p>\n                <p className=\"text-xl font-bold text-blue-600\">₹{calculateSubtotal().toFixed(2)}</p>\n              </div>\n              <div className=\"bg-green-50 p-3 rounded\">\n                <p className=\"text-gray-600\">Total GST:</p>\n                <p className=\"text-xl font-bold text-green-600\">₹{calculateTotalGST().toFixed(2)}</p>\n              </div>\n              <div className=\"bg-purple-50 p-3 rounded\">\n                <p className=\"text-gray-600\">Total with GST:</p>\n                <p className=\"text-xl font-bold text-purple-600\">₹{calculateTotalWithGST().toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Additional Information Section */}\n          <div className=\" p-2 \">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Additional Information</h2>\n\n            {/* Description */}\n            <div className=\"mb-4\">\n              <label className={`${inputLabelClassName}`}>Description</label>\n              <textarea\n                {...register(\"description\")}\n                rows={4}\n                className={`${inputClassName}`}\n                placeholder=\"Project description\"\n              />\n            </div>\n\n            {/* Files */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Add Documents\n              </label>\n              <div className=\"space-y-4\">\n                <input\n                  type=\"file\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                />\n                <label\n                  htmlFor=\"file-upload\"\n                  className=\"inline-flex justify-start items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white cursor-pointer\"\n                >\n                  <FaRegFile className=\"mr-2\" />\n                  Add Documents\n                </label>\n\n                <div className=\"space-y-2\">\n                  {documents.map((file, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\"\n                    >\n                      <a\n                        href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                        className=\"flex items-center space-x-2\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <FaRegFile className=\"text-gray-500\" />\n                        <span className=\"text-sm text-gray-600\">\n                          {file}\n                        </span>\n                      </a>\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveFile(index)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <FaTimes />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={projectManagementLoader}\n              className={`${projectManagementLoader ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {projectManagementLoader ? <Loader /> : 'Create Project'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default CreateProjectManagement;"],"names":["PROJECT_TYPE_ARR","PROJECT_PRIORITY_ARR","PROJECT_BILLING_TYPE_ARR","PROJECT_BILLING_DURATION_ARR","WEEKDAY_ARR","MONTH_ARR","_errors$startUpFee","loading","projectManagementLoader","useSelector","state","projectManagement","register","handleSubmit","control","watch","formState","errors","setValue","getValues","useForm","defaultValues","billing","duration","schedule","weekly","day","monthly","date","quartAndYearly","month","projectType","priority","billingType","employeIds","items","tags","filePath","subTotal","finalAmount","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","employeeLoading","employeList","employe","branchList","branchListloading","branch","clientList","clientLoading","client","ServerManagementList","serverLoading","serverManagement","projectCategoryList","projectCategoryLoading","projectCategory","projectserviceList","projectservicesLoading","projectservice","documents","setDocuments","useState","fields","append","remove","useFieldArray","name","CompanyId","useWatch","defaultValue","branchId","useEffect","reduce","sum","item","Number","amount","userType","branchSearch","text","sort","status","isPagination","companyId","_id","reportingOption","reqPayload","isTL","isHR","isManager","departmentId","designationId","isBranch","isDirector","employeSearch","clientSearch","groupId","directorId","organizationId","industryId","ServerManagementSearch","projectCategorySearch","projectserviceSearch","calculateGST","index","gstRate","gstAmount","amountAfterGST","updateFinancialSummary","calculateSubtotal","calculateTotalGST","GSTAmount","calculateTotalWithGST","subtotal","totalGST","totalWithGST","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$items","_data$items2","_data$items3","_data$items4","finalPayload","PDCompanyId","PDBranchId","managerId","teamLeadId","employee","clientId","categoryId","customerName","title","startUpFee","services","map","_projectserviceList$f","_ServerManagementList","type","find","service","expenseId","server","serverName","serverId","GSTRate","remark","length","GSTTotal","finalWithGSTAmount","startDate","customDayjs","deadlineDate","description","createprojectmanagementFunc","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","placeholder","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","fullName","message","inputClassName","_ref2","_sortByPropertyAlphab","sortByPropertyAlphabetically","element","_ref3","_sortByPropertyAlphab2","_ref4","charAt","toUpperCase","slice","_ref5","_sortByPropertyAlphab3","selected","step","_ref6","_ref7","CustomDatePicker","_ref8","disabledDate","current","isBefore","dayjs","_ref9","_Fragment","_ref0","_ref1","_ref10","Array","from","_","i","_ref11","_ref12","_errors$items","_errors$items$index","_errors$items2","_errors$items2$index","_errors$items2$index$","_errors$items3","_errors$items3$index","_errors$items4","_errors$items4$index","_errors$items4$index$","_errors$items5","_errors$items5$index","_errors$items6","_errors$items6$index","_errors$items6$index$","_errors$items7","_errors$items7$index","_errors$items8","_errors$items8$index","_errors$items8$index$","_ref13","onChange","_ref14","_ref15","_sortByPropertyAlphab4","_sortByPropertyAlphab5","min","_ref16","e","parseFloat","target","_ref17","toFixed","_ref18","onClick","CloseOutlined","id","PlusOutlined","rows","reqData","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","payload","prev","htmlFor","FaRegFile","file","href","process","rel","filter","handleRemoveFile","FaTimes","Loader"],"sourceRoot":""}