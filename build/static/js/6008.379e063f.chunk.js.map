{"version":3,"file":"static/js/6008.379e063f.chunk.js","mappings":"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","sources":["pages/global/other/Plan/BillingCycleTable.js","pages/global/other/Plan/CreatePlan.js"],"sourcesContent":["import React from 'react';\n\n// const headerStyle = {\n//   backgroundColor: '#fffbe6',\n//   color: '#614700',\n//   fontWeight: 'bold',\n//   border: '1px solid #d9d9d9',\n//   padding: '8px',\n// };\n\n// const cellStyle = {\n//   backgroundColor: '#fffae6',\n//   color: '#7c5700',\n//   border: '1px solid #d9d9d9',\n//   padding: '8px',\n// };\n\nconst BillingCycleTable = () => {\n  const columns = [\n    'Variant Type',\n    'Interval Unit',\n    'Billing Cycle',\n    'Total Duration',\n    'Charge Frequency',\n    'Example Plan',\n  ];\n\n  const data = [\n    {\n      // variantType: 'Weekly',\n      intervalUnit: 'weekly',\n      billingCycle: '4 cycles',\n      totalDuration: '28 days (7×4)',\n      chargeFrequency: 'Every 7 days',\n      example: '₹500/week for 4 weeks',\n    },\n    {\n      // variantType: 'Monthly',\n      intervalUnit: 'monthly',\n      billingCycle: '6 cycles',\n      totalDuration: '6 months',\n      chargeFrequency: 'Every month',\n      example: '₹700/month for 6 months',\n    },\n    {\n      // variantType: 'Yearly',\n      intervalUnit: 'yearly',\n      billingCycle: '1 cycle',\n      totalDuration: '1 year',\n      chargeFrequency: 'Once per year',\n      example: '₹5000/year for 1 year',\n    },\n    \n  ];\n\n  return (\n    <div className=\"bg-[#ffffff] text-[13px] text-[#676a6c] w-full overflow-x-auto mt-1\">\n      <table className=\"w-full max-w-full rounded-xl overflow-hidden \">\n        <thead >\n          <tr className=\"border-b-[1px] border-[#DDDDDD] capitalize text-[12px] bg-header text-white font-[500]  h-[40px]\" >\n            {columns.map((col) => (\n              <th className=\"border-none p-2 whitespace-nowrap w-[10%]\" key={col} >{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((row, idx) => (\n            <tr  key={idx}>\n              <td className=\"whitespace-nowrap border-none p-2 \" >{idx +1}</td>\n              <td className=\"whitespace-nowrap border-none p-2 \" >{row.intervalUnit}</td>\n              <td className=\"whitespace-nowrap border-none p-2 \" >{row.billingCycle}</td>\n              <td className=\"whitespace-nowrap border-none p-2 \" >{row.totalDuration}</td>\n              <td className=\"whitespace-nowrap border-none p-2 \" >{row.chargeFrequency}</td>\n              <td className=\"whitespace-nowrap border-none p-2 \" >{row.example}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default BillingCycleTable;\n","import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { inputClassName, inputDisabledClassName, inputLabelClassName ,inputAntdSelectClassName } from \"../../../../constents/global\";\nimport { createPlanFunc } from \"./PlanFeatures/_plan_reducers\";\nimport { useEffect } from \"react\";\nimport CustomDatePicker from \"../../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport { ColorPicker, Select ,Popover } from \"antd\";\nimport { MdInfoOutline } from \"react-icons/md\";\nimport BillingCycleTable from \"./BillingCycleTable\";\nimport Swal from \"sweetalert2\";\n\n\n\n     \n\n    \nfunction CreatePlan() {\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n  \n  const rgbaToHex = (r, g, b, a) => {\n    const toHex = (n) => {\n      const hex = n.toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    };\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n  };\n\n  function calculatePlanDays(interval, intervalCount, billingCycle) {\n    const averageDays = {\n      daily: 1,\n      weekly: 7,\n      monthly: 30,\n      yearly: 365\n    };\n  \n    const daysPerInterval = averageDays[interval] || 30;\n    return intervalCount * billingCycle * daysPerInterval;\n  }\n  \n  const handleColorChange = (color) => {\n\n    const { r, g, b, a } = color.metaColor;\n\n    const hexColor = rgbaToHex(r, g, b, a);\n\n    setValue('colorCode', hexColor);\n  };\n\n  const handleTextInputChange = (e) => {\n\n  };\n  const colorCodeWatch = useWatch({\n    control,\n    name: \"colorCode\",\n    defaultValue: \"\",\n  });\n  const baseAmount = useWatch({\n    control,\n    name: \"price\",\n    defaultValue: \"\",\n  });\n  const discountPercentage = useWatch({\n    control,\n    name: \"cutPrice\",\n    defaultValue: \"\",\n  });       \n  const billingCycle = useWatch({\n    control,\n    name: \"billingCycle\",\n    defaultValue: \"\",\n  });\n  const intervalCount = 1\n  const intervalCycle = useWatch({\n    control,\n    name: \"intervalCycle\",\n    defaultValue: \"\",\n  });\n  \n\n  const onSubmit = (data) => {\n    const { billingCycle,  intervalCycle, price } = data;\n\n  const message = getConfirmationMessage({\n    billingCycle,\n    intervalCount,\n    intervalCycle,\n    amount: price,\n    days:intervalCycle && intervalCount && billingCycle\n    ? +calculatePlanDays(intervalCycle, intervalCount, billingCycle)\n    : 0,\n  });\n\n  Swal.fire({\n    title: 'Please Confirm',\n    text: message,\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonText: 'Confirm',\n    cancelButtonText: 'Cancel',\n    customClass: {\n      cancelButton: 'bg-rose-500',\n      confirmButton:\"bg-header\"\n    }\n  }).then((result) => {\n    if (result.isConfirmed) {\n      const finalPayload = {\n        title: data.title,\n        description: data.description,\n        price: data.price,\n        cutPrice: data.cutPrice,\n        colorCode: data.colorCode,\n        days:\n          intervalCycle && intervalCount && billingCycle\n            ? +calculatePlanDays(intervalCycle, intervalCount, billingCycle)\n            : '',\n        discountExpireIn: data.expireIn,\n        features: data?.features,\n        interval: data?.intervalCycle,\n        intervalCount: intervalCount,\n        billingCycle: data?.billingCycle,\n      };\n\n      dispatch(createPlanFunc(finalPayload)).then((res) => {\n        if (!res.error) {\n          navigate('/admin/plan');\n        }\n      });\n    }\n  });\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n        <BillingCycleTable />\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n                </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`${inputClassName} ${errors.title ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Description <span className=\"text-red-600\">*</span>\n                </label>\n              <input\n                type=\"text\"\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                className={`${inputClassName} ${errors.description ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Description\"\n              />\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Price (₹) <span className=\"text-red-600\">*</span>\n                </label>\n              <input\n                type=\"number\"\n                {...register(\"price\", {\n                  required: \"Price is required\",\n                })}\n                className={`${inputClassName} ${errors.price ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Price\"\n              />\n              {errors.price && (\n                <p className=\"text-red-500 text-sm\">{errors.price.message}</p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Color Code <span className=\"text-red-600\">*</span>\n              </label>\n              <div className=\"relative flex items-center gap-2\">\n                <input\n                  type=\"text\"\n                  value={colorCodeWatch}\n                  {...register(\"colorCode\", {\n                    required: \"Color Code is required\",\n                    pattern: {\n                      value: /^#[0-9A-Fa-f]{6}$/,\n                      message: \"Enter a valid Hex color code (e.g., #FF5733)\",\n                    },\n                  })}\n                  onChange={handleTextInputChange}\n                  className={`${errors.colorCode ? \"border-[1px] \" : \"border-gray-300\"} w-full py-2 pl-3 pr-16 rounded`}\n                  placeholder=\"#FF5733\"\n                  maxLength={7}\n                />\n                <ColorPicker\n                  value={colorCodeWatch}\n                  onChange={handleColorChange}\n                  className=\"absolute right-1 top-1/2 transform -translate-y-1/2 md:w-75 w-1/2 h-10 cursor-pointer\"\n                />\n              </div>\n              {errors.colorCode && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.colorCode.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Interval <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"intervalCycle\"\n                      control={control} \n                      rules={{\n                        required: \"Interval is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.intervalCycle ? \"border-[1px] \" : \"border-gray-300\"}`}\n   \n                          placeholder=\"Select Interval\"\n                          showSearch\n                        >\n                          <Select.Option value=\"\">Select Interval</Select.Option>\n                          <Select.Option value=\"weekly\">Weekly</Select.Option>\n                          <Select.Option value=\"monthly\">Monthly</Select.Option>\n                          <Select.Option value=\"yearly\">Yearly</Select.Option>\n                        </Select>\n                      )}\n                    />\n\n                    {errors.intervalCycle && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.intervalCycle.message}\n                      </p>\n                    )}\n                  </div>\n                  {/* <div>\n              <label className={`${inputLabelClassName} flex gap-2 items-center `}>\n                Interval Count <span className=\"text-red-600\">*</span>\n              </label>\n              <input \n                type=\"number\"\n                {...register(\"intervalCount\", {\n                  required: \"Interval Count is required\",\n                })}\n                className={`${inputClassName} ${errors.intervalCount ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Interval Count\"\n              />\n              {errors.intervalCount && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.intervalCount.message}\n                </p>\n              )}\n            </div> */}\n            <div>\n              <label className={`${inputLabelClassName} flex gap-2 items-center `}>\n              Billing Cycle<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                {...register(\"billingCycle\", {\n                  required: \"Billing Cycle is required\",\n                })}\n                className={`${inputClassName} ${errors.billingCycle ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Billing Cycle\"\n              />\n              {errors.billingCycle && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.billingCycle.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName} flex gap-2 items-center `}>\n                Duration (Days)   <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                disabled\n                value={(intervalCycle && intervalCount &&  billingCycle) ? calculatePlanDays(intervalCycle , intervalCount , billingCycle) : \"\"}\n                className={`${inputDisabledClassName} ${errors.duration ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Duration\"\n              />\n              {errors.duration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.duration.message}\n                </p>\n              )}\n            </div>\n         \n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Features <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"features\"\n                control={control}\n                defaultValue={[]}\n                rules={{\n                  required: \"At least one feature is required\",\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    mode=\"tags\"\n                    placeholder=\"Please write and press enter\"\n\n                    style={{\n                      width: '100%',\n                    }}\n                    className={`${inputClassName}`}\n                  />\n                )}\n              />\n\n              {errors.features && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.features.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default CreatePlan;\n\n\nconst getConfirmationMessage = ({\n  billingCycle,\n  intervalCount,\n  intervalCycle,\n  amount,\n  days\n}) => {\n  const unitMap = {\n    Daily: 'day',\n    Weekly: 'week',\n    'Bi-Weekly': '2 weeks',\n    Monthly: 'month',\n    Quarterly: '3 months',\n    'Half-Yearly': '6 months',\n    Yearly: 'year',\n    'Bi-Yearly': '2 years',\n  };\n\n  const unit = unitMap[billingCycle] || 'unit';\n  const totalAmount = amount * billingCycle;\n  const totalDuration = days\n\n  return `⚠️ You are about to create a ${ intervalCycle } Plan that bills ₹${amount} every ${intervalCount} ${unit} for ${billingCycle} cycles (total: ₹${totalAmount} over ${totalDuration}). Confirm before creating`;\n};\n"],"names":["BillingCycleTable","_jsx","className","children","_jsxs","map","col","intervalUnit","billingCycle","totalDuration","chargeFrequency","example","row","idx","register","handleSubmit","getValues","setValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","calculatePlanDays","interval","intervalCount","daily","weekly","monthly","yearly","colorCodeWatch","useWatch","name","defaultValue","intervalCycle","GlobalLayout","autoComplete","onSubmit","data","price","message","getConfirmationMessage","amount","days","Swal","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","customClass","cancelButton","confirmButton","then","result","isConfirmed","finalPayload","description","cutPrice","colorCode","discountExpireIn","expireIn","features","createPlanFunc","res","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","value","pattern","onChange","e","maxLength","ColorPicker","color","r","g","b","a","metaColor","hexColor","rgbaToHex","toHex","n","hex","toString","length","Controller","rules","render","_ref","field","Select","inputAntdSelectClassName","showSearch","Option","disabled","inputDisabledClassName","duration","_ref2","mode","style","width","_ref3","unit","Daily","Weekly","Monthly","Quarterly","Yearly","totalAmount"],"sourceRoot":""}