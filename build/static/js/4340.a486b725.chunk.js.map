{"version":3,"file":"static/js/4340.a486b725.chunk.js","mappings":"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","sources":["pages/hr/holidayCalanderManagement/EditHolidayCalander.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nimport { decrypt } from \"../../../config/Encryption\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../constents/global\";\n\nimport moment from \"moment\";\nimport { getHolidayCalanderDetails, updateholidayDetails } from \"./holidayCalanderFeatures/_holiday_calander_reducers\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\n\nconst EditHolidayCalander = () => {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { holidayCalanderIdEnc } = useParams();\n  const holidayCalanderId = decrypt(holidayCalanderIdEnc);\n\n\n  const { holidayCalanderDetails } = useSelector((state) => state.holidayCalander);\n\n\n\n\n  useEffect(() => {\n    if (holidayCalanderId) {\n      dispatch(getHolidayCalanderDetails({ _id: holidayCalanderId }));\n    }\n  }, [dispatch, holidayCalanderId]);\n\n  // Populate form fields once leaveRequestDetails is available\n  useEffect(() => {\n    if (holidayCalanderDetails) {\n      setValue(\"name\", holidayCalanderDetails?.name);\n      setValue(\"date\", dayjs(holidayCalanderDetails?.date))\n      setValue(\"type\", holidayCalanderDetails?.type);\n      setValue(\"description\",holidayCalanderDetails?.description);\n      setValue(\"status\", holidayCalanderDetails?.status === true ? \"true\" : \"false\");\n\n    }\n\n  }, [holidayCalanderDetails, setValue]);\n\n\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n    companyId : holidayCalanderDetails?.companyId,\n    branchId : holidayCalanderDetails?.branchId,\n      _id:holidayCalanderId ,\n    name: data?.name,\n    date: dayjs(data?.date).format(\"YYYY-MM-DD\"),\n    type: data?.type,\n    description: data?.description,\n\n    status: data?.status === \"true\" ? true : false,\n    };\n\n    dispatch(updateholidayDetails(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div className=\"\">\n              {/* Name Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"name\", {\n                  required: \"Name is required\",\n                })}\n                placeholder=\"Name\"\n                type=\"text\"\n                className={`${inputClassName} ${\n                  errors.name ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Date Picker */}\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                  name=\"date\"\n                  control={control}\n                  render={({ field }) => (\n                    \n                    <CustomDatePicker\n                      field={field}\n                      errors={errors}\n                      disabledDate={(current) => {\n                        return (\n                          current &&\n                          current.isBefore(moment().endOf(\"day\"), \"day\")\n                        );\n                      }}\n                    />\n                  )}\n                />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">{errors.date.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Type Select Field */}\n              <label className={`${inputLabelClassName}`}>\n                Type <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"type\", {\n                  required: \"Type is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.type ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              >\n                <option value=\"\">Select Type</option>\n                <option value=\"Public\">Public</option>\n                <option value=\"Optional\">Optional</option>\n                <option value=\"Company\">Company</option>\n              </select> */}\n              <Controller\n                      name=\"type\"\n                      control={control}\n                      rules={{\n                        required: \"type  is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                \n                          placeholder=\"Select Type\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n\n                        >\n                          <Select.Option value=\"\">Select Type</Select.Option>\n                          <Select.Option value=\"Public\">Public</Select.Option>\n                       \n                            <Select.Option value=\"Optional\">Optional</Select.Option>\n                             \n                             <Select.Option value=\"Company\">Company</Select.Option>\n                           \n                        </Select>\n                      )}\n                    />\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">{errors.type.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Description Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Description <span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                placeholder=\"Description\"\n                className={`${inputClassName} ${\n                  errors.description ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              ></textarea>\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n\n           \n            <div className=\"\">\n              {/* Is Recurring Select Field */}\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"status\", {\n                  required: \"Recurring option is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              >\n                <option value=\"\">Select Status</option>\n                <option value={true}>Active</option>\n                <option value={false}>InActive</option>\n              </select> */}\n              <Controller\n                      name=\"status\"\n                      control={control}\n                      rules={{\n                        required: \"status  is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                \n                          placeholder=\"Select status\"\n                          showSearch\n\n                        >\n                          <Select.Option value=\"\">Select status</Select.Option>\n                          <Select.Option value=\"true\">Active</Select.Option>                             \n                            <Select.Option value=\"false\">InActive</Select.Option>\n                           \n                        </Select>\n                      )}\n                    />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.status.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditHolidayCalander;\n"],"names":["EditHolidayCalander","register","handleSubmit","setValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","holidayCalanderIdEnc","useParams","holidayCalanderId","decrypt","holidayCalanderDetails","useSelector","state","holidayCalander","useEffect","getHolidayCalanderDetails","_id","name","dayjs","date","type","description","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","companyId","branchId","format","updateholidayDetails","then","error","concat","inputLabelClassName","_objectSpread","required","placeholder","inputClassName","message","Controller","render","_ref","field","CustomDatePicker","disabledDate","current","isBefore","moment","endOf","rules","_ref2","Select","inputAntdSelectClassName","PDPlan","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","_ref3"],"sourceRoot":""}