{"version":3,"file":"static/js/8119.a844d896.chunk.js","mappings":"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","sources":["pages/client/clientService/UpdateClientService.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { inputClassName, inputLabelClassName, domainName, inputAntdSelectClassName } from \"../../../constents/global\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { getClientServiceDetails, updateClientService } from \"../clientService/clientServiceFeatures/_client_service_reducers\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nfunction UpdateClientService() {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const { loading: clientServiceLoading } = useSelector(state => state.clientService)\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { clientServiceIdEnc } = useParams();\n  const clientServiceId = decrypt(clientServiceIdEnc);\n\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { clientServiceDetails } = useSelector((state) => state.clientService);\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { countryListData } = useSelector((state) => state.country);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    let reqData = {\n      _id: clientServiceId,\n    };\n    dispatch(getClientServiceDetails(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (clientServiceDetails) {\n      setValue(\"PDCompanyId\", clientServiceDetails?.companyId);\n      setValue(\"PDBranchId\", clientServiceDetails?.branchId);\n      setValue(\"name\", clientServiceDetails?.name);\n      setValue(\"status\", clientServiceDetails?.status);\n    }\n  }, [clientServiceDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: clientServiceId,\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n\n      \"directorId\": \"\",\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      name: data?.name,\n      status: data?.status,\n    };\n    dispatch(updateClientService(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"PDBranchId\"\n                  control={control}\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                      placeholder=\"Select Branch\"\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : (branchList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.name\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.name.message}\n                </p>\n              )}\n            </div>\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n              >\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={clientServiceLoading}\n              className={`${clientServiceLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {clientServiceLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default UpdateClientService;"],"names":["register","handleSubmit","setValue","control","formState","errors","useForm","loading","clientServiceLoading","useSelector","state","clientService","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","clientServiceIdEnc","useParams","clientServiceId","decrypt","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","clientServiceDetails","companyList","companyListLoading","company","countryListData","country","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","branchSearch","text","sort","status","isPagination","_id","companySearch","reqData","getClientServiceDetails","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","updateClientService","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","PDCompanyId","message","_ref2","PDBranchId","placeholder","inputClassName","_ref3","Loader"],"sourceRoot":""}