{"version":3,"file":"static/js/4098.8031e281.chunk.js","mappings":"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","sources":["pages/visitorManagement/general_client_visitor/UpdateGeneralVisitor.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport {\n  domainName,\n  getLocationDataByPincode,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  inputerrorClassNameAutoComplete,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\n\nimport Loader from \"../../../global_layouts/Loader/Loader\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { visitorCatSearch } from \"../visitorCategories/visitorCategoryFeatures/_visitor_categories_reducers\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport { stateSearch } from \"../../global/address/state/featureStates/_state_reducers\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { citySearch } from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport moment from \"moment\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport dayjs from \"dayjs\";\nimport { VisitReasonTypeSearch } from \"../visitreason/visitReasonFeatures/_visitReason_type_reducers\";\nimport getUserIds from \"../../../constents/getUserIds\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { getGeneralVisitorDetails, getVisitorDetails, updateGeneralVisitor, updateVisitor } from \"../visitor/visitorFeatures/_visitor_reducers\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\n\nfunction UpdateGeneralVisitor() {\n  const { loading: visitorLoading } = useSelector(state => state.visitor);\n   const [selectedDepartmentId, setSelectedDepartmentId] = useState(\"\");\n   const { companyList, companyListLoading } = useSelector((state) => state.company);\n   const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType,\n  } = getUserIds();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const [pageLoading, setPageLoading] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { visitorIdEnc } = useParams();\n  const visitorId = decrypt(visitorIdEnc);\n  const { generalVisitorDetails } = useSelector((state) => state.visitor);\n  const { departmentListData, loading: depLoading } = useSelector((state) => state.department);\n\n  const { employeList, loading: employeeListLoading } = useSelector((state) => state.employe);\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const { clientList } = useSelector((state) => state.client);\n  const { VisitReasonList, loading: visitorReasonListLoading } = useSelector((state) => state.visitReason);\n  const PrintAddress = useWatch({\n    control,\n    name: \"PDAddress\",\n    defaultValue: \"\",\n  });\n    const departmentIds = useWatch({\n      control,\n      name: \"PDDepartmentId\",\n      defaultValue:[],\n    });\n  \n  const PrintCity = useWatch({\n    control,\n    name: \"PDCity\",\n    defaultValue: \"\",\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: \"\",\n  });\n  const PrintState = useWatch({\n    control,\n    name: \"PDState\",\n    defaultValue: \"\",\n  });\n  const PrintCountry = useWatch({\n    control,\n    name: \"PDCountry\",\n    defaultValue: \"\",\n  });\n\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPinCode\",\n    defaultValue: \"\",\n  });\n\n  const category = useWatch({\n    control,\n    name: \"category\",\n    defaultValue: \"\",\n  });\n  \n\n  useEffect(() => {\n    if (\n      PrintPincode &&\n      PrintPincode.length >= 4 &&\n      PrintPincode.length <= 6 &&\n      /^\\d{6}$/.test(PrintPincode)\n    ) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data.city);\n            setValue(\"PDState\", data.state);\n            setValue(\"PDCountry\", data.country);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      \n        const reqPayload = {\n                            text: \"\",\n                            sort: true,\n                            status: \"\",\n                            isPagination: false,\n                            companyId: companyId,\n                          };\n                          dispatch(branchSearch(reqPayload));\n                          \n      try {\n        const reqData = {\n          _id: visitorId,\n        };\n        await dispatch(getGeneralVisitorDetails(reqData)).then((data) => {\n          setPageLoading(false);\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n      \n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n\n    if (generalVisitorDetails) {\n      dispatch(\n        deptSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: generalVisitorDetails?.companyId,\n          branchId: generalVisitorDetails?.branchId,\n        })\n      ).then((departmentdata) => {\n        if (!departmentdata?.error) {\n          setValue(\"PDDepartmentId\", generalVisitorDetails?.departmentId)\n          dispatch(employeSearch({\n            directorId: \"\",\n            companyId: generalVisitorDetails?.companyId,\n            branchId: generalVisitorDetails?.branchId,\n            departmentId: generalVisitorDetails?.departmentId,\n            text: \"\",\n            sort: true,\n            status: \"\",\n            isPagination: false,\n          })).then((data) => {\n            if (!data.error) {\n              setValue(\"designationName\", generalVisitorDetails?.name);\n              setValue(\"companyId\", generalVisitorDetails?.companyId);\n              setValue(\"branchId\", generalVisitorDetails?.branchId);\n              setValue(\"contactPersonId\", generalVisitorDetails?.contactPersonId);\n              setValue(\"employeId\", generalVisitorDetails?.employeId);\n              dispatch(VisitReasonTypeSearch({\n                \"companyId\": generalVisitorDetails?.companyId,\n                \"directorId\": \"\",\n                \"branchId\": generalVisitorDetails?.branchId,\n                \"text\": \"\",\n                \"sort\": true,\n                \"status\": true,\n                \"isPagination\": false\n              })).then(vistorResponse => {\n                if (!vistorResponse?.error) {\n\n                  setValue(\"reason\", generalVisitorDetails?.reason);\n                }\n              })\n              setValue(\"visitorName\", generalVisitorDetails?.name);\n              // setValue(\"clientId\", generalVisitorDetails?.clientId);\n              setValue(\"numberOfPerson\", generalVisitorDetails?.numberOfPerson);\n              setValue(\"status\", generalVisitorDetails?.status);\n              setValue(\"PDPinCode\", generalVisitorDetails?.address?.pinCode);\n              setValue(\"PDMobileCode\", generalVisitorDetails?.mobile?.code);\n              setValue(\"PDMobileNo\", generalVisitorDetails?.mobile?.number);\n              setValue(\"PDAddress\", generalVisitorDetails?.address?.street);\n              setValue(\"category\", generalVisitorDetails?.category);\n              setValue(\"kilometer\", generalVisitorDetails?.kilometer);\n          \n        \n\n        // ✅ Set selected department IDs in form\n        setValue(\"PDDepartmentId\", generalVisitorDetails?.departmentIds || []);\n               setValue(\"contactPersonId\", generalVisitorDetails?.employeIds);\n              setValue(\"date\", dayjs(generalVisitorDetails?.date));\n              setValue(\"startTime\", dayjs(generalVisitorDetails?.timeDurationStart));\n              setValue(\"endTime\", dayjs(generalVisitorDetails?.timeDurationEnd));\n              // setValue(\"date\", moment(generalVisitorDetails?.date).format(\"YYYY-MM-DD\"));\n            }\n          });\n        }\n      })\n\n\n      dispatch(\n        clientSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: generalVisitorDetails?.companyId,\n          branchId: generalVisitorDetails?.branchId,\n        })\n      ).then((data) => {\n        setValue(\"clientId\", generalVisitorDetails?.clientId);\n      });\n    }\n  }, [generalVisitorDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: visitorId,\n      companyId: generalVisitorDetails?.companyId,\n      directorId: \"\",\n      branchId: generalVisitorDetails?.branchId,\n    \n      \n      departmentIds: data?.PDDepartmentId,\n      name: data?.visitorName,\n      employeIds: data?.contactPersonId,\n      reason: data?.reason,\n     \n      numberOfPerson: Number(data?.numberOfPerson),\n      clientId: data?.clientId,\n      employeId: data?.employeId,\n      category: 'general',\n\n      timeDurationStart: data?.startTime,\n     \"timeDurationEnd\": data?.endTime,\n     date:data?.date,\n      address: {\n        street: data?.PDAddress ?? \"\",\n        // city: data?.PDCity ?? \"\",\n        // state: data?.PDState ?? \"\",\n        // country: data?.PDCountry ?? \"\",\n        // pinCode: data?.PDPinCode ?? \"\",\n      },\n      mobile: {\n        number: data?.PDMobileNo ?? \"\",\n        code: data?.PDMobileCode ?? \"\",\n      },\n    };\n\n    dispatch(updateGeneralVisitor(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n   const companyId = useWatch({\n      control,\n      name: \"companyId\",\n      defaultValue: userCompanyId,\n    });\n  \n    const branchId = useWatch({\n      control,\n      name: \"branchId\",\n      defaultValue: '',\n    });\n  \n\n\n     const userInfoglobal = JSON.parse(\n        localStorage.getItem(`user_info_${domainName}`)\n      );\n\n     const [options, setOptions] = useState([]);\n     const [employeeOptions, setEmployeeOptions] = useState([]);\n  \n      const [employeeSelectedOption, setEmployeeSelectedOption] = useState([]);\n    \n      const [selectAllActive, setSelectAllActive] = useState(false);\n      const [selectAllEmployeeActive, setSelectAllEmployeeActive] = useState(false);\n      const allOptionValues = options?.map((option) => option.value);\n      const allEmployeeOptionValues = (employeeOptions?.map((option) => option.value));\n    \n      const selectAllValue = \"__all__\"; // Custom value for the \"Select All\" option\n    const selectAllEmployeeValue = \"__all__\"\n      const mergedOptions = [\n        {\n          label: \"Select All\",\n          value: selectAllValue,\n        },\n        ...options,\n      ];\n  \n      const mergedEmployeeOptions = [\n        {\n          label: \"Select All\",\n          value: selectAllEmployeeValue,\n        },\n         ...(Array.isArray(employeeOptions) ? employeeOptions : []),\n      ];\n      \n\n\n      useEffect(()=>{\n        dispatch(\n         \n        deptSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId,\n          branchId: branchId,\n        })\n     \n      ).then((dep) => {\n        const list = dep?.payload?.data?.docs?.map((element) => (\n  \n          {\n            label:element?.name,\n              \n             \n  \n          \n  \n            value: element?._id,\n           searchText: element?.name?.toLowerCase(),\n          }));\n        setOptions(list);\n      });\n\n\n        const reqPayload = {\n                          directorId: \"\",\n                          companyId: companyId,\n                          branchId: branchId,\n                          departmentId: selectedDepartmentId,\n                          text: \"\",\n                          sort: true,\n                          status: \"\",\n                          isPagination: false,\n                            \"multipleDepartmentId\": departmentIds,\n                        };\n                        dispatch(employeSearch(reqPayload))\n     \n      .then((empResponse) => {\n        const list = empResponse?.payload?.data?.docs?.map((element) => (\n  \n          {\n            label:            \n                element?.fullName,\n              \n             \n  \n          \n  \n            value: element?._id,\n           searchText: element?.fullName?.toLowerCase(),\n          }));\n        setEmployeeOptions(list);\n      });\n    \n      },[])\n\n\n\n        const handleFocus = () => {\n      dispatch(\n         \n        deptSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId,\n          branchId: branchId,\n        })\n     \n      ).then((dep) => {\n        const list = dep?.payload?.data?.docs?.map((element) => (\n  \n          {\n            label:element?.name,\n              \n             \n  \n          \n  \n            value: element?._id,\n           searchText: element?.name?.toLowerCase(),\n          }));\n        setOptions(list);\n      });\n\n\n\n\n    };\n  \n  \n  \n       const handleEmployeeFocus = () => {\n  \n         \n       const reqPayload = {\n                          directorId: \"\",\n                          companyId: companyId,\n                          branchId: branchId,\n                          departmentId: selectedDepartmentId,\n                          text: \"\",\n                          sort: true,\n                          status: \"\",\n                          isPagination: false,\n                            \"multipleDepartmentId\": departmentIds,\n                        };\n                        dispatch(employeSearch(reqPayload))\n     \n      .then((empResponse) => {\n        const list = empResponse?.payload?.data?.docs?.map((element) => (\n  \n          {\n            label:            \n                element?.fullName,\n              \n             \n  \n          \n  \n            value: element?._id,\n           searchText: element?.fullName?.toLowerCase(),\n          }));\n        setEmployeeOptions(list);\n      });\n    };\n  \n\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-5\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userType === \"admin\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": \"\",\n                      \"isPagination\": false,\n                    }\n                    dispatch(companySearch(reqPayload))\n                  }}\n                  {...register(\"companyId\", {\n                    required: \"Company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.companyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n\n                <Controller\n                  control={control}\n                  name=\"companyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={` ${inputAntdSelectClassName} ${errors.companyId\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      onFocus={() => {\n                        const reqPayload = {\n                          text: \"\",\n                          sort: true,\n                          status: \"\",\n                          isPagination: false,\n                        };\n                        dispatch(companySearch(reqPayload));\n                      }}\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : (companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.companyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.companyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userType === \"admin\" ||\n              userType === \"company\" ||\n              userType === \"companyDirector\") && (\n                <div className=\"w-full\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch <span className=\"text-red-600\">*</span>\n                  </label>\n                  {/* <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      companyId: companyId,\n                      directorId: \"\",\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": \"\",\n                      \"isPagination\": false,\n                    }\n                    dispatch(branchSearch(reqPayload))\n                  }}\n                  {...register(\"branchId\", {\n                    required: \"Branch is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.branchId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Branch\n                  </option>\n                  {branchList?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                  <Controller\n                    control={control}\n                    name=\"branchId\"\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        defaultValue={\"\"}\n                        className={` ${inputAntdSelectClassName} `}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                        onFocus={() => {\n                        \n                        }}\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> : (branchList?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))}\n                      </Select>\n                    )}\n                  />\n                  {errors.branchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.branchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n\n           \n            \n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"visitorName\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.visitorName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.visitorName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.visitorName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Department <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                                    name=\"PDDepartmentId\"\n                                    control={control}\n                                    rules={{ required: \"At least one Department is required\" }}\n                                    render={({ field }) => {\n                                      const handleChange = (selected) => {\n                                        if (selected.includes(selectAllValue)) {\n                                          // If \"Select All\" was selected\n                                          if (selectAllActive) {\n                                            // Unselect all\n                                            field.onChange([]);\n                                            setSelectAllActive(false);\n                                          } else {\n                                            // Select all actual options\n                                            field.onChange(allOptionValues);\n                                            setSelectAllActive(true);\n                                          }\n                                        } else {\n                                          field.onChange(selected);\n                                          setSelectAllActive(selected.length === allOptionValues.length);\n                                        }\n                                      };\n              \n                                      return (\n                                        <Select\n                                          mode=\"multiple\"\n                                          placeholder=\"Assign To\"\n                                          value={field.value || []}\n                                          onChange={handleChange}\n                                          onFocus={handleFocus}\n                                          size=\"large\"\n                                          style={{ width: \"100%\" }}\n                                          options={mergedOptions}\n                                          // className={inputAntdSelectClassName}\n                                          showSearch\n                                          filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                          }\n                                        />\n                                      );\n                                    }}\n                                  />\n\n              \n              {errors.PDDepartmentId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDDepartmentId.message}\n                </p>\n              )}\n            </div>\n          \n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Contact Person <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                onFocus={() => {\n                  const reqPayload = {\n                    directorId: \"\",\n                    companyId: companyId,\n                    branchId: branchId,\n                    \"text\": \"\",\n                    \"sort\": true,\n                    \"status\": \"\",\n                    \"isPagination\": false,\n                  }\n                  dispatch(employeSearch(reqPayload))\n                }}\n                {...register(\"contactPersonId\", {\n                  required: \"Person is required\",\n                })}\n                className={` ${inputClassName} ${errors.contactPersonId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Person\n                </option>\n                {employeList?.map((element) => (\n                  <option value={element?._id}>\n                    {element?.fullName}\n                  </option>\n                ))}\n              </select> */}\n              {/* <Controller\n                control={control}\n                name=\"contactPersonId\"\n                rules={{ required: \"Contact is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={` ${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    onFocus={() => {\n                      if (!selectedDepartmentId) return;\n                      const reqPayload = {\n                        directorId: \"\",\n                        companyId: companyId,\n                        branchId: branchId,\n                        departmentId: selectedDepartmentId,\n                        text: \"\",\n                        sort: true,\n                        status: \"\",\n                        isPagination: false,\n                      };\n                      dispatch(employeSearch(reqPayload));\n                    }}\n                    placeholder=\"Select Person\"\n                  >\n                    <Select.Option className=\"\" value=\"\">\n                      Select Person\n                    </Select.Option>\n                    {employeeLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (employeList?.map((element) => (\n                      <Select.Option value={element?._id}>\n                        {element?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              /> */}\n\n               <Controller\n                                    name=\"contactPersonId\"\n                                    control={control}\n                                    rules={{ required: \"At least one Contact Person is required\" }}\n                                    render={({ field }) => {\n                                      const handleChange = (selected) => {\n                                        if (selected.includes(selectAllEmployeeValue)) {\n                                          // If \"Select All\" was selected\n                                          if (selectAllEmployeeValue) {\n                                            // Unselect all\n                                            field.onChange([]);\n                                            setSelectAllEmployeeActive(false);\n                                          } else {\n                                            // Select all actual options\n                                            field.onChange(allEmployeeOptionValues);\n                                            setSelectAllEmployeeActive(true);\n                                          }\n                                        } else {\n                                          field.onChange(selected);\n                                          setSelectAllEmployeeActive(selected.length === allEmployeeOptionValues.length);\n                                        }\n                                      };\n              \n                                      return (\n                                        <Select\n                                          mode=\"multiple\"\n                                          placeholder=\"Assign To\"\n                                          value={field.value || []}\n                                          onChange={handleChange}\n                                          onFocus={handleEmployeeFocus}\n                                          size=\"large\"\n                                          style={{ width: \"100%\" }}\n                                          options={mergedEmployeeOptions||[]}\n                                          // className={inputAntdSelectClassName}\n                                          showSearch\n                                          filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                          }\n                                        />\n                                      );\n                                    }}\n                                  />\n              {errors.contactPersonId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.contactPersonId.message}\n                </p>\n              )}\n            </div>\n\n\n            <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Start Time <span className=\"text-red-600\">*</span>\n              </label>\n             \n              <Controller\n                name=\"startTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"Start Time  is required\",\n                }}\n                format=\"DD/MM/YYYY HH:mm\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY HH:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.startTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.startTime.message}\n                </p>\n              )}\n            </div>\n\n             <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                End Time <span className=\"text-red-600\">*</span>\n              </label>\n             \n              <Controller\n                name=\"endTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"ENd Time  is required\",\n                }}\n                format=\"DD/MM/YYYY HH:mm\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY HH:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.endTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.endTime.message}\n                </p>\n              )}\n            </div>\n\n\n             <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n             \n              <Controller\n                name=\"date\"\n                control={control}\n              \n                rules={{\n                  required: \"date  is required\",\n                }}\n                \n                render={({ field }) => (\n                  <CustomDatePicker\n                                            field={field}\n                                            errors={errors}\n                                            disabledDate={(current) => {\n                                              return (\n                                                current &&\n                                                current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                                              );\n                                            }}\n                                          />\n                )}\n              />\n\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.date.message}\n                </p>\n              )}\n            </div>\n\n            {/* {category !== \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Number Of Person <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"numberOfPerson\", {\n                    required: \"Number Of Person is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.numberOfPerson\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Number Of Person\"\n                />\n                {errors.numberOfPerson && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.numberOfPerson.message}\n                  </p>\n                )}\n              </div>\n            )} */}\n            {/* <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Reason <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"reason\", {\n                  required: \"Reason is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${\n                  errors.reason\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                }`}\n                placeholder=\"Enter Reason\"\n              />\n              {errors.designationName && (\n                <p className=\"text-red-500 text-sm\">{errors.reason.message}</p>\n              )}\n            </div> */}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Reason <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                control={control}\n                name=\"reason\"\n                rules={{ required: \"reason is required\" }}\n                // render={({ field }) => (\n                //   <Select\n                //     {...field}\n                //     defaultValue={\"\"}\n                //     className={` ${inputAntdSelectClassName} `}\n                //     showSearch\n                //     filterOption={(input, option) =>\n                //       String(option?.children).toLowerCase().includes(input.toLowerCase())\n                //     }\n                //   >\n                //     <Select.Option className=\"\" value=\"\">\n                //       Select reason\n                //     </Select.Option>\n                //     {VisitReasonList?.map((element, index) => {\n                //       return (\n                //         <Select.Option key={index} value={element?._id}>\n                //           {element?.title}\n                //         </Select.Option>\n                //       );\n                //     })}\n                //   </Select>\n                // )}\n\n                 render={({ field }) => (\n                              <AutoComplete\n                                className=\"w-full\"\n                                {...field}\n                                onChange={(value) => {\n      \n                                  field.onChange(value);\n                                }}\n                                options={sortByPropertyAlphabetically(VisitReasonList)?.map((type) => ({\n                                  value: type?.title  ,\n                                }))}\n                                notFoundContent={<ListLoader/>}\n                              >\n                                <input\n                                  placeholder=\"Enter Country\"\n    \n                                  // onFocus={() => {\n                                  //   dispatch(\n                                  //     countrySearch({\n                                  //       isPagination: false,\n                                  //       text: \"\",\n                                  //       sort: true,\n                                  //       status: true,\n                                  //     })\n                                  //   );\n                                  // }}\n                                  className={`${inputClassName}`\n                                  }\n                                />\n                              </AutoComplete>\n                            )}\n              />\n              {errors[`reason`] && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors[`reason`].message}\n                </p>\n              )}\n            </div>\n            {category === \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  KM <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"kilometer\", {\n                    required: \"Number kilometer is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.kilometer\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Number kilometer\"\n                />\n                {errors.designationName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.kilometer.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {/* {category === \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Date <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"date\"\n                  min={new Date().toISOString().split(\"T\")[0]}\n                  {...register(\"date\", {\n                    required: \"Date is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.date\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Date of Birth\"\n                />\n                {errors.date && (\n                  <p className=\"text-red-500 text-sm\">{errors.date.message}</p>\n                )}\n              </div>\n            )} */}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 md:mt-4\">\n            <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Address{\" \"}\n                {category !== \"general\" && (\n                  <span className=\"text-red-600\">*</span>\n                )}\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDAddress\", {\n                  required:\n                    category !== \"general\" ? \"Address is required\" : false,\n                })}\n                className={`${inputClassName} ${errors.PDAddress\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Address \"\n              />\n              {errors.PDAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDAddress.message}\n                </p>\n              )}\n            </div>\n          </div>\n       \n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 \">\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  Code <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDMobileCode\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker field={field} errors={errors} />\n                  )}\n                />\n\n           \n                {errors[`PDMobileCode`] && (\n                  <p className={`${inputerrorClassNameAutoComplete}`}>\n                    {errors[`PDMobileCode`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`PDMobileNo`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`PDMobileNo`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`PDMobileNo`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`PDMobileNo`].message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={visitorLoading}\n              className={`${visitorLoading ? \"bg-gray-400\" : \"bg-header\"\n                } text-white p-2 px-4 rounded mt-3`}\n            >\n              {visitorLoading ? <Loader /> : \"Submit\"}\n            </button>\n          </div>\n        </form>\n      </div >\n    </GlobalLayout >\n  );\n}\n\nexport default UpdateGeneralVisitor;","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["loading","visitorLoading","useSelector","state","visitor","selectedDepartmentId","setSelectedDepartmentId","useState","companyList","companyListLoading","company","branchList","branchListloading","branch","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","register","handleSubmit","setValue","control","formState","errors","useForm","pageLoading","setPageLoading","dispatch","useDispatch","navigate","useNavigate","visitorIdEnc","useParams","visitorId","decrypt","generalVisitorDetails","departmentListData","depLoading","department","employeList","employeeListLoading","employe","countryListData","country","stateListData","states","cityListData","city","clientList","client","VisitReasonList","visitorReasonListLoading","visitReason","departmentIds","useWatch","name","defaultValue","PrintPincode","category","useEffect","length","test","getLocationDataByPincode","then","data","catch","error","console","async","reqPayload","text","sort","status","isPagination","companyId","branchSearch","reqData","_id","getGeneralVisitorDetails","fetchData","deptSearch","branchId","departmentdata","departmentId","employeSearch","directorId","_generalVisitorDetail","_generalVisitorDetail2","_generalVisitorDetail3","_generalVisitorDetail4","contactPersonId","employeId","VisitReasonTypeSearch","vistorResponse","reason","numberOfPerson","address","pinCode","mobile","code","number","street","kilometer","employeIds","dayjs","date","timeDurationStart","timeDurationEnd","clientSearch","clientId","options","setOptions","JSON","parse","localStorage","getItem","concat","domainName","employeeOptions","setEmployeeOptions","employeeSelectedOption","setEmployeeSelectedOption","selectAllActive","setSelectAllActive","selectAllEmployeeActive","setSelectAllEmployeeActive","allOptionValues","map","option","value","allEmployeeOptionValues","selectAllValue","selectAllEmployeeValue","mergedOptions","label","mergedEmployeeOptions","Array","isArray","dep","_dep$payload","_dep$payload$data","_dep$payload$data$doc","list","payload","docs","element","_element$name","searchText","toLowerCase","empResponse","_empResponse$payload","_empResponse$payload$","_empResponse$payload$2","_element$fullName","fullName","handleFocus","_dep$payload2","_dep$payload2$data","_dep$payload2$data$do","_element$name2","handleEmployeeFocus","_empResponse$payload2","_empResponse$payload3","_empResponse$payload4","_element$fullName2","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_data$PDAddress","_data$PDMobileNo","_data$PDMobileCode","finalPayload","PDDepartmentId","visitorName","Number","startTime","endTime","PDAddress","PDMobileNo","PDMobileCode","updateGeneralVisitor","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","String","includes","onFocus","companySearch","Option","disabled","ListLoader","type","message","_ref2","inputClassName","placeholder","_ref3","mode","onChange","selected","size","style","width","_ref4","showTime","format","_ref5","CustomDatePicker","disabledDate","current","isBefore","endOf","_ref6","_ref7","_ref8","_sortByPropertyAlphab","AutoComplete","sortByPropertyAlphabetically","title","notFoundContent","designationName","_ref9","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","maxLength","onInput","e","target","slice","Loader","Spin"],"sourceRoot":""}