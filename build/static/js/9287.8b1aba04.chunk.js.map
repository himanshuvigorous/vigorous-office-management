{"version":3,"file":"static/js/9287.8b1aba04.chunk.js","mappings":"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","sources":["pages/visitorManagement/general_client_visitor/GeneralCreateVisitor.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n//import { createDesignation } from \"./designationFeatures/_designation_reducers\";\n\nimport {\n  domainName,\n  getLocationDataByPincode,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputClassNameSearch,\n  inputerrorClassNameAutoComplete,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport getUserIds from \"../../../constents/getUserIds\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { stateSearch } from \"../../global/address/state/featureStates/_state_reducers\";\nimport { citySearch } from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport {\n  getClientList,\n  clientSearch,\n  getClientDetails,\n} from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport moment from \"moment\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport { VisitReasonTypeSearch } from \"../visitreason/visitReasonFeatures/_visitReason_type_reducers\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport { createGeneralVisitor, createVisitor } from \"../visitor/visitorFeatures/_visitor_reducers\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\n\nfunction GeneralCreateVisitor() {\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    getValues,\n    unregister,\n    watch,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType,\n  } = getUserIds();\n\n  const { clientIdEnc } = useParams();\n  const clientId = decrypt(clientIdEnc);\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const { employeList, loading: employeeLoading } = useSelector((state) => state.employe);\n  const { clientList } = useSelector((state) => state.client);\n  const { departmentListData, loading: depLoading } = useSelector((state) => state.department);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { VisitReasonList, loading: visitReasonLoading } = useSelector((state) => state.visitReason);\n\n  const [clientDepartments, setClientDepartments] = useState([]);\n  const [selectedDepartmentId, setSelectedDepartmentId] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"branchId\",\n    defaultValue: '',\n  });\n\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPinCode\",\n    defaultValue: \"\",\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: \"\",\n  });\n\n  const PrintState = useWatch({\n    control,\n    name: \"PDState\",\n    defaultValue: \"\",\n  });\n  const PrintCountry = useWatch({\n    control,\n    name: \"PDCountry\",\n    defaultValue: \"\",\n  });\n\n  const departmentIds = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue:[],\n  });\n\n\n   const category = useWatch({\n    control,\n    name: \"category\",\n    defaultValue: \"\",\n  });\n\n\n\n  const client = useWatch({\n    control,\n    name: \"clientId\",\n    defaultValue: \"\",\n  });\n\n  const [clientData, setClientData] = useState();\n\n  useEffect(() => {\n\n  }, [clientDepartments]);\n\n  useEffect(() => {\n\n    dispatch(\n      VisitReasonTypeSearch({\n        companyId: companyId,\n        directorId: \"\",\n        branchId: branchId,\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n      })\n    );\n  }, [branchId, companyId]);\n\n  useEffect(() => {\n    const filteredClient = clientList?.find((data) => data._id === client);\n    // setClientData(filteredClient);\n\n\n    // setValue(\"visitorName\", filteredClient?.fullName);\n    setValue(\"PDAddress\", filteredClient?.addresses?.primary?.street);\n    setValue(\"PDState\", filteredClient?.addresses?.primary?.state);\n    setValue(\"PDCountry\", filteredClient?.addresses?.primary?.country);\n    setValue(\"PDCity\", filteredClient?.addresses?.primary?.city);\n    setValue(\"PDPinCode\", filteredClient?.addresses?.primary?.pinCode);\n    setValue(\"PDMobileCode\", filteredClient?.mobile?.code);\n    setValue(\"PDMobileNo\", filteredClient?.mobile?.number);\n  }, [client]);\n\n\n\n\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (companyId || userType === \"company\" || userType === \"companyDirector\") {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          companyId: companyId,\n          isPagination: false,\n        })\n      );\n    }\n  }, [companyId]);\n\n  const handleFocusDepartment = () => {\n    dispatch(\n      deptSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: companyId,\n        branchId: branchId,\n      })\n    );\n  };\n\n\n  useEffect(()=>{\n    dispatch(\n      deptSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: companyId,\n        branchId: branchId,\n      })\n    );\n  },[branchId])\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: companyId,\n      directorId: \"\",\n      branchId: branchId,\n      departmentIds: data?.PDDepartmentId,\n      name: data?.visitorName,\n      employeIds: data?.contactPersonId,\n      reason: data?.reason,\n     \n      numberOfPerson: Number(data?.numberOfPerson),\n      clientId: data?.clientId,\n      employeId: data?.employeId,\n      category: 'general',\n\n      timeDurationStart: data?.startTime,\n     \"timeDurationEnd\": data?.endTime,\n     date:data?.date,\n      address: {\n        street: data?.PDAddress ?? \"\",\n        // city: data?.PDCity ?? \"\",\n        // state: data?.PDState ?? \"\",\n        // country: data?.PDCountry ?? \"\",\n        // pinCode: data?.PDPinCode ?? \"\",\n      },\n      mobile: {\n        number: data?.PDMobileNo ?? \"\",\n        code: data?.PDMobileCode ?? \"\",\n      },\n    };\n\n    dispatch(createGeneralVisitor(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    if (\n      PrintPincode &&\n      PrintPincode.length >= 4 &&\n      PrintPincode.length <= 6 &&\n      /^\\d{6}$/.test(PrintPincode)\n    ) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data.city);\n            setValue(\"PDState\", data.state);\n            setValue(\"PDCountry\", data.country);\n            setValue(\"PDMobileCode\", \"+91\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n    const userInfoglobal = JSON.parse(\n      localStorage.getItem(`user_info_${domainName}`)\n    );\n    const { loading: visitorLoading } = useSelector((state) => state.visitor);\n   const [options, setOptions] = useState([]);\n   const [employeeOptions, setEmployeeOptions] = useState([]);\n\n    const [employeeSelectedOption, setEmployeeSelectedOption] = useState([]);\n  \n    const [selectAllActive, setSelectAllActive] = useState(false);\n    const [selectAllEmployeeActive, setSelectAllEmployeeActive] = useState(false);\n    const allOptionValues = options?.map((option) => option.value);\n    const allEmployeeOptionValues = (employeeOptions?.map((option) => option.value));\n  \n    const selectAllValue = \"__all__\"; // Custom value for the \"Select All\" option\n  const selectAllEmployeeValue = \"__all__\"\n    const mergedOptions = [\n      {\n        label: \"Select All\",\n        value: selectAllValue,\n      },\n      ...options,\n    ];\n\n    const mergedEmployeeOptions = [\n      {\n        label: \"Select All\",\n        value: selectAllEmployeeValue,\n      },\n       ...(Array.isArray(employeeOptions) ? employeeOptions : []),\n    ];\n    \n      const handleFocus = () => {\n    dispatch(\n       \n      deptSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: companyId,\n        branchId: branchId,\n      })\n   \n    ).then((dep) => {\n      const list = dep?.payload?.data?.docs?.map((element) => (\n\n        {\n          label:element?.name,\n            \n           \n\n        \n\n          value: element?._id,\n         searchText: element?.name?.toLowerCase(),\n        }));\n      setOptions(list);\n    });\n  };\n\n\n\n     const handleEmployeeFocus = () => {\n\n       \n     const reqPayload = {\n                        directorId: \"\",\n                        companyId: companyId,\n                        branchId: branchId,\n                        departmentId: selectedDepartmentId,\n                        text: \"\",\n                        sort: true,\n                        status: \"\",\n                        isPagination: false,\n                          \"multipleDepartmentId\": departmentIds,\n                      };\n                      dispatch(employeSearch(reqPayload))\n   \n    .then((empResponse) => {\n      const list = empResponse?.payload?.data?.docs?.map((element) => (\n\n        {\n          label:            \n              element?.fullName,\n            \n           \n\n        \n\n          value: element?._id,\n         searchText: element?.fullName?.toLowerCase(),\n        }));\n      setEmployeeOptions(list);\n    });\n  };\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-5\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userType === \"admin\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": \"\",\n                      \"isPagination\": false,\n                    }\n                    dispatch(companySearch(reqPayload))\n                  }}\n                  {...register(\"companyId\", {\n                    required: \"Company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.companyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n\n                <Controller\n                  control={control}\n                  name=\"companyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={` ${inputAntdSelectClassName} ${errors.companyId\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      onFocus={() => {\n                        const reqPayload = {\n                          text: \"\",\n                          sort: true,\n                          status: \"\",\n                          isPagination: false,\n                        };\n                        dispatch(companySearch(reqPayload));\n                      }}\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : (companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.companyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.companyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userType === \"admin\" ||\n              userType === \"company\" ||\n              userType === \"companyDirector\") && (\n                <div className=\"w-full\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch <span className=\"text-red-600\">*</span>\n                  </label>\n                  {/* <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      companyId: companyId,\n                      directorId: \"\",\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": \"\",\n                      \"isPagination\": false,\n                    }\n                    dispatch(branchSearch(reqPayload))\n                  }}\n                  {...register(\"branchId\", {\n                    required: \"Branch is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.branchId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Branch\n                  </option>\n                  {branchList?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                  <Controller\n                    control={control}\n                    name=\"branchId\"\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        defaultValue={\"\"}\n                        className={` ${inputAntdSelectClassName} `}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                        onFocus={() => {\n                          const reqPayload = {\n                            text: \"\",\n                            sort: true,\n                            status: \"\",\n                            companyId: companyId,\n                            isPagination: false,\n                          };\n                          dispatch(branchSearch(reqPayload));\n                        }}\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> : (branchList?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))}\n                      </Select>\n                    )}\n                  />\n                  {errors.branchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.branchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n\n           \n            \n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"visitorName\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.visitorName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.visitorName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.visitorName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Department <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                                    name=\"PDDepartmentId\"\n                                    control={control}\n                                    rules={{ required: \"At least one Department is required\" }}\n                                    render={({ field }) => {\n                                      const handleChange = (selected) => {\n                                        if (selected.includes(selectAllValue)) {\n                                          // If \"Select All\" was selected\n                                          if (selectAllActive) {\n                                            // Unselect all\n                                            field.onChange([]);\n                                            setSelectAllActive(false);\n                                          } else {\n                                            // Select all actual options\n                                            field.onChange(allOptionValues);\n                                            setSelectAllActive(true);\n                                          }\n                                        } else {\n                                          field.onChange(selected);\n                                          setSelectAllActive(selected.length === allOptionValues.length);\n                                        }\n                                      };\n              \n                                      return (\n                                        <Select\n                                          mode=\"multiple\"\n                                          placeholder=\"Assign To\"\n                                          value={field.value || []}\n                                          onChange={handleChange}\n                                          onFocus={handleFocus}\n                                          size=\"large\"\n                                          style={{ width: \"100%\" }}\n                                          options={mergedOptions}\n                                          className={inputAntdSelectClassName}\n                                          showSearch\n                                          filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                          }\n                                        />\n                                      );\n                                    }}\n                                  />\n\n              \n              {errors.PDDepartmentId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDDepartmentId.message}\n                </p>\n              )}\n            </div>\n            {category === \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Employe <span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      directorId: \"\",\n                      companyId: companyId,\n                      branchId: branchId,\n                      departmentId: departmentId,\n                      text: \"\",\n                      sort: true,\n                      status: \"\",\n                      isPagination: false,\n                    };\n                    dispatch(employeSearch(reqPayload));\n                  }}\n                  {...register(\"employeId\", {\n                    required: \"Employe is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.employeId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  showSearch\n                  filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                >\n                  <option className=\"\" value=\"\">\n                    Select Employe\n                  </option>\n                  {employeList?.map((element) => (\n                    <option value={element?._id}>{element?.fullName}</option>\n                  ))}\n                </select>\n                {errors.employeId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.employeId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Contact Person <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                onFocus={() => {\n                  const reqPayload = {\n                    directorId: \"\",\n                    companyId: companyId,\n                    branchId: branchId,\n                    \"text\": \"\",\n                    \"sort\": true,\n                    \"status\": \"\",\n                    \"isPagination\": false,\n                  }\n                  dispatch(employeSearch(reqPayload))\n                }}\n                {...register(\"contactPersonId\", {\n                  required: \"Person is required\",\n                })}\n                className={` ${inputClassName} ${errors.contactPersonId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Person\n                </option>\n                {employeList?.map((element) => (\n                  <option value={element?._id}>\n                    {element?.fullName}\n                  </option>\n                ))}\n              </select> */}\n              {/* <Controller\n                control={control}\n                name=\"contactPersonId\"\n                rules={{ required: \"Contact is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={` ${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    onFocus={() => {\n                      if (!selectedDepartmentId) return;\n                      const reqPayload = {\n                        directorId: \"\",\n                        companyId: companyId,\n                        branchId: branchId,\n                        departmentId: selectedDepartmentId,\n                        text: \"\",\n                        sort: true,\n                        status: \"\",\n                        isPagination: false,\n                      };\n                      dispatch(employeSearch(reqPayload));\n                    }}\n                    placeholder=\"Select Person\"\n                  >\n                    <Select.Option className=\"\" value=\"\">\n                      Select Person\n                    </Select.Option>\n                    {employeeLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (employeList?.map((element) => (\n                      <Select.Option value={element?._id}>\n                        {element?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              /> */}\n\n               <Controller\n                                    name=\"contactPersonId\"\n                                    control={control}\n                                    rules={{ required: \"At least one Contact Person is required\" }}\n                                    render={({ field }) => {\n                                      const handleChange = (selected) => {\n                                        if (selected.includes(selectAllEmployeeValue)) {\n                                          // If \"Select All\" was selected\n                                          if (selectAllEmployeeValue) {\n                                            // Unselect all\n                                            field.onChange([]);\n                                            setSelectAllEmployeeActive(false);\n                                          } else {\n                                            // Select all actual options\n                                            field.onChange(allEmployeeOptionValues);\n                                            setSelectAllEmployeeActive(true);\n                                          }\n                                        } else {\n                                          field.onChange(selected);\n                                          setSelectAllEmployeeActive(selected.length === allEmployeeOptionValues.length);\n                                        }\n                                      };\n              \n                                      return (\n                                        <Select\n                                          mode=\"multiple\"\n                                          placeholder=\"Assign To\"\n                                          value={field.value || []}\n                                          onChange={handleChange}\n                                          onFocus={handleEmployeeFocus}\n                                          size=\"large\"\n                                          style={{ width: \"100%\" }}\n                                          options={mergedEmployeeOptions||[]}\n                                          className={inputAntdSelectClassName}\n                                          showSearch\n                                          filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                          }\n                                        />\n                                      );\n                                    }}\n                                  />\n              {errors.contactPersonId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.contactPersonId.message}\n                </p>\n              )}\n            </div>\n\n\n            <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Start Time <span className=\"text-red-600\">*</span>\n              </label>\n             \n              <Controller\n                name=\"startTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"Start Time  is required\",\n                }}\n                format=\"DD/MM/YYYY HH:mm\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY HH:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.startTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.startTime.message}\n                </p>\n              )}\n            </div>\n\n             <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                End Time <span className=\"text-red-600\">*</span>\n              </label>\n             \n              <Controller\n                name=\"endTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"ENd Time  is required\",\n                }}\n                format=\"DD/MM/YYYY HH:mm\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY HH:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.endTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.endTime.message}\n                </p>\n              )}\n            </div>\n\n\n             <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n             \n              <Controller\n                name=\"date\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"ENd Time  is required\",\n                }}\n                format=\"DD/MM/YYYY\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                                            field={field}\n                                            errors={errors}\n                                            disabledDate={(current) => {\n                                              return (\n                                                current &&\n                                                current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                                              );\n                                            }}\n                                          />\n                )}\n              />\n\n              {errors.endTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.endTime.message}\n                </p>\n              )}\n            </div>\n\n            {category !== \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Number Of Person <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"numberOfPerson\", {\n                    required: \"Number Of Person is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.numberOfPerson\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Number Of Person\"\n                />\n                {errors.numberOfPerson && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.numberOfPerson.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {/* <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Reason <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"reason\", {\n                  required: \"Reason is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${\n                  errors.reason\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                }`}\n                placeholder=\"Enter Reason\"\n              />\n              {errors.designationName && (\n                <p className=\"text-red-500 text-sm\">{errors.reason.message}</p>\n              )}\n            </div> */}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Reason <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                control={control}\n                name=\"reason\"\n                rules={{ required: \"reason is required\" }}\n                // render={({ field }) => (\n                //   <Select\n                //     {...field}\n                //     defaultValue={\"\"}\n                //     className={` ${inputAntdSelectClassName} `}\n                //     showSearch\n                //     filterOption={(input, option) =>\n                //       String(option?.children).toLowerCase().includes(input.toLowerCase())\n                //     }\n                //   >\n                //     <Select.Option className=\"\" value=\"\">\n                //       Select reason\n                //     </Select.Option>\n                //     {VisitReasonList?.map((element, index) => {\n                //       return (\n                //         <Select.Option key={index} value={element?._id}>\n                //           {element?.title}\n                //         </Select.Option>\n                //       );\n                //     })}\n                //   </Select>\n                // )}\n\n                 render={({ field }) => (\n                              <AutoComplete\n                                className=\"w-full\"\n                                {...field}\n                                onChange={(value) => {\n      \n                                  field.onChange(value);\n                                }}\n                                options={sortByPropertyAlphabetically(VisitReasonList)?.map((type) => ({\n                                  value: type?.title  ,\n                                }))}\n                                notFoundContent={<ListLoader/>}\n                              >\n                                <input\n                                  placeholder=\"Enter Country\"\n    \n                                  // onFocus={() => {\n                                  //   dispatch(\n                                  //     countrySearch({\n                                  //       isPagination: false,\n                                  //       text: \"\",\n                                  //       sort: true,\n                                  //       status: true,\n                                  //     })\n                                  //   );\n                                  // }}\n                                  className={`${inputClassName}`\n                                  }\n                                />\n                              </AutoComplete>\n                            )}\n              />\n              {errors[`reason`] && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors[`reason`].message}\n                </p>\n              )}\n            </div>\n            {category === \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  KM <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"kilometer\", {\n                    required: \"Number kilometer is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.kilometer\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Number kilometer\"\n                />\n                {errors.designationName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.kilometer.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {category === \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Date <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"date\"\n                  min={new Date().toISOString().split(\"T\")[0]}\n                  {...register(\"date\", {\n                    required: \"Date is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.date\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Date of Birth\"\n                />\n                {errors.date && (\n                  <p className=\"text-red-500 text-sm\">{errors.date.message}</p>\n                )}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 md:mt-4\">\n            <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Address{\" \"}\n                {category !== \"general\" && (\n                  <span className=\"text-red-600\">*</span>\n                )}\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDAddress\", {\n                  required:\n                    category !== \"general\" ? \"Address is required\" : false,\n                })}\n                className={`${inputClassName} ${errors.PDAddress\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Address \"\n              />\n              {errors.PDAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDAddress.message}\n                </p>\n              )}\n            </div>\n          </div>\n       \n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 \">\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  Code <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDMobileCode\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker field={field} errors={errors} />\n                  )}\n                />\n\n           \n                {errors[`PDMobileCode`] && (\n                  <p className={`${inputerrorClassNameAutoComplete}`}>\n                    {errors[`PDMobileCode`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`PDMobileNo`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`PDMobileNo`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`PDMobileNo`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`PDMobileNo`].message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={visitorLoading}\n              className={`${visitorLoading ? \"bg-gray-400\" : \"bg-header\"\n                } text-white p-2 px-4 rounded mt-3`}\n            >\n              {visitorLoading ? <Loader /> : \"Submit\"}\n            </button>\n          </div>\n        </form>\n      </div >\n    </GlobalLayout >\n  );\n}\nexport default GeneralCreateVisitor;"],"names":["register","handleSubmit","setValue","getValues","unregister","watch","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","clientIdEnc","useParams","companyList","companyListLoading","decrypt","useSelector","state","company","countryListData","country","stateListData","states","cityListData","city","employeList","loading","employeeLoading","employe","clientList","client","departmentListData","depLoading","department","navigate","useNavigate","dispatch","useDispatch","branchList","branchListloading","branch","VisitReasonList","visitReasonLoading","visitReason","clientDepartments","setClientDepartments","useState","selectedDepartmentId","setSelectedDepartmentId","selectedCategory","setSelectedCategory","companyId","useWatch","name","defaultValue","branchId","PrintPincode","departmentId","departmentIds","category","clientData","setClientData","useEffect","VisitReasonTypeSearch","directorId","text","sort","status","isPagination","_filteredClient$addre","_filteredClient$addre2","_filteredClient$addre3","_filteredClient$addre4","_filteredClient$addre5","_filteredClient$addre6","_filteredClient$addre7","_filteredClient$addre8","_filteredClient$addre9","_filteredClient$addre0","_filteredClient$mobil","_filteredClient$mobil2","filteredClient","find","data","_id","addresses","primary","street","pinCode","mobile","code","number","companySearch","branchSearch","deptSearch","length","test","getLocationDataByPincode","then","catch","error","console","JSON","parse","localStorage","getItem","concat","domainName","visitorLoading","visitor","options","setOptions","employeeOptions","setEmployeeOptions","employeeSelectedOption","setEmployeeSelectedOption","selectAllActive","setSelectAllActive","selectAllEmployeeActive","setSelectAllEmployeeActive","allOptionValues","map","option","value","allEmployeeOptionValues","selectAllValue","selectAllEmployeeValue","mergedOptions","label","mergedEmployeeOptions","Array","isArray","handleFocus","dep","_dep$payload","_dep$payload$data","_dep$payload$data$doc","list","payload","docs","element","_element$name","searchText","toLowerCase","handleEmployeeFocus","reqPayload","employeSearch","empResponse","_empResponse$payload","_empResponse$payload$","_empResponse$payload$2","_element$fullName","fullName","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_data$PDAddress","_data$PDMobileNo","_data$PDMobileCode","finalPayload","PDDepartmentId","visitorName","employeIds","contactPersonId","reason","numberOfPerson","Number","clientId","employeId","timeDurationStart","startTime","endTime","date","address","PDAddress","PDMobileNo","PDMobileCode","createGeneralVisitor","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","String","includes","onFocus","Option","disabled","ListLoader","type","message","_ref2","inputClassName","placeholder","_ref3","mode","onChange","selected","size","style","width","_ref4","showTime","format","_ref5","CustomDatePicker","disabledDate","current","isBefore","dayjs","endOf","_ref6","_ref7","_ref8","_sortByPropertyAlphab","AutoComplete","sortByPropertyAlphabetically","title","notFoundContent","kilometer","designationName","min","Date","toISOString","split","_ref9","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","maxLength","onInput","e","target","slice","Loader"],"sourceRoot":""}