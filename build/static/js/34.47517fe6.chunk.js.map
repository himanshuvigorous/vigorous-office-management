{"version":3,"file":"static/js/34.47517fe6.chunk.js","mappings":"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","sources":["pages/client/clientNews/CreateClientNews.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { createClientNews } from \"../clientNews/clientNewsFeatures/_client_news_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nfunction CreateClientNews() {\n  const { loading: clientNewsLoading } = useSelector(state => state.clientNews);\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (companyId && userType === \"company\" || userType === \"admin\") {\n      dispatch(\n        directorSearch({\n          text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n        })\n      );\n    }\n  }, [companyId]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      \"directorId\": \"\",\n      title: data?.title,\n    };\n    dispatch(createClientNews(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((type) => (\n                    <option key={type?._id} value={type?._id}>\n                      {type?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDBranchId\"\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.title\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.title.message}\n                </p>\n              )}\n            </div>\n\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={clientNewsLoading}\n              className={`${clientNewsLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {clientNewsLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateClientNews\n"],"names":["loading","clientNewsLoading","useSelector","state","clientNews","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","companySearch","text","sort","status","isPagination","branchSearch","_id","directorSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","title","createClientNews","then","error","inputLabelClassName","Controller","rules","required","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","Loader","sortByPropertyAlphabetically","map","type","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab2","PDBranchId","inputClassName","placeholder"],"sourceRoot":""}