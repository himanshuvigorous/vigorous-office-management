{"version":3,"file":"static/js/2999.cd65e1bb.chunk.js","mappings":"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","sources":["pages/global/other/Industry/EditIndustry.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport { getIndustryByIdFunc, updateIndustryFunc } from \"./IndustryFeature/_industry_reducers\";\nimport { inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\n\n\n\nfunction EditIndustry() {\n  const {  loading:industryLoading } = useSelector(state => state.industry)\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { industryIdEnc } = useParams();\n  const industryId = decrypt(industryIdEnc);\n\n  const { industryByIdData } = useSelector(state => state.industry)\n  useEffect(() => {\n    let reqData = {\n      _id: industryId,\n    };\n    dispatch(getIndustryByIdFunc(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (industryByIdData && industryByIdData?.data) {\n\n      setValue(\"industryName\", industryByIdData?.data?.name);\n      setValue(\"status\", industryByIdData?.data?.status);\n\n    }\n\n  }, [industryByIdData]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: industryId,\n      \"name\": data?.industryName,\n      \"status\": data?.status,\n    };\n    dispatch(updateIndustryFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-0 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Industry Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"industryName\", {\n                  required: \"Industry Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.industryName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Industry Name\"\n              />\n              {errors.industryName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.industryName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n          <button\n              type=\"submit\"\n              disabled={industryLoading}\n              className={`${industryLoading ? 'bg-gray-400': 'bg-header' } text-white p-2 px-4 mt-3 rounded`}\n            >\n            {industryLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default EditIndustry;"],"names":["loading","industryLoading","useSelector","state","industry","register","handleSubmit","setValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","industryIdEnc","useParams","industryId","decrypt","industryByIdData","useEffect","reqData","_id","getIndustryByIdFunc","_industryByIdData$dat","_industryByIdData$dat2","data","name","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","finalPayload","industryName","updateIndustryFunc","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","Controller","render","_ref","field","Select","inputAntdSelectClassName","Option","value","disabled","Loader"],"sourceRoot":""}