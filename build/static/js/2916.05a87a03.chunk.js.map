{"version":3,"file":"static/js/2916.05a87a03.chunk.js","mappings":"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","sources":["pages/financeManagement/EmployeeAdvanceListandLedger/CreateEmployeLedger.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { customDayjs, domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, inputLabelClassNameReactSelect, optionLabelForBankSlect } from \"../../../constents/global\";\nimport { branchSearch, getBranchDetails } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport ReactSelect from \"react-select\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport { Radio, Select } from \"antd\";\nimport { vendorSearch } from \"../vendor/vendorFeatures/_vendor_reducers\";\nimport dayjs from \"dayjs\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { createemployeLedger } from \"./employeLedgerFeature/_employeLedger_reducers\";\n\n\nconst CreateEmployeLedger = () => {\n  const {\n\n    loading: vendorAdvanceLoading,\n  } = useSelector((state) => state.EmployeLedger);\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    defaultValues: {\n      typeSelection: \"Vendor\",\n    }\n  });\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { employeList, loading: employeeListLoading } = useSelector((state) => state.employe);\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading, branchDetailsData } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n  const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n  const { vendorDataList, loading: vendorListLoading } = useSelector(state => state.vendor)\n  const [isPreview, setIsPreview] = useState(false);\n  const [attachment, setAttachments] = useState([]);\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"employeId\": data?.employee?.value,\n      \"vendorId\": data?.vendorId,\n      \"advanceType\": data?.typeSelection,\n      \"amount\": + data?.amount,\n      \"date\": customDayjs(data?.paymentDate),\n      \"naration\": data?.naration,\n      \"attachment\": attachment,\n      \"paidToEmployeId\": data?.paymentMode === \"cash\" ? data?.employeeId?.value : null,\n      \"bankAccId\": data?.paymentMode !== \"cash\" ? data?.bankId : null,\n      \"type\": data?.paymentMode,\n      \"chequeNo\": data?.paymentMode !== \"cheque\" ? data?.chequeNo : null,\n      \"transactionNo\": data?.paymentMode === \"bank\" ? data?.transactionNo : null,\n\n    };\n    dispatch(createemployeLedger(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n\n\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      // Reset the input value to allow selecting the same file again if needed\n      e.target.value = null;\n      const reqData = {\n        filePath: file,\n        isVideo: false,\n        isMultiple: false, // Single file selection\n      };\n      dispatch(fileUploadFunc(reqData)).then((res) => {\n        if (res?.payload?.data) {\n          setAttachments(prev => [...prev, res.payload?.data]);\n        }\n      });\n    }\n  };\n  const handleRemoveFile = (index) => {\n    setAttachments(prev => {\n      const updatedAttachments = prev.filter((_, i) => i !== index);\n      return updatedAttachments\n    });\n  };\n\n\n  const PDCompanyId = useWatch({\n    name: 'PDCompanyId',\n    control,\n    defaultValue: ''\n  })\n\n  const PDBranchId = useWatch({\n    name: 'PDBranchId',\n    control,\n    defaultValue: ''\n  })\n\n  useEffect(() => {\n    setValue('typeSelection', \"Employe\")\n  }, [])\n\n\n  useEffect(() => {\n    dispatch(employeSearch({\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isPagination: false,\n      departmentId: '',\n      designationId: '',\n      companyId: userInfoglobal?.userType === \"admin\" ? PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n\n    }))\n  }, [PDBranchId])\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          {/* <div className=\"col-span-2\">\n\n            <Controller\n              name=\"typeSelection\"\n              control={control}\n              rules={{ required: \"Advance for is required\" }}\n              render={({ field }) => (\n                <Radio.Group\n                  {...field}\n                  onChange={(e) => {\n                    field.onChange(e)\n                  }}\n                  optionType=\"button\"\n                  buttonStyle=\"solid\"\n                  block\n                  defaultValue={\"Vendor\"}\n                  className={`  ${errors.clientSelection ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <Radio value=\"Vendor\">Vendor</Radio>\n                  <Radio value=\"Employe\">Employe</Radio>\n                </Radio.Group>\n              )}\n            />\n            {errors.clientSelection && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.clientSelection.message}\n              </p>\n            )}\n          </div> */}\n          <div className=\"grid grid-cols-1 md:grid-cols-1 md:gap-8 md:my-1 px-3 md:mt-4\">\n\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"PDBranchId\"\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n     \n            {useWatch({\n              control,\n              name: \"typeSelection\"\n            }) === \"Employe\" &&\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>Employee</label>\n                <Controller\n                  name=\"employee\"\n                  control={control}\n                  rules={{ required: \"Employee is required\" }}\n                  render={({ field }) => (\n                    <ReactSelect\n                      {...field}\n                      onFocus={() => {\n                        const reqPayload = {\n                          text: \"\",\n                          status: true,\n                          sort: true,\n                          isTL: \"\",\n                          isHR: \"\",\n                          isPagination: false,\n                          departmentId: '',\n                          designationId: '',\n                          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n                          branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n                        };\n                        dispatch(employeSearch(reqPayload));\n                      }}\n                      options={employeList?.map((employee) => ({\n                        value: employee?._id,\n                        label: employee?.fullName,\n                      }))}\n                      classNamePrefix=\"react-select\"\n                      className={`${inputLabelClassNameReactSelect} ${errors.employee ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      placeholder=\"Select Employee\"\n                    />\n                  )}\n                />\n                {errors.employee && <p className=\"text-red-500 text-sm\">{errors.employee.message}</p>}\n              </div>\n            }\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Amount<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                 step=\"0.01\"\n                {...register(\"amount\", {\n                  required: \"Amount is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.amount ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.amount.message}\n                </p>\n              )}\n            </div>\n\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>Bill Date</label>\n              <Controller\n                name=\"date\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isAfter(dayjs().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.date && <p className=\"text-red-500 text-sm\">Date is required</p>}\n            </div> */}\n\n\n            <div className=\"py-2\">\n              <div className=\"grid grid-cols-1 md:grid-cols-1 md:gap-2 md:my-1 px-3 md:mt-2\">\n                <div className=\"\">\n                  <div className=\"flex items-center gap-4\">\n                    <label className=\"your-input-label-class\">\n                      <Controller\n                        name=\"paymentMode\"\n                        control={control}\n                        defaultValue=\"cash\"\n                        rules={{ required: \"Type is required\" }}\n                        render={({ field }) => (\n                          <Radio.Group defaultValue={\"cash\"} {...field}>\n                            <Radio className={`${inputLabelClassName}`} value=\"cash\">Cash</Radio>\n                            {/* <Radio className={`${inputLabelClassName}`} value=\"cheque\">Cheque</Radio> */}\n                            <Radio className={`${inputLabelClassName}`} value=\"bank\">Bank</Radio>\n                          </Radio.Group>\n                        )}\n                      />\n                    </label>\n                    {errors.type && <span className=\"error-message\">{errors.type.message}</span>}\n                  </div>\n                  {errors.type && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.type.message}\n                    </p>\n                  )}\n                </div>\n                {watch(\"paymentMode\") !== \"cash\" && <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Sender Bank<span className=\"text-red-600\">*</span>\n                  </label>\n\n                  <Controller\n                    control={control}\n                    name=\"bankId\"\n                    rules={{ required: \"bankId is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        defaultValue={\"\"}\n                        className={`${inputAntdSelectClassName} `}\n                        onFocus={() => {\n                          dispatch(getBranchDetails({\n                            _id: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n                          }))\n                        }}\n                      >\n                        <Select.Option value=\"\">Select Bank</Select.Option>\n                        {\n                          branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                          branchDetailsData.data.bankData.map((type) => (\n                            <Select.Option key={type._id} value={type._id}>\n                               {optionLabelForBankSlect(type)}\n                              {/* {`${type.bankName} (${type.branchName})`} */}\n                            </Select.Option>\n                          ))\n                        }         </Select>\n                    )}\n                  />\n\n                  {errors.bankId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.bankId.message}\n                    </p>\n                  )}\n                </div>}\n                {watch(\"paymentMode\") === \"cash\" && <div className=\"w-full\">\n                  <label className={`${inputLabelClassName}`}>Employee</label>\n                  <Controller\n                    name=\"employeeId\"\n                    control={control}\n                    rules={{ required: \"Employee is required\" }}\n                    render={({ field }) => (\n                      <ReactSelect\n                        {...field}\n                        options={employeList?.map((employee) => ({\n                          value: employee?._id,\n                          label: employee?.fullName,\n                        }))}\n                        classNamePrefix=\"react-select\"\n                        className={`${inputLabelClassNameReactSelect} ${errors.employeeId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        placeholder=\"Select Employee\"\n                      />\n                    )}\n                  />\n                  {errors.employeeId && <p className=\"text-red-500 text-sm\">{errors.employeeId.message}</p>}\n                </div>}\n                {watch(\"paymentMode\") === \"cheque\" && <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Cheque No\n                    <span className=\"text-red-600\">*</span>\n                  </label>\n                  <input\n                    type=\"\"\n                    {...register(\"chequeNo\", {\n                      required: \"chequeNo is required\",\n\n                    })}\n                    className={` ${inputClassName} ${errors.chequeNo ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                    placeholder=\"Enter Cheque no\"\n                  />\n                  {errors.chequeNo && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.chequeNo.message}\n                    </p>\n                  )}\n                </div>}\n                {watch(\"paymentMode\") === \"bank\" && <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Transaction No\n                    <span className=\"text-red-600\">*</span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    {...register(\"transactionNo\", {\n                      required: \"transaction No is required\",\n\n                    })}\n                    className={` ${inputClassName} ${errors.transactionNo ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                    placeholder=\"Enter transaction no\"\n                  />\n                  {errors.transactionNo && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.transactionNo.message}\n                    </p>\n                  )}\n                </div>}\n              </div>\n              <div className=\"px-3\">\n\n                <div>\n                  <label className={`${inputLabelClassName}`}>Payment Date</label>\n                  <Controller\n                    name=\"paymentDate\"\n                    control={control}\n                    render={({ field }) => (\n                      <CustomDatePicker field={field} disabledDate={(current) => current && current > dayjs().endOf(\"day\")} errors={errors} />\n                    )}\n                  />\n                  {errors.date && <p className=\"text-red-500 text-sm\">Date is required</p>}\n                </div>\n\n\n\n\n              </div>\n            </div>\n\n\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration<span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.naration ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div className=\"border-t pt-4 mt-6\">\n              <div className=\"font-medium mb-2\">Attachments:</div>\n              {!isPreview ? (\n                <div className=\"space-y-4\">\n                  <input\n                    type=\"file\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                  />\n                  <label\n                    htmlFor=\"file-upload\"\n                    className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white cursor-pointer\"\n                  >\n                    <FaRegFile className=\"mr-2\" /> Add Attachments\n                  </label>\n\n                  <div className=\"space-y-2\">\n                    {attachment?.map((file, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                        <a\n                          href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                          className=\"flex items-center space-x-2\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          <FaRegFile className=\"text-gray-500\" />\n                          <span className=\"text-sm text-gray-600\">{file}</span>\n                        </a>\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveFile(index)}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          <FaTimes />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {/* Attachments preview logic */}\n                </div>\n              )}\n            </div>\n\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={vendorAdvanceLoading}\n              className={`${vendorAdvanceLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {vendorAdvanceLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateEmployeLedger;\n"],"names":["CreateEmployeLedger","loading","vendorAdvanceLoading","useSelector","state","EmployeLedger","register","handleSubmit","control","watch","formState","errors","setValue","useForm","defaultValues","typeSelection","dispatch","useDispatch","navigate","useNavigate","employeList","employeeListLoading","employe","companyList","companyListLoading","company","branchList","branchListloading","branchDetailsData","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","BranchId","vendorDataList","vendorListLoading","vendor","isPreview","setIsPreview","useState","attachment","setAttachments","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","PDCompanyId","PDBranchId","employeSearch","isTL","isHR","departmentId","designationId","branchId","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$employee","_data$employeeId","finalPayload","directorId","employee","value","vendorId","amount","customDayjs","paymentDate","naration","paymentMode","employeeId","bankId","chequeNo","transactionNo","createemployeLedger","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","disabled","ListLoader","map","type","fullName","message","_ref2","_ref3","ReactSelect","onFocus","reqPayload","options","label","classNamePrefix","inputLabelClassNameReactSelect","placeholder","step","inputClassName","_ref4","Radio","_ref5","_branchDetailsData$da","_branchDetailsData$da2","getBranchDetails","bankData","length","optionLabelForBankSlect","_ref6","_ref7","CustomDatePicker","disabledDate","current","dayjs","endOf","date","onChange","e","file","target","files","reqData","filePath","isVideo","isMultiple","fileUploadFunc","res","_res$payload","payload","prev","_res$payload2","id","htmlFor","FaRegFile","index","href","process","rel","onClick","filter","_","i","handleRemoveFile","FaTimes","Loader"],"sourceRoot":""}