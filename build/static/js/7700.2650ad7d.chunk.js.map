{"version":3,"file":"static/js/7700.2650ad7d.chunk.js","mappings":"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","sources":["pages/client/digitalSignature/UpdateDigitalSign.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport getUserIds from '../../../constents/getUserIds';\nimport moment from \"moment\";\nimport { inputClassName, inputLabelClassName, domainName } from \"../../../constents/global\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { getDigitalSignDetails, updateDigitalSign } from \"../digitalSignature/digitalSignatureFeatures/_digital_sign_reducers\";\n\n\nfunction UpdateDigitalSign() {\n  const { register, handleSubmit, setValue, control, formState: { errors }, } = useForm();\n  const { userCompanyId, userDirectorId, userBranchId, userType } = getUserIds();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { digitalSignIdEnc } = useParams();\n  const digitalSignId = decrypt(digitalSignIdEnc);\n\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const { digitalSignDetails } = useSelector((state) => state.digitalSign);\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination:false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    let reqData = {\n      _id: digitalSignId,\n    };\n    dispatch(getDigitalSignDetails(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (digitalSignDetails) {\n      setValue(\"PDCompanyId\", digitalSignDetails?.companyId);\n      setValue(\"PDBranchId\", digitalSignDetails?.branchId);\n      setValue(\"name\", digitalSignDetails?.name);\n      setValue(\"startDate\", moment(digitalSignDetails?.startDate).format(\"YYYY-MM-DD\"));\n      setValue(\"expiryDate\", moment(digitalSignDetails?.expiryDate).format(\"YYYY-MM-DD\"));\n      setValue(\"status\", digitalSignDetails?.status);\n    }\n  }, [digitalSignDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: digitalSignId,\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      directorId: \"\",\n      clientId: \"\",\n      name: data?.name,\n      status: data?.status,\n      startDate: data?.startDate,\n      expiryDate: data?.expiryDate,\n    };\n    dispatch(updateDigitalSign(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(\"/admin/digital-sign\");\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select>\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((type) => (\n                    <option key={type?._id} value={type?._id}>\n                      {type?.fullName}\n                    </option>\n                  ))}\n                </select>\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: \"Title is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.name\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Title\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.name.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Start Date <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"startDate\")}\n                type=\"date\"\n                className={`${inputClassName} ${errors.recurrence?.startDate ? \"border-[1px] \" : \"border-gray-300\"}`}\n              />\n              {errors.recurrence?.startDate && (\n                <p className=\"text-red-500 text-sm\">{errors.startDate.message}</p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Expiry Date <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"expiryDate\")}\n                type=\"date\"\n                className={`${inputClassName} ${errors.recurrence?.expiryDate ? \"border-[1px] \" : \"border-gray-300\"}`}\n              />\n              {errors.recurrence?.expiryDate && (\n                <p className=\"text-red-500 text-sm\">{errors.expiryDate.message}</p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n              >\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default UpdateDigitalSign;"],"names":["_errors$recurrence","_errors$recurrence2","_errors$recurrence3","_errors$recurrence4","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","digitalSignIdEnc","useParams","digitalSignId","decrypt","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","useSelector","state","company","branchList","branch","digitalSignDetails","digitalSign","companyId","useWatch","name","defaultValue","branchId","useEffect","branchSearch","text","sort","status","isPagination","_id","companySearch","reqData","getDigitalSignDetails","moment","startDate","format","expiryDate","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","directorId","clientId","updateDigitalSign","then","error","inputLabelClassName","_objectSpread","required","inputClassName","PDCompanyId","value","map","type","fullName","message","PDBranchId","placeholder","recurrence"],"sourceRoot":""}