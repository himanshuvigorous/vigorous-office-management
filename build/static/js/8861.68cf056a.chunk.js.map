{"version":3,"file":"static/js/8861.68cf056a.chunk.js","mappings":"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","sources":["pages/visitorManagement/client_visit/UpdateClientVisitor.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport {\n  getLocationDataByPincode,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  inputerrorClassNameAutoComplete,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport Loader from \"../../../global_layouts/Loader/Loader\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport dayjs from \"dayjs\";\nimport { VisitReasonTypeSearch } from \"../visitreason/visitReasonFeatures/_visitReason_type_reducers\";\nimport getUserIds from \"../../../constents/getUserIds\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { getGeneralVisitorDetails, resetState, updateGeneralVisitor } from \"../visitor/visitorFeatures/_visitor_reducers\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport { getClientDetails } from \"../../userManagement/userFeatures/_user_reducers\";\nimport Loader2 from \"../../../global_layouts/Loader/Loader2\";\n\nfunction UpdateClientVisitor() {\n  const { loading: visitorLoading } = useSelector(state => state.visitor);\n  const [clientDepartments, setClientDepartments] = useState([]);\n  const [selectedDepartmentId, setSelectedDepartmentId] = useState(\"\");\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const [pageLoading, setPageLoading] = useState(false);\n  const [pageLoading2, setPageLoading2] = useState(false);\n  const [pageLoading3, setPageLoading3] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { visitorIdEnc } = useParams();\n  const visitorId = decrypt(visitorIdEnc);\n    const { departmentListData, loading: depLoading } = useSelector((state) => state.department);\n  const { generalVisitorDetails } = useSelector((state) => state.visitor);\n  const { employeList } = useSelector((state) => state.employe);\n  const {  clientList ,loading: clientLoading} = useSelector((state) => state.client);\n  const { VisitReasonList } = useSelector((state) => state.visitReason);\n  const departmentIds = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: [],\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: \"\",\n  });\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPinCode\",\n    defaultValue: \"\",\n  });\n\n  const category = useWatch({\n    control,\n    name: \"category\",\n    defaultValue: \"\",\n  });\n\n useEffect(() => {\n  const fetchClientData = async () => {\n    // Early return if conditions aren't met\n    if (!generalVisitorDetails || !(generalVisitorDetails?.category === 'client' || category === 'client')) {\n      return;\n    }\n\n    setPageLoading3(true);\n    \n    try {\n      const result = await dispatch(\n        clientSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: generalVisitorDetails?.companyId,\n          branchId: generalVisitorDetails?.branchId,\n        })\n      );\n\n      if (!result?.error) {\n        setValue(\"clientId\", generalVisitorDetails?.clientId);\n      }\n    } catch (error) {\n      console.error(\"Error fetching client data:\", error);\n      // Optionally handle the error (show toast, etc.)\n    } finally {\n      setPageLoading3(false);\n    }\n  };\n\n  fetchClientData();\n}, [generalVisitorDetails, category]);\n\n\n  useEffect(() => {\n    if (\n      PrintPincode &&\n      PrintPincode.length >= 4 &&\n      PrintPincode.length <= 6 &&\n      /^\\d{6}$/.test(PrintPincode)\n    ) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data.city);\n            setValue(\"PDState\", data.state);\n            setValue(\"PDCountry\", data.country);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setPageLoading(true)\n        const reqData = {\n          _id: visitorId,\n        };\n        await dispatch(getGeneralVisitorDetails(reqData))\n         setPageLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n\n    };\n\n    fetchData();\n    return ()=>{\n      dispatch(resetState())\n    }\n  }, []);\n\nuseEffect(() => {\n  const fetchVisitorData = async () => {\n    if (!generalVisitorDetails) return;\n     setPageLoading2(true)\n    try {\n      // Fetch department data\n      const departmentResult = await dispatch(\n        deptSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: generalVisitorDetails?.companyId,\n          branchId: generalVisitorDetails?.branchId,\n        })\n      );\n\n      if (departmentResult?.error) {\n        throw new Error('Failed to fetch department data');\n      }\n\n      // Set department value\n      if (Array.isArray(generalVisitorDetails?.departmentIds) && generalVisitorDetails.departmentIds.length > 0) {\n        setValue(\"PDDepartmentId\", generalVisitorDetails.departmentIds[0]);\n      }\n\n      // Fetch employee data\n      const employeeResult = await dispatch(\n        employeSearch({\n          directorId: \"\",\n          companyId: generalVisitorDetails?.companyId,\n          branchId: generalVisitorDetails?.branchId,\n          departmentId: generalVisitorDetails?.departmentId,\n          text: \"\",\n          sort: true,\n          status: \"\",\n          isPagination: false,\n        })\n      );\n\n      if (employeeResult?.error) {\n        throw new Error('Failed to fetch employee data');\n      }\n\n      // Set basic form values\n      setValue(\"designationName\", generalVisitorDetails?.name);\n      setValue(\"companyId\", generalVisitorDetails?.companyId);\n      setValue(\"branchId\", generalVisitorDetails?.branchId);\n\n      // Set contact person if available\n      if (Array.isArray(generalVisitorDetails?.employeIds) && generalVisitorDetails.employeIds.length > 0) {\n        setValue(\"contactPersonId\", generalVisitorDetails.employeIds[0]);\n      }\n\n      setValue(\"employeId\", generalVisitorDetails?.employeId);\n\n      // Fetch visit reason in parallel with other operations\n      const visitReasonPromise = dispatch(\n        VisitReasonTypeSearch({\n          companyId: generalVisitorDetails?.companyId,\n          directorId: \"\",\n          branchId: generalVisitorDetails?.branchId,\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false\n        })\n      );\n\n      // Set remaining form values\n      setValue(\"visitorName\", generalVisitorDetails?.name);\n      setValue(\"numberOfPerson\", generalVisitorDetails?.numberOfPerson);\n      setValue(\"status\", generalVisitorDetails?.status);\n      setValue(\"PDPinCode\", generalVisitorDetails?.address?.pinCode);\n      setValue(\"PDMobileCode\", generalVisitorDetails?.mobile?.code);\n      setValue(\"PDMobileNo\", generalVisitorDetails?.mobile?.number);\n      setValue(\"PDAddress\", generalVisitorDetails?.address?.street);\n      setValue(\"category\", generalVisitorDetails?.category);\n      setValue(\"kilometer\", generalVisitorDetails?.kilometer);\n      setValue(\"date\", dayjs(generalVisitorDetails?.date));\n      setValue(\"startTime\", dayjs(generalVisitorDetails?.timeDurationStart));\n      setValue(\"endTime\", dayjs(generalVisitorDetails?.timeDurationEnd));\n\n      // Wait for visit reason promise to resolve\n      const visitReasonResult = await visitReasonPromise;\n      if (!visitReasonResult?.error) {\n        setValue(\"reason\", generalVisitorDetails?.reason);\n      }\nsetPageLoading2(false)\n    } catch (error) {\n      console.error(\"Error loading visitor data:\", error);\n      // Handle error appropriately (show toast, etc.)\n    }\n  };\n\n  fetchVisitorData();\n\n}, [generalVisitorDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: visitorId,\n      companyId: generalVisitorDetails?.companyId,\n      directorId: \"\",\n      branchId: generalVisitorDetails?.branchId,\n      departmentIds: data?.PDDepartmentId ? [data?.PDDepartmentId] : [],\n      employeIds: data?.contactPersonId ? [data?.contactPersonId] : [],\n      name: data?.visitorName,\n      reason: data?.reason,\n      kilometer: data?.kilometer,\n      numberOfPerson: Number(data?.numberOfPerson),\n      clientId: category == \"client\" ? data?.clientId : null,\n      employeId: data?.employeId,\n      category: category,\n      timeDurationStart: data?.startTime,\n      \"timeDurationEnd\": data?.endTime,\n      date: data?.date,\n      address: {\n        street: data?.PDAddress ?? \"\",\n      },\n      mobile: {\n        number: data?.PDMobileNo ?? \"\",\n        code: data?.PDMobileCode ?? \"\",\n      },\n    };\n    dispatch(updateGeneralVisitor(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  const [options, setOptions] = useState([]);\n  const [employeeOptions, setEmployeeOptions] = useState([]);\n  const [selectAllActive, setSelectAllActive] = useState(false);\n  const [selectAllEmployeeActive, setSelectAllEmployeeActive] = useState(false);\n  const allOptionValues = options?.map((option) => option.value);\n  const allEmployeeOptionValues = (employeeOptions?.map((option) => option.value));\n\n  const selectAllValue = \"__all__\"; // Custom value for the \"Select All\" option\n  const selectAllEmployeeValue = \"__all__\"\n  const mergedOptions = [\n    {\n      label: \"Select All\",\n      value: selectAllValue,\n    },\n    ...options,\n  ];\n\n  const mergedEmployeeOptions = [\n    {\n      label: \"Select All\",\n      value: selectAllEmployeeValue,\n    },\n    ...(Array.isArray(employeeOptions) ? employeeOptions : []),\n  ];\nuseEffect(()=>{\n  const list = departmentListData?.map((element) => (\n        {\n          label: element?.name,\n          value: element?._id,\n          searchText: element?.name?.toLowerCase(),\n        }));\n      setOptions(list ?? []);\n},[departmentListData])\n\nuseEffect(()=>{\n    const list = employeList?.map((element) => ( {\n            label:element?.fullName,\n            value: element?._id,\n            searchText: element?.fullName?.toLowerCase(),\n          }));\n        setEmployeeOptions(list ?? []);\n},[employeList])\n\n \n\n\n\n  const handleEmployeeFocus = () => {\n    const reqPayload = {\n         companyId: generalVisitorDetails?.companyId,\n      directorId: \"\",\n      branchId: generalVisitorDetails?.branchId,\n      departmentId: departmentIds,\n      text: \"\",\n      sort: true,\n      status: \"\",\n      isPagination: false,\n      \"multipleDepartmentId\":[] ,\n    };\n    dispatch(employeSearch(reqPayload))\n  };\n\nconsole.log('loading' , pageLoading , pageLoading2 , pageLoading3);\n\n  return (\n    <GlobalLayout>\n    {(pageLoading || pageLoading2 || pageLoading3) ?  <Loader2 />   :  <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-5\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-4 md:my-2\">\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Category <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"category\"\n                rules={{ required: \"category is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={` ${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      field.onChange(value);\n\n                    }}\n                  >\n                    <Select.Option className=\"\" value=\"\">\n                      Select Category\n                    </Select.Option>\n                    <Select.Option value=\"general\">\n                      Employee Visitor\n                    </Select.Option>\n                    <Select.Option value=\"client\">\n                      client Visitor\n                    </Select.Option>\n                  </Select>\n                )}\n              />\n              {errors[`category`] && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors[`category`].message}\n                </p>\n              )}\n            </div>\n            {category == 'client' && <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Client <span className=\"text-red-600\">*</span>\n              </label>\n\n\n              <Controller\n                control={control}\n                name=\"clientId\"\n                rules={{ required: \"client is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={` ${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    onFocus={() => {\n\n                    }}\n                    onChange={async (value) => {\n                      field.onChange(value);\n                      const res = await dispatch(getClientDetails({ _id: value }));\n\n                      if (res?.payload?.data?.departmentData) {\n                        setClientDepartments(res.payload.data.departmentData);\n                      } else {\n                        setClientDepartments([]);\n                      }\n                    }}\n                  >\n                    <Select.Option className=\"\" value=\"\">\n                      Select Client\n                    </Select.Option>\n                    {clientLoading ? (\n                      <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option>\n                    ) : clientList?.map((element) => (\n                      <Select.Option value={element?._id}>\n                        {element?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.clientId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.clientId.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"visitorName\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.visitorName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.visitorName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.visitorName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Department <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"PDDepartmentId\"\n                control={control}\n                rules={{ required: \"At least one Department is required\" }}\n                render={({ field }) => {\n                  return (\n                    <Select\n                    {...field}\n                      placeholder=\"Assign To\"\n                      size=\"large\"\n                      style={{ width: \"100%\" }}\n                      options={mergedOptions}\n                      className='inputAntdMultipleSelectClassName'\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    />\n                  );\n                }}\n              />\n\n\n              {errors.PDDepartmentId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDDepartmentId.message}\n                </p>\n              )}\n            </div>\n            {category === \"employe\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Employe <span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      directorId: \"\",\n                      companyId: generalVisitorDetails?.companyId,\n                      branchId: generalVisitorDetails?.branchId,\n                      departmentId: departmentId,\n                      text: \"\",\n                      sort: true,\n                      status: \"\",\n                      isPagination: false,\n                    };\n                    dispatch(employeSearch(reqPayload));\n                  }}\n                  {...register(\"employeId\", {\n                    required: \"Employe is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.employeId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  showSearch\n                  filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                >\n                  <option className=\"\" value=\"\">\n                    Select Employe\n                  </option>\n                  {employeList?.map((element) => (\n                    <option value={element?._id}>{element?.fullName}</option>\n                  ))}\n                </select>\n                {errors.employeId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.employeId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Contact Person <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"contactPersonId\"\n                control={control}\n                rules={{ required: \"At least one Contact Person is required\" }}\n                render={({ field }) => {\n              \n                  return (\n                    <Select\n                    {...field}\n                      // mode=\"multiple\"\n                      placeholder=\"Assign To\"\n                      onFocus={handleEmployeeFocus}\n                      size=\"large\"\n                      style={{ width: \"100%\" }}\n                      options={mergedEmployeeOptions || []}\n                      className='inputAntdMultipleSelectClassName'\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    />\n                  );\n                }}\n              />\n              {errors.contactPersonId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.contactPersonId.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Start Time <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"startTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"Start Time  is required\",\n                }}\n                format=\"DD/MM/YYYY HH:mm\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY HH:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.startTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.startTime.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                End Time <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"endTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"ENd Time  is required\",\n                }}\n                format=\"DD/MM/YYYY HH:mm\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY HH:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.endTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.endTime.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"date\"\n                control={control}\n\n                rules={{\n                  required: \"date  is required\",\n                }}\n\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current &&\n                        current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.date.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Reason <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                control={control}\n                name=\"reason\"\n                rules={{ required: \"reason is required\" }}\n\n\n                render={({ field }) => (\n                  <AutoComplete\n                    className=\"w-full\"\n                    {...field}\n                    onChange={(value) => {\n\n                      field.onChange(value);\n                    }}\n                    options={sortByPropertyAlphabetically(VisitReasonList)?.map((type) => ({\n                      value: type?.title,\n                    }))}\n                    \n                  >\n                    <input\n                      placeholder=\"Enter Country\"\n\n\n                      className={`${inputClassName}`\n                      }\n                    />\n                  </AutoComplete>\n                )}\n              />\n              {errors[`reason`] && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors[`reason`].message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-2 my-4\">\n            <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Address{\" \"}\n                {category !== \"general\" && (\n                  <span className=\"text-red-600\">*</span>\n                )}\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDAddress\", {\n                  required:\n                    category !== \"general\" ? \"Address is required\" : false,\n                })}\n                className={`${inputClassName} ${errors.PDAddress\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Address \"\n              />\n              {errors.PDAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDAddress.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-4 my-3 \">\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  Code <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDMobileCode\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker field={field} errors={errors} />\n                  )}\n                />\n\n\n                {errors[`PDMobileCode`] && (\n                  <p className={`${inputerrorClassNameAutoComplete}`}>\n                    {errors[`PDMobileCode`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`PDMobileNo`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`PDMobileNo`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`PDMobileNo`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`PDMobileNo`].message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={visitorLoading}\n              className={`${visitorLoading ? \"bg-gray-400\" : \"bg-header\"\n                } text-white p-2 px-4 rounded mt-3`}\n            >\n              {visitorLoading ? <Loader /> : \"Submit\"}\n            </button>\n          </div>\n        </form>\n      </div >}\n    </GlobalLayout >\n  );\n}\n\nexport default UpdateClientVisitor;","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["loading","visitorLoading","useSelector","state","visitor","clientDepartments","setClientDepartments","useState","selectedDepartmentId","setSelectedDepartmentId","register","handleSubmit","setValue","control","formState","errors","useForm","pageLoading","setPageLoading","pageLoading2","setPageLoading2","pageLoading3","setPageLoading3","dispatch","useDispatch","navigate","useNavigate","visitorIdEnc","useParams","visitorId","decrypt","departmentListData","depLoading","department","generalVisitorDetails","employeList","employe","clientList","clientLoading","client","VisitReasonList","visitReason","departmentIds","useWatch","name","defaultValue","departmentId","PrintPincode","category","useEffect","async","result","clientSearch","text","sort","status","isPagination","companyId","branchId","error","clientId","console","fetchClientData","length","test","getLocationDataByPincode","then","data","city","country","catch","reqData","_id","getGeneralVisitorDetails","fetchData","resetState","_generalVisitorDetail","_generalVisitorDetail2","_generalVisitorDetail3","_generalVisitorDetail4","departmentResult","deptSearch","Error","Array","isArray","employeeResult","employeSearch","directorId","employeIds","employeId","visitReasonPromise","VisitReasonTypeSearch","numberOfPerson","address","pinCode","mobile","code","number","street","kilometer","dayjs","date","timeDurationStart","timeDurationEnd","visitReasonResult","reason","fetchVisitorData","options","setOptions","employeeOptions","setEmployeeOptions","selectAllActive","setSelectAllActive","selectAllEmployeeActive","setSelectAllEmployeeActive","mergedOptions","map","option","value","label","mergedEmployeeOptions","list","element","_element$name","searchText","toLowerCase","_element$fullName","fullName","handleEmployeeFocus","reqPayload","log","_jsx","GlobalLayout","children","Loader2","className","_jsxs","autoComplete","onSubmit","_data$PDAddress","_data$PDMobileNo","_data$PDMobileCode","finalPayload","PDDepartmentId","contactPersonId","visitorName","Number","startTime","endTime","PDAddress","PDMobileNo","PDMobileCode","updateGeneralVisitor","concat","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","String","includes","onChange","Option","message","_ref2","onFocus","_res$payload","_res$payload$data","res","getClientDetails","payload","departmentData","disabled","ListLoader","type","inputClassName","placeholder","_ref3","size","style","width","_ref4","showTime","format","_ref5","CustomDatePicker","disabledDate","current","isBefore","endOf","_ref6","_ref7","_ref8","_sortByPropertyAlphab","AutoComplete","sortByPropertyAlphabetically","title","_ref9","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","maxLength","onInput","e","target","slice","Loader","Spin"],"sourceRoot":""}