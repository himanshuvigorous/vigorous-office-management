{"version":3,"file":"static/js/3389.6832ea18.chunk.js","mappings":"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","sources":["pages/global/other/ExpenseHead/CreateExpenseHead.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { useEffect } from \"react\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { createExpenseTypeFunc } from \"./expenseTypeFeature/_expenseType_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nfunction CreateExpenseHead() {\n  const { loading: expenceHead } = useSelector((state) => state.expenceHead);\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      name: data.expenseHeadName,\n    };\n\n    dispatch(createExpenseTypeFunc(finalPayload)).then((data) => {\n      navigate(-1);\n    });\n  };\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n\n                </select> */}\n\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                     filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch <span className=\"text-red-600\">*</span>\n                  </label>\n                  <Controller\n                    name=\"PDBranchId\"\n                    control={control}\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        placeholder=\"Select Branch\"\n                        showSearch\n                       filterOption={(input, option) =>\n                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                              }\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> : (branchList?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))}\n                      </Select>\n                    )}\n                  />\n                  {errors.PDBranchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDBranchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Expense Head  <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"expenseHeadName\", {\n                  required: \"Expense Head is required\",\n                })}\n                className={`${inputClassName} ${errors.expenseHeadName ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Expense Head\"\n              />\n              {errors.expenseHeadName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.expenseHeadName.message}\n                </p>\n              )}\n            </div>\n\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={expenceHead}\n              className={`${expenceHead ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {expenceHead ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default CreateExpenseHead;\n"],"names":["loading","expenceHead","useSelector","state","register","handleSubmit","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","branchList","branchListloading","branch","CompanyId","useWatch","name","defaultValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","branchId","PDBranchId","expenseHeadName","createExpenseTypeFunc","then","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","message","_ref2","placeholder","showSearch","inputClassName","Loader"],"sourceRoot":""}