{"version":3,"file":"static/js/6592.5fa657e8.chunk.js","mappings":"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","sources":["pages/client/event/CreateEvent.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { customDayjs, domainName, inputAntdSelectClassName, inputCalanderClassName, inputClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { createEventFunc } from \"../event/eventFeatures/_event_reducers\";\nimport { DatePicker, Select } from \"antd\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nfunction CreateEvent() {\n  const { loading: eventLoading } = useSelector(\n    (state) => state.event\n  );\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (companyId && userType === \"company\" || userType === \"admin\") {\n      dispatch(\n        directorSearch({\n          text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n        })\n      );\n    }\n  }, [companyId]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      directorId: \"\",\n      title: data?.title,\n      date: customDayjs(data?.date),\n    };\n    dispatch(createEventFunc(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((type) => (\n                    <option key={type?._id} value={type?._id}>\n                      {type?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDBranchId\"\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.title\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.title.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"date\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.recurrence?.date && (\n                <p className=\"text-red-500 text-sm\">{errors.date.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={eventLoading}\n              className={`${eventLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {eventLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateEvent;"],"names":["_errors$recurrence","loading","eventLoading","useSelector","state","event","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","companySearch","text","sort","status","isPagination","branchSearch","_id","directorSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","directorId","title","date","customDayjs","createEventFunc","then","error","inputLabelClassName","Controller","rules","required","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","Loader","sortByPropertyAlphabetically","map","type","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab2","PDBranchId","inputClassName","placeholder","_ref3","CustomDatePicker","disabledDate","current","isBefore","moment","endOf","recurrence"],"sourceRoot":""}