{"version":3,"file":"static/js/9058.ed7c9d7a.chunk.js","mappings":"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","sources":["pages/taskManagement/addTask/EditTask.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, useWatch, Controller } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  inputClassName,\n  inputLabelClassName,\n  domainName,\n  inputLabelClassNameReactSelect,\n  inputDisabledClassName,\n  inputAntdSelectClassName,\n  sortByPropertyAlphabetically,\n  getDefaultFinacialYear,\n  customDayjs,\n} from \"../../../constents/global\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport ReactSelect from \"react-select\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\nimport { deptSearch } from \"../../../pages/department/departmentFeatures/_department_reducers\";\nimport { employeSearch } from \"../../../pages/employeManagement/employeFeatures/_employe_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport {\n  gettaskDetails,\n  updatetaskFunc,\n} from \"./addTaskFeatures/_addTask_reducers.js\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers.js\";\nimport { taskTypeSearch } from \"../taskType/taskFeatures/_task_reducers.js\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers.js\";\nimport moment from \"moment\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker.js\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader.js\";\nimport ListLoader from \"../../../global_layouts/ListLoader.js\";\nimport { elements } from \"chart.js\";\n\nconst EditTask = () => {\n  const { taskIdEnc } = useParams();\n  const taskId = decrypt(taskIdEnc);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const {\n    register,\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    formState: { errors },\n  } = useForm();\n  const { departmentListData } = useSelector((state) => state.department);\n  const { employeList } = useSelector((state) => state.employe);\n  const { clientList, loading: clientListLoading } = useSelector(\n    (state) => state.client\n  );\n  const { clientGroupList } = useSelector((state) => state.clientGroup);\n  const [documents, setDocuments] = useState([]);\n  const { taskTypeList } = useSelector((state) => state.taskType);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const [options, setOptions] = useState([]);\n  const [employeeSelectedOption, setEmployeeSelectedOption] = useState([]);\n  const { loading: taskLoading } = useSelector((state) => state.addTask);\n  const { taskDetailsData } = useSelector((state) => state.addTask);\n  const selectAllValue = '__all__';\n\n  const modifiedOptions = [\n    { label: 'Select All', value: selectAllValue },\n    ...options, // your existing employee options\n  ];\n\n  const selctedClientName = useWatch({\n    control,\n    name: \"client\",\n    defaultValue: \"\",\n  });\n\n  const clientBranchOptions = selctedClientName ? (clientList?.find(data => data?._id == selctedClientName)?.branchData || []) : []\n\n\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n\n  const financialYears = generateFinancialYears();\n\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sep\", \"Oct-Dec\"];\n  const dropdownType = useWatch({\n    control,\n    name: \"isPeriod\",\n    defaultValue: \"\",\n  });\n\n  const department = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: \"\",\n  });\n\n  useEffect(() => {\n    dispatch(gettaskDetails({ _id: taskId }));\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (taskDetailsData && taskDetailsData !== null) {\n        try {\n          // Dispatching deptSearch\n          const deptResponse = await dispatch(\n            deptSearch({\n              text: \"\",\n              sort: true,\n              status: true,\n              companyId: taskDetailsData?.companyId,\n              isPagination: false,\n            })\n          );\n          if (!deptResponse?.error) {\n            setValue(\"PDDepartmentId\", {\n              value: taskDetailsData?.departmentId,\n              label: deptResponse?.payload?.data?.docs?.find(\n                (department) =>\n                  department?._id === taskDetailsData?.departmentId\n              )?.name,\n            });\n          }\n          const empResponse = await dispatch(\n            employeSearch({\n              companyId: taskDetailsData.companyId,\n              branchId: taskDetailsData?.branchId,\n              departmentId: taskDetailsData?.departmentId,\n              directorId: \"\",\n              text: \"\",\n              sort: true,\n              status: true,\n              isPagination: false,\n              isBranch: true,\n              isDirector: false,\n            })\n          );\n          if (!empResponse?.error) {\n            const list = empResponse?.payload?.data?.docs?.map((element) => ({\n              label: (\n                <div className=\"flex gap-2  items-center\">\n                  {element.fullName}\n                  <div className=\"text-[10px]  text-gray-500\">\n                    {element.userType === 'companyDirector' ? 'Director' :\n                      element.userType === 'companyBranch' ? 'Branch Head' : ''}\n                  </div>\n                </div>\n              ),\n              value: element?._id,\n            }));\n            setOptions(list);\n          }\n\n          if (!empResponse?.error) {\n            const selectedEmployees = empResponse?.payload?.data?.docs\n              ?.filter((employee) =>\n                taskDetailsData?.employeIds?.includes(employee?._id)\n              )\n              ?.map((employee) => ({\n                value: employee?._id,\n                label: (\n                  <div className=\"flex gap-2\">\n                    {employee?.fullName}\n                    <br />\n                    <div className=\"text-[9px] text-gray-500 \">\n                      {employee?.userType == \"companyDirector\"\n                        ? \"Director\"\n                        : employee?.userType == \"companyBranch\"\n                          ? \"Branch Head\"\n                          : \"\"}\n                    </div>\n                  </div>\n                ),\n              }));\n\n            if (selectedEmployees?.length > 0) {\n              setValue(\"employee\", selectedEmployees);\n            }\n          }\n\n\n          const taskTypeResponse = await dispatch(\n            taskTypeSearch({\n              companyId: taskDetailsData?.companyId,\n              branchId: taskDetailsData?.branchId,\n              departmentId: taskDetailsData?.departmentId,\n              directorId: \"\",\n              text: \"\",\n              sort: true,\n              status: true,\n              isPagination: false,\n            })\n          );\n\n          if (!taskTypeResponse?.error) {\n            setValue(\"PDtaskId\", taskDetailsData?.taskTypeId);\n          }\n          dispatch(\n            clientSearch({\n              directorId: \"\",\n              companyId: taskDetailsData?.companyId,\n              branchId: taskDetailsData?.branchId,\n              userType: \"client\",\n              text: \"\",\n              sort: true,\n              status: \"\",\n              isPagination: false,\n            })\n          ).then((data) => {\n            if (!data?.error) {\n\n              // setValue(\"client\", data?.payload?.data?.clientData?._id)\n            }\n          });\n          // Setting the form values directly\n          setValue(\"fees\", taskDetailsData?.fee);\n          setValue(\"client\", taskDetailsData?.clientId);\n          taskDetailsData?.clientBranch?._id && setValue('clientBranch' , taskDetailsData?.clientBranch?._id )\n          setValue(\"tenureDate\", dayjs(taskDetailsData?.endDate));\n          setValue(\"financialYear\", taskDetailsData?.financialYear);\n          setValue(\"isPeriod\", taskDetailsData?.type);\n          setValue(\"descriptions\", taskDetailsData?.remarks);\n          setValue(\"PDTaskPriority\", taskDetailsData?.priority);\n\n          // Setting additional fields based on the task type\n          if (taskDetailsData?.type === \"Quaterly\") {\n            setValue(\"quarterName\", taskDetailsData?.monthQuaters);\n          } else if (taskDetailsData?.type === \"Monthly\") {\n            setValue(\"monthName\", taskDetailsData?.monthName);\n          }\n\n          // Setting documents\n          setDocuments(taskDetailsData?.documents);\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      }\n    };\n\n    fetchData();\n  }, [taskDetailsData]);\n\n  const handleSelectChange = (selectedValues) => {\n    // Check if \"Select All\" is selected\n    if (selectedValues.includes(selectAllValue)) {\n      const allValues = options.map(option => option.value);\n      setEmployeeSelectedOption(allValues);\n    } else {\n      setEmployeeSelectedOption(selectedValues);\n    }\n  };\n\n\n  useEffect(() => {\n    if (options.length > 0 && taskDetailsData?.employeIds) {\n      const selected = options.filter((element) =>\n        taskDetailsData?.employeIds?.includes(element?.value)\n      ).map((element) => { return element?.value })\n\n      setEmployeeSelectedOption(selected);\n    }\n  }, [options, taskDetailsData?.employeIds]);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setDocuments((prev) => [...prev, res.payload?.data]);\n      }\n    });\n  };\n  const handleRemoveFile = (index) => {\n    setDocuments((prev) => {\n      const updatedDocuments = prev.filter((_, i) => i !== index);\n      return updatedDocuments;\n    });\n  };\n\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      _id: taskId,\n      companyId: taskDetailsData?.companyId,\n      branchId: taskDetailsData?.branchId,\n      directorId: \"\",\n      departmentId: data?.PDDepartmentId ? data?.PDDepartmentId?.value : \"\",\n      financialYear: data?.financialYear,\n      groupId: taskDetailsData?.groupId,\n      taskTypeId: data?.PDtaskId,\n      clientId: data?.client,\n      taskName: taskTypeList?.find((task) => task?._id === data?.PDtaskId)\n        ?.name,\n      fee: taskTypeList?.find((task) => task?._id === data?.PDtaskId)?.fees,\n      priority: data?.PDTaskPriority,\n      remarks: data?.descriptions,\n      dueDate: customDayjs(data?.tenureDate),\n      documents: documents,\n      type: data?.isPeriod,\n      monthName: data?.monthName,\n      monthQuaters: data?.quarterName,\n      // \"employeIds\": [ data?.employee?.value]\n      employeIds: employeeSelectedOption,\n    };\n\n    dispatch(updatetaskFunc(finalPayload)).then((output) => {\n      !output.error && navigate(-1);\n    });\n  };\n\n  const handleFocus = () => {\n    dispatch(\n      employeSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          [\"admin\", \"company\", \"companyDirector\"].includes(userInfoglobal?.userType)\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        departmentId: watch(\"PDDepartmentId\")?.value,\n        directorId: \"\",\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        isBranch: true,\n        isDirector: false,\n      })\n    ).then((empResponse) => {\n      const list = empResponse?.payload?.data?.docs?.map((element) => (\n\n        {\n          label: (\n            <div className=\"flex gap-2 items-center\">\n              {element.fullName}\n              <div className=\"text-[10px] text-gray-500\">\n                {element.userType === \"companyDirector\"\n                  ? \"Director\"\n                  : element.userType === \"companyBranch\"\n                    ? \"Branch Head\"\n                    : \"\"}\n              </div>\n            </div>\n\n          ),\n\n          value: element._id,\n          searchText: element.fullName.toLowerCase(),\n        }));\n      setOptions(list);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <section>\n        <div className=\"\">\n          <div>\n            <form\n              autoComplete=\"off\"\n              className=\"\"\n              onSubmit={handleSubmit(onSubmit)}\n            >\n              <div className=\"gap-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5 md:my-2 px-3 md:mt-4\">\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      client <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"client\"\n                      rules={{ required: \"client is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          onChange={(e)=>{\n                            field.onChange(e)\n                            setValue(\"clientBranch\" , \"\")\n                      \n                          }}\n                          value={field.value}\n                          defaultValue={\"\"}\n                          className={` ${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option className=\"\" value=\"\">\n                            Select Client\n                          </Select.Option>\n                          {clientListLoading ? (\n                            <Select.Option disabled>\n                              <ListLoader />\n                            </Select.Option>\n                          ) : (\n                            sortByPropertyAlphabetically(\n                              clientList,\n                              \"fullName\"\n                            )?.map((element) => (\n                              <Select.Option value={element?._id}>\n                                {element?.fullName}\n                              </Select.Option>\n                            ))\n                          )}\n                        </Select>\n                      )}\n                    />\n                    {/* <input\n                      type=\"text\"\n                      disabled\n                      {...register(\"client\")}\n                      className={`${inputDisabledClassName} ${\n                        errors.descriptions\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                      }`}\n                      placeholder=\"Enter Client Name\"\n                    /> */}\n                    {/* <Controller\n                      name=\"client\"\n                      control={control}\n                      rules={{ required: \"At least one client is required\" }}\n                      render={({ field }) => (\n                        <ReactSelect\n                          {...field}\n                          isMulti\n                          onFocus={() => {\n                            watch('clientSelection') !== 'group' && dispatch(clientSearch({\n                              companyId:\n                                userInfoglobal?.userType === \"admin\"\n                                  ? watch(\"PDCompanyId\")\n                                  :\n                                  userInfoglobal?.userType === \"company\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.companyId,\n                              branchId:\n                                userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                                  ? userInfoglobal?._id\n                                  : userInfoglobal?.branchId,\n\n                              \"directorId\": \"\",\n                              \"organizationId\": \"\",\n                              \"industryId\": \"\",\n\n                              \"text\": \"\",\n                              \"sort\": true,\n                              \"status\": true,\n                              \"isPagination\": true,\n                            }));\n                          }}\n                          options={[\n                            { value: \"select_all\", label: \"Select All\" },\n                            ...(Array.isArray(clientList) ? clientList.map((client) => ({\n                              value: client._id,\n                              label: client.fullName,\n                            })) : []),\n                          ]}\n                          classNamePrefix=\"react-select\"\n                          className={`${inputLabelClassNameReactSelect} ${errors.client ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          placeholder=\"Select client...\"\n                          onChange={(selectedOptions) => {\n                            const isSelectAllSelected = selectedOptions.find(\n                              (option) => option.value === \"select_all\"\n                            );\n\n                            if (isSelectAllSelected) {\n                              handleSelectAllClient(field);\n                            } else {\n                              // Check if all employees are selected\n                              setIsSelectAllCheckedClient(\n                                selectedOptions.length === clientList.length\n                              );\n                              field.onChange(selectedOptions);\n                            }\n                          }}\n                          value={field.value || []}\n                          formatOptionLabel={(data, { context }) => {\n                            if (data.value === \"select_all\") {\n                              return (\n                                <div className=\"flex items-center\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={isSelectAllCheckedClient}\n                                    onChange={() => handleSelectAllClient(field)}\n                                    style={{ marginRight: \"10px\" }}\n                                  />\n                                  <span>Select All</span>\n                                </div>\n                              );\n                            }\n                            return data.label;\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.client && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.client.message}\n                      </p>\n                    )} */}\n                  </div>\n                  {clientBranchOptions?.length > 0 && <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Client Branch \n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"clientBranch\"\n                    \n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n\n                          className={inputAntdSelectClassName}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">\n                            {\" \"}\n                            Select Client Branch\n                          </Select.Option>\n                          {clientBranchOptions?.map((type) => (\n                            <Select.Option value={type?._id}>\n                              {type?.fullName}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.clientBranch && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.clientBranch.message}\n                      </p>\n                    )}\n                  </div>}\n\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Department <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"PDDepartmentId\"\n                      control={control}\n                      rules={{\n                        required: \"At least one department is required\",\n                      }}\n                      render={({ field }) => (\n                        <ReactSelect\n                          {...field}\n                          options={departmentListData?.map((department) => ({\n                            value: department?._id,\n                            label: department?.name,\n                          }))}\n                          classNamePrefix=\"react-select\"\n                          className={`${inputLabelClassNameReactSelect} ${errors.PDDepartmentId\n                            ? \"border-[1px] \"\n                            : \"border-gray-300\"\n                            }`}\n                          placeholder=\"Select Departments\"\n                          onChange={(selectedOptions) =>\n                            field.onChange(selectedOptions)\n                          }\n                          value={field.value}\n                        />\n                      )}\n                    />\n                    {errors.PDDepartmentId && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.PDDepartmentId.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Task Name<span className=\"text-red-600\">*</span>\n                    </label>\n                    {/* <select\n                    onFocus={()=>{\n                      dispatch(\n                        taskTypeSearch({\n                          companyId:taskDetailsData?.companyId,\n                          branchId:taskDetailsData?.branchId,\n                          departmentId:watch('PDDepartmentId')?.value,\n                          \"directorId\": \"\",\n                          text: \"\",\n                          sort: true,\n                          status: true,\n                          isPagination: false,\n                        }))\n                    }}\n                      {...register(\"PDtaskId\", {\n                        required: \"Task Name is required\",\n                      })}\n                      className={` ${inputClassName} ${errors.PDtaskId\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    >\n                      <option className=\"\" value=\"\">\n                        Select Task Name\n                      </option>\n\n                      {taskTypeList?.map((element) => (\n                        <option value={element?._id}>{element?.name}</option>\n                      ))}\n                    </select> */}\n\n                    <Controller\n                      control={control}\n                      name=\"PDtaskId\"\n                      rules={{ required: \"Task Name is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n                          onFocus={() => {\n                            dispatch(\n                              taskTypeSearch({\n                                companyId:\n                                  userInfoglobal?.userType === \"admin\"\n                                    ? watch(\"PDCompanyId\")\n                                    : userInfoglobal?.userType === \"company\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.companyId,\n                                branchId:\n                                  userInfoglobal?.userType === \"company\" ||\n                                    userInfoglobal?.userType === \"admin\" ||\n                                    userInfoglobal?.userType === \"companyDirector\"\n                                    ? watch(\"PDBranchId\")\n                                    : userInfoglobal?.userType ===\n                                      \"companyBranch\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.branchId,\n                                departmentId: watch(\"PDDepartmentId\")?.value,\n                                directorId: \"\",\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination: false,\n                              })\n                            );\n                          }}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">\n                            {\" \"}\n                            Select Task Name\n                          </Select.Option>\n                          {taskTypeList?.map((type) => (\n                            <Select.Option value={type?._id}>\n                              {type?.name}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.PDtaskId && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDtaskId.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Fees <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      disabled\n                      type=\"text\"\n                      {...register(\"fees\")}\n                      value={\n                        taskTypeList?.find(\n                          (element) => element?._id === watch(\"PDtaskId\")\n                        )?.fees || \"\"\n                      }\n                      className={`${inputDisabledClassName} ${errors.fees ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Fees\"\n                    />\n                    {errors.fees && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.fees.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Assign To <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"employee\"\n                      control={control}\n                      rules={{ required: \"At least one employee is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          mode=\"multiple\"\n                          placeholder=\"Assign To\"\n                          onFocus={handleFocus}\n                          value={field?.value}\n                          onChange={(val) => {\n                            field.onChange(val);\n                            handleSelectChange?.(val);\n                          }}\n                          size=\"large\"\n                          style={{ width: \"100%\" }}\n                          options={modifiedOptions}\n                          className=\"!min-h-[45px]\"\n                          optionFilterProp=\"label\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        />\n                      )}\n                    />\n                    {errors.employee && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.employee.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Due date <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"tenureDate\"\n                      control={control}\n                      render={({ field }) => (\n                        <CustomDatePicker\n                          field={field}\n                          errors={errors}\n                          disabledDate={(current) => {\n                            return (\n                              current &&\n                              current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                            );\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.tenureDate && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.tenureDate.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Task Priority <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"PDTaskPriority\"\n                      rules={{ required: \"Task Priority is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          placeholder={\"Select Task Priority\"}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">\n                            Select Task Priority\n                          </Select.Option>\n                          <Select.Option value=\"high\">High</Select.Option>\n                          <Select.Option value=\"medium\">Medium</Select.Option>\n                          <Select.Option value=\"low\">Normal</Select.Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.PDTaskPriority && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDTaskPriority.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div\n                  className={`grid ${dropdownType === \"Yearly\"\n                    ? \"grid-cols-1 md:grid-cols-2\"\n                    : dropdownType\n                      ? \"grid-cols-1 md:grid-cols-3\"\n                      : \"grid-cols-1 md:grid-cols-2\"\n                    } gap-5 md:my-1 px-3 md:mt-4`}\n                >\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Financial Year <span className=\"text-red-600\">*</span>\n                    </label>\n                    <select\n                      {...register(\"financialYear\", {\n                        required: \"Financial year is required\",\n                      })}\n                      defaultValue={getDefaultFinacialYear()}\n                      className={`${inputClassName} ${errors.financialYear\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <option value=\"\">Select Financial Year</option>\n                      {financialYears.map((year, index) => (\n                        <option key={index} value={year}>\n                          {year}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.financialYear && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.financialYear.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Type <span className=\"text-red-600\">*</span>\n                    </label>\n                    {/* <select\n                      {...register(\"isPeriod\", {\n                        required: \"Type is required\",\n                      })}\n                      className={`${inputClassName} ${errors.isPeriod ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    >\n                      <option value=\"\">Select Type</option>\n                      <option value=\"Quaterly\">Quaterly</option>\n                      <option value=\"Monthly\">Monthly</option>\n                      <option value=\"Yearly\">Yearly</option>\n                    </select> */}\n                    <Controller\n                      control={control}\n                      name=\"isPeriod\"\n                      rules={{ required: \"Type is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Type</Select.Option>\n                          <Select.Option value=\"Quaterly\">\n                            Quaterly\n                          </Select.Option>\n                          <Select.Option value=\"Monthly\">Monthly</Select.Option>\n                          <Select.Option value=\"Yearly\">Yearly</Select.Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.isPeriod && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.isPeriod.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {dropdownType === \"Quaterly\" && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Quarter <span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        control={control}\n                        name=\"quarterName\"\n                        rules={{ required: \"Reset Month is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName} `}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">\n                              Select Quarter\n                            </Select.Option>\n                            {quarter.map((qtr) => (\n                              <Select.Option key={qtr} value={qtr}>\n                                {qtr}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.quarterName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.quarterName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n\n                  {dropdownType === \"Monthly\" && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Month <span className=\"text-red-600\">*</span>\n                      </label>\n                      {/* <select\n                        {...register(\"monthName\", {\n                          required: \"Month is required\",\n                        })}\n                        className={`${inputClassName} ${errors.monthName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      >\n                        <option value=\"\">Select Month</option>\n                        {months.map((month) => (\n                          <option key={month} value={month}>\n                            {month}\n                          </option>\n                        ))}\n                      </select> */}\n\n                      <Controller\n                        control={control}\n                        name=\"monthName\"\n                        rules={{ required: \"Month is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName} `}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">Select Month</Select.Option>\n                            {months.map((month) => (\n                              <Select.Option key={month} value={month}>\n                                {month}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.monthName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.monthName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5 md:my-1 px-3 md:mt-4\">\n                  <div className=\"col-span-2\">\n                    <label className={`${inputLabelClassName}`}>\n                      Description <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"descriptions\", {\n                        required: \"Primary Address is required\",\n                      })}\n                      className={`${inputClassName} ${errors.descriptions\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Primary Address\"\n                    />\n                    {errors.descriptions && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.descriptions.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"px-3\">\n                  <label className={`${inputLabelClassName}`}>\n                    Add Documents\n                  </label>\n                  <div className=\"space-y-4\">\n                    <input\n                      type=\"file\"\n                      onChange={handleFileChange}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                    />\n                    <label\n                      htmlFor=\"file-upload\"\n                      className=\"inline-flex justify-start items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white cursor-pointer\"\n                    >\n                      <FaRegFile className=\"mr-2\" />\n                      Add Documents\n                    </label>\n\n                    <div className=\"space-y-2\">\n                      {documents.map((file, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\"\n                        >\n                          <a\n                            href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                            className=\"flex items-center space-x-2\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <FaRegFile className=\"text-gray-500\" />\n                            <span className=\"text-sm text-gray-600\">\n                              {file}\n                            </span>\n                          </a>\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemoveFile(index)}\n                            className=\"text-red-500 hover:text-red-700\"\n                          >\n                            <FaTimes />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end col-span-2 \">\n                  <button\n                    type=\"submit\"\n                    className={`bg-header } text-white p-2 px-4 rounded mt-4`}\n                  >\n                    Submit\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n    </GlobalLayout>\n  );\n};\n\nexport default EditTask;\n"],"names":["EditTask","_clientList$find","_taskTypeList$find3","taskIdEnc","useParams","taskId","decrypt","navigate","useNavigate","dispatch","useDispatch","register","control","handleSubmit","watch","setValue","getValues","formState","errors","useForm","departmentListData","useSelector","state","department","employeList","employe","clientList","loading","clientListLoading","client","clientGroupList","clientGroup","documents","setDocuments","useState","taskTypeList","taskType","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","options","setOptions","employeeSelectedOption","setEmployeeSelectedOption","taskLoading","addTask","taskDetailsData","selectAllValue","modifiedOptions","label","value","selctedClientName","useWatch","name","defaultValue","clientBranchOptions","find","data","_id","branchData","financialYears","generateFinancialYears","year","push","months","quarter","dropdownType","useEffect","gettaskDetails","async","_taskDetailsData$clie","_taskDetailsData$clie2","deptResponse","deptSearch","text","sort","status","companyId","isPagination","_deptResponse$payload","_deptResponse$payload2","_deptResponse$payload3","_deptResponse$payload4","error","departmentId","payload","docs","empResponse","employeSearch","branchId","directorId","isBranch","isDirector","_empResponse$payload","_empResponse$payload$","_empResponse$payload$2","list","map","element","_jsxs","className","children","fullName","_jsx","userType","_empResponse$payload2","_empResponse$payload3","_empResponse$payload4","_empResponse$payload5","selectedEmployees","filter","employee","_taskDetailsData$empl","employeIds","includes","length","taskTypeResponse","taskTypeSearch","taskTypeId","clientSearch","then","fee","clientId","clientBranch","dayjs","endDate","financialYear","type","remarks","priority","monthQuaters","monthName","console","fetchData","handleSelectChange","selectedValues","allValues","option","selected","_taskDetailsData$empl2","handleFocus","_watch","_empResponse$payload6","_empResponse$payload7","_empResponse$payload8","searchText","toLowerCase","GlobalLayout","autoComplete","onSubmit","_data$PDDepartmentId","_taskTypeList$find","_taskTypeList$find2","finalPayload","PDDepartmentId","groupId","PDtaskId","taskName","task","fees","PDTaskPriority","descriptions","dueDate","customDayjs","tenureDate","isPeriod","quarterName","updatetaskFunc","output","inputLabelClassName","Controller","rules","required","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","onChange","e","inputAntdSelectClassName","showSearch","filterOption","input","String","Option","disabled","ListLoader","sortByPropertyAlphabetically","_ref2","message","_ref3","ReactSelect","classNamePrefix","inputLabelClassNameReactSelect","placeholder","selectedOptions","_ref4","onFocus","_watch2","inputDisabledClassName","_ref5","mode","val","size","style","width","optionFilterProp","_ref6","CustomDatePicker","disabledDate","current","isBefore","endOf","_ref7","getDefaultFinacialYear","inputClassName","index","_ref8","_ref9","qtr","_ref0","month","reqData","filePath","target","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","prev","_res$payload2","id","htmlFor","FaRegFile","file","href","process","rel","onClick","_","i","handleRemoveFile","FaTimes"],"sourceRoot":""}