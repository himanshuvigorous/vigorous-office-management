{"version":3,"file":"static/js/8004.105a2eff.chunk.js","mappings":"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","sources":["pages/designation/CreateDesignation.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createDesignation, getDesignationRole } from \"./designationFeatures/_designation_reducers\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../department/departmentFeatures/_department_reducers\";\nimport { formButtonClassName, inputClassName, inputLabelClassName, domainName, usertypelist, inputAntdSelectClassName, } from \"../../constents/global\";\nimport getUserIds from \"../../constents/getUserIds\";\nimport { Select } from \"antd\";\nimport Loader from \"../../global_layouts/Loader\";\nimport ListLoader from \"../../global_layouts/ListLoader\";\n\nfunction CreateDesignation() {\n  const { loading: designationLoading } = useSelector(state => state.designation);\n  const { register, handleSubmit, setValue, getValues, unregister, control, formState: { errors }, } = useForm();\n  const {\n    userCompanyId,\n    userDepartmentId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const { companyList } = useSelector((state) => state.company);\n  const { departmentListData, loading: deploading } = useSelector((state) => state.department);\n  const { designationRoleData } = useSelector((state) => state?.designation);\n\n\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  \n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n  const branchId = useWatch({\n    control,\n    name: \"branchiId\",\n    defaultValue: userBranchId,\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"departmentId\",\n    defaultValue: userDepartmentId,\n  });\n\n  const roleId = useWatch({\n    control,\n    name: \"roleId\",\n    defaultValue: \"\",\n  });\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(companySearch({ text: \"\", sort: true, status: true, isPagination: false }));\n    }\n  }, []);\n\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(companySearch({ text: \"\", sort: true, status: true, isPagination: false }));\n    }\n  }, [companyId]);\n\n  useEffect(() => {\n    if (companyId || userInfoglobal?.userType !== \"admin\") {\n      dispatch(deptSearch({\n        text: \"\", sort: true, status: true, isPagination: false,\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? companyId\n            :\n            userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n      }));\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    let reqData = {\n      text: ''\n    }\n    dispatch(getDesignationRole(reqData))\n  }, [])\n\n  const onSubmit = (data) => {\n\n\n    const finalPayload = {\n      name: data?.designationName,\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      departmentId: data?.departmentId,\n      roleKey: data?.roleId,\n      directorId: \"\",\n    };\n\n\n    dispatch(createDesignation(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"companyId\", {\n                  required: \"Company is required\",\n                })}\n                className={` ${inputClassName} ${errors.companyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Company\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>\n                    {type?.fullName}({type?.userName})\n                  </option>\n                ))}\n              </select>\n\n              {errors.companyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.companyId.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Department <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"departmentId\"\n                control={control}\n                rules={{ required: \"Department is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.departmentId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Department\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Department</Select.Option>\n                    {deploading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (departmentListData?.map((element) => (\n                      <Select.Option key={element?._id} value={element?._id}>\n                        {element?.name}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.departmentId && <p className=\"text-red-500 text-sm\">{errors.departmentId.message}</p>}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Designation Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"designationName\", {\n                  required: \"Designation Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.designationName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Designation Name\"\n              />\n              {errors.designationName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.designationName.message}\n                </p>\n              )}\n            </div>\n\n            {/* Role OF Designation  */}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Role <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"roleId\"\n                control={control}\n                rules={{ required: \"Role is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.roleId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Roles\"\n                  >\n                    <Select.Option value=\"\">Roles</Select.Option>\n                    {designationRoleData?.map((element) => (\n                      <Select.Option key={element?._id} value={element?.name}>\n                        {element?.name}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.roleId && <p className=\"text-red-500 text-sm\">{errors.roleId.message}</p>}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={designationLoading}\n              className={`${designationLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {designationLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default CreateDesignation;\n"],"names":["loading","designationLoading","useSelector","state","designation","register","handleSubmit","setValue","getValues","unregister","control","formState","errors","useForm","userCompanyId","userDepartmentId","userBranchId","userType","getUserIds","companyList","company","departmentListData","deploading","department","designationRoleData","navigate","useNavigate","dispatch","useDispatch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyId","useWatch","name","defaultValue","useEffect","companySearch","text","sort","status","isPagination","deptSearch","_id","getDesignationRole","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","designationName","departmentId","roleKey","roleId","directorId","createDesignation","then","error","inputLabelClassName","_objectSpread","required","inputClassName","value","map","type","fullName","userName","message","Controller","rules","render","_ref","field","Select","inputAntdSelectClassName","placeholder","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","disabled","ListLoader","element","_ref2","Loader"],"sourceRoot":""}