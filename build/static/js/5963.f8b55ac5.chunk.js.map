{"version":3,"file":"static/js/5963.f8b55ac5.chunk.js","mappings":"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","sources":["pages/global/address/city/CreateCity.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport { useEffect } from \"react\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { countrySearch, getCountryListFunc } from \"../country/CountryFeatures/_country_reducers\";\nimport { createCityFunc } from \"./CityFeatures/_city_reducers\";\nimport { getStateList, stateSearch } from \"../state/featureStates/_state_reducers\";\nimport { Input, Select } from \"antd\";\nimport { inputAntdSelectClassName, inputClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../../constents/global\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\nfunction CreateCity() {\n  const { loading: cityLoading } = useSelector(state => state.city)\n  const { register, handleSubmit, setValue, control, formState: { errors } } = useForm();\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const { countryListData, loading: countryListLoading } = useSelector((state) => state.country);\n  const { stateListData, loading: stateListLoading } = useSelector((state) => state.states);\n\n\n  const { cityListData } = useSelector((state) => state.city)\n  useEffect(() => {\n    const countryReqData = {\n      text: \"\",\n      sort: true,\n      status: true,\n      isPagination: false\n    };\n\n    dispatch(countrySearch(countryReqData));\n  }, []);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      \"name\": data?.cityName,\n      \"countryId\": data?.countryId,\n      \"stateId\": data?.stateId,\n    }\n\n\n    dispatch(createCityFunc(finalPayload)).then((data) => {\n      !data.error && navigate(-1);\n    });\n  }\n\n  const handleSelectCountry = (event) => {\n    setValue(\"countryId\", event.target.value);\n    setValue(\"countryName\", countryListData?.docs?.find(element => element._id === event.target.value)?.name);\n    setValue(\"stateId\", \"\");\n    setValue(\"stateName\", \"\");\n\n\n    const stateReqData = {\n      \"text\": \"\",\n      \"sort\": true,\n      \"status\": true,\n      countryId: event.target.value,\n      isPagination: false\n    };\n    dispatch(stateSearch(stateReqData));\n   \n\n  };\n\n\n  const handleSelectState = (event) => {\n    setValue(\"stateId\", event.target.value);\n    setValue(\"stateName\", stateListData?.docs?.find(element => element._id === event.target.value)?.name);\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-0\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2 capitalize\">\n            {/* <div className=\"w-full\">\n              <label className=\"block text-sm font-medium\">Country Name</label>\n              <select\n                {...register(\"countryId\", { required: \"Country Name is required\" })}\n                onChange={handleSelectCountry}\n                className={`mt-1 block w-full border ${errors.countryName ? \"border-[1px] \" : \"border-gray-300\"} p-2 rounded`}\n              >\n                <option>Select Country Name</option>\n                {countryListData?.docs?.map((element) => (\n                  <option key={element._id} value={element._id}>\n                    {element.name}\n                  </option>\n                ))}\n              </select>\n              {errors.countryName && (\n                <p className=\"text-red-500 text-sm\">{errors.countryName.message}</p>\n              )}\n              {errors.country && (\n                <p className=\"text-red-500 text-sm\">{errors.country.message}</p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className=\"block text-sm font-medium\">State Name</label>\n              <select\n                {...register(\"stateId\", { required: \"State Name is required\" })}\n                onChange={handleSelectState}\n                className={`mt-1 block w-full border ${errors.stateName ? \"border-[1px] \" : \"border-gray-300\"} p-2 rounded`}\n              >\n                <option>Select State Name</option>\n                {stateListData?.docs?.map((element) => (\n                  <option key={element._id} value={element._id}>\n                    {element?.name}\n                  </option>\n                ))}\n              </select>\n              {errors.stateName && (\n                <p className=\"text-red-500 text-sm\">{errors.stateName.message}</p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className=\"block text-sm font-medium\">City Name</label>\n              <input\n                type=\"text\"\n                {...register(\"cityName\", {\n                  required: \"City Name is required\",\n                })}\n                className={`mt-1 block w-full border ${errors.cityName ? \"border-[1px] \" : \"border-gray-300\"\n                  } p-2 rounded`}\n                placeholder=\"Enter City Name\"\n              />\n              {errors.cityName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.cityName.message}\n                </p>\n              )}\n            </div> */}\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Country Name <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"countryId\"\n                control={control}\n                rules={{ required: \"Country Name is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.countryId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Country Name\"\n                  >\n                    {countryListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (sortByPropertyAlphabetically(countryListData?.docs, 'name',).map((element) => (\n                      <Select.Option key={element._id} value={element._id}>\n                        {element.name}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.countryId && <p className=\"text-red-500 text-sm\">{errors.countryId.message}</p>}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                State Name <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"stateId\"\n                control={control}\n                rules={{ required: \"State Name is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.stateName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select State Name\"\n                  >\n                    {(stateListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (sortByPropertyAlphabetically(stateListData?.docs)?.map((element) => (\n                      <Select.Option key={element._id} value={element._id}>\n                        {element.name}\n                      </Select.Option>\n                    ))))\n                    }\n                  </Select>\n                )}\n              />\n              {errors.stateName && <p className=\"text-red-500 text-sm\">{errors.stateName.message}</p>}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                City Name <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"cityName\"\n                control={control}\n                rules={{ required: \"City Name is required\" }}\n                render={({ field }) => (\n                  <input\n                    {...field}\n                    className={`${inputClassName} ${errors.cityName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Enter City Name\"\n                  />\n                )}\n              />\n              {errors.cityName && <p className=\"text-red-500 text-sm\">{errors.cityName.message}</p>}\n            </div>\n\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={cityLoading}\n              className={`${cityLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {cityLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateCity\n"],"names":["loading","cityLoading","useSelector","state","city","register","handleSubmit","setValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","countryListData","countryListLoading","country","stateListData","stateListLoading","states","cityListData","useEffect","countrySearch","text","sort","status","isPagination","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","cityName","countryId","stateId","createCityFunc","then","error","concat","inputLabelClassName","Controller","name","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","placeholder","Option","disabled","ListLoader","sortByPropertyAlphabetically","docs","map","element","value","_id","message","_ref2","_sortByPropertyAlphab","stateName","_ref3","inputClassName","type","Loader"],"sourceRoot":""}