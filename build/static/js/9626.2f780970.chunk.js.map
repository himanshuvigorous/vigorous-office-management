{"version":3,"file":"static/js/9626.2f780970.chunk.js","mappings":"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","sources":["pages/EmployeePenaltie/CreateEmployeePenaltie.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createemployeePenaltyType } from \"./employeePenaltyFeatures/_employeePenalty_reducers\";\nimport { employeSearch } from \"../employeManagement/employeFeatures/_employe_reducers\";\nimport { useEffect, useState } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputClassNameSearch,\n  inputDisabledClassName,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../constents/global\";\nimport { branchSearch } from \"../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { getpenaltyList } from \"../global/other/interviewRoundName copy/penaltyFeatures/_penalty_reducers\";\nimport CustomDatePicker from \"../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\nimport { current } from \"@reduxjs/toolkit\";\nimport Loader from \"../../global_layouts/Loader\";\nimport ListLoader from \"../../global_layouts/ListLoader\";\n\nfunction CreateEmployeePenaltie() {\n\n  const {\n    register,\n    control,\n    watch,\n    setValue,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const disabledDate = (current) => {\n    return current && current.isAfter(dayjs().endOf('day')); // Ensures future dates are disabled\n  };\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n\n  const { employeList, loading: employeListLoading } = useSelector((state) => state.employe);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  \n  const { penaltyListData, totapenaltyTypeCount, loading: penaltyListLoading } = useSelector(\n    (state) => state.penalty\n  );\n\n\n  const { employeePenaltyListData, totaemployeePenaltyCount, loading: employeePenaltyLoading } = useSelector((state) => state.employeePenalty);\n\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n\n  const penaltyName = useWatch({\n    control,\n    name: \"penaltyName\",\n    defaultValue: \"\",\n  });\n\n\n\n  useEffect(() => {\n    const amount = penaltyListData?.find((data) => data?._id == penaltyName)\n    setValue('amount', amount?.amount)\n  }, [penaltyName])\n\n  useEffect(() => {\n    getpenalty();\n  }, [BranchId, CompanyId]);\n\n  \n\n  const getpenalty = () => {\n    const data = {\n      currentPage: \"\",\n      pageSize: \"\",\n      reqData: {\n        directorId: \"\",\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? CompanyId\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"admin\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n            ? BranchId\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        text: \"\",\n        sort: true,\n        status: \"\",\n        isPagination: true,\n      },\n    };\n    dispatch(getpenaltyList(data));\n  };\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? CompanyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId]);\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n          ? BranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n      directorId: \"\",\n      employeId: data?.employee,\n      penaltyId: data?.penaltyName,\n      amount: Number(data?.amount),\n      reason: data?.reason,\n      issueDate: dayjs(data?.date).format(\"YYYY-MM-DD\"),\n    };\n\n    dispatch(createemployeePenaltyType(finalPayload)).then((data) => {\n      !data?.error && navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    fetchEmployeListData();\n  }, []);\n\n  const fetchEmployeListData = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isPagination: false,\n      departmentId: \"\",\n      designationId: \"\",\n      companyId: userInfoglobal?.companyId,\n      branchId: userInfoglobal?.branchId,\n    };\n\n    dispatch(employeSearch(reqPayload));\n  };\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-[1fr_1fr] gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassNameSearch} ${\n                    errors.PDCompanyId ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n\n                <Controller\n                  name=\"PDCompanyId\"\n                  control={control}\n                  rules={{\n                    required: 'Company is required'\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName}`}\n                      placeholder=\"Select Company\"\n                     filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }                    >\n                      <Select.Option value=\"\">Select Company </Select.Option>\n                      {companyListLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        (companyList?.map((element, index) => (\n                          <Select.Option key={index} value={element?._id}>\n                            {element?.fullName}\n                          </Select.Option>\n                        )))\n                      }\n                    </Select>\n                  )}\n                />\n\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>Branch Name <span className=\"text-red-600\">*</span></label>\n                  {/* <select\n                  {...register(\"PDBranchId\", {\n                    required: \"Branch is required\",\n                  })}\n                  className={` ${inputClassNameSearch} ${\n                    errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Branch\n                  </option>\n                  {branchList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n\n                  <Controller\n                    name=\"PDBranchId\"\n                    rules={{\n                      required: 'Branch is required'\n                    }}\n                    control={control}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                         onChange={(value) => {\n                        setValue(\"employee\", '')\n                        setValue(\"penaltyName\", '')\n                        field.onChange(value);\n                      }}\n                        className={` ${inputAntdSelectClassName}`}\n                        placeholder=\"Select Branch  \"\n                        showSearch\n                       filterOption={(input, option) =>\n                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                              }                    >\n                        <Select.Option value=\"\">Select Branch </Select.Option>\n                        {branchListloading ? <Select.Option disabled><ListLoader /></Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((element, index) => (\n                          <Select.Option key={index} value={element?._id}>\n                            {element?.fullName}\n                          </Select.Option>\n                        )))}\n                      </Select>\n                    )}\n                  />\n                  {errors.PDBranchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDBranchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Penalty Name <span className=\"text-red-600\">*</span></label>\n              {/* <select\n                {...register(\"penaltyName\", {\n                  required: \"penaltyName is required\",\n                })}\n                className={` ${inputClassNameSearch} ${\n                  errors.penaltyName ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Penalty\n                </option>\n                {penaltyListData?.map((type) => (\n                  <option value={type?._id}>{type?.name}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                name=\"penaltyName\"\n                control={control}\n                rules={{\n                  required: 'Penaulty Name is required'\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={` ${inputAntdSelectClassName}`}\n                    placeholder=\"Select penalty Name \"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }                  >\n                    <Select.Option value=\"\">Select Penalty Name </Select.Option>\n                    {penaltyListLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (sortByPropertyAlphabetically(penaltyListData)?.map((element, index) => (\n                      <Select.Option key={index} value={element?._id}>\n                        {element?.name}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.penaltyName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.penaltyName.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-[1fr_1fr] gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Employee Name <span className=\"text-red-600\">*</span></label>\n             \n\n              <Controller\n                name=\"employee\"\n                control={control}\n                rules={{\n                  required: 'Employee Name is required'\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={` ${inputAntdSelectClassName}`}\n                    placeholder=\"Select Employee \"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Employee </Select.Option>\n                    {employeListLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (sortByPropertyAlphabetically(employeList, 'fullName')?.map((element, index) => (\n                      <Select.Option key={index} value={element?._id}>\n                        {element?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.employee && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.employee.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Amount <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                disabled\n                {...register(\"amount\", {\n                  required: \"amount is required\",\n                })}\n                className={` ${errors.amount ? \"border-[1px] \" : \"border-gray-300\"\n                  }${inputDisabledClassName}`}\n                placeholder=\"Enter amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">{errors.amount.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-[1fr_1fr] gap-2 md:my-2\">\n            <div className=\"w-full sm:mt-0 mt-2\">\n              <label className={`${inputLabelClassName}`}>\n                Reason <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"reason\", {\n                  required: \"reason is required\",\n                })}\n                className={` ${errors.reason ? \"border-[1px] \" : \"border-gray-300\"\n                  }${inputClassName}`}\n                placeholder=\"Enter reason\"\n              />\n              {errors.reason && (\n                <p className=\"text-red-500 text-sm\">{errors.reason.message}</p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>Date <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"date\"\n                control={control}\n                rules={{\n                  required: 'Date is required'\n                }}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={disabledDate} />\n                )}\n              />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">date is required</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={employeePenaltyLoading}\n              className={`${employeePenaltyLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {employeePenaltyLoading ? <Loader /> : 'Submit'}\n            </button>\n\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default CreateEmployeePenaltie;\n"],"names":["register","control","watch","setValue","handleSubmit","formState","errors","useForm","disabledDate","current","isAfter","dayjs","endOf","companyList","companyListLoading","useSelector","state","company","branchList","branchListloading","branch","employeList","loading","employeListLoading","employe","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","penaltyListData","totapenaltyTypeCount","penaltyListLoading","penalty","employeePenaltyListData","totaemployeePenaltyCount","employeePenaltyLoading","employeePenalty","CompanyId","useWatch","name","defaultValue","BranchId","penaltyName","useEffect","amount","find","data","_id","getpenalty","currentPage","pageSize","reqData","directorId","companyId","userType","branchId","text","sort","status","isPagination","dispatch","getpenaltyList","branchSearch","companySearch","useDispatch","navigate","useNavigate","fetchEmployeListData","reqPayload","isTL","isHR","departmentId","designationId","employeSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","finalPayload","employeId","employee","penaltyId","Number","reason","issueDate","date","format","createemployeePenaltyType","then","error","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","placeholder","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","element","index","fullName","PDCompanyId","message","inputLabelClassName","_ref2","_sortByPropertyAlphab","onChange","showSearch","sortByPropertyAlphabetically","PDBranchId","_ref3","_sortByPropertyAlphab2","_ref4","_sortByPropertyAlphab3","type","inputDisabledClassName","inputClassName","_ref5","CustomDatePicker","Loader"],"sourceRoot":""}