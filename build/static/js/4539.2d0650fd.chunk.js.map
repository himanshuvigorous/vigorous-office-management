{"version":3,"file":"static/js/4539.2d0650fd.chunk.js","mappings":"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","sources":["pages/global/other/commonEmailTemplate/CreateCommonEmail.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputClassNameSearch, inputLabelClassName } from \"../../../../constents/global\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport ReactQuill from \"react-quill\";\nimport { createcommonEmail } from \"./commonEmailFeatures/_common_email_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\nconst CreateCommonEmail = () => {\n  const { loading: commonEmailTemplate } = useSelector((state) => state.emailTemplate);\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const [editorValue, setEditorValue] = useState(``);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n\n  // useEffect(() => {\n  //   dispatch(employeSearch());\n  // }, [dispatch]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: '',\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"title\": data?.templateName,\n      \"slug\": \"\",\n      \"content\": editorValue\n    };\n    dispatch(createcommonEmail(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  const handleEditorChange = (value) => {\n    setEditorValue(value);\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") &&\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"PDBranchId\"\n                  control={control}\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                     filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                      placeholder=\"Select Branch\"\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : (branchList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDBranchId.message}\n                  </p>\n                )}\n              </div>}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Template Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"templateName\", {\n                  required: \"Template Name is required\",\n                })}\n                className={`${inputClassName} ${errors.templateName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Template Name\"\n              />\n              {errors.templateName && (\n                <p className=\"text-red-500 text-sm\">{errors.templateName.message}</p>\n              )}\n            </div>\n            <div className=\"mt-4 md:col-span-2\">\n              <label className={`${inputLabelClassName}`}>Content <span className=\"text-red-600\">*</span></label>\n              <ReactQuill\n                value={editorValue}\n                onChange={handleEditorChange}\n                placeholder=\"Write the email body here\"\n                modules={{\n                  toolbar: [\n                    [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                    ['bold', 'italic', 'underline', 'strike'],\n                    [{ 'align': [] }],\n                    ['link', 'image', 'video'],\n                    ['blockquote', 'code-block'],\n                    ['clean']\n                  ],\n                }}\n                formats={['header', 'font', 'list', 'bold', 'italic', 'underline', 'link', 'align', 'clean']}\n              />\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={commonEmailTemplate}\n              className={`${commonEmailTemplate ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {commonEmailTemplate ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateCommonEmail;\n"],"names":["CreateCommonEmail","loading","commonEmailTemplate","useSelector","state","emailTemplate","register","handleSubmit","control","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","editorValue","setEditorValue","useState","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","branchId","PDBranchId","templateName","createcommonEmail","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","message","_ref2","placeholder","inputClassName","ReactQuill","onChange","modules","toolbar","formats","Loader"],"sourceRoot":""}