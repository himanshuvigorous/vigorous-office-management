{"version":3,"file":"static/js/8741.9ea32387.chunk.js","mappings":"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","sources":["pages/global/other/Plan/EditPlan.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport { inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport moment from \"moment\";\nimport { getPlanByIdFunc, updatePlanFunc } from \"./PlanFeatures/_plan_reducers\";\nimport CustomDatePicker from \"../../../../global_layouts/DatePicker/CustomDatePicker\";\nimport { ColorPicker, Select } from \"antd\";\n\nfunction EditPlan() {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    getValues,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { planIdEnc } = useParams();\n  const planId = decrypt(planIdEnc);\n  const { planByIdData } = useSelector((state) => state.plan);\n  const rgbaToHex = (r, g, b, a) => {\n    const toHex = (n) => {\n      const hex = n.toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    };\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n  };\n\n\n  const handleColorChange = (color) => {\n\n    const { r, g, b, a } = color.metaColor;\n\n    const hexColor = rgbaToHex(r, g, b, a);\n\n    setValue('colorCode', hexColor);\n  };\n\n  const handleTextInputChange = (e) => {\n\n  };\n  useEffect(() => {\n    let reqData = {\n      _id: planId,\n    };\n    dispatch(getPlanByIdFunc(reqData));\n  }, []);\n  useEffect(() => {\n    if (planByIdData && planByIdData?.data) {\n      setValue(\"title\", planByIdData?.data?.title);\n      setValue(\"description\", planByIdData?.data?.description);\n      setValue(\"cutPrice\", planByIdData?.data?.cutPrice);\n      setValue(\"colorCode\", planByIdData?.data?.colorCode);\n      setValue(\"price\", planByIdData?.data?.price);\n      setValue(\"duration\", planByIdData?.data?.days);\n      setValue(\"status\", planByIdData?.data?.status);\n      setValue(\n        \"expireIn\",\n        moment(planByIdData.data.discountExpireIn)?.format(\"YYYY-MM-DD\")\n      );\n      setValue(\"features\", planByIdData.data.features);\n    }\n  }, [planByIdData]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: planId,\n      status: data?.status,\n      title: data.title,\n      description: data.description,\n      price: data.price,\n      cutPrice: data.cutPrice,\n      colorCode: data.colorCode,\n      days: + data.duration,\n      // discountExpireIn: data.expireIn,\n      \"features\": data?.features,\n    };\n\n    dispatch(updatePlanFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/plan\");\n    });\n  };\n  const colorCodeWatch = useWatch({\n    control,\n    name: \"colorCode\",\n    defaultValue: \"\",\n  });\n  const baseAmount = useWatch({\n    control,\n    name: \"price\",\n    defaultValue: \"\",\n  });\n  const discountPercentage = useWatch({\n    control,\n    name: \"cutPrice\",\n    defaultValue: \"\",\n  });\n  // useEffect(() => {\n  //   if (baseAmount && discountPercentage) {\n  //     const discountValue = (baseAmount * discountPercentage) / 100;\n  //     const calculatedFinalPrice = baseAmount - discountValue;\n  //     setValue(\"finalPriceDiscounted\", calculatedFinalPrice);\n  //   } else {\n  //     setValue(\"finalPriceDiscounted\", 0);\n  //   }\n  // }, [baseAmount, discountPercentage]);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-0 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div>\n              <label className={`${inputLabelClassName}`}>Title <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`${inputClassName} ${errors.title ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>Description <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                className={`${inputClassName} ${errors.description ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Description\"\n              />\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className={`${inputLabelClassName}`}>Price (₹) <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"number\"\n                {...register(\"price\", {\n                  required: \"Price is required\",\n                })}\n                className={`${inputClassName} ${errors.price ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Price\"\n              />\n              {errors.price && (\n                <p className=\"text-red-500 text-sm\">{errors.price.message}</p>\n              )}\n            </div>\n\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>Discount %</label>\n              <input\n                type=\"number\"\n                {...register(\"cutPrice\", {\n                  required: \"Discounted Price is required\",\n                })}\n                className={`${inputClassName} ${errors.cutPrice ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Discounted Price\"\n              />\n              {errors.cutPrice && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.cutPrice.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>Discounted  %</label>\n              <input\n              disabled\n              readOnly\n                type=\"number\"\n                {...register(\"finalPriceDiscounted\", {\n                  required: \"Discounted Price is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.finalPriceDiscounted ? \"border-[1px] \" : \"border-gray-300\"\n                } `}\n                placeholder=\"Enter Discounted Price\"\n              />\n              {errors.finalPriceDiscounted && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.finalPriceDiscounted.message}\n                </p>\n              )}\n            </div> */}\n\n            <div>\n              <label className={`${inputLabelClassName}`}>Color Code <span className=\"text-red-600\">*</span></label>\n              <div className=\"relative flex items-center gap-2\">\n                <input\n                  type=\"text\"\n                  value={colorCodeWatch}\n                  {...register(\"colorCode\", {\n                    required: \"Color Code is required\",\n                    pattern: {\n                      value: /^#[0-9A-Fa-f]{6}$/,\n                      message: \"Enter a valid Hex color code (e.g., #FF5733)\",\n                    },\n                  })}\n                  onChange={handleTextInputChange}\n                  className={`${errors.colorCode ? \"border-[1px] \" : \"border-gray-300\"} w-full py-2 pl-3 pr-16 rounded`}\n                  placeholder=\"#FF5733\"\n                  maxLength={7}\n                />\n                <ColorPicker\n                  value={colorCodeWatch}\n                  onChange={handleColorChange}\n                  className=\"absolute right-1 top-1/2 transform -translate-y-1/2 md:w-75 w-1/2 h-10 cursor-pointer\"\n                />\n              </div>\n              {errors.colorCode && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.colorCode.message}\n                </p>\n              )}\n            </div>\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>Logo</label>\n              {planByIdData?.data?.logo && (\n                <div className=\"mb-2\">\n                  <img\n                    alt=\"\"\n                    src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${planByIdData?.data?.logo}`}\n                    className=\"rounded-full min-w-10 min-h-10 w-10 h-10 ring-1 ring-amber-300\"\n                  />\n                </div>\n              )}\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                {...register(\"logo\", {\n                  required: \"Logo file is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.logo ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n              {errors.logo && (\n                <p className=\"text-red-500 text-sm\">{errors.logo.message}</p>\n              )}\n            </div> */}\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Duration (Days) <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                {...register(\"duration\", {\n                  required: \"Duration is required\",\n                })}\n                className={`${inputClassName} ${errors.duration ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Duration\"\n              />\n              {errors.duration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.duration.message}\n                </p>\n              )}\n            </div>\n\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Expire In  <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"expireIn\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.dateOfBirth && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.dateOfBirth.message}\n                </p>\n              )}\n            </div> */}\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>Expire In</label>\n              <input\n                type=\"date\"\n                {...register(\"expireIn\", {\n                  required: \"Expire In is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.expireIn ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n              {errors.expireIn && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.expireIn.message}\n                </p>\n              )}\n            </div> */}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status</label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Features<span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"features\"\n                control={control}\n                defaultValue={[]}\n                rules={{\n                  required: \"At least one feature is required\",\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    mode=\"tags\"\n                    placeholder=\"Please select\"\n\n                    style={{\n                      width: '100%',\n                    }}\n                    className={`${inputClassName}`}\n                  />\n                )}\n              />\n\n              {errors.features && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.features.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default EditPlan;\n"],"names":["register","handleSubmit","setValue","control","getValues","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","planIdEnc","useParams","planId","decrypt","planByIdData","useSelector","state","plan","useEffect","reqData","_id","getPlanByIdFunc","_planByIdData$data","_planByIdData$data2","_planByIdData$data3","_planByIdData$data4","_planByIdData$data5","_planByIdData$data6","_planByIdData$data7","_moment","data","title","description","cutPrice","colorCode","price","days","status","moment","discountExpireIn","format","features","colorCodeWatch","useWatch","name","defaultValue","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","finalPayload","duration","updatePlanFunc","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","value","pattern","onChange","e","maxLength","ColorPicker","color","r","g","b","a","metaColor","hexColor","rgbaToHex","toHex","n","hex","toString","length","Controller","render","_ref","field","Select","inputAntdSelectClassName","Option","rules","_ref2","mode","style","width"],"sourceRoot":""}