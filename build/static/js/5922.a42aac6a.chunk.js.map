{"version":3,"file":"static/js/5922.a42aac6a.chunk.js","mappings":"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","sources":["pages/financeManagement/advance/CreateAdvance.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { customDayjs, domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, inputLabelClassNameReactSelect, optionLabelForBankSlect, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { branchSearch, getBranchDetails } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport ReactSelect from \"react-select\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { expenseTypeSearch } from \"../../global/other/ExpenseHead/expenseTypeFeature/_expenseType_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { createadvance } from \"./advanceFeature/_advance_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { officeAddressSearch } from \"../../global/other/officeAddressManagement/officeAddressFeature/_office_address_reducers\";\nimport { Select } from \"antd\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\n\nconst CreateAdvance = () => {\n  const { loading: advanceLoading } = useSelector(\n    (state) => state.advance\n  );\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n  const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n  const { branchDetailsData } = useSelector((state) => state.branch);\n  const { employeList } = useSelector(\n    (state) => state.employe\n  );\n  const { officeAddressListData, loading: officeAddressLoading } = useSelector((state) => state.officeAddress);\n  const { clientGroupList, groupSearchLoading } = useSelector(state => state.clientGroup);\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"clientGroupId\": data?.groupName,\n      \"employeId\": data?.type === \"cash\" ? data?.employeeId?.value : null,\n      \"bankAccId\": data?.type !== \"cash\" ? data?.bankId : null,\n      \"type\": data?.type,\n      \"chequeNo\": data?.type !== \"cheque\" ? data?.chequeNo : null,\n      \"transactionNo\": data?.type === \"bank\" ? data?.transactionNo : null,\n      \"amount\": + data?.amount,\n      \"naration\": data?.naration,\n      \"date\": customDayjs(data?.date),\n      \"receiptLayoutId\": data?.invoiceLayout,\n    };\n    dispatch(createadvance(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  useEffect(() => {\n    if (BranchId || (userInfoglobal?.userType !== \"company\" && userInfoglobal?.userType !== \"companyDirector\" && userInfoglobal?.userType !== \"admin\")) {\n      dispatch(getBranchDetails({\n        _id: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"admin\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId\n      }))\n    }\n  }, [BranchId])\n\n\n\n  useEffect(() => {\n    if ((CompanyId || userInfoglobal?.userType !== \"admin\") && (BranchId || userInfoglobal?.userType !== \"companBranch\" || userInfoglobal?.userType === \"employee\")) {\n      fetchEmployeListData()\n    }\n  }, [CompanyId, BranchId])\n\n  const fetchEmployeListData = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isPagination: false,\n      departmentId: '',\n      designationId: '',\n      companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n    };\n    dispatch(employeSearch(reqPayload));\n  };\n  const handleFocusClientGrp = () => {\n\n    dispatch(\n      clientGrpSearch({\n        companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    );\n\n  };\n  const handleFocusBranchSearch = () => {\n\n    dispatch(\n      branchSearch({\n        companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    );\n\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" &&\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") &&\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDBranchId\"\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      onFocus={handleFocusBranchSearch}\n                      className={`${inputAntdSelectClassName} `}\n                       showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDBranchId.message}\n                  </p>\n                )}\n              </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Group Type <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"groupName\", {\n                  required: \"Organization type is required\",\n                })}\n                className={` ${inputClassName} ${errors.groupName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                onFocus={handleFocusClientGrp}\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Group Type\n                </option>\n                {clientGroupList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}({elment?.groupName})</option>\n                ))}\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"groupName\"\n                rules={{ required: \"groupName is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    onFocus={handleFocusClientGrp}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                      showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                  >\n                    <Select.Option value=\"\">Select Group Type</Select.Option>\n                    {groupSearchLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (sortByPropertyAlphabetically(clientGroupList, 'fullName')?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}({type?.groupName})\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.groupName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.groupName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"md:col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Firm Layout Name<span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"invoiceLayout\", {\n                  required: \"Task Name is required\",\n                })}\n                className={` ${inputClassName} ${errors.invoiceLayout ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                onFocus={() => {\n                  dispatch(\n                    officeAddressSearch({\n                      companyId:\n                        userInfoglobal?.userType === \"admin\"\n                          ? watch(\"PDCompanyId\")\n                          : userInfoglobal?.userType === \"company\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.companyId,\n                      branchId:\n                        userInfoglobal?.userType === \"company\" ||\n                          userInfoglobal?.userType === \"admin\" ||\n                          userInfoglobal?.userType === \"companyDirector\"\n                          ? watch(\"PDBranchId\")\n                          : userInfoglobal?.userType === \"companyBranch\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.branchId,\n                      directorId: \"\",\n                      text: \"\",\n                      sort: true,\n                      status: true,\n                      type: \"receipt\",\n                      isPagination: false,\n                      bankAccountId: \"\",\n                      isGSTEnabled: \"\",\n                    })\n                  );\n                }}\n              >\n                <option className=\"\" value=\"\">\n                  Select Layout\n                </option>\n\n                {officeAddressListData?.map((element) => (\n                  <option value={element?._id}>{element?.firmName}</option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"invoiceLayout\"\n                rules={{ required: \"Task Name is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={` ${inputAntdSelectClassName} ${errors.invoiceLayout ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                       showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                    onFocus={() => {\n                      dispatch(\n                        officeAddressSearch({\n                          companyId:\n                            userInfoglobal?.userType === \"admin\"\n                              ? watch(\"PDCompanyId\")\n                              : userInfoglobal?.userType === \"company\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.companyId,\n                          branchId:\n                            userInfoglobal?.userType === \"company\" ||\n                              userInfoglobal?.userType === \"admin\" ||\n                              userInfoglobal?.userType === \"companyDirector\"\n                              ? watch(\"PDBranchId\")\n                              : userInfoglobal?.userType === \"companyBranch\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.branchId,\n                          directorId: \"\",\n                          text: \"\",\n                          sort: true,\n                          status: true,\n                          type: \"invoice\",\n                          isPagination: false,\n                          bankAccountId: \"\",\n                          isGSTEnabled: \"\",\n                        })\n                      );\n                    }}\n                  >\n                    <Select.Option className=\"\" value=\"\">\n                      Select Layout\n                    </Select.Option>\n\n                    {officeAddressLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (sortByPropertyAlphabetically(officeAddressListData, 'firmName')?.map((element) => (\n                      <Select.Option value={element?._id}>{element?.firmName}</Select.Option>\n                    )))}\n                  </Select>\n                  // <Select\n                  //   {...field}\n                  //   defaultValue={\"\"}\n                  //   className={`${inputAntdSelectClassName} `}\n                  // >\n                  //   <Select.Option value=\"\">Select Branch</Select.Option>\n                  //   {branchList?.map((type) => (\n                  //     <Select.Option key={type?._id} value={type?._id}>\n                  //       {type?.fullName}\n                  //     </Select.Option>\n                  //   ))}\n                  // </Select>\n                )}\n              />\n              {errors.invoiceLayout && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.invoiceLayout.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Type <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"type\", {\n                  required: \"Type is required\"\n                })}\n                className={`${inputClassName}  ${errors.type\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n              >\n\n                <option value='cash'>\n                  Cash Deposit\n                </option>\n                <option value='cheque'>\n                  Cheque Deposit\n                </option>\n                <option value='bank'>\n                  Bank Transfer\n                </option>\n              </select>\n               */}\n              <Controller\n                control={control}\n                name=\"type\"\n                rules={{ required: \"type is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName}  ${errors.type\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                      } `}\n                        showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                  >\n                    <Select.Option value=''>\n                      Select Type\n                    </Select.Option>\n                    <Select.Option value='cash'>\n                      Cash Deposit\n                    </Select.Option>\n                    {/* <Select.Option value='cheque'>\n                      Cheque Deposit\n                    </Select.Option> */}\n                    <Select.Option value='bank'>\n                      Bank Transfer\n                    </Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.type.message}\n                </p>\n              )}\n            </div>\n            {watch(\"type\") !== \"cash\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Bank<span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n\n                {...register(\"bankId\",)}\n                className={`${inputClassName}  ${errors.bankId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n              // onFocus={handleFocusCompany}\n              >\n\n                <option value=''>\n                  select bank\n                </option>\n                {\n                  branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                  branchDetailsData.data.bankData.map((type) => (\n                    <option key={type._id} value={type._id}>\n                      {`${type.bankName} (${type.branchName})`}\n                    </option>\n                  ))\n                }\n              </select> */}\n\n\n              <Controller\n                control={control}\n                name=\"bankId\"\n                rules={{ required: \"bankId is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                     showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                  >\n                    <Select.Option value=\"\">Select Bank</Select.Option>\n                    {\n                      branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                      sortByPropertyAlphabetically(branchDetailsData.data.bankData, 'bankName').map((type) => (\n                        <Select.Option key={type._id} value={type._id}>\n                           {optionLabelForBankSlect(type)}\n                          {/* {`${type.bankName} (${type.branchName})`} */}\n                        </Select.Option>\n                      ))\n                    }\n                  </Select>\n                )}\n              />\n              {errors.bankId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.bankId.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"type\") === \"cash\" && <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Employee</label>\n              <Controller\n                name=\"employeeId\"\n                control={control}\n                rules={{ required: \"Employee is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    {...field}\n                    options={sortByPropertyAlphabetically(employeList, 'fullName')?.map((employee) => ({\n                      value: employee?._id,\n                      label: employee?.fullName,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.employeeId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Employee\"\n                  />\n                )}\n              />\n              {errors.employeeId && <p className=\"text-red-500 text-sm\">{errors.employeeId.message}</p>}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Amount<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                 step=\"0.01\"\n                {...register(\"amount\", {\n                  required: \"Amount is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.amount ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.amount.message}\n                </p>\n              )}\n            </div>\n            {watch(\"type\") === \"cheque\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Cheque No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"chequeNo\", {\n                  required: \"chequeNo is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.chequeNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Cheque no\"\n              />\n              {errors.chequeNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.chequeNo.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"type\") === \"bank\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Transaction No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"transactionNo\", {\n                  required: \"transaction No is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.transactionNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Transaction no\"\n              />\n              {errors.transactionNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.transactionNo.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration <span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.naration ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <input\n                type=\"date\"\n                {...register(\"date\", {\n                  required: \"Date is required\",\n                })}\n                className={` ${inputClassName} ${errors.date ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Date\"\n              /> */}\n              <Controller\n                name=\"date\"\n                control={control}\n                rules={{\n                  required: \"Date  is required\",\n                }}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                  // disabledDate={(current) => {\n                  //   return (\n                  //     current &&\n                  //     current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                  //   );\n                  // }}\n                  />\n                )}\n              />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.date.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={advanceLoading}\n              className={`${advanceLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {advanceLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateAdvance;\n"],"names":["CreateAdvance","loading","advanceLoading","useSelector","state","advance","register","handleSubmit","control","watch","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","BranchId","branchDetailsData","employeList","employe","officeAddressListData","officeAddressLoading","officeAddress","clientGroupList","groupSearchLoading","clientGroup","useEffect","userType","getBranchDetails","_id","branchId","fetchEmployeListData","reqPayload","text","status","sort","isTL","isHR","isPagination","departmentId","designationId","companyId","employeSearch","handleFocusClientGrp","clientGrpSearch","groupId","handleFocusBranchSearch","branchSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$employeeId","finalPayload","PDCompanyId","directorId","PDBranchId","groupName","type","employeeId","value","bankId","chequeNo","transactionNo","amount","naration","customDayjs","date","invoiceLayout","createadvance","then","error","inputLabelClassName","Controller","rules","required","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","sortByPropertyAlphabetically","map","fullName","message","_ref2","_sortByPropertyAlphab2","onFocus","disabled","ListLoader","_ref3","_sortByPropertyAlphab3","_ref4","_sortByPropertyAlphab4","officeAddressSearch","bankAccountId","isGSTEnabled","element","firmName","_ref5","_ref6","_branchDetailsData$da","_branchDetailsData$da2","bankData","length","optionLabelForBankSlect","_ref7","_sortByPropertyAlphab5","ReactSelect","options","employee","label","classNamePrefix","inputLabelClassNameReactSelect","placeholder","step","inputClassName","_ref8","CustomDatePicker","Loader"],"sourceRoot":""}