{"version":3,"file":"static/js/9074.82409afb.chunk.js","mappings":"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","sources":["pages/hr/employeeSalary/StandardPayroll/CreateStandardPayroll.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { domainName, formButtonClassName, inputAntdSelectClassName, inputAntdSelectClassNameFilter, inputClassName, inputLabelClassName, inputLabelClassNameReactSelect, sortByPropertyAlphabetically } from \"../../../../constents/global\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport ReactSelect from \"react-select\";\nimport { Checkbox, Select } from \"antd\";\nimport { standardPayrollCreate } from \"./standardPayrollfeature/_standardPayroll_reducers\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport { getdeductionsList } from \"../Deductions/deductionsfeature/_deductionsList_reducers\";\nimport { getAllowanceList } from \"../Allowance/allowancefeature/_allowanceList_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\n\n\nconst CreateStandardPayroll = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { allowanceListData, loading: allowanceLoading } = useSelector((state) => state.allowance);\n  const { deductionsListData, loading: deductionLoading } = useSelector((state) => state.deductions);\n  const { employeList, loading: employeLoading } = useSelector((state) => state.employe);\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const [finalemployeeList, setFinalEmployeeList] = useState([]);\n  const [allDedfinalemployeeList, setAllDedFinalEmployeeList] = useState([]);\n  const { loading: standardPayrollLoading } = useSelector(\n    (state) => state.standardPayroll\n  );\n  const selectedEmployee = useWatch({\n    control,\n    name: \"employee\",\n    defaultValue: \"\",\n  });\n  const deductionsListDetails = useWatch({\n    control,\n    name: \"deductionDetails\",\n    defaultValue: \"\",\n  });\n  const allowanceListDetails = useWatch({\n    control,\n    name: \"allowanceDetails\",\n    defaultValue: \"\",\n  });\n\n\n  // useEffect(() => {\n  //   if (employeList && Array.isArray(employeList)) {\n  //     const updatedList = employeList.map(employee => ({\n  //       ...employee,\n  //       salaryData: {\n  //         basicSalary: getRandomNumber(300, 1000),\n  //         yearlySalary: getRandomNumber(8000, 20000),\n  //         monthlySalary: getRandomNumber(50000, 150000),\n  //       }\n  //     }));\n  //     setFinalEmployeeList(updatedList);\n  //   }\n  // }, [employeList]);\n\n  useEffect(() => {\n    if (selectedEmployee && Array.isArray(selectedEmployee)) {\n      const newData = selectedEmployee.map((data) => {\n        const employeeId = data?.value;\n        const getedData = employeList?.find(\n          (employee) => employee?._id === employeeId\n        );\n\n        if (!getedData) return null;\n\n        let AllDed = [];\n        const salaryData = getedData?.salaryData || {};\n        const basicSalary = Number(salaryData?.basicSalary) || 0;\n\n        // Process Allowances\n        if (Array.isArray(allowanceListDetails)) {\n          allowanceListDetails.forEach((all) => {\n            const allId = all?.allowance;\n            const allowanceItem = allowanceListData?.find(\n              (item) => item?._id === allId\n            );\n            const allName = allowanceItem?.name || \"-\";\n            const allIsPercentage = all?.isPercentage;\n            const amount = Number(all?.amount) || 0;\n\n            const calculatedAmounted =\n              allIsPercentage === \"Yes\"\n                ? (basicSalary * amount) / 100\n                : amount;\n\n            AllDed.push({\n              name: allName,\n              isPercentage: allIsPercentage,\n              _id: allId,\n              amount: calculatedAmounted,\n              type: \"allowance\",\n            });\n          });\n        }\n\n        // Process Deductions\n        if (Array.isArray(deductionsListDetails)) {\n          deductionsListDetails.forEach((ded) => {\n            const dedId = ded?.deduction;\n            const deductionItem = deductionsListData?.find(\n              (item) => item?._id === dedId\n            );\n            const dedName = deductionItem?.name || \"-\";\n            const dedIsPercentage = ded?.isPercentage;\n            const amount = Number(ded?.amount) || 0;\n\n            const calculatedAmounted =\n              dedIsPercentage === \"Yes\"\n                ? (basicSalary * amount) / 100\n                : amount;\n\n            AllDed.push({\n              name: dedName,\n              isPercentage: dedIsPercentage,\n              _id: dedId,\n              amount: calculatedAmounted,\n              type: \"deduction\",\n            });\n          });\n        }\n\n        return { ...getedData, AllDed };\n      });\n\n      // Filter out any null employees if .find() failed\n      const filteredData = newData.filter(Boolean);\n      setAllDedFinalEmployeeList(filteredData);\n    }\n  }, [\n    selectedEmployee,\n    allowanceListDetails,\n    deductionsListDetails,\n    allowanceListData,\n    deductionsListData,\n    employeList,\n  ]);\n\n\n  // Helper function\n  const getRandomNumber = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const [isSelectAllChecked, setIsSelectAllChecked] = useState(false);\n  const handleSelectAll = (field) => {\n    if (isSelectAllChecked) {\n      field.onChange([]);\n    } else {\n      const allEmployees = employeList.map((employee) => ({\n        value: employee._id,\n        label: employee.fullName,\n      }));\n      field.onChange(allEmployees);\n    }\n    setIsSelectAllChecked(!isSelectAllChecked);\n  };\n\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const {\n    fields: allowanceDetails,\n    append: appendAllowance,\n    remove: removeAllowance,\n  } = useFieldArray({\n    control,\n    name: \"allowanceDetails\",\n  });\n  const {\n    fields: deductionDetails,\n    append: appendDeduction,\n    remove: removeDeduction,\n  } = useFieldArray({\n    control,\n    name: \"deductionDetails\",\n  });\n\n\n\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: \"\",\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"employeIds\": (data?.employee && data?.employee?.length > 0) ? data?.employee?.map((employee) => employee.value) : [],\n      \"allowances\": data?.allowanceDetails?.map((allowance) => ({\n        \"allowanceId\": allowance?.allowance,\n        \"name\": allowanceListData?.find((item) => item?._id === allowance?.allowance)?.name,\n        \"isPercentage\": allowance?.isPercentage === \"Yes\" ? true : false,\n        \"value\": allowance?.amount\n      })),\n      \"deductions\": data?.deductionDetails?.map((deduction) => ({\n        \"deductionId\": deduction?.deduction,\n        \"name\": deductionsListData?.find((item) => item?._id === deduction?.deduction)?.name,\n        \"isPercentage\": deduction?.isPercentage === \"Yes\" ? true : false,\n        \"value\": deduction?.amount\n      }))\n    };\n\n    dispatch(standardPayrollCreate(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  const getDeductionsData = () => {\n    let reqData = {\n      // currentPage: currentPage,\n      // pageSize: pageSize,\n      reqPayload: {\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        directorId: \"\",\n        companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      },\n    };\n    dispatch(getdeductionsList(reqData));\n  };\n  const getchAllowanceData = () => {\n    let reqData = {\n      // currentPage: currentPage,\n      // pageSize: pageSize,\n      reqPayload: {\n        \"text\": \"\",\n        \"sort\": true,\n        \"status\": true,\n        \"isPagination\": false,\n        directorId: \"\",\n        companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      },\n    };\n    dispatch(getAllowanceList(reqData));\n  };\n  useEffect(() => {\n    if ((CompanyId || userInfoglobal?.userType !== \"admin\") && (BranchId || userInfoglobal?.userType !== \"companBranch\" || userInfoglobal?.userType === \"employee\")) {\n      getDeductionsData();\n      getchAllowanceData();\n    }\n  }, [CompanyId, BranchId,])\n\n\n  const { Option } = Select\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n\n                    className={`${inputAntdSelectClassName} `}\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"PDBranchId\"\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    onChange={(value) => {\n                      setValue(\"employee\", '')\n                      field.onChange(value);\n                    }}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled><ListLoader /></Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Employees <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"employee\"\n                control={control}\n                rules={{ required: \"At least one employee is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    {...field}\n                    isMulti\n                    onFocus={() => {\n                      dispatch(employeSearch({\n                        companyId:\n                          userInfoglobal?.userType === \"admin\"\n                            ? watch(\"PDCompanyId\")\n                            :\n                            userInfoglobal?.userType === \"company\"\n                              ? userInfoglobal?._id\n                              : userInfoglobal?.companyId,\n                        branchId:\n                          userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.branchId,\n                        departmentId: watch('PDDepartmentId')?.value,\n                        \"directorId\": \"\",\n                        text: \"\",\n                        sort: true,\n                        status: true,\n                        isPagination: false,\n                      }));\n                    }}\n                    options={\n                      Array.isArray(employeList) && employeList?.length > 0\n                        ? [\n                          { value: \"select_all\", label: \"Select All\" },\n                          ...sortByPropertyAlphabetically(employeList, 'fullName').map((employee) => ({\n                            value: employee?._id,\n                            label: employee?.fullName,\n                          })),\n                        ]\n                        : []\n                    }\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.employee ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Employees...\"\n                    onChange={(selectedOptions) => {\n                      const isSelectAllSelected = selectedOptions.find(\n                        (option) => option.value === \"select_all\"\n                      );\n\n                      if (isSelectAllSelected) {\n                        handleSelectAll(field);\n                      } else {\n                        // Check if all employees are selected\n                        setIsSelectAllChecked(\n                          selectedOptions?.length === employeList?.length\n                        );\n                        field.onChange(selectedOptions);\n                      }\n                    }}\n                    value={field.value || []}\n                    formatOptionLabel={(data, { context }) => {\n                      if (data.value === \"select_all\") {\n                        return (\n                          <div className=\"flex items-center\">\n                            <input\n                              type=\"checkbox\"\n                              checked={isSelectAllChecked}\n                              onChange={() => handleSelectAll(field)}\n                              style={{ marginRight: \"10px\" }}\n                            />\n                            <span>Select All</span>\n                          </div>\n                        );\n                      }\n                      return data.label;\n                    }}\n                  />\n                )}\n              />\n              {errors.employee && (\n                <p className=\"text-red-500 text-sm mt-1\">\n                  {errors.employee.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-1 gap-4\">\n            <div>\n              <div className=\" rounded-t-lg border border-gray-300 md:mt-0 mt-3\">\n                <div className=\"py-2 text-white bg-header px-2 rounded-t-lg font-semibold\">\n                  Allowance{\" \"}\n                </div>\n                {allowanceDetails.map((item, index) => (\n                  <div key={index} className=\" rounded-md my-2 \">\n                    <div key={item.id} className=\"\">\n\n\n                      <div className=\"px-3 grid md:grid-cols-4 sm:grid-cols-2 grid-cols-1 gap-4 items-end mb-3\">\n                        <div className=\"flex gap-3\">\n                          <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                              Allowance <span className=\"text-red-600\">*</span>\n                            </label>\n                            <Controller\n                              name={`allowanceDetails[${index}].allowance`}\n                              control={control}\n                              rules={{ required: \"allowance is required\" }}\n                              render={({ field }) => (\n                                <Select\n                                  {...field}\n                                  className={`${inputAntdSelectClassName} ${errors.allowanceDetails?.[index]?.allowance ? '' : 'border-gray-300'}`}\n                                  showSearch\n                                  filterOption={(input, option) =>\n                                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                  }\n                                  placeholder=\"Select allowance\"\n                                  value={field.value}\n                                  onChange={(value) => {\n                                    field.onChange(value);\n                                  }}\n                                >\n                                  <Option value=\"\">Select allowance</Option>\n                                  {allowanceLoading ? (\n                                    <Select.Option disabled><ListLoader /></Select.Option>\n                                  ) : (\n                                    sortByPropertyAlphabetically(allowanceListData)\n                                      ?.filter(opt => {\n                                        // Allow current value and exclude already selected ones\n                                        const selectedIds = allowanceDetails\n                                          .filter((_, i) => i !== index) // exclude current index\n                                          .map(a => a.allowance);\n                                        return !selectedIds.includes(opt._id);\n                                      })\n                                      .map(item => (\n                                        <Option key={item._id} value={item._id}>\n                                          {item.name}\n                                        </Option>\n                                      ))\n                                  )}\n                                </Select>\n\n                              )}\n                            />\n                            {errors.allowanceDetails?.[index]?.allowance && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors.allowanceDetails[index].allowance.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Is Percentage <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Controller\n                            name={`allowanceDetails[${index}].isPercentage`}\n                            control={control}\n                            rules={{ required: \"isPercentage is required\" }}\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                className={`${inputAntdSelectClassName} ${errors.allowanceDetails?.[index]?.isPercentage ? '' : 'border-gray-300'}`}\n                                placeholder=\"Select Is Percentage\"\n                                value={field.value}\n                                onChange={(value) => {\n                                  field.onChange(value);\n                                }}\n                              >\n                                <Option value=\"\">Select Is Percentage</Option>\n                                <Option value=\"Yes\">Yes</Option>\n                                <Option value=\"No\">No</Option>\n                              </Select>\n\n                            )}\n                          />\n                          {errors.allowanceDetails?.[index]?.isPercentage && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.allowanceDetails[index].isPercentage.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            {watch(`allowanceDetails[${index}].isPercentage`) === \"Yes\" ? \"Percentage\" : \"Amount\"} <span className=\"text-red-600\">*</span>\n                          </label>\n\n                          <input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"Enter Amount\"\n                            {...register(`allowanceDetails[${index}].amount`, {\n                              required: \"Amount is required\",\n                              valueAsNumber: true,\n                              min: watch(`allowanceDetails[${index}].isPercentage`) === \"Yes\" ? 1 : 0,\n                              validate: (value) => {\n                                const isPercentage = watch(`allowanceDetails[${index}].isPercentage`) === \"Yes\";\n                                if (isPercentage && value > 100) return \"Percentage can't be more than 100\";\n                                return true;\n                              }\n                            })}\n                            className={`${inputClassName} ${errors.deductionDetails?.[index]?.amount\n                              ? \"border-[1px]\"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                          {errors.allowanceDetails?.[index]?.amount && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.allowanceDetails[index].amount.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"py-2\">\n                          {(\n                            <div className=\"flex justify-end items-center\">\n                              <button\n                                type=\"button\"\n                                onClick={() => {\n                                  removeAllowance(item, index)\n                                }}\n                                className=\"text-rose-800 hover:text-rose-900 flex items-center justify-center p-1 rounded-lg\"\n                              >\n                                <i className=\"fas fa-trash-alt\"></i>\n                              </button>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    appendAllowance({\n\n                    })\n                  }\n                  className={`${formButtonClassName} mx-3 mb-2`}\n                >\n                  Add Allowance\n                </button>\n              </div>\n            </div>\n            <div>\n              <div className=\" rounded-t-lg border border-gray-300 \">\n                <div className=\"py-2 text-white bg-header px-2 rounded-t-lg  font-semibold\">\n                  Deductions{\" \"}\n                </div>\n                {deductionDetails.map((item, index) => (\n                  <div key={index} className=\" rounded-md my-2 \">\n                    <div key={item.id} className=\"\">\n                      <div className=\"px-3 grid md:grid-cols-4 sm:grid-cols-2 grid-cols-1 gap-4 items-end mb-3\">\n                        <div className=\"flex gap-3\">\n                          <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                              Deduction <span className=\"text-red-600\">*</span>\n                            </label>\n                            <Controller\n                              name={`deductionDetails[${index}].deduction`}\n                              control={control}\n                              rules={{ required: \"deduction is required\" }}\n                              render={({ field }) => (\n                                <Select\n                                  {...field}\n                                  className={`${inputAntdSelectClassName} ${errors.deductionDetails?.[index]?.deduction ? '' : 'border-gray-300'}`}\n                                  showSearch\n                                  filterOption={(input, option) =>\n                                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                  }\n                                  placeholder=\"Select deduction\"\n                                  value={field.value}\n                                  onChange={(value) => {\n                                    field.onChange(value);\n                                  }}\n                                >\n                                  <Option value=\"\">Select deduction</Option>\n                                  {deductionLoading ? (\n                                    <Select.Option disabled><ListLoader /></Select.Option>\n                                  ) : (\n                                    sortByPropertyAlphabetically(deductionsListData)\n                                      ?.filter(opt => {\n                                        const selectedIds = deductionDetails\n                                          .filter((_, i) => i !== index) // Exclude the current one so it doesn't filter itself\n                                          .map(d => d.deduction);\n                                        return !selectedIds.includes(opt._id);\n                                      })\n                                      .map(item => (\n                                        <Option key={item._id} value={item._id}>\n                                          {item.name}\n                                        </Option>\n                                      ))\n                                  )}\n                                </Select>\n                              )}\n                            />\n                            {errors.deductionDetails?.[index]?.deduction && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors.deductionDetails[index].deduction.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Is Percentage <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Controller\n                            name={`deductionDetails[${index}].isPercentage`}\n                            control={control}\n                            rules={{ required: \"isPercentage is required\" }}\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                className={`${inputAntdSelectClassName} ${errors.deductionDetails?.[index]?.isPercentage ? '' : 'border-gray-300'}`}\n                                placeholder=\"Select Is Percentage\"\n                                value={field.value}\n                                onChange={(value) => {\n                                  field.onChange(value);\n                                }}\n                              >\n                                <Option value=\"\">Select Is Percentage</Option>\n                                <Option value=\"Yes\">Yes</Option>\n                                <Option value=\"No\">No</Option>\n                              </Select>\n                            )}\n                          />\n                          {errors.deductionDetails?.[index]?.isPercentage && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.deductionDetails[index].isPercentage.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            {watch(`deductionDetails[${index}].isPercentage`) === \"Yes\" ? \"Percentage\" : \"Amount\"} <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"Enter Amount\"\n                            {...register(`deductionDetails[${index}].amount`, {\n                              required: \"Amount is required\",\n                              valueAsNumber: true,\n                              min: watch(`deductionDetails[${index}].isPercentage`) === \"Yes\" ? 1 : 0,\n                              validate: (value) => {\n                                const isPercentage = watch(`deductionDetails[${index}].isPercentage`) === \"Yes\";\n                                if (isPercentage && value > 100) return \"Percentage can't be more than 100\";\n                                return true;\n                              }\n                            })}\n                            className={`${inputClassName} ${errors.deductionDetails?.[index]?.amount\n                              ? \"border-[1px]\"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                          {errors.deductionDetails?.[index]?.amount && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.deductionDetails[index].amount.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"py-2\">\n                          {(\n                            <div className=\"flex justify-end items-center\">\n                              <button\n                                type=\"button\"\n                                onClick={() => {\n                                  removeDeduction(item, index)\n                                }}\n                                className=\"text-rose-800 hover:text-rose-900 flex items-center justify-center p-1 rounded-lg\"\n                              >\n                                <i className=\"fas fa-trash-alt\"></i>\n                              </button>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    appendDeduction({\n\n                    })\n                  }\n                  className={`${formButtonClassName} mx-3 mb-2`}\n                >\n                  Add Deduction\n                </button>\n              </div>\n            </div>\n          </div>\n\n\n          <div className=\"flex justify-end m-2 \">\n            <button\n              type=\"submit\"\n              disabled={standardPayrollLoading}\n              className={`${standardPayrollLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {standardPayrollLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n        <div className=\"space-y-6\">\n          {allDedfinalemployeeList?.map((employee) => {\n            // Calculate totals\n            const totalAllowances = employee?.AllDed\n              ?.filter(item => item?.type?.toLowerCase() === 'allowance')\n              ?.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0) || 0;\n\n            const totalDeductions = employee?.AllDed\n              ?.filter(item => item?.type?.toLowerCase() === 'deduction')\n              ?.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0) || 0;\n\n            const netSalary = (parseFloat(employee?.salaryData?.basicSalary) || 0) + totalAllowances - totalDeductions;\n\n            return (\n              <div key={employee?.id || employee?.fullName} className=\"bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden max-w-4xl mx-auto\">\n\n                {/* Employee Header with Salary Summary */}\n                <div className=\"bg-header text-white p-5\">\n                  <div className=\"flex flex-col md:flex-row items-center gap-6\">\n                    <div className=\"w-24 h-24 rounded-full bg-white flex items-center justify-center shrink-0\">\n                      {employee?.profileImage ? (\n                        <img src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${employee.profileImage}`} alt=\"Profile\" className=\"w-full h-full rounded-full object-cover\" />\n                      ) : (\n                        <span className=\"text-3xl font-bold text-header\">{employee?.fullName?.charAt(0).toUpperCase()}</span>\n                      )}\n                    </div>\n\n                    <div className=\"flex-1 text-center md:text-left\">\n                      <h2 className=\"text-xl font-bold\">{employee?.fullName}</h2>\n                      <p className=\"text-blue-100\">{employee?.designation || 'Employee'}</p>\n\n                      {/* Salary Summary - Now visible with proper sizing */}\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 mt-4 text-sm md:text-base\">\n                        <div className=\"bg-white/10 p-2 rounded\">\n                          <p className=\"font-medium\">Basic Salary</p>\n                          <p className=\"font-bold\">₹{employee?.salaryData?.basicSalary?.toLocaleString('en-IN') || '0'}</p>\n                        </div>\n                        <div className=\"bg-white/10 p-2 rounded\">\n                          <p className=\"font-medium\">Monthly Salary</p>\n                          <p className=\"font-bold\">₹{employee?.salaryData?.currentSalary?.toLocaleString('en-IN') || '0'}</p>\n                        </div>\n                        <div className=\"bg-white/10 p-2 rounded\">\n                          <p className=\"font-medium\">Yearly Package</p>\n                          <p className=\"font-bold\">₹{employee?.salaryData?.currentPackage?.toLocaleString('en-IN') || '0'}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Detailed Salary Breakdown */}\n                <div className=\"p-5\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5\">\n\n                    {/* Allowances Section */}\n                    <div className=\"border border-green-100 rounded-lg overflow-hidden\">\n                      <div className=\"bg-green-50 p-3 border-b border-green-100\">\n                        <h3 className=\"text-lg font-semibold text-green-800 flex items-center gap-2\">\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                          Allowances\n                        </h3>\n                      </div>\n\n                      <div className=\"divide-y divide-green-50\">\n                        {employee?.AllDed?.filter(item => item?.type?.toLowerCase() === 'allowance')?.length > 0 ? (\n                          employee.AllDed.filter(item => item?.type?.toLowerCase() === 'allowance').map((item, idx) => (\n                            <div key={`allowance-${idx}`} className=\"p-3 flex justify-between items-center\">\n                              <span className=\"font-medium text-gray-700\">{item.name}</span>\n                              <span className=\"font-semibold text-green-600\">+ ₹{item.amount}</span>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"p-3 text-center text-gray-500\">No allowances this month</div>\n                        )}\n\n                        <div className=\"p-3 bg-green-50 flex justify-between font-semibold\">\n                          <span>Total Allowances</span>\n                          <span className=\"text-green-700\">+ ₹{totalAllowances.toLocaleString('en-IN')}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Deductions Section */}\n                    <div className=\"border border-red-100 rounded-lg overflow-hidden\">\n                      <div className=\"bg-red-50 p-3 border-b border-red-100\">\n                        <h3 className=\"text-lg font-semibold text-red-800 flex items-center gap-2\">\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 12H4\" />\n                          </svg>\n                          Deductions\n                        </h3>\n                      </div>\n\n                      <div className=\"divide-y divide-red-50\">\n                        {employee?.AllDed?.filter(item => item?.type?.toLowerCase() === 'deduction')?.length > 0 ? (\n                          employee.AllDed.filter(item => item?.type?.toLowerCase() === 'deduction').map((item, idx) => (\n                            <div key={`deduction-${idx}`} className=\"p-3 flex justify-between items-center\">\n                              <span className=\"font-medium text-gray-700\">{item.name}</span>\n                              <span className=\"font-semibold text-red-600\">- ₹{item.amount}</span>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"p-3 text-center text-gray-500\">No deductions this month</div>\n                        )}\n\n                        <div className=\"p-3 bg-red-50 flex justify-between font-semibold\">\n                          <span>Total Deductions</span>\n                          <span className=\"text-red-700\">- ₹{totalDeductions.toLocaleString('en-IN')}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Salary Calculation */}\n                <div className=\"p-5 border-t border-gray-200 bg-gray-50\">\n                  <div className=\"max-w-md mx-auto\">\n                    <h3 className=\"text-lg font-semibold text-center mb-4 text-gray-700\">Salary Calculation</h3>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium\">Basic Salary:</span>\n                        <span className=\"font-medium\">₹{employee?.salaryData?.basicSalary?.toLocaleString('en-IN') || '0'}</span>\n                      </div>\n\n                      <div className=\"flex justify-between text-green-600\">\n                        <span>Total Allowances:</span>\n                        <span>+ ₹{totalAllowances.toLocaleString('en-IN')}</span>\n                      </div>\n\n                      <div className=\"flex justify-between text-red-600\">\n                        <span>Total Deductions:</span>\n                        <span>- ₹{totalDeductions.toLocaleString('en-IN')}</span>\n                      </div>\n\n                      <div className=\"border-t border-gray-300 my-2\"></div>\n\n                      <div className=\"flex justify-between text-lg font-bold text-header\">\n                        <span>Net Salary Payable:</span>\n                        <span>₹{netSalary.toLocaleString('en-IN')}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n\n\n\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateStandardPayroll;\n"],"names":["CreateStandardPayroll","register","handleSubmit","control","watch","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","allowanceListData","loading","allowanceLoading","useSelector","state","allowance","deductionsListData","deductionLoading","deductions","employeList","employeLoading","employe","companyList","companyListLoading","company","branchList","branchListloading","branch","finalemployeeList","setFinalEmployeeList","useState","allDedfinalemployeeList","setAllDedFinalEmployeeList","standardPayrollLoading","standardPayroll","selectedEmployee","useWatch","name","defaultValue","deductionsListDetails","allowanceListDetails","useEffect","Array","isArray","filteredData","map","data","employeeId","value","getedData","find","employee","_id","AllDed","salaryData","basicSalary","Number","forEach","all","allId","allowanceItem","item","allName","allIsPercentage","isPercentage","amount","calculatedAmounted","push","type","ded","dedId","deduction","deductionItem","dedName","dedIsPercentage","_objectSpread","filter","Boolean","isSelectAllChecked","setIsSelectAllChecked","handleSelectAll","field","onChange","allEmployees","label","fullName","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","BranchId","fields","allowanceDetails","append","appendAllowance","remove","removeAllowance","useFieldArray","deductionDetails","appendDeduction","removeDeduction","userType","branchSearch","text","sort","status","isPagination","companyId","companySearch","getDeductionsData","reqData","reqPayload","directorId","branchId","getdeductionsList","getchAllowanceData","getAllowanceList","Option","Select","_jsx","GlobalLayout","children","_jsxs","className","autoComplete","onSubmit","_data$employee","_data$employee2","_data$allowanceDetail","_data$deductionDetail","finalPayload","PDCompanyId","PDBranchId","length","_allowanceListData$fi","_deductionsListData$f","standardPayrollCreate","then","error","inputLabelClassName","Controller","rules","required","render","_ref","inputAntdSelectClassName","disabled","ListLoader","message","_ref2","_sortByPropertyAlphab","showSearch","filterOption","input","option","String","toLowerCase","includes","sortByPropertyAlphabetically","_ref3","ReactSelect","isMulti","onFocus","_watch","employeSearch","departmentId","options","classNamePrefix","inputLabelClassNameReactSelect","placeholder","selectedOptions","formatOptionLabel","_ref4","context","checked","style","marginRight","index","_errors$allowanceDeta3","_errors$allowanceDeta4","_errors$allowanceDeta7","_errors$allowanceDeta8","_errors$deductionDeta","_errors$deductionDeta2","_errors$allowanceDeta9","_errors$allowanceDeta0","_ref5","_errors$allowanceDeta","_errors$allowanceDeta2","_sortByPropertyAlphab2","opt","_","i","a","_ref6","_errors$allowanceDeta5","_errors$allowanceDeta6","step","valueAsNumber","min","validate","inputClassName","onClick","id","formButtonClassName","_errors$deductionDeta5","_errors$deductionDeta6","_errors$deductionDeta9","_errors$deductionDeta0","_errors$deductionDeta1","_errors$deductionDeta10","_errors$deductionDeta11","_errors$deductionDeta12","_ref7","_errors$deductionDeta3","_errors$deductionDeta4","_sortByPropertyAlphab3","d","_ref8","_errors$deductionDeta7","_errors$deductionDeta8","Loader","_employee$AllDed","_employee$AllDed$filt","_employee$AllDed2","_employee$AllDed2$fil","_employee$salaryData","_employee$fullName","_employee$salaryData2","_employee$salaryData3","_employee$salaryData4","_employee$salaryData5","_employee$salaryData6","_employee$salaryData7","_employee$AllDed3","_employee$AllDed3$fil","_employee$AllDed4","_employee$AllDed4$fil","_employee$salaryData8","_employee$salaryData9","totalAllowances","_item$type","reduce","sum","parseFloat","totalDeductions","_item$type2","netSalary","profileImage","src","process","alt","charAt","toUpperCase","designation","toLocaleString","currentSalary","currentPackage","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","_item$type3","_item$type4","idx","_item$type5","_item$type6"],"sourceRoot":""}