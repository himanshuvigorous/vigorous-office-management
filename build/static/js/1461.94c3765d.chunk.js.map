{"version":3,"file":"static/js/1461.94c3765d.chunk.js","mappings":"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","sources":["pages/Director/director/CreateDirector.js"],"sourcesContent":["\n\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  formButtonClassName,\n  inputClassName,\n  inputLabelClassName,\n  domainName,\n  usertypelist,\n  inputerrorClassNameAutoComplete,\n  getLocationDataByPincode,\n  inputAntdSelectClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { FaCamera, FaUserAlt } from \"react-icons/fa\";\nimport { AiFillInstagram } from \"react-icons/ai\";\nimport { IoLogoFacebook } from \"react-icons/io\";\nimport { TbWorld } from \"react-icons/tb\";\nimport { FaSquareXTwitter } from \"react-icons/fa6\";\nimport { showNotification } from \"../../../global_layouts/CustomNotification/NotificationManager\";\nimport { directorCreate, getDirectorDetails } from \"./DirectorFeatures/_director_reducers\";\nimport { useNavigate } from \"react-router-dom\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { stateSearch } from \"../../global/address/state/featureStates/_state_reducers\";\nimport { companySearch, getCompanyDetails } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { citySearch } from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport { getEmployeeDocument } from \"../../global/other/employeeDocument/EmployeeDocumentFeatures/_emp_document_reducers\";\nimport { encrypt } from \"../../../config/Encryption\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nconst CreateDirector = () => {\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [profileImage, setProfileImage] = useState(null);\n  const [profileImagePayload, setProfileImagePayload] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n  const { companyDetailsData,loading:countryLoading } = useSelector((state) => state.company);\n  const { loading: directorLoading } = useSelector((state) => state.director);\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const {\n    userCompanyId,\n  } = getUserIds();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const userTypeglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  )?.userType;\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n  const PrintAddress = useWatch({\n    control,\n    name: \"PDAddress\",\n    defaultValue: \"\",\n  });\n  const PrintCity = useWatch({\n    control,\n    name: \"PDCity\",\n    defaultValue: \"\",\n  });\n  const PrintState = useWatch({\n    control,\n    name: \"PDState\",\n    defaultValue: \"\",\n  });\n  const PrintCountry = useWatch({\n    control,\n    name: \"PDCountry\",\n    defaultValue: \"\",\n  });\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPin\",\n    defaultValue: \"\",\n  });\n  const PrintMail = useWatch({\n    control,\n    name: \"PDEmail\",\n    defaultValue: \"\",\n  });\n  const PrintMobile = useWatch({\n    control,\n    name: \"PDMobileNo\",\n    defaultValue: \"\",\n  });\n  const PrintMobileCode = useWatch({\n    control,\n    name: \"PDMobileCode\",\n    defaultValue: \"\",\n  });\n  const PrintDirectorName = useWatch({\n    control,\n    name: \"PDDirectorName\",\n    defaultValue: \"\",\n  });\n\n\n\n  useEffect(() => {\n\n    if (PrintPincode && PrintPincode.length >= 4 &&\n      PrintPincode.length <= 6) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data.city);\n            setValue(\"PDState\", data.state);\n            setValue(\"PDCountry\", data.country);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n\n  useEffect(() => {\n    setValue(\"PDMobileCode\", \"+91\");\n  }, [countryListData]);\n\n\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    dispatch(\n      fileUploadFunc({\n        filePath: file,\n        isVideo: false,\n        isMultiple: false,\n      })\n    ).then((res) => {\n      setProfileImagePayload(res?.payload?.data);\n    });\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setProfileImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onSubmit = (data) => {\n    if (step === 1) {\n      const finalPayload = {\n        companyId: companyId,\n        firstName: \"\",\n        lastName: \"\",\n        profileImage: profileImagePayload,\n        fullName: data?.PDDirectorName,\n        // password: data?.PDConfirmPassword,\n        email: data?.PDEmail,\n        status: data?.PDStatus,\n        userType: \"companyDirector\",\n        mobile: {\n          code: data?.PDMobileCode,\n          number: data?.PDMobileNo,\n        },\n        directorProfile: {\n          tagline: data?.PDTagline ?? \"\",\n          secondaryEmail: \"test@gmail.com\",\n          // secondaryMobile: {\n          //   number: \"\",\n          //   code: \"\",\n          // },\n        },\n        addresses: {\n          primary: {\n            street: data?.PDAddress ?? \"\",\n            city: data?.PDCity ?? \"\",\n            state: data?.PDState ?? \"\",\n            country: data?.PDCountry ?? \"\",\n            pinCode: data?.PDPin ?? \"\",\n          },\n          secondary: {\n            street: \"\",\n            city: \"\",\n            state: \"\",\n            country: \"\",\n            pinCode: \"\",\n          },\n        },\n      };\n      dispatch(directorCreate(finalPayload)).then((output) => {\n        !output.error && navigate(`/admin/director/edit/${encrypt(output?.payload?.data?._id)}`);\n      });\n    }\n  };\n\n  const navTabClick = (clickedStep) => {\n    if (clickedStep !== 1) {\n      showNotification({\n        message: \"First submit Primary Details\",\n        type: 'error',\n      });\n    }\n  };\n\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"grid grid-cols-12 gap-2\">\n        <div className=\" md:col-span-3 col-span-12 w-full h-auto rounded-lg  \">\n          <div className=\"shadow bg-white rounded-xl py-2\">\n            {/* <div\n              className=\"relative w-[50px] h-[50px] mx-auto rounded-full border-2 border-slate-600 mt-3 flex items-center justify-center\"\n              onMouseEnter={() => setIsHovering(true)}\n              onMouseLeave={() => setIsHovering(false)}\n            >\n              <div\n                className=\"w-full h-full rounded-full overflow-hidden bg-gray-200 flex items-center justify-center\"\n                style={{\n                  backgroundImage: `url(${profileImage || \"\"})`,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                }}\n              >\n                {!profileImage && (\n                  <FaUserAlt className=\"text-slate-500 w-[30px] h-[25px] cursor-pointer\" />\n                )}\n              </div>\n\n              {isHovering && !profileImage && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-full\">\n                  <FaCamera className=\"text-white w-[20px] h-[20px] cursor-pointer\" />\n                </div>\n              )}\n\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"absolute inset-0 opacity-0 cursor-pointer\"\n              />\n            </div> */}\n            <div\n              className=\"relative w-[50px] h-[50px] mx-auto rounded-full border-2 border-slate-600 mt-3 flex items-center justify-center\"\n            >\n              <div\n                className=\"w-full h-full rounded-full overflow-hidden bg-gray-200 flex items-center justify-center\"\n                style={{\n                  backgroundImage: `url(${profileImage || \"\"})`,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                }}\n              >\n                {!profileImage && (\n                  <FaUserAlt className=\"text-slate-500 w-[30px] h-[25px] cursor-pointer\" />\n                )}\n              </div>\n              <div className=\"absolute bottom-0 right-0 bg-white p-[2px] rounded-full\">\n                <FaCamera className=\"text-header w-[16px] h-[16px] \" />\n              </div>\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"absolute inset-0 opacity-0 cursor-pointer\"\n              />\n            </div>\n            <div className=\"text-base font-medium overflow-auto mx-2 text-center mt-2 text-header capitalize\">\n              {PrintDirectorName ? PrintDirectorName : \"Owner Name\"}\n            </div>\n            <div className=\"border mx-2 px-2 my-2 py-3 rounded-lg \">\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Address</label>\n                <div\n                  className={`mt-1 block w-full overflow-auto px-2 py-[9px] shadow-sm rounded-lg text-xs capitalize bg-[#f4f6f9] focus:outline-none cursor-default min-h-8`}\n                >\n                  {PrintAddress && (\n                    <>\n                      {PrintAddress}, {\" \"}\n                    </>\n                  )}\n                  {PrintCity && (\n                    <>\n                      {PrintCity} , {\" \"}\n                    </>\n                  )}\n                  {PrintState && (\n                    <>\n                      {PrintState} , {\" \"}\n                    </>\n                  )}\n                  {PrintCountry && (\n                    <>\n                      {PrintCountry} , {\" \"}\n                    </>\n                  )}\n                  {PrintPincode && (\n                    <>\n                      {PrintPincode}\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Mail</label>\n                <div\n                  className={`mt-1 block w-full overflow-auto px-2 py-[9px] shadow-sm rounded-lg text-xs capitalize bg-[#f4f6f9] focus:outline-none cursor-default min-h-8`}\n                >\n                  {PrintMail}\n                </div>\n              </div>\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Phone number\n                </label>\n                <div className=\"flex gap-2\">\n                  <div\n                    className={`mt-1 block overflow-auto   py-[9px] shadow-sm rounded-lg text-xs capitalize bg-[#f4f6f9] focus:outline-none cursor-default min-h-8 min-w-6`}\n                  >\n                    {PrintMobileCode ? PrintMobileCode : +91}\n                  </div>\n                  <div\n                    className={`mt-1 block overflow-auto w-full px-2 py-[9px] shadow-sm rounded-lg text-xs capitalize bg-[#f4f6f9] focus:outline-none cursor-default min-h-8`}\n                  >\n                    {PrintMobile}\n                  </div>\n                </div>\n              </div>\n            </div>\n            {/* <div className=\"flex justify-center items-center text-[25px] text-header py-2 gap-1\">\n              <TbWorld\n                onClick={() => {\n                  if (PrintWebsite) {\n                    window.open(PrintWebsite, \"_blank\");\n                  }\n                }}\n              />\n              <AiFillInstagram\n                onClick={() => {\n                  if (PrintInstagram) {\n                    window.open(PrintInstagram, \"_blank\");\n                  }\n                }}\n              />\n              <IoLogoFacebook\n                onClick={() => {\n                  if (PrintFacebook) {\n                    window.open(PrintFacebook, \"_blank\");\n                  }\n                }}\n              />\n              <FaSquareXTwitter\n                onClick={() => {\n                  if (PrintTwitter) {\n                    window.open(PrintTwitter, \"_blank\");\n                  }\n                }}\n              />\n            </div> */}\n          </div>\n        </div>\n\n        <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}\n          className=\"space-y-2 md:col-span-9 col-span-12\">\n          <div className=\"flex bg-header justify-start items-center rounded-lg gap-5 px-3 pt-2 overflow-x-auto text-nowrap overflow-y-hidden\">\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(1)}\n              className={`flex relative flex-col items-center  pb-2 ${step === 1 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 1 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold text-nowrap\">\n                Primary Details\n              </span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(2)}\n              className={`flex flex-col items-center relative pb-2 ${step === 2 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 2 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Documents</span>\n            </button>\n            {/* <button\n              type=\"button\"\n              onClick={() => navTabClick(3)}\n              className={`flex flex-col items-center relative pb-2 ${step === 3 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 3 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Financial Details</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(4)}\n              className={`flex flex-col items-center relative pb-2 ${step === 4 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 4 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Social Media</span>\n            </button> */}\n          </div>\n          {step === 1 && (\n            <div className=\"w-full\">\n              <div className=\" \">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Owner Name <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"PDDirectorName\"\n                      rules={{ required: \"Owner Name is required\" }}\n                      render={({ field }) => (\n                        <AutoComplete\n                          className=\"w-full\"\n                          {...field}\n                          onFocus={() => {\n                            dispatch(getCompanyDetails({\n                              _id: userInfoglobal?._id\n                            }))\n                          }}\n                          onChange={(val) => field.onChange(val)}\n                          // onChange={(value) => {\n                          //   field.onChange(value); // This will update the value when the user types\n                          // }}\n\n                          onSelect={(value) => {\n                            const selectedType = companyDetailsData?.data?.comapnyOwnerData?.find((type) => type?._id === value);\n                            setValue(\"PDDirectorName\", selectedType?.fullName)\n                            setValue(\"PDEmail\", selectedType?.email)\n                            setValue(\"PDAddress\", selectedType?.addresses?.primary?.street)\n                            setValue(\"PDCountry\", selectedType?.addresses?.primary?.country)\n                            setValue(\"PDState\", selectedType?.addresses?.primary?.state)\n                            setValue(\"PDCity\", selectedType?.addresses?.primary?.city)\n                            setValue(\"PDPin\", selectedType?.addresses?.primary?.pinCode)\n                            setValue(\"PDmobileCode\", selectedType?.mobile?.code)\n                            setValue(\"PDMobileNo\", selectedType?.mobile?.number)\n\n                          }}\n                          options={sortByPropertyAlphabetically(companyDetailsData?.data?.comapnyOwnerData,'fullName')?.filter(data => data?.onwerToDirector !== true)?.map((type) => ({\n                            value: type?._id,\n                            label: type?.fullName\n                          }))}\n                        >\n                          <input\n\n                        \n                            placeholder=\"Enter Owner Name\"\n                            value={field.label}\n                            className={`${inputClassName} ${errors.PDCountry\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                        </AutoComplete>\n                      )}\n                    />\n                    {/* <input\n                      type=\"text\"\n                      {...register(\"PDDirectorName\", {\n                        required: \"Director Name is required\",\n                      })}\n                      className={`placeholder: ${inputClassName} ${errors.PDDirectorName\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Director Name\"\n                    /> */}\n                    {errors.PDDirectorName && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDDirectorName.message}\n                      </p>\n                    )}\n                  </div>\n\n\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div className=\"col-span-2\">\n                    <label className={`${inputLabelClassName}`}>\n                      Primary Address<span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDAddress\", {\n                        required: \"Address  is required\",\n                      })}\n                      className={`${inputClassName} ${errors.PDAddress ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Address \"\n                    />\n                    {errors.PDAddress && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDAddress.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 px-3\">\n                  <div>\n                    <div className={`${inputLabelClassName}`}>\n                      Country <span className=\"text-red-600\">*</span>\n                    </div>\n                    <Controller\n                      control={control}\n                      name=\"PDCountry\"\n                      rules={{ required: \"Country is required\" }}\n                      render={({ field }) => (\n                        <AutoComplete\n                          className=\"w-full\"\n                          {...field}\n                          onChange={(value) => {\n                            field.onChange(value);\n                          }}\n                  \n                          options={\n                            countryListData?.docs?.map((type) => ({\n                            value: type?.name,\n                          }))\n                        \n                        }\n                        >\n                          <input\n                            placeholder=\"Enter Country\"\n\n                            onFocus={() => {\n                              dispatch(\n                                countrySearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                })\n                              );\n                            }}\n                            className={`${inputClassName} ${errors.PDCountry\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                        </AutoComplete>\n                      )}\n                    />\n                    {errors.PDCountry && (\n                      <p className={`${inputerrorClassNameAutoComplete}`}>\n                        {errors.PDCountry.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <div className={`${inputLabelClassName}`}>\n                      State <span className=\"text-red-600\">*</span>\n                    </div>\n                    <Controller\n                      control={control}\n                      name=\"PDState\"\n                      rules={{ required: \"State is required\" }}\n                      render={({ field }) => (\n                        <AutoComplete\n                          className=\"w-full\"\n                          {...field}\n                          onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                          options={stateListData?.docs?.map((type) => ({\n                            value: type?.name,\n                          }))}\n                        >\n                          <input\n                            placeholder=\"Enter State\"\n                            onFocus={() => {\n                              dispatch(\n                                stateSearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  countryName: PrintCountry,\n                                  sort: true,\n                                  status: true,\n                                })\n                              );\n                            }}\n                            className={`${inputClassName} ${errors.PDState\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                        </AutoComplete>\n                      )}\n                    />\n                    {errors.PDState && (\n                      <p className={`${inputerrorClassNameAutoComplete}`}>\n                        {errors.PDState.message}\n                      </p>\n                    )}\n                  </div>\n\n\n                  <div>\n                    <div className={`${inputLabelClassName}`}>\n                      City <span className=\"text-red-600\">*</span>\n                    </div>\n                    <Controller\n                      control={control}\n                      name=\"PDCity\"\n                      rules={{ required: \"City is required\" }}\n                      render={({ field }) => (\n                        <AutoComplete\n                          className=\"w-full\"\n                          {...field}\n                          onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                          options={cityListData?.docs?.map((type) => ({\n                            value: type?.name,\n                          }))}\n                        >\n                          <input\n                            onFocus={() => {\n                              dispatch(\n                                citySearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                  \"stateName\": PrintState\n\n                                })\n                              );\n                            }}\n                            placeholder=\"Enter City\"\n                            className={`${inputClassName} ${errors.PDCity\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                        </AutoComplete>\n                      )}\n                    />\n                    {errors.PDCity && (\n                      <p className={`${inputerrorClassNameAutoComplete}`}>\n                        {errors.PDCity.message}\n                      </p>\n                    )}\n                  </div>\n\n\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Pin Code <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"PDPin\"\n                      rules={{ required: \"Pin Code is required\" }}\n                      render={({ field }) => (\n                        <input\n                          {...field}\n                          type=\"number\"\n                          placeholder=\"Enter Pin Code\"\n                          maxLength={6}\n                          onInput={(e) => {\n                            if (e.target.value.length > 6) {\n                              e.target.value = e.target.value.slice(0, 6);\n                            }\n                          }}\n                          className={`${inputClassName} ${errors.PDPin\n                            ? \"border-[1px] \"\n                            : \"border-gray-300\"\n                            }`}\n                        />\n                      )}\n                    />\n                    {errors.PDPin && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDPin.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Email<span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"email\"\n                      {...register(\"PDEmail\", {\n                        required: \"Email is required\",\n                        pattern: {\n                          value:\n                            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                          message: \"Please enter a valid email address\",\n                        },\n                      })}\n                      className={` ${inputClassName} ${errors.PDEmail ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Email\"\n                    />\n                    {errors.PDEmail && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDEmail.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"w-[150px]\">\n                      <label className={`${inputLabelClassName}`}>\n                        code<span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        control={control}\n                        name=\"PDmobileCode\"\n                        rules={{ required: \"code is required\" }}\n                        render={({ field }) => (\n                          <CustomMobileCodePicker\n                            field={field}\n                            errors={errors}\n                          />\n                        )}\n                      />\n\n                      {/* <select\n                            {...register(\"PDmobileCode\", {\n                              required: \"MobileCode is required\",\n                            })}\n                            onFocus={() => {\n                              dispatch(\n                                countrySearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                })\n                              );\n                            }}\n                            className={` ${inputClassName} ${\n                              errors.PDmobileCode\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                            }`}\n                          >\n                            <option className=\"\" value=\"\">\n                              Select Mobile Code\n                            </option>\n                            {countryListData?.docs?.map((type) => (\n                              <option value={type?.countryMobileNumberCode}>\n                                {type?.countryMobileNumberCode}\n                              </option>\n                            ))}\n                          </select> */}\n                      {errors[`PDmobileCode`] && (\n                        <p className={`${inputerrorClassNameAutoComplete}`}>\n                          {errors[`PDmobileCode`].message}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Mobile No<span className=\"text-red-600\">*</span>\n                      </label>\n                      <input\n                        type=\"number\"\n                        {...register(`PDMobileNo`, {\n                          required: \"Mobile No is required\",\n                          minLength: {\n                            value: 10,\n                            message: \"Must be exactly 10 digits\",\n                          },\n                          maxLength: {\n                            value: 10,\n                            message: \"Must be exactly 10 digits\",\n                          },\n                        })}\n                        className={` ${inputClassName} ${errors[`PDMobileNo`]\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n                        placeholder=\"Enter Mobile No\"\n                        maxLength={10}\n                        onInput={(e) => {\n                          if (e.target.value.length > 10) {\n                            e.target.value = e.target.value.slice(0, 10);\n                          }\n                        }}\n                      />\n                      {errors[`PDMobileNo`] && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors[`PDMobileNo`].message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex justify-between px-3 pb-2\">\n                <button type=\"Submit\" className={`${formButtonClassName}`}>\n                  {directorLoading ? <Loader /> : 'Submit'}\n                </button>\n              </div>\n            </div>\n          )}\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateDirector;\n"],"names":["CreateDirector","_JSON$parse","navigate","useNavigate","step","setStep","useState","profileImage","setProfileImage","profileImagePayload","setProfileImagePayload","isHovering","setIsHovering","companyDetailsData","loading","countryLoading","useSelector","state","company","directorLoading","director","countryListData","country","stateListData","states","cityListData","city","userCompanyId","getUserIds","register","handleSubmit","setValue","control","formState","errors","useForm","dispatch","useDispatch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyId","userType","useWatch","name","defaultValue","PrintAddress","PrintCity","PrintState","PrintCountry","PrintPincode","PrintMail","PrintMobile","PrintMobileCode","PrintDirectorName","useEffect","length","getLocationDataByPincode","then","data","catch","error","console","navTabClick","clickedStep","showNotification","message","type","_jsx","GlobalLayout","children","_jsxs","className","style","backgroundImage","backgroundSize","backgroundPosition","FaUserAlt","FaCamera","accept","onChange","event","file","target","files","fileUploadFunc","filePath","isVideo","isMultiple","res","_res$payload","payload","reader","FileReader","onloadend","result","readAsDataURL","inputLabelClassName","_Fragment","autoComplete","onSubmit","_data$PDTagline","_data$PDAddress","_data$PDCity","_data$PDState","_data$PDCountry","_data$PDPin","finalPayload","firstName","lastName","fullName","PDDirectorName","email","PDEmail","status","PDStatus","mobile","code","PDMobileCode","number","PDMobileNo","directorProfile","tagline","PDTagline","secondaryEmail","addresses","primary","street","PDAddress","PDCity","PDState","PDCountry","pinCode","PDPin","secondary","directorCreate","output","_output$payload","_output$payload$data","encrypt","_id","onClick","Controller","rules","required","render","_ref","_sortByPropertyAlphab","_sortByPropertyAlphab2","_companyDetailsData$d3","field","AutoComplete","_objectSpread","onFocus","getCompanyDetails","val","onSelect","value","_companyDetailsData$d","_companyDetailsData$d2","_selectedType$address","_selectedType$address2","_selectedType$address3","_selectedType$address4","_selectedType$address5","_selectedType$address6","_selectedType$address7","_selectedType$address8","_selectedType$address9","_selectedType$address0","_selectedType$mobile","_selectedType$mobile2","selectedType","comapnyOwnerData","find","options","sortByPropertyAlphabetically","filter","onwerToDirector","map","label","placeholder","inputClassName","_ref2","_countryListData$docs","docs","countrySearch","isPagination","text","sort","inputerrorClassNameAutoComplete","_ref3","_stateListData$docs","stateSearch","countryName","_ref4","_cityListData$docs","citySearch","_ref5","maxLength","onInput","e","slice","pattern","_ref6","CustomMobileCodePicker","minLength","formButtonClassName","Loader"],"sourceRoot":""}