{"version":3,"file":"static/js/7946.c4252897.chunk.js","mappings":"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","sources":["pages/global/RolesAccess/RolesPermission/CreatePermissions.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { dynamicSidebarSearch } from \"../../../DyanmicSidebar/DyanmicSidebarFeatures/_dyanmicSidebar_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { directorSearch } from \"../../../Director/director/DirectorFeatures/_director_reducers\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { deptSearch } from \"../../../department/departmentFeatures/_department_reducers\";\nimport { designationSearch } from \"../../../designation/designationFeatures/_designation_reducers\";\nimport {\n    inputClassName,\n    inputLabelClassName,\n    domainName,\n    transformDataRole,\n    inputAntdSelectClassName,\n    sortByPropertyAlphabetically,\n} from \"../../../../constents/global\";\nimport { createRolePermission } from \"./rolePermissiomnFeatures/_rolePermission_reducers\";\nimport getUserIds from \"../../../../constents/getUserIds\";\nimport { Button, Checkbox, Select, Table } from \"antd\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\n\nfunction CreatePermissions() {\n    const {\n        register,\n        handleSubmit,\n        setValue,\n        getValue,\n        control,\n        formState: { errors },\n    } = useForm();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [checkAll, setCheckAll] = useState(false);\n\n    const { companyList, companyListLoading } = useSelector((state) => state.company);\n    const { directorLists } = useSelector((state) => state.director);\n    const { branchList, branchListloading } = useSelector((state) => state.branch);\n    const { designationList, loading: desListLoading } = useSelector((state) => state.designation);\n    const { loading } = useSelector((state) => state.rolePermission);\n    const [permissionsState, setPermissionsState] = useState([]);\n    const [permissionsStateView, setPermissionsStateView] = useState([]);\n    const { sidebarListData } = useSelector((state) => state.dynamicSidebar);\n    const { sidebarViewData } = useSelector((state) => state.dynamicSidebar);\n  \n    const {\n        userCompanyId,\n\n        userBranchId,\n        userEmployeId,\n        userDepartmentId,\n        userDesignationId,\n        userType\n    } = getUserIds();\n    const companyId = useWatch({\n        control,\n        name: \"companyId\",\n        defaultValue: userCompanyId,\n    });\n\n    const branchId = useWatch({\n        control,\n        name: \"branchId\",\n        defaultValue: userBranchId,\n    });\n    const departmentId = useWatch({\n        control,\n        name: \"departmentId\",\n        defaultValue: userDepartmentId,\n    });\n    const designationId = useWatch({\n        control,\n        name: \"designationId\",\n        defaultValue: userDesignationId,\n    });\n    const userInfoglobal = JSON.parse(\n        localStorage.getItem(`user_info_${domainName}`)\n    );\n\n\n    useEffect(() => {\n        if (userType === \"admin\") {\n            dispatch(\n                companySearch({\n                    userType: \"company\",\n                    text: \"\",\n                    status: true,\n                })\n            );\n        }\n    }, []);\n\n    // useEffect(() => {\n    //     if (branchId) {\n    //         dispatch(\n    //             deptSearch({\n    //                 text: \"\",\n    //                 sort: true,\n    //                 status: true,\n    //                 isPagination: false,\n    //                 companyId: companyId,\n    //                 branchId: branchId,\n    //             })\n    //         );\n    //     }\n    // }, [branchId]);\n\n    useEffect(() => {\n        if ((companyId && userType === \"company\" || companyId && userType === \"admin\" || companyId && userType === \"companyDirector\")) {\n            dispatch(\n                branchSearch({\n                    text: \"\",\n                    sort: true,\n                    status: true,\n                    isPagination: false,\n                    companyId: companyId\n                })\n            );\n        }\n    }, [companyId])\n\n    // useEffect(() => {\n    //   if (companyId && userType === \"company\" || userType === \"admin\") {\n    //     dispatch(directorSearch({\n    //       text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n    //     })\n    //     );\n    //   }\n    // }, [companyId]);\n\n    // useEffect(() => {\n    //     if (departmentId) {\n    //         dispatch(\n    //             designationSearch({\n    //                 departmentId: departmentId,\n    //                 text: \"\",\n    //                 sort: true,\n    //                 status: true,\n    //                 isPagination: false,\n    //                 companyId: companyId,\n    //             })\n    //         );\n    //     }\n    // }, [departmentId]);\n\n    useEffect(() => {\n        if (userInfoglobal?.userType === \"admin\") {\n            dispatch(\n                companySearch({\n                    text: \"\",\n                    sort: true,\n                    status: true,\n                })\n            );\n        }\n        dispatch(dynamicSidebarSearch({\n            isPagination: false\n        }))\n    }, []);\n    useEffect(() => {\n\n        // const newData = sidebarListData?.filter((item) => !item?.parentPageId)\n        // const newdata2 = newData?.map((item) => ({\n        //     ...item,\n        //     children: sidebarListData?.filter((sidebarItem) => sidebarItem?.parentPageId === item?._id)\n        // }))\n        // const newdata3 = newdata2?.map((item) => ({\n        //     ...item,\n        //     children: item?.children?.map((child) => ({\n        //         ...child,\n        //         children: sidebarListData?.filter((sidebarItem) => sidebarItem?.parentPageId === child?._id)\n        //     }))\n        // }))\n\n\n        const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n            ...sidebarItem,\n            canCreate: false,\n            canRead: false,\n            canUpdate: false,\n            canDelete: false,\n        }));\n\n        setPermissionsState(updatedPermissions);\n\n    }, [sidebarListData]);\n    const handleCheckAll = (e) => {\n        setCheckAll(e.target.checked)\n\n\n    }\n    useEffect(() => {\n        if (checkAll) {\n            const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n                ...sidebarItem,\n                canCreate: true,\n                canRead: true,\n                canUpdate: true,\n                canDelete: true,\n            }));\n            setPermissionsState(updatedPermissions);\n        } else {\n            const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n                ...sidebarItem,\n                canCreate: false,\n                canRead: false,\n                canUpdate: false,\n                canDelete: false,\n            }));\n            setPermissionsState(updatedPermissions);\n        }\n    }, [checkAll])\n\n    const onSubmit = (data) => {\n        const permission = permissionsState\n            ?.map((permissionData) => {\n                if (\n                    permissionData?.canCreate ||\n                    permissionData?.canRead ||\n                    permissionData?.canUpdate ||\n                    permissionData?.canDelete\n                ) {\n                    return {\n                        pageId: permissionData?._id,\n                        canCreate: permissionData?.canCreate,\n                        canRead: permissionData?.canRead,\n                        canUpdate: permissionData?.canUpdate,\n                        canDelete: permissionData?.canDelete,\n                    };\n                }\n                return null;\n            })\n            .filter(Boolean);\n\n        const finalPayload = {\n            companyId:\n                userInfoglobal?.userType === \"admin\"\n                    ? data?.companyId\n                    : userInfoglobal?.userType === \"company\"\n                        ? userInfoglobal?._id\n                        : userInfoglobal?.companyId,\n            directorId:\n                userInfoglobal?.userType === \"company\" ||\n                    userInfoglobal?.userType === \"admin\"\n                    ? data?.directorId\n                    : userInfoglobal?.userType === \"companyDirector\"\n                        ? userInfoglobal?._id\n                        : userInfoglobal?.directorId,\n            branchId: userInfoglobal?.userType === \"company\" ||\n                userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? data?.branchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n            permissions: permission,\n            designationId: \"\",\n            departmentId: \"\",\n            designationName: data?.roleTitle,\n        };\n        dispatch(createRolePermission(finalPayload)).then((response) => {\n            if (!response.error) {\n                navigate(-1)\n                // getRolesPermissionList();\n                // closeModal();\n            }\n        });\n    };\n\n    const handleSelectCompany = useCallback(\n        (event) => {\n            const companyId = event.target.value;\n            setValue(\"companyId\", companyId);\n            const companyName = companyList?.docs?.find(\n                (company) => company._id === companyId\n            )?.name;\n            setValue(\"companyName\", companyName);\n            setValue(\"stateId\", \"\");\n            setValue(\"stateName\", \"\");\n            // Dispatch state search if needed\n            // dispatch(stateSearch({ companyId }));\n        },\n        [companyList, setValue]\n    );\n\n    const handlePermissionToggle = (pageId, permissionType) => {\n        const parent = permissionsState?.find((item) => item._id === pageId)?.parentPageId\n        if (parent) {\n            setPermissionsState((prevState) =>\n                prevState.map((item) =>\n                    item._id === parent\n                        ? {\n                            ...item, canCreate: true,\n                            canRead: true,\n                            canUpdate: true,\n                            canDelete: true,\n                        }\n                        : item\n                )\n            );\n        }\n        const firstparent = permissionsState?.find((item) => item._id === parent)?.parentPageId\n        if (firstparent) {\n            setPermissionsState((prevState) =>\n                prevState.map((item) =>\n                    item._id === firstparent\n                        ? {\n                            ...item, canCreate: true,\n                            canRead: true,\n                            canUpdate: true,\n                            canDelete: true,\n                        }\n                        : item\n                )\n            );\n        }\n        setPermissionsState((prevState) =>\n            prevState.map((item) =>\n                item._id === pageId\n                    ? { ...item, [permissionType]: !item[permissionType] }\n                    : item\n            )\n        );\n\n    };\n    const handlePermissionToggleRow = (e, pageId) => {\n        const parent = permissionsState?.find((item) => item._id === pageId)?.parentPageId\n        if (parent) {\n            setPermissionsState((prevState) =>\n                prevState.map((item) =>\n                    item._id === parent\n                        ? {\n                            ...item, canCreate: true,\n                            canRead: true,\n                            canUpdate: true,\n                            canDelete: true,\n                        }\n                        : item\n                )\n            );\n        }\n        const firstparent = permissionsState?.find((item) => item._id === parent)?.parentPageId\n        if (firstparent) {\n            setPermissionsState((prevState) =>\n                prevState.map((item) =>\n                    item._id === firstparent\n                        ? {\n                            ...item, canCreate: true,\n                            canRead: true,\n                            canUpdate: true,\n                            canDelete: true,\n                        }\n                        : item\n                )\n            );\n        }\n        if (e.target.checked) {\n            setPermissionsState((prevState) =>\n                prevState.map((item) =>\n                    item._id === pageId\n                        ? {\n                            ...item, canCreate: true,\n                            canRead: true,\n                            canUpdate: true,\n                            canDelete: true,\n                        }\n                        : item\n                )\n            );\n        } else {\n            setPermissionsState((prevState) =>\n                prevState.map((item) =>\n                    item._id === pageId\n                        ? {\n                            ...item, canCreate: false,\n                            canRead: false,\n                            canUpdate: false,\n                            canDelete: false,\n                        }\n                        : item\n                )\n            );\n        }\n\n    };\n\n\n\n    useEffect(() => {\n        if (checkAll) {\n            const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n                ...sidebarItem,\n                canCreate: true,\n                canRead: true,\n                canUpdate: true,\n                canDelete: true,\n            }));\n            setPermissionsState(updatedPermissions);\n        } else {\n            const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n                ...sidebarItem,\n                canCreate: false,\n                canRead: false,\n                canUpdate: false,\n                canDelete: false,\n            }));\n            setPermissionsState(updatedPermissions);\n        }\n    }, [checkAll])\n\n\n    const getButtonClassName = (id, button) => {\n        const isActive = (button && permissionsState?.find((item) => item._id === id)) ? permissionsState?.find((item) => item._id === id)[button] : false\n        return `px-3 sm:px-4 py-2 rounded-md text-[9px] sm:text-sm text-nowrap font-medium transition-all duration-300 ${isActive\n            ? \"bg-header text-white border-header\"\n            : \"bg-gray-200 text-gray-700 border-gray-300 hover:border-header border-2 hover:text-header\"\n            }`;\n    };\n\n    useEffect(() => {\n        if (sidebarViewData && sidebarListData) {\n\n            if (sidebarListData.length > 0 && sidebarViewData.length > 0) {\n                setPermissionsStateView(transformDataRole(sidebarViewData));\n            } else {\n                setPermissionsStateView([]);\n            }\n        } else {\n            setPermissionsStateView([]);\n        }\n    }, [sidebarViewData, sidebarListData]);\n\n\n\n    const getPermission = (id, button) => {\n        return permissionsState?.find((item) => item._id === id)?.[button]\n    }\n    const columns = [\n\n        {\n            title: 'title',\n            dataIndex: 'title',\n            width: 300,\n            key: '_id',\n            render: (text, permission) => (\n                <div className=\"text-nowrap\">{text}</div>\n            )\n        },\n        {\n            title: <div><Checkbox onClick={(e) => handleCheckAll(e)} /></div>,\n            key: '_id',\n            width: 100,\n            render: (text, permission) => (\n                <div>\n                    <Checkbox onClick={(e) => handlePermissionToggleRow(e, permission._id)} checked={getPermission(permission._id, \"canRead\") && getPermission(permission._id, \"canCreate\") && getPermission(permission._id, \"canUpdate\") && getPermission(permission._id, \"canDelete\")} />\n                </div>\n            )\n        },\n        {\n            title: <div>{'Actions'}</div>,\n            key: '_id',\n            render: (text, permission) => (\n\n\n                <div className=\"flex items-center flex-nowrap gap-2\">\n                    {[\"canRead\", \"canCreate\", \"canUpdate\", \"canDelete\"].map((button) => (\n                        <Button\n                            className={getButtonClassName(\n                                permission._id, button\n                            )}\n                            key={button}\n                            type=\"button\"\n                            onClick={(e) =>\n                                handlePermissionToggle(permission._id, button)\n                            }\n                            style={{ margin: '0 5px' }}\n                        >\n                            {button}\n                        </Button>\n                    ))}\n                </div>\n\n            ),\n        },\n    ];\n\n    return (\n        <GlobalLayout>\n\n            <div className=\"\">\n                <form\n                    className=\"mt-2 grid grid-cols-1 md:grid-cols-4 gap-2 md:my-2 px-2\"\n                    onSubmit={handleSubmit(onSubmit)}\n                >\n\n                    {(userType === \"admin\") && (\n                        <div className=\"\" >\n                            <label className={`${inputLabelClassName}`}>\n                                Company < span className=\"text-red-600\" >* </span>\n                            </label>\n                            < select\n                                {...register(\"companyId\", {\n                                    required: \"Company is required\",\n                                })\n                                }\n                                className={` ${inputClassName} ${errors.companyId ? \"border-[1px] \" : \"border-gray-300\"\n                                    }`}\n                            >\n                                <option className=\"\" value=\"\" >\n                                    Select Company\n                                </option>\n                                {\n                                    companyList?.map((type) => (\n                                        <option value={type?._id} >\n                                            {type?.fullName}({type?.userName})\n                                        </option>\n                                    ))\n                                }\n                            </select>\n\n                            <Controller\n                                control={control}\n                                name=\"companyId\"\n                                rules={{ required: \"Company is required\" }}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        defaultValue={\"\"}\n                                        className={`${inputAntdSelectClassName} `}\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n                                    >\n                                        <Select.Option value=\"\">Select Company</Select.Option>\n                                        {companyListLoading ? <Select.Option disabled>\n                                            <ListLoader />\n                                        </Select.Option> : (sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                                            <Select.Option key={type?._id} value={type?._id}>\n                                                {type?.fullName}\n                                            </Select.Option>\n                                        )))}\n                                    </Select>\n                                )}\n                            />\n                            {\n                                errors.companyId && (\n                                    <p className=\"text-red-500 text-sm\" >\n                                        {errors.companyId.message}\n                                    </p>\n                                )\n                            }\n                        </div>\n                    )}\n                    {\n                        (userType === \"admin\" || userType === \"company\" || userType == 'companyDirector') && (\n                            <div className=\"\" >\n                                <label className={`${inputLabelClassName}`}>\n                                    Branch < span className=\"text-red-600\" >* </span>\n                                </label>\n                                {/* <select \n                                    {...register(\"branchId\", {\n                                        required: \"Branch is required\",\n                                    })\n                                    }\n                                    className={` ${inputClassName} ${errors.branchId ? \"border-[1px] \" : \"border-gray-300\"\n                                        }`\n                                    }\n                                >\n                                    <option className=\"\" value=\"\" >\n                                        Select Branch\n                                    </option>\n\n                                    {\n                                        branchList\n                                            ?.filter((element) => element?.companyId === companyId)\n                                            ?.map((element) => (\n                                                <option value={element?._id} > {element?.fullName} </option>\n                                            ))\n                                    }\n\n                                    {branchList?.map((element) => (\n                      <option value={element?._id}>{element?.fullName}</option>\n                    ))}\n                                </select> */}\n\n                                <Controller\n                                    name=\"branchId\"\n                                    control={control}\n                                    rules={{ required: \"Branch is required\" }}\n                                    render={({ field }) => (\n                                        <Select\n                                            {...field}\n                                            className={`${inputAntdSelectClassName} ${errors.branchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                            placeholder=\"Select Branch\"\n                                            showSearch\n                                            filterOption={(input, option) =>\n                                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                            }\n                                        >\n                                            <Select.Option value=\"\">Select Branch</Select.Option>\n                                            {branchListloading ? <Select.Option disabled>\n                                                <ListLoader />\n                                            </Select.Option> : (\n                                                sortByPropertyAlphabetically(branchList, 'fullName')\n                                                    ?.filter((element) => element?.companyId === companyId)\n                                                    ?.map((element) => (\n                                                        <Select.Option value={element?._id} > {element?.fullName} </Select.Option>\n                                                    )))}\n                                        </Select>\n                                    )}\n                                />\n                                {\n                                    errors.branchId && (\n                                        <p className=\"text-red-500 text-sm\" >\n                                            {errors.branchId.message}\n                                        </p>\n                                    )\n                                }\n                            </div>)}\n\n                    {/* <div className=\"\" >\n                        <label className={`${inputLabelClassName}`}>\n                            Department < span className=\"text-red-600\" >* </span>\n                        </label>\n\n                        <Controller\n                    name=\"departmentId\"\n                    control={control}\n                    rules={{ required: \"departmentId is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        className={`${inputAntdSelectClassName} ${errors.departmentId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        placeholder=\"Select department\"\n                      >\n                        <Select.Option value=\"\">Select department</Select.Option>\n                        {depListLoading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option>  : (  \n                                sortByPropertyAlphabetically(departmentListData)?.map((element) => (\n                                    <Select.Option value={element?._id} > {element?.name} </Select.Option>\n                                ))\n                            )}\n                      </Select>\n                    )}\n                  />\n                        {\n                            errors.departmentId && (\n                                <p className=\"text-red-500 text-sm\" >\n                                    {errors.departmentId.message}\n                                </p>\n                            )\n                        }\n                    </div>\n                    < div className=\"\" >\n                        <label className={`${inputLabelClassName}`}> Designation < span className=\"text-red-600\" >* </span></label >\n\n  <Controller\n                    name=\"designationId\"\n                    control={control}\n                    rules={{ required: \"designationId is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        className={`${inputAntdSelectClassName} ${errors.designationId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        placeholder=\"Select designation\"\n                      >\n                        <Select.Option value=\"\">Select designation</Select.Option>\n                        {desListLoading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option>  : (  \n                                sortByPropertyAlphabetically(designationList)?.map((element) => (\n                                    <Select.Option value={element?._id} > {element?.name} </Select.Option>\n                                ))\n                            )}\n                      </Select>\n                    )}\n                  />\n                        {\n                            errors.designationId && (\n                                <p className=\"text-red-500 text-sm\" >\n                                    {errors.designationId.message}\n                                </p>\n                            )\n                        }\n                    </div> */}\n                    <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>\n                            Role Title <span className=\"text-red-600\">*</span>\n                        </label>\n                        <input\n                            type=\"text\"\n                            {...register(\"roleTitle\", {\n                                required: \"Role Title is required\",\n                            })}\n                            className={`placeholder: ${inputClassName} ${errors.roleTitle\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                            placeholder=\"Enter Role Title\"\n                        />\n                        {errors.roleTitle && (\n                            <p className=\"text-red-500 text-sm\">\n                                {errors.roleTitle.message}\n                            </p>\n                        )}\n                    </div>\n\n                </form>\n\n\n                {<Table\n                    columns={columns}\n                    pagination={false}\n                    dataSource={permissionsStateView}\n                    scroll={{\n                        // y: 90 * 5,\n                        x: true\n                    }}\n                    rowKey=\"_id\"\n                />}\n\n\n                {/* <div className=\"pt-2 text-gray-700\">\n                    {permissionsState?.map((permission) => (\n                        <div\n                            key={permission._id}\n                            className=\"flex lg:justify-between lg:items-center lg:flex-row flex-col justify-center items-start gap-2 border-b p-2\"\n                        >\n                            <div>\n                                <span className=\"capitalize font-medium text-sm\">\n                                    {permission?.name}\n                                </span>\n                            </div>\n\n                            <div className=\"flex justify-between gap-1 w-full lg:w-auto\">\n                                {[\"canRead\", \"canCreate\", \"canUpdate\", \"canDelete\"].map(\n                                    (permissionType) => (\n                                        <div key={permissionType}>\n                                            <button\n                                                className={getButtonClassName(\n                                                    permission[permissionType]\n                                                )}\n                                                onClick={(e) =>\n                                                    handlePermissionToggle(\n                                                        e,\n                                                        permission._id,\n                                                        permissionType\n                                                    )\n                                                }\n                                            >\n                                                {permission[permissionType]\n                                                    ? `✔ ${permissionType.replace(\"can\", \"\")}`\n                                                    : permissionType.replace(\"can\", \"\")}\n                                            </button>\n                                        </div>\n                                    )\n                                )}\n                            </div>\n                        </div>\n                    ))}\n                </div> */}\n             \n                <div className=\"flex justify-end my-2 mx-2\">\n                    <button\n                        type=\"button\"\n                        disabled={loading}\n                        onClick={handleSubmit(onSubmit)}\n                        className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n                    >\n                     {loading? <ListLoader/> :   'save'}\n                    </button>\n                </div>\n            </div>\n        </GlobalLayout>\n    );\n}\n\nexport default CreatePermissions;\n"],"names":["register","handleSubmit","setValue","getValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","checkAll","setCheckAll","useState","companyList","companyListLoading","useSelector","state","company","directorLists","director","branchList","branchListloading","branch","designationList","loading","desListLoading","designation","rolePermission","permissionsState","setPermissionsState","permissionsStateView","setPermissionsStateView","sidebarListData","dynamicSidebar","sidebarViewData","userCompanyId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","companyId","useWatch","name","defaultValue","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","useEffect","companySearch","text","status","branchSearch","sort","isPagination","dynamicSidebarSearch","updatedPermissions","map","sidebarItem","_objectSpread","canCreate","canRead","canUpdate","canDelete","onSubmit","data","permission","permissionData","pageId","_id","filter","Boolean","finalPayload","directorId","branchId","permissions","designationId","departmentId","designationName","roleTitle","createRolePermission","then","response","error","useCallback","event","_companyList$docs","_companyList$docs$fin","target","value","companyName","docs","find","getButtonClassName","id","button","isActive","item","length","transformDataRole","getPermission","_permissionsState$fin5","columns","title","dataIndex","width","key","render","_jsx","className","children","Checkbox","onClick","e","checked","handleCheckAll","handlePermissionToggleRow","_permissionsState$fin3","_permissionsState$fin4","parent","parentPageId","prevState","firstparent","Button","type","handlePermissionToggle","permissionType","_permissionsState$fin","_permissionsState$fin2","style","margin","GlobalLayout","_jsxs","inputLabelClassName","required","inputClassName","fullName","userName","Controller","rules","_ref","_sortByPropertyAlphab","field","Select","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","disabled","ListLoader","sortByPropertyAlphabetically","message","_ref2","_sortByPropertyAlphab2","_sortByPropertyAlphab3","placeholder","element","Table","pagination","dataSource","scroll","x","rowKey"],"sourceRoot":""}