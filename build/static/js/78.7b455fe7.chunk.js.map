{"version":3,"file":"static/js/78.7b455fe7.chunk.js","mappings":"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","sources":["pages/financeManagement/clientExpence/CreateClientExpence.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { domainName, getDefaultFinacialYear, inputClassName, inputDisabledClassName, inputLabelClassName, inputLabelClassNameReactSelect } from \"../../../constents/global\";\nimport { branchSearch, getBranchDetails } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport ReactSelect from \"react-select\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { expenseTypeSearch } from \"../../global/other/ExpenseHead/expenseTypeFeature/_expenseType_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { createclientExpence } from \"./clientExpenceFeature/_clientExpence_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { officeAddressSearch } from \"../../global/other/officeAddressManagement/officeAddressFeature/_office_address_reducers\";\nimport { Select } from \"antd\";\nimport { getinvoiceList, invoiceSearch } from \"../invoice/invoiceFeature/_invoice_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { MdDelete } from \"react-icons/md\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\n\n\nconst CreateClientExpence = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    defaultValues: {\n      heads: [{ headType: \"head\" }]\n    }\n  });\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { clientList } = useSelector((state) => state.client);\n  const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n  const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n  const { officeAddressListData } = useSelector((state) => state.officeAddress);\n  const { branchDetailsData } = useSelector((state) => state.branch);\n  const { employeList } = useSelector(\n    (state) => state.employe\n  );\n  const { clientGroupList } = useSelector(state => state.clientGroup);\n  const { invoiceListData } = useSelector(\n    (state) => state.invoice\n  );\n  const { expenseTypeList } = useSelector(\n    (state) => state.expenceHead\n  );\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"heads\",\n  });\n  const onSubmit = (data) => {\n \n    const clientHeads = data?.heads?.filter((item) => item?.headType === \"other\")?.map((item) => ({\n      \"headType\": item?.headType,\n      \"description\": item?.description,\n      \"amount\": + item?.amount,\n    }))\n    const invoiceHeads = data?.heads?.filter((item) => item?.headType === \"head\")?.map((item) => ({\n      \"headType\":item?.headType,\n      \"headId\": item?.subHeadId,\n      \"description\": item?.description,\n     \"amount\": + item?.amount,\n      \"financialYear\": item?.financialYear,\n      \"type\": item?.type,\n      \"monthName\": item?.monthName,\n      \"monthQuaters\":item?.monthQuaters\n    }))\n\n    const finalPayload = {\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? data?.PDCompanyId\n          : userInfoglobal?.userType === \"company\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.companyId,\n      directorId:\n        userInfoglobal?.userType === \"companyDirector\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.directorId,\n      branchId:\n        userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\" ||\n        userInfoglobal?.userType === \"company\"\n          ? data?.PDBranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.branchId,\n          \"expenseType\": \"client_expense\",\n          \"clientGroupId\": data?.groupName,\n          \"clientId\": data?.client,\n          \"employeId\":data?.type === 'cash' ? data?.employeeId?.value : null,\n          \"bankAccId\": data?.type !== 'cash' ? data?.bankId: null,\n              \"transactionNo\" : data?.type === 'bank' ? data?.transactionNo : null,\n          \"paymentMode\": data?.type,\n          \"totalAmount\": data?.grandTotal,\n          \"chequeNo\":  data?.type === 'cheque' ? data?.chequeNo : null,\n          \"date\": data?.date,\n          \"naration\": data?.naration,\n          \"heads\": [...clientHeads, ...invoiceHeads],\n    }\n    dispatch(createclientExpence(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/clientExpence\");\n    });\n\n  };\n\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination:false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  const handleFocusClientGrp = () => {\n\n    dispatch(\n      clientGrpSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\") : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    )\n\n  };\n  useEffect(() => {\n    if (BranchId || (userInfoglobal?.userType !== \"company\" && userInfoglobal?.userType !== \"companyDirector\" && userInfoglobal?.userType !== \"admin\")) {\n      dispatch(getBranchDetails({\n        _id: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"admin\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId\n      }))\n    }\n  }, [BranchId])\n  useEffect(() => {\n    if ((CompanyId || userInfoglobal?.userType !== \"admin\") && (BranchId || userInfoglobal?.userType !== \"companBranch\" || userInfoglobal?.userType === \"employee\")) {\n      fetchEmployeListData()\n    }\n  }, [CompanyId, BranchId])\n\n  const fetchEmployeListData = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isPagination: false,\n      departmentId: '',\n      designationId: '',\n      companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n    };\n    dispatch(employeSearch(reqPayload));\n  };\n  const fetchClientdata = () => {\n    dispatch(\n      clientSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"admin\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        groupId: \"\",\n        directorId: \"\",\n        organizationId: \"\",\n        industryId: \"\",\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n      })\n    );\n  };\n  useEffect(() => {\n    if (watch(\"groupName\")) {\n      fetchClientdata()\n\n    }\n  }, [watch(\"groupName\")])\n\n  const getinvoicerequest = () => {\n    const data = {\n      directorId: \"\",\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId :\n          userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.branchId,\n      clientId: watch(\"client\"),\n      \"text\": \"\",\n      \"sort\": true,\n      \"status\": \"Paid\",\n      \"isPagination\": true,\n    };\n    dispatch(invoiceSearch(data));\n  };\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n  const financialYears = generateFinancialYears();\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\",\n    \"June\", \"July\", \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sept\", \"Oct-Dec\"];\n  const selectedHeads = useWatch({ control, name: \"heads\" })\n  useEffect(() => {\n    const totalAmount = selectedHeads.reduce((total, task) => {\n      return total + Number(task.amount || 0);\n    }, 0)\n    setValue(\"grandTotal\", totalAmount);\n  }, [selectedHeads, setValue]); \n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select>\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select>\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Group Type <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"groupName\", {\n                  required: \"Organization type is required\",\n                })}\n                className={` ${inputClassName} ${errors.groupName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                onFocus={() => handleFocusClientGrp()}\n                onChange={(e) => {\n                  setValue(\"maxAdvance\", clientGroupList?.find((client) => client?._id === e.target.value)?.advancedBalance)\n\n                  dispatch(clientSearch({\n                    companyId:\n                      userInfoglobal?.userType === \"admin\"\n                        ? watch(\"PDCompanyId\")\n                        :\n                        userInfoglobal?.userType === \"company\"\n                          ? userInfoglobal?._id\n                          : userInfoglobal?.companyId,\n                    branchId:\n                      userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                        ? userInfoglobal?._id\n                        : userInfoglobal?.branchId,\n\n                    \"directorId\": \"\",\n                    \"organizationId\": \"\",\n                    \"industryId\": \"\",\n                    groupId: e.target.value,\n                    \"text\": \"\",\n                    \"sort\": true,\n                    \"status\": true,\n                    \"isPagination\": false,\n                  }))\n                  // .then((data) => {\n                  //   if (!data?.error) {\n                  //     setValue('client', data?.payload?.data?.docs?.map((client) => {\n                  //       return ({\n                  //         value: client._id,\n                  //         label: client.fullName\n                  //       })\n                  //     }))\n                  //   }\n                  // })\n                }}\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Group Type\n                </option>\n                {clientGroupList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}({elment?.groupName})</option>\n                ))}\n              </select>\n              {errors.groupName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.groupName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Client <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"client\", {\n                  required: \"Client is required\",\n                })}\n                className={` ${inputClassName} ${errors.client\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Client\n                </option>\n                {clientList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}</option>\n                ))}\n              </select>\n              {errors.client && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.client.message}\n                </p>\n              )}\n            </div>\n            {/* <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Firm Layout Name<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"invoiceLayout\", {\n                  required: \"Task Name is required\",\n                })}\n                className={` ${inputClassName} ${errors.invoiceLayout ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                onFocus={() => {\n                  dispatch(\n                    officeAddressSearch({\n                      companyId:\n                        userInfoglobal?.userType === \"admin\"\n                          ? watch(\"PDCompanyId\")\n                          : userInfoglobal?.userType === \"company\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.companyId,\n                      branchId:\n                        userInfoglobal?.userType === \"company\" ||\n                          userInfoglobal?.userType === \"admin\" ||\n                          userInfoglobal?.userType === \"companyDirector\"\n                          ? watch(\"PDBranchId\")\n                          : userInfoglobal?.userType === \"companyBranch\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.branchId,\n                      directorId: \"\",\n                      text: \"\",\n                      sort: true,\n                      status: true,\n                      type: \"clientExpence\",\n                      isPagination: false,\n                      bankAccountId: \"\",\n                      isGSTEnabled: \"\",\n                    })\n                  );\n                }}\n              >\n                <option className=\"\" value=\"\">\n                  Select Layout\n                </option>\n\n                {officeAddressListData?.map((element) => (\n                  <option value={element?._id}>{element?.firmName}</option>\n                ))}\n              </select>\n              {errors.invoiceLayout && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.invoiceLayout.message}\n                </p>\n              )}\n            </div> */}\n          </div>\n\n          <div >\n            {fields.map((item, index) => (\n              <div key={item.id} className=\"border border-gray-300 rounded-md my-2\" >\n                <div className=\"flex justify-end bg-header rounded-t-md p-2\">\n                  <button className=\"text-white\" size={20} type=\"button\" onClick={() => remove(index)}>\n                    <MdDelete />\n                  </button>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Head Type</label>\n                    <select\n                      {...register(`heads[${index}].headType`, { required: \"Head type is required\" })}\n                      defaultValue={'head'}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.headType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      onChange={(e) => {\n\n                        setValue(`heads[${index}].headType`, e.target.value)\n                        setValue(`heads[${index}].amount`, 0)\n                        setValue(`heads[${index}].subHeadId`, \"\")\n                        setValue(`heads[${index}].invoiceId`, \"\")\n\n                      }}\n                    >\n                      <option value=\"head\">Head</option>\n                      <option value=\"other\">Other</option>\n                    </select>\n                    {errors?.heads?.[index]?.headType && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.headType?.message}</p>\n                    )}\n                  </div>\n\n                  {watch(`heads[${index}].headType`) === \"head\" && (\n                    < >\n                      <div>\n                        <label className={`${inputLabelClassName}`}>Expence Head</label>\n                        <select\n                          onFocus={() => {\n                            dispatch(\n                              expenseTypeSearch({\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination:false,\n                                companyId:  userInfoglobal?.userType === \"admin\"\n                                    ? CompanyId\n                                    : userInfoglobal?.userType === \"company\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.companyId,\n                                branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.branchId,\n                              })\n                            );\n                          }}\n                          {...register(`heads[${index}].subHeadId`, { required: \"Expence Head is required\" })}\n                          defaultValue={item.subHeadId}\n                          className={` ${inputClassName} ${errors?.heads?.[index]?.subHeadId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        >\n                          <option className=\"text-xs\" value=\"\">\n                            Select Expence Head\n                          </option>\n                          {expenseTypeList?.map((elment, index) => (\n                            <option value={elment?._id}>{elment?.name}</option>\n                          ))}\n                        </select>\n                        {errors?.heads?.[index]?.subHeadId && (\n                          <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.subHeadId?.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"col-span-2 my-2\">\n                        <div className={`grid ${watch(`heads[${index}].type`) === \"Yearly\" ? \"grid-cols-1 md:grid-cols-2\" : watch(`heads[${index}].type`) ? \"grid-cols-1 md:grid-cols-3\" : \"grid-cols-1 md:grid-cols-2\"} space-x-4`}>\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Financial Year <span className=\"text-red-600\">*</span>\n                            </label>\n                            <select\n                            defaultValue={getDefaultFinacialYear()}\n                              {...register(`heads[${index}].financialYear`, {\n                                required: \"Financial year is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.financialYear ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Financial Year</option>\n                              {financialYears.map((year, index) => (\n                                <option key={index} value={year}>\n                                  {year}\n                                </option>\n                              ))}\n                            </select>\n                            {errors?.heads?.[index]?.financialYear && (\n                              <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.financialYear.message}</p>\n                            )}\n                          </div>\n\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Type <span className=\"text-red-600\">*</span>\n                            </label>\n                            <select\n                              {...register(`heads[${index}].type`, {\n                                required: \"Type is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.type ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Type</option>\n                              <option value=\"Quaterly\">Quaterly</option>\n                              <option value=\"Monthly\">Monthly</option>\n                              <option value=\"Yearly\">Yearly</option>\n                            </select>\n                            {errors?.heads?.[index]?.type && (\n                              <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.type.message}</p>\n                            )}\n                          </div>\n\n                          {watch(`heads[${index}].type`) === \"Quaterly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Quarter <span className=\"text-red-600\">*</span>\n                              </label>\n                              <select\n                                {...register(`heads[${index}].monthQuaters`, {\n                                  required: \"Reset Month is required\",\n                                })}\n                                className={`${inputClassName} ${errors?.heads?.[index]?.monthQuaters ? \"border-[1px] \" : \"border-gray-300\"}`}\n                              >\n                                <option value=\"\">Select Quarter</option>\n                                {quarter.map((qtr) => (\n                                  <option key={qtr} value={qtr}>\n                                    {qtr}\n                                  </option>\n                                ))}\n                              </select>\n                              {errors?.heads?.[index]?.monthQuaters && (\n                                <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.monthQuaters.message}</p>\n                              )}\n                            </div>\n                          )}\n\n                          {watch(`heads[${index}].type`) === \"Monthly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Month <span className=\"text-red-600\">*</span>\n                              </label>\n                              <select\n                                {...register(`heads[${index}].monthName`, {\n                                  required: \"Month is required\",\n                                })}\n                                className={`${inputClassName} ${errors?.heads?.[index]?.monthName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                              >\n                                <option value=\"\">Select Month</option>\n                                {months.map((month) => (\n                                  <option key={month} value={month}>\n                                    {month}\n                                  </option>\n                                ))}\n                              </select>\n                              {errors?.heads?.[index]?.monthName && (\n                                <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.monthName.message}</p>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                  {watch(`heads[${index}].headType`) === \"invoice\" && (\n\n                    <div>\n                      <label className={`${inputLabelClassName}`}>Invoice ID</label>\n                      <select\n                        {...register(`heads[${index}].invoiceId`, { required: \"Invoice ID is required\" })}\n                        onFocus={() => {\n                          getinvoicerequest()\n                        }}\n                        onChange={(e) => {\n                          if (watch(`heads[${index}].headType`) === \"invoice\") {\n                            setValue(`heads[${index}].amount`, invoiceListData?.find(elment => elment?._id === e.target.value)?.grandTotal)\n                            const total = fields.reduce((sum, field, i) => {\n                              return sum + (parseFloat(watch(`heads[${i}].amount`)) || 0);\n                            }, 0);\n                            setValue('totalAmount', total)\n                          }\n                        }}\n                        className={` ${inputClassName} ${errors?.heads?.[index]?.invoiceId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Client\n                        </option>\n                        {invoiceListData?.map((elment, index) => (\n                          <option value={elment?._id}>{elment?.clientName}({elment?.invoiceNumber})</option>\n                        ))}\n                      </select>\n                      {errors?.heads?.[index]?.invoiceId && (\n                        <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.invoiceId?.message}</p>\n                      )}\n                    </div>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Description</label>\n                    <input\n                      {...register(`heads[${index}].description`, { required: \"Description is required\" })}\n                      defaultValue={item.description}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.description ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    />\n                    {errors?.heads?.[index]?.description && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.description?.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Amount</label>\n                    <input\n                      type=\"number\"\n                       step=\"0.01\"\n                      disabled={watch(`heads[${index}].headType`) === \"invoice\"}\n                      {...register(`heads[${index}].amount`, { required: \"Amount is required\" })}\n                      onChange={(e) => {\n                        const updatedAmount = parseFloat(e.target.value) || 0;\n                        setValue(`heads[${index}].amount`, updatedAmount);\n\n\n                        const total = fields.reduce((sum, field, i) => {\n                          return sum + (parseFloat(watch(`heads[${i}].amount`)) || 0);\n                        }, 0);\n                        setValue('totalAmount', total)\n\n                      }}\n\n                      className={` ${watch(`heads[${index}].headType`) === \"invoice\" ? inputDisabledClassName : inputClassName} ${errors?.heads?.[index]?.amount ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    />\n                    {errors?.heads?.[index]?.amount && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.amount?.message}</p>\n                    )}\n                  </div>\n                </div>\n\n\n              </div>\n            ))}\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => append({ headType: \"head\" })}\n            className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n          >\n            Add more\n          </button>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 md:gap-8 md:my-1 px-3 md:mt-4\">\n          {watch(\"grandTotal\") > 0 &&   <div className=\"\">\n              <div className=\" flex items-center gap-4\">\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"cash\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Cash\n                </label>\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"cheque\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Cheque\n                </label>\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"bank\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Bank\n                </label>\n              </div>\n\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.type.message}\n                </p>\n              )}\n            </div>}\n\n\n            {watch(\"grandTotal\") > 0 && watch(\"type\") !== \"cash\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Sender Bank<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n\n                {...register(\"bankId\",)}\n                className={`${inputClassName}  ${errors.bankId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n              // onFocus={handleFocusCompany}\n              >\n\n                <option value=''>\n                  select bank\n                </option>\n                {\n                  branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                  branchDetailsData.data.bankData.map((type) => (\n                    <option key={type._id} value={type._id}>\n                      {`${type.bankName} (${type.branchName})`}\n                    </option>\n                  ))\n                }\n              </select>\n              {errors.bankId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.bankId.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cash\" && <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Employee</label>\n              <Controller\n                name=\"employeeId\"\n                control={control}\n                rules={{ required: \"Employee is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    {...field}\n                    options={employeList?.map((employee) => ({\n                      value: employee?._id,\n                      label: employee?.fullName,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.employeeId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Employee\"\n                  />\n                )}\n              />\n              {errors.employeeId && <p className=\"text-red-500 text-sm\">{errors.employeeId.message}</p>}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cheque\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Cheque No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"chequeNo\", {\n                  required: \"chequeNo is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.chequeNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Cheque no\"\n              />\n              {errors.chequeNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.chequeNo.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"bank\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Transaction No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"transactionNo\", {\n                  required: \"transaction No is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.transactionNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Cheque no\"\n              />\n              {errors.transactionNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.transactionNo.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration<span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.naration ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Date<span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                          name={`date`}\n                          control={control}\n                          render={({ field }) => (\n                            <CustomDatePicker field={field} errors={errors} />\n                          )}\n                        />\n             \n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.date.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n      \n          <div className=\"w-full flex flex-row items-end justify-end\">\n            <div className=\"\">            \n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Grand Total\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"grandTotal\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"grandTotal\"\n                  disabled\n               \n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div >\n    </GlobalLayout >\n  );\n};\n\nexport default CreateClientExpence;\n"],"names":["CreateClientExpence","_branchDetailsData$da","_branchDetailsData$da2","register","handleSubmit","control","watch","formState","errors","setValue","useForm","defaultValues","heads","headType","dispatch","useDispatch","navigate","useNavigate","companyList","useSelector","state","company","branchList","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","clientList","client","CompanyId","useWatch","name","defaultValue","BranchId","officeAddressListData","officeAddress","branchDetailsData","employeList","employe","clientGroupList","clientGroup","invoiceListData","invoice","expenseTypeList","expenceHead","fields","append","remove","useFieldArray","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","getBranchDetails","branchId","fetchEmployeListData","reqPayload","isTL","isHR","departmentId","designationId","employeSearch","clientSearch","groupId","directorId","organizationId","industryId","financialYears","generateFinancialYears","year","push","months","quarter","selectedHeads","totalAmount","reduce","total","task","Number","amount","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$heads","_data$heads$filter","_data$heads2","_data$heads2$filter","_data$employeeId","clientHeads","filter","item","map","description","invoiceHeads","subHeadId","financialYear","type","monthName","monthQuaters","finalPayload","PDCompanyId","PDBranchId","groupName","employeeId","value","bankId","transactionNo","grandTotal","chequeNo","date","naration","createclientExpence","then","error","inputLabelClassName","_objectSpread","required","inputClassName","fullName","message","onFocus","clientGrpSearch","onChange","e","_clientGroupList$find","find","target","advancedBalance","elment","index","_errors$heads","_errors$heads$index","_errors$heads2","_errors$heads2$index","_errors$heads3","_errors$heads3$index","_errors$heads3$index$","_errors$heads4","_errors$heads4$index","_errors$heads5","_errors$heads5$index","_errors$heads6","_errors$heads6$index","_errors$heads6$index$","_errors$heads7","_errors$heads7$index","_errors$heads8","_errors$heads8$index","_errors$heads9","_errors$heads9$index","_errors$heads0","_errors$heads0$index","_errors$heads1","_errors$heads1$index","_errors$heads10","_errors$heads10$index","_errors$heads11","_errors$heads11$index","_errors$heads12","_errors$heads12$index","_errors$heads13","_errors$heads13$index","_errors$heads14","_errors$heads14$index","_errors$heads15","_errors$heads15$index","_errors$heads16","_errors$heads16$index","_errors$heads17","_errors$heads17$index","_errors$heads18","_errors$heads18$index","_errors$heads19","_errors$heads19$index","_errors$heads19$index2","_errors$heads20","_errors$heads20$index","_errors$heads21","_errors$heads21$index","_errors$heads22","_errors$heads22$index","_errors$heads22$index2","_errors$heads23","_errors$heads23$index","_errors$heads24","_errors$heads24$index","_errors$heads25","_errors$heads25$index","_errors$heads25$index2","size","onClick","MdDelete","_Fragment","expenseTypeSearch","getDefaultFinacialYear","qtr","month","getinvoicerequest","clientId","invoiceSearch","_invoiceListData$find","sum","field","i","parseFloat","invoiceId","clientName","invoiceNumber","step","disabled","updatedAmount","inputDisabledClassName","id","bankData","length","bankName","branchName","Controller","rules","render","_ref","ReactSelect","options","employee","label","classNamePrefix","inputLabelClassNameReactSelect","placeholder","_ref2","CustomDatePicker"],"sourceRoot":""}