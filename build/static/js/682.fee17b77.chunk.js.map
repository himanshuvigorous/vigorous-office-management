{"version":3,"file":"static/js/682.fee17b77.chunk.js","mappings":"oPAWA,MAmGA,EAnGuBA,IAAwC,IAAvC,OAACC,EAAM,YAAEC,EAAW,UAAEC,GAAWH,EACvD,MAAQI,QAASC,IAAqBC,EAAAA,EAAAA,IACnCC,GAAUA,EAAMC,YAGb,SACJC,EAAQ,aACRC,EAAY,QACZC,EACAC,WAAW,OAAEC,GAAQ,SACrBC,EAAQ,MACRC,IACEC,EAAAA,EAAAA,MACEC,GAAWC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,MAkBjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,QAASrB,EACTsB,SAAUA,KACRrB,IACAa,KAEFS,OAAQ,KACRC,MAAM,eACNC,MAAO,IACPC,OAAQ,IACRC,UAAU,oBAAmBC,UAI7BC,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMH,UAAU,eAAeI,SAAUtB,EA9B9CuB,IAChB,MAAMC,EAAe,CACnB,MAAa,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAMR,MACf,QAAe,OAAJQ,QAAI,IAAJA,OAAI,EAAJA,EAAME,SAEnBlB,GAASmB,EAAAA,EAAAA,IAAqBF,IAAeG,KAAMJ,IAC5CA,EAAKK,QACRnC,IACAY,IACAb,SAqBiF2B,SAAA,EACjFC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gDAA+CC,SAAA,EAI5DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,GAAEC,SAAA,EACfC,EAAAA,EAAAA,MAAA,SAAOF,UAAS,GAAAW,OAAKC,EAAAA,IAAsBX,SAAA,CAAC,UAAMT,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,eAAcC,SAAC,UACjFT,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,QACDjC,EAAS,QAAS,CACpBkC,SAAU,wBACV,IACFf,UAAS,GAAAW,OAAKK,EAAAA,GAAc,KAAAL,OAAI1B,EAAOY,MAAQ,gBAAkB,mBACjEoB,YAAY,kBAEbhC,EAAOY,QACNL,EAAAA,EAAAA,KAAA,KAAGQ,UAAU,uBAAsBC,SAAEhB,EAAOY,MAAMU,cAGtDL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,GAAEC,SAAA,EACfC,EAAAA,EAAAA,MAAA,SAAOF,UAAS,GAAAW,OAAKC,EAAAA,IAAsBX,SAAA,CAAC,YAAQT,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,eAAcC,SAAC,UACnFT,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,QACDjC,EAAS,UAAW,CACtBkC,SAAU,yBACV,IACFf,UAAS,GAAAW,OAAKK,EAAAA,GAAc,KAAAL,OAAI1B,EAAOsB,QAAU,gBAAkB,mBACnEU,YAAY,mBAEbhC,EAAOsB,UACNf,EAAAA,EAAAA,KAAA,KAAGQ,UAAU,uBAAsBC,SAAEhB,EAAOsB,QAAQA,iBAO1Df,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,mBAAkBC,UAC/BT,EAAAA,EAAAA,KAAA,UACEsB,KAAK,SACLI,SAAUzC,EACVuB,UAAS,GAAAW,OAAKlC,EAAmB,cAAgB,YAAW,qCAAoCwB,SAE/FxB,GAAmBe,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,IAAM,kB","sources":["pages/global/other/todolistManagement/CreateTodoList.js"],"sourcesContent":["import { useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { CreateTodoListAction } from \"./TodoTypeFeatures/_TodoType_reducers\";\nimport { Modal } from \"antd\";\n\n\nconst CreateTodoList = ({isOpen, handleClose ,fetchList }) => {\n  const { loading: AssetTypeloading } = useSelector(\n    (state) => state.AssetType\n  );\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n    reset\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      \"title\": data?.title,\n      \"message\": data?.message,\n    };\n    dispatch(CreateTodoListAction(finalPayload)).then((data) => {\n      if (!data.error) {\n        fetchList()\n        reset()\n        handleClose()\n      }\n    });\n  };\n\n\n  return (\n    <Modal\n      visible={isOpen}\n      onCancel={() => {\n        handleClose()\n        reset()\n      }}\n      footer={null}\n      title=\"Create To Do\"\n      width={600}\n      height={400}\n      className=\"antmodalclassName\"\n    >\n\n\n      <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n\n\n          {/* Leave Type Name */}\n          <div className=\"\">\n            <label className={`${inputLabelClassName}`}>Title <span className=\"text-red-600\">*</span></label>\n            <input\n              type=\"text\"\n              {...register(\"title\", {\n                required: \"Title  is required\",\n              })}\n              className={`${inputClassName} ${errors.title ? \"border-[1px] \" : \"border-gray-300\"}`}\n              placeholder=\"Enter Title \"\n            />\n            {errors.title && (\n              <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n            )}\n          </div>\n          <div className=\"\">\n            <label className={`${inputLabelClassName}`}>Message <span className=\"text-red-600\">*</span></label>\n            <input\n              type=\"text\"\n              {...register(\"message\", {\n                required: \"Message is required\",\n              })}\n              className={`${inputClassName} ${errors.message ? \"border-[1px] \" : \"border-gray-300\"}`}\n              placeholder=\"Enter Message\"\n            />\n            {errors.message && (\n              <p className=\"text-red-500 text-sm\">{errors.message.message}</p>\n            )}\n          </div>\n\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end\">\n          <button\n            type=\"submit\"\n            disabled={AssetTypeloading}\n            className={`${AssetTypeloading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n          >\n            {AssetTypeloading ? <Loader /> : 'Submit'}\n          </button>\n        </div>\n      </form>\n    </Modal>\n\n  );\n};\n\nexport default CreateTodoList;\n"],"names":["_ref","isOpen","handleClose","fetchList","loading","AssetTypeloading","useSelector","state","AssetType","register","handleSubmit","control","formState","errors","setValue","reset","useForm","dispatch","useDispatch","useNavigate","_jsx","Modal","visible","onCancel","footer","title","width","height","className","children","_jsxs","autoComplete","onSubmit","data","finalPayload","message","CreateTodoListAction","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","disabled","Loader"],"sourceRoot":""}