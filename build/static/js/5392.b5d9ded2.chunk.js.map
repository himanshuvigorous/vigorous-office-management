{"version":3,"file":"static/js/5392.b5d9ded2.chunk.js","mappings":"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","sources":["pages/hr/employeeSalary/Deductions/CreateDeductions.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { deductionsCreate } from \"./deductionsfeature/_deductionsList_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nconst CreateDeductions = () => {\n  const { loading: deductionLoading } = useSelector(\n    (state) => state.deductions\n  );\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const isPercentage = useWatch({\n    control,\n    name: \"isPercentage\",\n    defaultValue: \"\",\n  });\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? data?.PDCompanyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      directorId:\n        userInfoglobal?.userType === \"companyDirector\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.directorId,\n      branchId:\n        userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\" ||\n          userInfoglobal?.userType === \"company\"\n          ? data?.PDBranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n      name: data?.allowanceName,\n      \"description\": '',\n      \"isPercentage\": false,\n      \"amount\": 0\n    };\n    dispatch(deductionsCreate(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? CompanyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId]);\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n                <Controller\n                  name=\"PDCompanyId\"\n                  control={control}\n                  rules={{\n                    required: \"Company is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      getPopupContainer={(trigger) => trigger.parentNode}\n                      placeholder=\"Select Company\"\n                     filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> :\n                        (companyList\n                          ?.map((element) => (\n                            <Select.Option value={element?._id} > {element?.fullName} </Select.Option>\n                          )))\n                      }\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch <span className=\"text-red-600\">*</span>\n                  </label>\n                  {/* <select\n                    {...register(\"PDBranchId\", {\n                      required: \"Branch is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Branch\n                    </option>\n                    {branchList?.map((type) => (\n                      <option value={type?._id}>{type?.fullName}</option>\n                    ))}\n                  </select> */}\n                  <Controller\n                    name=\"PDBranchId\"\n                    control={control}\n                    rules={{\n                      required: \"Branch is required\",\n                    }}\n\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        getPopupContainer={(trigger) => trigger.parentNode}\n                        placeholder=\"Select Branch\"\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> :\n                          (branchList\n                            ?.map((element) => (\n                              <Select.Option value={element?._id} > {element?.fullName} </Select.Option>\n                            )))\n                        }\n                      </Select>\n                    )}\n                  />\n                  {errors.PDBranchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDBranchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Name <span className=\"text-red-600\"> *</span></label>\n              <input\n                type=\"text\"\n                {...register(\"allowanceName\", {\n                  required: \"Deduction  is required\",\n                })}\n                className={`${inputClassName} ${errors.allowanceName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Deduction  Name\"\n              />\n              {errors.allowanceName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.allowanceName.message}\n                </p>\n              )}\n            </div>\n\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={deductionLoading}\n              className={`${deductionLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {deductionLoading ? <Loader /> : 'Submit'}\n            </button>\n\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateDeductions;\n"],"names":["CreateDeductions","loading","deductionLoading","useSelector","state","deductions","register","handleSubmit","control","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","branchId","PDBranchId","allowanceName","deductionsCreate","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","PDPlan","getPopupContainer","trigger","parentNode","placeholder","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","element","fullName","message","_ref2","showSearch","type","inputClassName","Loader"],"sourceRoot":""}