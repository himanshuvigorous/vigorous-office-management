{"version":3,"file":"static/js/6471.654ad95e.chunk.js","mappings":"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","sources":["pages/hr/RecruitmentProcess/Interview/EmployeeInterviewList.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaAngleUp } from \"react-icons/fa6\";\nimport { FaAngleDown } from \"react-icons/fa6\";\nimport { MdRemoveCircle } from \"react-icons/md\";\nimport {\n  getInterviewList,\n  statusUpdateApplication,\n} from \"./InterviewFeatures/_interview_reducers\";\nimport {\n  domainName,\n  handleSortLogic,\n  inputAntdSelectClassNameFilter,\n} from \"../../../../constents/global\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport Loader from \"../../../../global_layouts/Loader/Loader\";\nimport moment from \"moment\";\nimport CustomPagination from \"../../../../component/CustomPagination/CustomPagination\";\nimport { Select, Tooltip } from \"antd\";\nimport { BsFileEarmarkPdfFill, BsPassFill } from \"react-icons/bs\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport Swal from \"sweetalert2\";\nimport usePermissions from \"../../../../config/usePermissions\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nfunction EmployeeInterviewList() {\n\n  const { canCreate, canRead, canUpdate, canDelete } = usePermissions();\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    getValues,\n    unregister,\n    control,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      pdStatus: \"Pending\",\n    },\n  });\n  const dispatch = useDispatch();\n  const { interviewList, totalInterviewCount, loading } = useSelector(\n    (state) => state.interview\n  );\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchText, setSearchText] = useState(\"\");\n  const onPaginationChange = (page) => {\n    setCurrentPage(page);\n  };\n  const limit = 10;\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const Status = useWatch({\n    control,\n    name: \"pdStatus\",\n    defaultValue: \"Pending\",\n  });\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"employee\") {\n      fetchInterviewData();\n    }\n  }, [Status, searchText]);\n  const fetchInterviewData = () => {\n    const data = {\n      currentPage: currentPage,\n      pageSize: limit,\n      reqData: {\n        text: searchText,\n        status: Status,\n        sort: true,\n        isPagination: true,\n        interviewerId:\n          userInfoglobal?.userType === \"employee\" ? userInfoglobal?._id : \"\",\n\n        companyId:\n          userInfoglobal?.userType === \"employee\"\n            ? userInfoglobal?.companyId\n            : \"\",\n        branchId:\n          userInfoglobal?.userType === \"employee\"\n            ? userInfoglobal?.branchId\n            : \"\",\n      },\n    };\n    dispatch(getInterviewList(data));\n  };\n\n  const [sortedList, setSortedList] = useState([]);\n\n  useEffect(() => {\n    if (interviewList) {\n      handleSort();\n    }\n  }, [interviewList]);\n\n  const handleSort = (key, order) => {\n    const sortedList = handleSortLogic(key, order, interviewList);\n    setSortedList(sortedList);\n  };\n\n  if (userInfoglobal?.userType !== \"employee\") {\n    return (\n      <GlobalLayout>\n        <div className=\"bg-red-100 text-red-800 p-4 rounded-md mt-2\">\n          <p className=\"text-center font-semibold\">\n            You are not an employee. This page is viewable for employees only.\n          </p>\n        </div>\n      </GlobalLayout>\n    );\n  }\n\n  const handleStatusUpdate = (element, status) => {\n    Swal.fire({\n      title: \"Provide feedback\",\n      input: \"textarea\",\n      inputLabel: \"Feedback (optional)\",\n      inputPlaceholder: \"Type your feedback here...\",\n      showCancelButton: true,\n      confirmButtonText: `Update as ${status}`,\n      cancelButtonText: \"Cancel\",\n      inputValidator: (value) => {\n        if (value === undefined || value === \"\") {\n          return \"Feedback cannot be empty\";\n        }\n        return null;\n      },\n    }).then((result) => {\n      if (result.isConfirmed) {\n        const feedback = result.value; // Get feedback input\n        // Dispatch the status update with feedback\n        dispatch(\n          statusUpdateApplication({\n            _id: element?._id,\n            applicationId: element?.applicationId,\n            status: status,\n            // status: 'Failed',\n            feedback: feedback, // Include feedback here\n          })\n        ).then((data) => {\n          if (!data?.error) {\n            fetchInterviewData(); // Fetch interview data after successful update\n          }\n        });\n      }\n    });\n  };\n\n  const onChange = (e) => {\n    setSearchText(e);\n  };\n\n  return (\n    <GlobalLayout onChange={onChange}>\n      {loading ? (\n        <Loader />\n      ) : (\n        <>\n          <div className=\"\">\n            <div className=\"flex py-1 gap-3\">\n              <div className=\"\">\n                <Controller\n                  control={control}\n                  name=\"pdStatus\"\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      disabled={loading}\n                      className={`${inputAntdSelectClassNameFilter} `}\n                    >\n                      <Select.Option value=\"\">Select Status</Select.Option>\n                      <Select.Option value=\"Pending\">Pending </Select.Option>\n                      <Select.Option value=\"Passed\">Passed</Select.Option>\n                      <Select.Option value=\"Failed\">Failed</Select.Option>\n                      <Select.Option value=\"Completed\">Completed</Select.Option>\n                    </Select>\n                  )}\n                />\n                {errors.PdDesignationId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PdDesignationId.message}\n                  </p>\n                )}\n              </div>\n              <button\n                onClick={() => {\n                  setValue(\"pdStatus\", \"Pending\")\n                }}\n                className=\"bg-header py-2 rounded-md flex px-10 justify-center items-center text-white\">\n                <span className=\"text-[12px]\">Reset</span>\n              </button>\n            </div>\n          </div>\n          <div className=\"bg-[#ffffff] w-full overflow-x-auto mt-1 rounded-xl\">\n            <table className=\"w-full max-w-full rounded-xl overflow-x-auto \">\n              <thead className=\"\">\n                <tr className=\"border-b-[1px] border-[#DDDDDD] bg-header capitalize text-[#ffff] font-[500] h-[40px]\">\n                  <th className=\"tableHead w-[10%]\">S.No.</th>\n                  <th className=\"tableHead\">\n                    <div className=\"flex gap-1\">\n                      Applicant Name\n                      <div className=\"flex flex-col -space-y-1.5 cursor-pointer\">\n                        <FaAngleUp\n                          onClick={() => handleSort(\"interviewerName\", \"asc\")}\n                        />\n                        <FaAngleDown\n                          onClick={() => handleSort(\"interviewerName\", \"desc\")}\n                        />\n                      </div>\n                    </div>\n                  </th>\n                  <th className=\"tableHead\">\n                    <div className=\"flex gap-1\">\n                      position\n                      <div className=\"flex flex-col -space-y-1.5 cursor-pointer\">\n                        <FaAngleUp\n                          onClick={() => handleSort(\"interviewerName\", \"asc\")}\n                        />\n                        <FaAngleDown\n                          onClick={() => handleSort(\"interviewerName\", \"desc\")}\n                        />\n                      </div>\n                    </div>\n                  </th>\n\n                  <th className=\"tableHead\">\n                    <div className=\"flex gap-1\">Round Number</div>\n                  </th>\n                  <th className=\"tableHead\">\n                    <div className=\"flex gap-1\">Round Name</div>\n                  </th>\n                  <th className=\"tableHead\">\n                    <div className=\"flex gap-1\">\n                      Type\n                      <div className=\"flex flex-col -space-y-1.5 cursor-pointer\">\n                        <FaAngleUp onClick={() => handleSort(\"type\", \"asc\")} />\n                        <FaAngleDown\n                          onClick={() => handleSort(\"type\", \"desc\")}\n                        />\n                      </div>\n                    </div>\n                  </th>\n                  <th className=\"tableHead\">\n                    <div className=\"flex gap-1\">Resume</div>\n                  </th>\n                  <th className=\"tableHead\">\n                    <div className=\"flex gap-1\">\n                      Date\n                      <div className=\"flex flex-col -space-y-1.5 cursor-pointer\">\n                        <FaAngleUp onClick={() => handleSort(\"date\", \"asc\")} />\n                        <FaAngleDown\n                          onClick={() => handleSort(\"date\", \"desc\")}\n                        />\n                      </div>\n                    </div>\n                  </th>\n                  <th className=\"tableHead\">status</th>\n                  {(canUpdate) && <th className=\"tableHead w-[10%]\">Action</th>}\n                </tr>\n              </thead>\n              {loading ? <ListLoader /> : <tbody>\n                {sortedList && sortedList?.length > 0 ? (\n                  sortedList?.map((element, index) => (\n                    <tr\n                      className={`text-black ${index % 2 === 0 ? \"bg-[#e9ecef]/80\" : \"bg-white\"\n                        } border-b-[1px] border-[#DDDDDD]`}\n                    >\n                      <td className=\"tableData\">  {index + 1 + (currentPage - 1) * limit}</td>\n                      <td className=\"tableData\">\n                        {element?.applicationData?.fullName}\n                      </td>\n                      <td className=\"tableData\">\n                        {\n                          element?.applicationData?.jobPostData?.designationData\n                            ?.name\n                        }\n                      </td>\n\n                      <td className=\"tableData\">\n                        {element?.roundNumber}\n                      </td>\n                      <td className=\"tableData\">\n                        {element?.roundName}\n                      </td>\n                      <td className=\"tableData\">{element?.type}</td>\n                      <td className=\"tableData\">\n                        {\" \"}\n                        <button\n                          onClick={() => {\n                            if (element?.applicationData?.resumeUrl) {\n                              const url = `${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public${element?.applicationData?.resumeUrl}`;\n                              window.open(url, \"_blank\");\n                            }\n                          }}\n                          className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\"\n                          type=\"button\"\n                        >\n                          <BsFileEarmarkPdfFill\n                            className=\" text-rose-700\"\n                            size={16}\n                          />\n                        </button>\n                      </td>\n                      <td className=\"tableData\">\n                        {moment(element?.date).format(\"YYYY-MM-DD hh:mm A\")}\n                      </td>\n                      <td className=\"tableData\">\n                        <span\n                          className={`${element?.status === \"Active\"\n                            ? \"bg-[#E0FFBE] border-green-500 text-black\"\n                            : element?.status === \"Pending\"\n                              ? \"bg-yellow-200 border-yellow-500 text-black\"\n                              : element?.status === \"Inactive\"\n                                ? \"bg-red-200 border-red-500 text-black\"\n                                : \"bg-gray-200 border-gray-500 text-black\"\n                            } border-[1px] px-2 py-1.5 rounded-lg text-[12px]`}\n                        >\n                          {element?.status ? element.status : \"-\"}\n                        </span>\n                      </td>\n\n                      {canUpdate && <td className=\"tableData\">\n                        <span className=\"py-1.5 flex justify-start items-center space-x-2.5\">\n                          {canUpdate && <Tooltip placement=\"topLeft\" \n                            title={`${element?.status === \"Pending\"\n                              ? \"Update As Failed\"\n                              : `Already ${element?.status}`\n                              }`}\n                          >\n                            <button\n                              onClick={() =>\n                                handleStatusUpdate(element, \"Failed\")\n                              }\n                              className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\"\n                              type=\"button\"\n                              disabled={element?.status !== \"Pending\"}\n                            >\n                              <MdRemoveCircle\n                                className={`${element?.status === \"Pending\"\n                                  ? \"hover:text-rose-500 text-rose-600\"\n                                  : \"text-gray-500\"\n                                  }`}\n                                size={16}\n                              />\n                            </button>\n                          </Tooltip>}\n                          {canUpdate && <Tooltip placement=\"topLeft\" \n                            title={`${element?.status === \"Pending\"\n                              ? \"Update As Passed\"\n                              : `Already ${element?.status}`\n                              }`}\n                          >\n                            <button\n                              onClick={() =>\n                                handleStatusUpdate(element, \"Passed\")\n                              }\n\n                              className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\"\n                              type=\"button\"\n                              disabled={element?.status !== \"Pending\"}\n                            >\n                              <BsPassFill\n                                className={`${element?.status === \"Pending\"\n                                  ? \"hover:text-teal-500 text-teal-500\"\n                                  : \"text-gray-500\"\n                                  }`}\n                                size={16}\n                              />\n                            </button>\n                          </Tooltip>}\n\n                        </span>\n                      </td>}\n                    </tr>\n                  ))\n                ) : (\n                  <tr className=\"bg-white bg-opacity-5\">\n                    <td\n                      colSpan={10}\n                      className=\"px-6 py-2 whitespace-nowrap font-[600] text-center text-sm text-gray-500\"\n                    >\n                      Record Not Found\n                    </td>\n                  </tr>\n                )}\n              </tbody>}\n            </table>\n          </div>\n          <CustomPagination\n            totalCount={totalInterviewCount}\n            pageSize={limit}\n            currentPage={currentPage}\n            onChange={onPaginationChange}\n          />\n        </>\n      )}\n    </GlobalLayout>\n  );\n}\nexport default EmployeeInterviewList;\n","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["canCreate","canRead","canUpdate","canDelete","usePermissions","register","handleSubmit","setValue","getValues","unregister","control","formState","errors","useForm","defaultValues","pdStatus","dispatch","useDispatch","interviewList","totalInterviewCount","loading","useSelector","state","interview","currentPage","setCurrentPage","useState","searchText","setSearchText","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","Status","useWatch","name","defaultValue","useEffect","userType","fetchInterviewData","data","pageSize","reqData","text","status","sort","isPagination","interviewerId","_id","companyId","branchId","getInterviewList","sortedList","setSortedList","handleSort","key","order","handleSortLogic","_jsx","GlobalLayout","children","className","handleStatusUpdate","element","Swal","title","input","inputLabel","inputPlaceholder","showCancelButton","confirmButtonText","cancelButtonText","inputValidator","value","undefined","then","result","isConfirmed","feedback","statusUpdateApplication","applicationId","error","onChange","e","Loader","_jsxs","_Fragment","Controller","render","_ref","field","Select","_objectSpread","disabled","inputAntdSelectClassNameFilter","Option","PdDesignationId","message","onClick","FaAngleUp","FaAngleDown","ListLoader","length","map","index","_element$applicationD","_element$applicationD2","_element$applicationD3","_element$applicationD4","applicationData","fullName","jobPostData","designationData","roundNumber","roundName","type","_element$applicationD5","resumeUrl","_element$applicationD6","url","process","window","open","BsFileEarmarkPdfFill","size","moment","date","format","Tooltip","placement","MdRemoveCircle","BsPassFill","colSpan","CustomPagination","totalCount","page","Spin"],"sourceRoot":""}