{"version":3,"file":"static/js/7197.ecb534f6.chunk.js","mappings":"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","sources":["pages/clientNotification/CreateNotification.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport ReactQuill from \"react-quill\";\n//import { createDesignation } from \"./designationFeatures/_designation_reducers\";\n\nimport { domainName, getLocationDataByPincode, inputClassName, inputClassNameSearch, inputerrorClassNameAutoComplete, inputLabelClassNameReactSelect, inputLabelClassName } from \"../../constents/global\";\nimport getUserIds from '../../constents/getUserIds';\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { createNotification } from \"./notificationFeatures/_notification_reducers\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { branchSearch } from \"../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { AutoComplete, Input } from \"antd\";\nimport ReactSelect from \"react-select\";\nimport { countrySearch } from \"../global/address/country/CountryFeatures/_country_reducers\";\nimport { stateSearch } from \"../global/address/state/featureStates/_state_reducers\";\nimport { citySearch } from \"../global/address/city/CityFeatures/_city_reducers\";\nimport { employeSearch } from \"../../pages/employeManagement/employeFeatures/_employe_reducers\";\nimport { fileUploadFunc } from \"../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { clientSearch } from \"../client/clientManagement/clientFeatures/_client_reducers\";\nimport { clientGrpSearch } from \"../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { deptSearch } from \"../department/departmentFeatures/_department_reducers\";\n\nfunction CreateNotification() {\n  const { register, handleSubmit,\n    setValue,\n    getValues,\n    unregister,\n    watch,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType\n  } = getUserIds();\n\n  const { companyList } = useSelector((state) => state.company);\n  const { departmentListData } = useSelector((state) => state.department);\n  const { clientList } = useSelector((state) => state.client);\n  const { clientGroupList } = useSelector(state => state.clientGroup);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const [tags, setTags] = useState([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const [isSelectAllChecked, setIsSelectAllChecked] = useState(false);\n  const [isSelectAllCheckedClient, setIsSelectAllCheckedClient] = useState(false);\n  const [editorValue, setEditorValue] = useState(``);\n\n  const handleSelectAll = (field) => {\n    if (isSelectAllChecked) {\n      field.onChange([]);\n    } else {\n      const allGroup = clientGroupList.map((element) => ({\n        value: element._id,\n        label: element.fullName,\n      }));\n      field.onChange(allGroup);\n    }\n    setIsSelectAllChecked(!isSelectAllChecked);\n  };\n  const handleSelectAllClient = (field) => {\n    if (isSelectAllCheckedClient) {\n      field.onChange([]);\n    } else {\n      const allClients = clientList?.map((element) => ({\n        value: element._id,\n        label: element.fullName,\n      }));\n      field.onChange(allClients);\n    }\n    setIsSelectAllCheckedClient(!isSelectAllCheckedClient);\n  };\n\n  const { branchList } = useSelector(\n    (state) => state.branch\n  );\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"branchId\",\n    defaultValue: userBranchId,\n  });\n\n  const notificationType = useWatch({\n    control,\n    name: \"notificationType\",\n    defaultValue: \"\"\n  });\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: companyId,\n      directorId: '',\n      branchId: branchId,\n      departmentId: data?.departmentId,\n      subject: data?.subject,\n      notificationType: data?.notificationType,\n      attachment: data?.fileUploadLink,\n      message: editorValue,\n      clientIds: notificationType === \"client\" ? data?.client?.map((client) => client.value) : [],\n      clientGroupIds: notificationType === \"group\" ? data?.group?.map((group) => group.value) : [],\n      clients: notificationType === \"group\" ? tags : [],\n    };\n\n    dispatch(createNotification(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/notification\");\n    });\n  };\n\n  const handleFileChange = (file) => {\n    dispatch(\n      fileUploadFunc({\n        filePath: file,\n        isVideo: false,\n        isMultiple: false,\n      })\n    ).then((data) => {\n      if (!data.error) {\n        setValue('fileUploadLink', data?.payload?.data)\n      }\n    });\n  };\n\n  const handleTagChange = (e) => {\n    setTagInput(e.target.value);\n  };\n\n  const handleAddTag = (e) => {\n    if (e.key === \"Enter\" && tagInput.trim() !== \"\") {\n      e.preventDefault();\n      setTags((prevTags) => [...prevTags, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove) => {\n    setTags((prevTags) => prevTags.filter((tag) => tag !== tagToRemove));\n  };\n\n  const handleEditorChange = (value) => {\n    setEditorValue(value);\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 gap-2 md:my-2\">\n            {userType === \"admin\" &&\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Company<span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": \"\",\n                      \"isPagination\": false,\n                    }\n                    dispatch(companySearch(reqPayload))\n                  }}\n                  {...register(\"companyId\", {\n                    required: \"Company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.companyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.fullName}\n                    </option>\n                  ))}\n                </select>\n                {errors.companyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.companyId.message}\n                  </p>\n                )}\n              </div>}\n            {(userType === \"admin\" || userType === \"company\" || userType === \"companyDirector\") &&\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Branch<span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      companyId: companyId,\n                      directorId: \"\",\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": \"\",\n                      \"isPagination\": false,\n                    }\n                    dispatch(branchSearch(reqPayload))\n                  }}\n                  {...register(\"branchId\", {\n                    required: \"Branch is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.branchId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Branch\n                  </option>\n                  {branchList?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.fullName}\n                    </option>\n                  ))}\n                </select>\n                {errors.branchId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.branchId.message}\n                  </p>\n                )}\n              </div>}\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Type<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"notificationType\", {\n                  required: \"Category is required\",\n                })}\n                className={` ${inputClassName} ${errors.notificationType\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">Select Type</option>\n                <option value=\"group\">Client Group</option>\n                <option value=\"client\">Client Wise</option>\n                <option value=\"department\">Department Wise</option>\n                <option value=\"other\">other</option>\n              </select>\n              {errors[`notificationType`] && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors[`notificationType`].message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Subject <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"subject\", {\n                  required: \"Subject is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.subject\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter subject\"\n              />\n              {errors.subject && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.subject.message}\n                </p>\n              )}\n            </div>\n            {(notificationType === \"client\") &&\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  client <span className=\"text-red-600\">*</span>\n                </label>\n\n                <Controller\n                  name=\"client\"\n                  control={control}\n                  rules={{ required: \"At least one client is required\" }}\n                  render={({ field }) => (\n                    <ReactSelect\n                      {...field}\n                      isMulti\n                      onFocus={() => {\n                        dispatch(clientSearch({\n                          companyId: companyId,\n                          branchId: branchId,\n                          groupId: watch('groupName'),\n                          \"directorId\": \"\",\n                          \"organizationId\": \"\",\n                          \"industryId\": \"\",\n\n                          \"text\": \"\",\n                          \"sort\": true,\n                          \"status\": true,\n                          \"isPagination\": false,\n                        }));\n                      }}\n                      options={[\n                        { value: \"select_all\", label: \"Select All\" },\n                        ...(Array.isArray(clientList) ? clientList.map((client) => ({\n                          value: client._id,\n                          label: client.fullName,\n                        })) : []),\n                      ]}\n                      classNamePrefix=\"react-select\"\n                      className={`${inputLabelClassNameReactSelect} ${errors.client ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      placeholder=\"Select client...\"\n                      onChange={(selectedOptions) => {\n                        const isSelectAllSelected = selectedOptions.find(\n                          (option) => option.value === \"select_all\"\n                        );\n\n                        if (isSelectAllSelected) {\n                          handleSelectAllClient(field);\n                        } else {\n                          // Check if all employees are selected\n                          setIsSelectAllCheckedClient(\n                            selectedOptions.length === clientList.length\n                          );\n                          field.onChange(selectedOptions);\n                        }\n                      }}\n                      value={field.value || []}\n                      formatOptionLabel={(data, { context }) => {\n                        if (data.value === \"select_all\") {\n                          return (\n                            <div className=\"flex items-center\">\n                              <input\n                                type=\"checkbox\"\n                                checked={isSelectAllCheckedClient}\n                                onChange={() => handleSelectAllClient(field)}\n                                style={{ marginRight: \"10px\" }}\n                              />\n                              <span>Select All</span>\n                            </div>\n                          );\n                        }\n                        return data.label;\n                      }}\n                    />\n                  )}\n                />\n                {errors.client && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.client.message}\n                  </p>\n                )}\n              </div>\n            }\n            {(notificationType === \"group\") &&\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Group <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"group\"\n                  control={control}\n                  rules={{ required: \"At least one group is required\" }}\n                  render={({ field }) => (\n                    <ReactSelect\n                      {...field}\n                      isMulti\n                      onFocus={() => {\n                        dispatch(clientGrpSearch({\n                          companyId: companyId,\n                          branchId: branchId,\n                          text: \"\",\n                          sort: true,\n                          status: true,\n                          isPagination: false,\n                        }));\n                      }}\n                      options={[\n                        { value: \"select_all\", label: \"Select All\" },\n                        ...(Array.isArray(clientGroupList) ? clientGroupList.map((element) => ({\n                          value: element._id,\n                          label: element.fullName,\n                        })) : []),\n                      ]}\n                      classNamePrefix=\"react-select\"\n                      className={`${inputLabelClassNameReactSelect} ${errors.group ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      placeholder=\"Select Employees...\"\n                      onChange={(selectedOptions) => {\n                        const isSelectAllSelected = selectedOptions.find(\n                          (option) => option.value === \"select_all\"\n                        );\n\n                        if (isSelectAllSelected) {\n                          handleSelectAll(field);\n                        } else {\n                          // Check if all employees are selected\n                          setIsSelectAllChecked(\n                            selectedOptions.length === clientGroupList.length\n                          );\n                          field.onChange(selectedOptions);\n                        }\n                      }}\n                      value={field.value || []}\n                      formatOptionLabel={(data, { context }) => {\n                        if (data.value === \"select_all\") {\n                          return (\n                            <div className=\"flex items-center\">\n                              <input\n                                type=\"checkbox\"\n                                checked={isSelectAllChecked}\n                                onChange={() => handleSelectAll(field)}\n                                style={{ marginRight: \"10px\" }}\n                              />\n                              <span>Select All</span>\n                            </div>\n                          );\n                        }\n                        return data.label;\n                      }}\n                    />\n                  )}\n                />\n                {errors.group && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.group.message}\n                  </p>\n                )}\n              </div>}\n            {(notificationType === \"department\") &&\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Department<span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      companyId: companyId,\n                      branchId: branchId,\n                      directorId: \"\",\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": true,\n                      \"isPagination\": false,\n                    }\n                    dispatch(deptSearch(reqPayload))\n                  }}\n                  {...register(\"departmentId\", {\n                    required: \"Department is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.departmentId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Department\n                  </option>\n                  {departmentListData?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.name}\n                    </option>\n                  ))}\n                </select>\n                {errors.departmentId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.departmentId.message}\n                  </p>\n                )}\n              </div>}\n            {/* {(notificationType === \"department\") &&\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Department <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"departmentId\"\n                  control={control}\n                  rules={{ required: \"At least one department is required\" }}\n                  render={({ field }) => (\n                    <ReactSelect\n                      {...field}\n                      options={departmentListData?.map((department) => ({\n                        value: department?._id,\n                        label: department?.name,\n                      }))}\n                      classNamePrefix=\"react-select\"\n                      className={`${inputLabelClassNameReactSelect} ${errors.departmentId ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Select Departments\"\n                      onChange={(selectedOptions) => field.onChange(selectedOptions)}\n                      value={field.value}\n                    />\n                  )}\n                />\n                {errors.departmentId && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.departmentId.message}\n                  </p>\n                )}\n              </div>} */}\n            {(notificationType === \"other\") &&\n              <div className=\"w-full\">\n                <div className=\"w-full\">\n                  <label className={`${inputLabelClassName}`}>Clients <span className=\"text-red-600\">*</span></label>\n                  <input\n                    type=\"text\"\n                    {...register(\"clients\",)}\n                    className={`${inputClassName} ${errors.clients ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                    placeholder=\"Write Clients & Press Enter\"\n                    value={tagInput}\n                    onChange={handleTagChange}\n                    onKeyDown={handleAddTag}\n                  />\n                  {errors.clients && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.clients.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-gray-200 text-gray-700 px-3 py-1 text-xs rounded-full flex items-center gap-2\"\n                    >\n                      {tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveTag(tag)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        &times;\n                      </button>\n                    </span>\n                  ))}\n                </div>\n              </div>}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Message <span className=\"text-red-600\">*</span>\n              </label>\n              <ReactQuill\n                value={editorValue}\n                onChange={handleEditorChange}\n                modules={{\n                  toolbar: [\n                    [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                    ['bold', 'italic', 'underline', 'strike'],\n                    [{ 'align': [] }],\n                    ['link', 'image', 'video'],\n                    ['blockquote', 'code-block'],\n                    ['clean']\n                  ],\n                }}\n                formats={['header', 'font', 'list', 'bold', 'italic', 'underline', 'link', 'align', 'clean']}\n              />\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                File  Upload\n              </label>\n\n              <Controller\n                name=\"fileUpload\"\n                control={control}\n\n                render={({ field }) => (\n                  <>\n                    <input\n                      type=\"file\"\n                      id=\"file-upload\"\n                      className=\"hidden\"\n                      onChange={(e) => {\n                        field.onChange(e);\n                        handleFileChange(e.target.files[0]);\n                      }}\n                    />\n                    <br />\n                    <label\n                      htmlFor=\"file-upload\"\n                      className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                    >\n                      File Upload\n                    </label>\n                    {errors.fileUpload && (\n                      <p className=\"text-red-600 text-sm mt-1\">{errors.fileUpload.message}</p>\n                    )}\n                  </>\n                )}\n              />\n              {watch('fileUploadLink') && <img\n                src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('fileUploadLink')}`}\n                alt=\"Uploaded\"\n                className=\"w-20 h-20 shadow rounded-sm\"\n              />}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default CreateNotification;\n"],"names":["register","handleSubmit","setValue","getValues","unregister","watch","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","companyList","useSelector","state","company","departmentListData","department","clientList","client","clientGroupList","clientGroup","navigate","useNavigate","dispatch","useDispatch","tags","setTags","useState","tagInput","setTagInput","isSelectAllChecked","setIsSelectAllChecked","isSelectAllCheckedClient","setIsSelectAllCheckedClient","editorValue","setEditorValue","handleSelectAll","field","onChange","allGroup","map","element","value","_id","label","fullName","handleSelectAllClient","allClients","branchList","branch","companyId","useWatch","name","defaultValue","branchId","notificationType","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$client","_data$group","finalPayload","directorId","departmentId","subject","attachment","fileUploadLink","message","clientIds","clientGroupIds","group","clients","createNotification","then","error","concat","inputLabelClassName","_objectSpread","onFocus","companySearch","required","inputClassName","reqPayload","branchSearch","type","placeholder","Controller","rules","render","_ref","ReactSelect","isMulti","clientSearch","groupId","options","Array","isArray","classNamePrefix","inputLabelClassNameReactSelect","selectedOptions","find","option","length","formatOptionLabel","_ref2","context","checked","style","marginRight","_ref3","clientGrpSearch","text","sort","status","isPagination","_ref4","deptSearch","e","target","onKeyDown","key","trim","preventDefault","prevTags","tag","index","onClick","handleRemoveTag","tagToRemove","filter","ReactQuill","modules","toolbar","formats","_ref5","_Fragment","id","file","files","fileUploadFunc","filePath","isVideo","isMultiple","_data$payload","payload","htmlFor","fileUpload","src","process","alt"],"sourceRoot":""}