{"version":3,"file":"static/js/4255.4fd152b1.chunk.js","mappings":"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","sources":["pages/Project management/ProjectManagement/Editprojectmanagement.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  customDayjs,\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport { useEffect, useState } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { Select, Checkbox } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { ServerManagementSearch } from \"../../ServerManagement/serverManagementFeatures/_server-management_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { projectCategorySearch } from \"../ProjectCategory/projectCategoryFeatures/_projectCategory_reducers\";\nimport { PlusOutlined, CloseOutlined } from '@ant-design/icons';\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport dayjs from \"dayjs\";\nimport { projectserviceSearch } from \"../ProjectServices/projectserviceFeatures/_projectservice_reducers\";\nimport { createprojectmanagementFunc, getprojectmanagementDetails, updateprojectmanagementFunc } from \"./ProjectManagementFeatures/_ProjectManagement_reducers\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\nimport { decrypt, encrypt } from \"../../../config/Encryption\";\n\n// Enums\nconst PROJECT_TYPE_ARR = [\"service\", \"product\"];\nconst PROJECT_PRIORITY_ARR = [\"Low\", \"Medium\", \"High\"];\nconst PROJECT_BILLING_TYPE_ARR = [\"isBillable\", \"Fixed\"];\nconst PROJECT_BILLING_DURATION_ARR = [\"Weekly\", \"Monthly\", \"Yearly\"];\nconst WEEKDAY_ARR = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\nconst MONTH_ARR = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst SERVICE_TYPE_ARR = [\"service\", \"server\"];\n\nfunction EditprojectManagement() {\n  const { loading: projectManagementLoader, projectmanagementDetailsData } = useSelector((state) => state.projectManagement);\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm({\n    defaultValues: {\n      billing: {\n        duration: \"Weekly\",\n        schedule: {\n          weekly: { day: \"Monday\" },\n          monthly: { date: 1 },\n          quartAndYearly: { month: \"January\", date: 1 }\n        }\n      },\n      projectType: \"product\",\n      priority: \"Medium\",\n      billingType: \"isBillable\",\n      employeIds: [],\n      items: [], // Changed from services to items to include both services and servers\n      tags: [],\n      filePath: [],\n      subTotal: 0,\n      finalAmount: 0\n    }\n  });\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { projectIdEnc } = useParams();\n  const projectId = projectIdEnc ? decrypt(projectIdEnc) : null;\n  useEffect(() => {\n    if (projectId) {\n      dispatch(getprojectmanagementDetails({\n        _id: projectId,\n      }))\n    }\n  }, [])\n  // Selectors\n  const { loading: employeeLoading, employeList } = useSelector((state) => state.employe);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { clientList, loading: clientLoading } = useSelector((state) => state.client);\n  const { ServerManagementList, loading: serverLoading } = useSelector(state => state.serverManagement);\n  const { projectCategoryList, loading: projectCategoryLoading } = useSelector((state) => state.projectCategory);\n  const { projectserviceList, loading: projectservicesLoading } = useSelector((state) => state.projectservice);\n\n  // Local state\n  const [fileList, setFileList] = useState([]);\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"items\"\n  });\n  const [documents, setDocuments] = useState([]);\n  const items = useWatch({ control, name: \"items\", defaultValue: [] });\n\n  // Calculate totals whenever relevant fields change\n  useEffect(() => {\n    const subTotal = (items || []).reduce((sum, item) => sum + (Number(item?.amount) || 0), 0);\n    const finalAmount = subTotal;\n    setValue(\"subTotal\", subTotal);\n    setValue(\"finalAmount\", finalAmount);\n  }, [items, setValue]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: projectId,\n      companyId: projectmanagementDetailsData?.companyId,\n      branchId: projectmanagementDetailsData?.branchId,\n      directorId: projectmanagementDetailsData?.directorId,\n      managerId: \"\",\n      teamLeadId: data?.employee || \"\",\n      clientId: data?.client || \"\",\n      categoryId: data?.projectCategory || \"\",\n      employeIds: data?.employeIds || [],\n      customerName: data.customerName,\n      title: data.title,\n      startUpFee: +data?.startUpFee,\n      projectType: data.projectType,\n      priority: data.priority,\n      billingType: data.billingType,\n      billing: data.billing,\n      services: data.items?.map((item) => ({\n        type: item.type,\n        amount: item.amount ? +item.amount : 0,\n        name:\n          item.type === \"service\"\n            ? projectserviceList.find(service => service._id === item.expenseId)?.name\n            : item.type === \"server\"\n              ? ServerManagementList.find(server => server._id === item.expenseId)?.serverName\n              : item?.name,\n\n        expenseId: item.type === \"service\" ? (item.expenseId || \"\") : null,\n        serverId: item.type === \"server\" ? (item.expenseId || \"\") : null,\n        GSTRate: + item?.GSTRate,\n        GSTAmount: + item?.GSTAmount,\n        amountAfterGST: +item?.amountAfterGST,\n        remark: item.remark || \"\"\n      })) || [],\n      subTotal: + data.subTotal,\n      GSTTotal: +data?.GSTTotal,\n      finalWithGSTAmount: + data?.finalWithGSTAmount,\n      startDate: customDayjs(data.startDate),\n      deadlineDate: customDayjs(data.deadlineDate),\n      description: data.description,\n      filePath: documents\n    };\n\n\n    dispatch(updateprojectmanagementFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n\n\n\n\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setDocuments((prev) => [...prev, res.payload.data]);\n      }\n    });\n  };\n\n  const handleRemoveFile = (index) => {\n    setDocuments((prev) => {\n      const updatedDocuments = prev.filter((_, i) => i !== index);\n      return updatedDocuments;\n    });\n  };\n\n\n  useEffect(() => {\n    if (projectmanagementDetailsData) {\n      dispatch(employeSearch({\n        text: \"\",\n        status: true,\n        sort: true,\n        isTL: \"\",\n        isHR: \"\",\n        isManager: '',\n        isPagination: false,\n        departmentId: '',\n        designationId: \"\",\n        companyId: projectmanagementDetailsData?.companyId,\n        branchId: projectmanagementDetailsData?.branchId,\n        isBranch: true,\n        isDirector: true\n      })).then((data) => {\n        if (!data?.error) {\n          setValue(\"employee\", projectmanagementDetailsData?.teamLeadId)\n        }\n      })\n      dispatch(clientSearch({\n        companyId: projectmanagementDetailsData?.companyId,\n        branchId: projectmanagementDetailsData?.branchId,\n        groupId: \"\",\n        directorId: \"\",\n        organizationId: \"\",\n        industryId: \"\",\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n      })).then((data) => {\n        if (!data?.error) {\n          setValue(\"client\", projectmanagementDetailsData?.clientId)\n        }\n      })\n      dispatch(ServerManagementSearch({\n        companyId: projectmanagementDetailsData?.companyId,\n        branchId: projectmanagementDetailsData?.branchId,\n        text: '',\n        sort: true,\n        status: '',\n        isPagination: false,\n      })).then((data) => {\n        if (!data?.error) {\n          setValue(\"server\", projectmanagementDetailsData?.serverId)\n        }\n      })\n      dispatch(projectCategorySearch({\n        companyId: projectmanagementDetailsData?.companyId,\n        branchId: projectmanagementDetailsData?.branchId,\n        text: '',\n        sort: true,\n        status: '',\n        isPagination: false,\n      })).then((data) => {\n        if (!data?.error) {\n          setValue(\"projectCategory\", projectmanagementDetailsData?.categoryId)\n        }\n      })\n      dispatch(projectserviceSearch({\n        companyId: projectmanagementDetailsData?.companyId,\n        branchId: projectmanagementDetailsData?.branchId,\n        text: '',\n        sort: true,\n        status: '',\n        isPagination: false,\n      }))\n      setValue(\"customerName\", projectmanagementDetailsData?.customerName)\n      setValue(\"title\", projectmanagementDetailsData?.title)\n      setValue(\"startUpFee\", projectmanagementDetailsData?.startUpFee)\n      setValue(\"projectType\", projectmanagementDetailsData?.projectType)\n      setValue(\"priority\", projectmanagementDetailsData?.priority)\n      setValue(\"billingType\", projectmanagementDetailsData?.billingType)\n      const newPayload = projectmanagementDetailsData?.services?.map((data) => ({\n        type: data.type,\n        amount: data.amount,\n        name: data?.name,\n        GSTRate: + data?.GSTRate,\n        GSTAmount: + data?.GSTAmount,\n        amountAfterGST: +data?.amountAfterGST,\n        expenseId: data.type === \"service\" ? data?.expenseId : data?.serverId,\n        remark: data?.remark,\n      }))\n      setValue(\"items\", newPayload)\n      setValue(\"billing\", projectmanagementDetailsData?.billing)\n      setValue(\"subTotal\", projectmanagementDetailsData?.subTotal)\n      setValue(\"GSTTotal\", projectmanagementDetailsData?.GSTTotal)\n      setValue(\"finalWithGSTAmount\", projectmanagementDetailsData?.finalWithGSTAmount)\n      setValue(\"startDate\", dayjs(projectmanagementDetailsData?.startDate))\n      setValue(\"deadlineDate\", dayjs(projectmanagementDetailsData?.deadlineDate))\n      setValue(\"description\", projectmanagementDetailsData?.description)\n      setDocuments(projectmanagementDetailsData?.filePath)\n    }\n  }, [projectmanagementDetailsData])\n\n\n  const calculateGST = (index, amount, gstRate) => {\n    const gstAmount = (amount * gstRate) / 100;\n    const amountAfterGST = amount + gstAmount;\n\n    setValue(`items.${index}.GSTAmount`, gstAmount);\n    setValue(`items.${index}.amountAfterGST`, amountAfterGST);\n\n    // Update financial summary\n    updateFinancialSummary();\n  };\n\n  const calculateSubtotal = () => {\n    const items = watch('items') || [];\n    return items.reduce((sum, item) => sum + (item.amount || 0), 0);\n  };\n\n  const calculateTotalGST = () => {\n    const items = watch('items') || [];\n    return items.reduce((sum, item) => sum + (item.GSTAmount || 0), 0);\n  };\n\n  const calculateTotalWithGST = () => {\n    const items = watch('items') || [];\n    return items.reduce((sum, item) => sum + (item.amountAfterGST || 0), 0);\n  };\n\n  const updateFinancialSummary = () => {\n    const subtotal = calculateSubtotal();\n    const totalGST = calculateTotalGST();\n    const totalWithGST = calculateTotalWithGST();\n\n    setValue('subTotal', subtotal);\n    setValue('GSTTotal', totalGST);\n    setValue('finalWithGSTAmount', totalWithGST);\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">Create New Project</h1>\n\n          {/* Basic Information Section */}\n          <div className=\" p-2 \">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Basic Information</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n\n              {/* Project Title */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Title <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"title\", { required: \"Title is required\" })}\n                  className={`${inputClassName} ${errors.title ? \"border-[1px] \" : \"border-gray-300\"}`}\n                  placeholder=\"Project Title\"\n                />\n                {errors.title && (\n                  <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n                )}\n              </div>\n\n              {/* Customer Name */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Customer Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"customerName\", { required: \"Customer name is required\" })}\n                  className={`${inputClassName} ${errors.customerName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                  placeholder=\"Customer Name\"\n                />\n                {errors.customerName && (\n                  <p className=\"text-red-500 text-sm\">{errors.customerName.message}</p>\n                )}\n              </div>\n\n\n\n\n              {/* Client */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Client <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"client\"\n                  control={control}\n                  rules={{ required: \"Client is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      className={`${inputAntdSelectClassName} ${errors.client ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    >\n                      <Select.Option value=\"\">Select client</Select.Option>\n                      {clientLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        (sortByPropertyAlphabetically(clientList, 'fullName')?.map((element) => (\n                          <Select.Option value={element?._id}>\n                            {element?.fullName}\n                          </Select.Option>\n                        )))}\n                    </Select>\n                  )}\n                />\n                {errors.client && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.client.message}</p>\n                )}\n              </div>\n\n              {/* Project Category */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Project Category <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"projectCategory\"\n                  control={control}\n                  rules={{ required: \"Project Category is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      <Select.Option value=\"\">Select Project Category</Select.Option>\n                      {projectCategoryLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        (sortByPropertyAlphabetically(projectCategoryList, 'name')?.map((element) => (\n                          <Select.Option value={element?._id}>\n                            {element?.name}\n                          </Select.Option>\n                        )))}\n                    </Select>\n                  )}\n                />\n                {errors.projectCategory && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.projectCategory.message}</p>\n                )}\n              </div>\n\n              {/* Project Type */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Project Type <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"projectType\"\n                  rules={{ required: \"Project type is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      {PROJECT_TYPE_ARR.map(type => (\n                        <Select.Option key={type} value={type}>\n                          {type.charAt(0).toUpperCase() + type.slice(1)}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.projectType && (\n                  <p className=\"text-red-500 text-sm\">{errors.projectType.message}</p>\n                )}\n              </div>\n              {/* Project Handling Employee */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Project Handling Employee <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"employee\"\n                  rules={{ required: \"employee is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      className={`${inputAntdSelectClassName} mt-2`}\n                    >\n                      <Select.Option value=\"\" selected>Select Project Handling Employee</Select.Option>\n                      {employeeLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        sortByPropertyAlphabetically(employeList, 'fullName')?.map((element, index) => (\n                          <Select.Option key={index} value={element?._id}>\n                            {element?.fullName}\n                          </Select.Option>\n                        ))\n                      }\n                    </Select>\n                  )}\n                />\n                {errors.employee && (\n                  <p className=\"text-red-500 text-sm\">{errors.employee.message}</p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Start Up Fee</label>\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"number\"\n                    step=\"0.01\"\n\n                    {...register(`startUpFee`, {})}\n                    className={`${inputClassName}`}\n                    placeholder=\"Start Up Fee\"\n                  />\n                  {errors.startUpFee && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.startUpFee?.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              {/* Priority */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Priority <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"priority\"\n                  rules={{ required: \"Priority is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      {PROJECT_PRIORITY_ARR.map(priority => (\n                        <Select.Option key={priority} value={priority}>\n                          {priority}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.priority && (\n                  <p className=\"text-red-500 text-sm\">{errors.priority.message}</p>\n                )}\n              </div>\n\n\n\n              {/* Dates */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Start Date <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"startDate\"\n                  control={control}\n                  rules={{ required: \"Start date is required\" }}\n                  render={({ field }) => (\n                    <CustomDatePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n                {errors.startDate && (\n                  <p className=\"text-red-500 text-sm\">{errors.startDate.message}</p>\n                )}\n              </div>\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Deadline Date</label>\n                <Controller\n                  name=\"deadlineDate\"\n                  control={control}\n                  render={({ field }) => (\n                    <CustomDatePicker\n                      field={field}\n                      disabledDate={(current) => {\n                        const startDate = watch(\"startDate\");\n                        return startDate && current && current.isBefore(dayjs(startDate), \"day\");\n                      }}\n                    />\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Billing Information Section */}\n          <div className=\" p-2 \">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Billing Information</h2>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Billing Type */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Billing Type <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"billingType\"\n                  rules={{ required: \"Billing type is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName}`}\n                    >\n                      {PROJECT_BILLING_TYPE_ARR.map(type => (\n                        <Select.Option key={type} value={type}>\n                          {type === \"isBillable\" ? \"Billable\" : \"Fixed\"}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.billingType && (\n                  <p className=\"text-red-500 text-sm\">{errors.billingType.message}</p>\n                )}\n              </div>\n\n              {/* Billing Section */}\n              {watch(\"billingType\") === \"isBillable\" && (\n                <>\n                  {/* Billing Duration */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Billing Duration</label>\n                    <Controller\n                      control={control}\n                      name=\"billing.duration\"\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName}`}\n                        >\n                          {PROJECT_BILLING_DURATION_ARR.map(duration => (\n                            <Select.Option key={duration} value={duration}>\n                              {duration}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                  </div>\n\n                  {/* Billing Schedule */}\n                  {watch(\"billing.duration\") === \"Weekly\" && (\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>Billing Day</label>\n                      <Controller\n                        control={control}\n                        name=\"billing.schedule.weekly.day\"\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName}`}\n                          >\n                            {WEEKDAY_ARR.map(day => (\n                              <Select.Option key={day} value={day}>{day}</Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                    </div>\n                  )}\n\n                  {watch(\"billing.duration\") === \"Monthly\" && (\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>Billing Date</label>\n                      <Controller\n                        control={control}\n                        name=\"billing.schedule.monthly.date\"\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName}`}\n                          >\n                            {Array.from({ length: 31 }, (_, i) => i + 1).map(date => (\n                              <Select.Option key={date} value={date}>{date}</Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                    </div>\n                  )}\n\n                  {(watch(\"billing.duration\") === \"Quarterly\" || watch(\"billing.duration\") === \"Yearly\") && (\n                    <>\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>Billing Month</label>\n                        <Controller\n                          control={control}\n                          name=\"billing.schedule.quartAndYearly.month\"\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              className={`${inputAntdSelectClassName}`}\n                            >\n                              {MONTH_ARR.map(month => (\n                                <Select.Option key={month} value={month}>{month}</Select.Option>\n                              ))}\n                            </Select>\n                          )}\n                        />\n                      </div>\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>Billing Date</label>\n                        <Controller\n                          control={control}\n                          name=\"billing.schedule.quartAndYearly.date\"\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              className={`${inputAntdSelectClassName}`}\n                            >\n                              {Array.from({ length: 31 }, (_, i) => i + 1).map(date => (\n                                <Select.Option key={date} value={date}>{date}</Select.Option>\n                              ))}\n                            </Select>\n                          )}\n                        />\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n\n\n          {/* Services/Servers Section */}\n          <div className=\"p-2\">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">\n              Services & Servers\n            </h2>\n\n            <div className=\"space-y-4\">\n              {fields.map((field, index) => (\n                <div key={field.id} className=\"grid grid-cols-1 md:grid-cols-4 gap-2 border rounded p-2\">\n                  {/* Type - col-span-2 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Type</label>\n                    <Controller\n                      control={control}\n                      name={`items.${index}.type`}\n                      rules={{ required: 'Type is required' }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName}`}\n                          placeholder=\"Select Type\"\n                          onChange={(value) => {\n                            field.onChange(value);\n                            // Reset expenseId when type changes\n                            setValue(`items.${index}.expenseId`, \"\");\n                            setValue(`items.${index}.name`, \"\");\n                          }}\n                        >\n                          <Select.Option value=\"\">Select Type</Select.Option>\n                          {['service', 'server', 'other'].map((type) => (\n                            <Select.Option key={type} value={type}>\n                              {type.charAt(0).toUpperCase() + type.slice(1)}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.items?.[index]?.type && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.type?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Service/Server/Other Name - col-span-3 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      {watch(`items.${index}.type`) === 'service' ? 'Service' :\n                        watch(`items.${index}.type`) === 'server' ? 'Server' : 'Name'}\n                    </label>\n                    {watch(`items.${index}.type`) === 'other' ? (\n                      <Controller\n                        name={`items.${index}.name`}\n                        control={control}\n                        rules={{ required: 'Name is required' }}\n                        render={({ field }) => (\n                          <input\n                            {...field}\n                            type=\"text\"\n                            className={`${inputClassName}`}\n                            placeholder=\"Enter name\"\n                          />\n                        )}\n                      />\n                    ) : (\n                      <Controller\n                        control={control}\n                        name={`items.${index}.expenseId`}\n                        rules={{\n                          required: `${watch(`items.${index}.type`) === 'service' ? 'Service' : 'Server'} is required`,\n                        }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            loading={watch(`items.${index}.type`) === 'service' ? projectservicesLoading : serverLoading}\n                            className={`${inputAntdSelectClassName}`}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                            onChange={(value, option) => {\n                              field.onChange(value);\n                              // Set the name when item is selected\n                              const name = option?.children || \"\";\n                              setValue(`items.${index}.name`, name);\n                            }}\n                          >\n                            <Select.Option value=\"\">\n                              Select {watch(`items.${index}.type`) === 'service' ? 'Service' : 'Server'}\n                            </Select.Option>\n                            {watch(`items.${index}.type`) === 'service' ? (\n                              projectservicesLoading ? (\n                                <Select.Option disabled>\n                                  <ListLoader />\n                                </Select.Option>\n                              ) : (\n                                sortByPropertyAlphabetically(projectserviceList, 'name')?.map((type) => (\n                                  <Select.Option key={type?._id} value={type?._id}>\n                                    {type?.name}\n                                  </Select.Option>\n                                ))\n                              )\n                            ) : serverLoading ? (\n                              <Select.Option disabled>\n                                <ListLoader />\n                              </Select.Option>\n                            ) : (\n                              sortByPropertyAlphabetically(ServerManagementList, 'serverName')?.map(\n                                (server) => (\n                                  <Select.Option key={server?._id} value={server?._id}>\n                                    {server?.serverName}\n                                  </Select.Option>\n                                )\n                              )\n                            )}\n                          </Select>\n                        )}\n                      />\n                    )}\n                    {errors.items?.[index]?.expenseId && watch(`items.${index}.type`) !== 'other' && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.expenseId?.message}\n                      </p>\n                    )}\n                    {errors.items?.[index]?.name && watch(`items.${index}.type`) === 'other' && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.name?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Amount - col-span-2 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Amount</label>\n                    <Controller\n                      name={`items.${index}.amount`}\n                      control={control}\n                      rules={{ required: 'Amount is required', min: 0 }}\n                      render={({ field }) => (\n                        <input\n                          {...field}\n                          type=\"number\"\n                          step=\"0.01\"\n                          min=\"0\"\n                          className={`${inputClassName}`}\n                          placeholder=\"Amount\"\n                          onChange={(e) => {\n                            const value = parseFloat(e.target.value) || 0;\n                            field.onChange(value);\n                            // Recalculate GST when amount changes\n                            const gstRate = watch(`items.${index}.GSTRate`) || 0;\n                            calculateGST(index, value, gstRate);\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.items?.[index]?.amount && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.items?.[index]?.amount?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* GST Rate - col-span-1 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>GST %</label>\n                    <Controller\n                      name={`items.${index}.GSTRate`}\n                      control={control}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName}`}\n                          placeholder=\"GST %\"\n                          onChange={(value) => {\n                            field.onChange(value);\n                            // Recalculate GST when rate changes\n                            const amount = watch(`items.${index}.amount`) || 0;\n                            calculateGST(index, amount, value);\n                          }}\n                        >\n                          <Select.Option value={0}>0%</Select.Option>\n                          <Select.Option value={5}>5%</Select.Option>\n                          <Select.Option value={12}>12%</Select.Option>\n                          <Select.Option value={18}>18%</Select.Option>\n                          <Select.Option value={28}>28%</Select.Option>\n                        </Select>\n                      )}\n                    />\n                  </div>\n\n                  {/* GST Amount (display only) - col-span-1 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>GST Amt</label>\n                    <div className={`${inputClassName} bg-gray-100 flex items-center justify-center`}>\n                      ₹{(watch(`items.${index}.GSTAmount`) || 0).toFixed(2)}\n                    </div>\n                  </div>\n\n                  {/* Total with GST (display only) - col-span-1 on md, full on mobile */}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Total</label>\n                    <div className={`${inputClassName} bg-gray-100 flex items-center justify-center`}>\n                      ₹{(watch(`items.${index}.amountAfterGST`) || 0).toFixed(2)}\n                    </div>\n                  </div>\n\n                  {/* Remark and Remove - col-span-1 on md, full on mobile */}\n                  <div className=\"flex items-end md:col-span-2 w-full\">\n                    <div className=\"w-full\" >\n                      <label className={`${inputLabelClassName}`}>Remark</label>\n                      <Controller\n                        name={`items.${index}.remark`}\n                        control={control}\n                        render={({ field }) => (\n                          <input\n                            {...field}\n                            type=\"text\"\n                            className={`${inputClassName} flex-grow`}\n                            placeholder=\"Remark\"\n                          />\n                        )}\n                      />\n                    </div>\n                    <button\n                      type=\"button\"\n                      onClick={() => remove(index)}\n                      className=\"ml-2 text-red-500 h-10 px-2 flex items-center justify-center bg-red-50 rounded\"\n                    >\n                      <CloseOutlined />\n                    </button>\n                  </div>\n                </div>\n              ))}\n\n              {/* Add Button */}\n              <button\n                type=\"button\"\n                onClick={() => append({\n                  type: \"\",\n                  expenseId: \"\",\n                  name: \"\",\n                  amount: 0,\n                  GSTRate: 0,\n                  GSTAmount: 0,\n                  amountAfterGST: 0,\n                  remark: \"\"\n                })}\n                className=\"mt-2 text-blue-500 flex items-center\"\n              >\n                <PlusOutlined className=\"mr-1\" /> Add Item\n              </button>\n            </div>\n          </div>\n\n          {/* Financial Summary */}\n          <div className=\"p-2\">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Financial Summary</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"bg-blue-50 p-3 rounded\">\n                <p className=\"text-gray-600\">Subtotal:</p>\n                <p className=\"text-xl font-bold text-blue-600\">₹{calculateSubtotal().toFixed(2)}</p>\n              </div>\n              <div className=\"bg-green-50 p-3 rounded\">\n                <p className=\"text-gray-600\">Total GST:</p>\n                <p className=\"text-xl font-bold text-green-600\">₹{calculateTotalGST().toFixed(2)}</p>\n              </div>\n              <div className=\"bg-purple-50 p-3 rounded\">\n                <p className=\"text-gray-600\">Total with GST:</p>\n                <p className=\"text-xl font-bold text-purple-600\">₹{calculateTotalWithGST().toFixed(2)}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Additional Information Section */}\n          <div className=\" p-2 \">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-700 border-b pb-2\">Additional Information</h2>\n\n            {/* Description */}\n            <div className=\"mb-4\">\n              <label className={`${inputLabelClassName}`}>Description</label>\n              <textarea\n                {...register(\"description\")}\n                rows={4}\n                className={`${inputClassName}`}\n                placeholder=\"Project description\"\n              />\n            </div>\n\n            {/* Files */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Add Documents\n              </label>\n              <div className=\"space-y-4\">\n                <input\n                  type=\"file\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                />\n                <label\n                  htmlFor=\"file-upload\"\n                  className=\"inline-flex justify-start items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white cursor-pointer\"\n                >\n                  <FaRegFile className=\"mr-2\" />\n                  Add Documents\n                </label>\n\n                <div className=\"space-y-2\">\n                  {documents.map((file, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\"\n                    >\n                      <a\n                        href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                        className=\"flex items-center space-x-2\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <FaRegFile className=\"text-gray-500\" />\n                        <span className=\"text-sm text-gray-600\">\n                          {file}\n                        </span>\n                      </a>\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveFile(index)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <FaTimes />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={projectManagementLoader}\n              className={`${projectManagementLoader ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {projectManagementLoader ? <Loader /> : 'Create Project'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default EditprojectManagement;\n"],"names":["PROJECT_TYPE_ARR","PROJECT_PRIORITY_ARR","PROJECT_BILLING_TYPE_ARR","PROJECT_BILLING_DURATION_ARR","WEEKDAY_ARR","MONTH_ARR","_errors$startUpFee","loading","projectManagementLoader","projectmanagementDetailsData","useSelector","state","projectManagement","register","handleSubmit","control","watch","formState","errors","setValue","getValues","useForm","defaultValues","billing","duration","schedule","weekly","day","monthly","date","quartAndYearly","month","projectType","priority","billingType","employeIds","items","tags","filePath","subTotal","finalAmount","dispatch","useDispatch","navigate","useNavigate","projectIdEnc","useParams","projectId","decrypt","useEffect","getprojectmanagementDetails","_id","employeeLoading","employeList","employe","branchList","branchListloading","branch","clientList","clientLoading","client","ServerManagementList","serverLoading","serverManagement","projectCategoryList","projectCategoryLoading","projectCategory","projectserviceList","projectservicesLoading","projectservice","fileList","setFileList","useState","fields","append","remove","useFieldArray","name","documents","setDocuments","useWatch","defaultValue","reduce","sum","item","Number","amount","_projectmanagementDet","employeSearch","text","status","sort","isTL","isHR","isManager","isPagination","departmentId","designationId","companyId","branchId","isBranch","isDirector","then","data","error","teamLeadId","clientSearch","groupId","directorId","organizationId","industryId","clientId","ServerManagementSearch","serverId","projectCategorySearch","categoryId","projectserviceSearch","customerName","title","startUpFee","newPayload","services","map","type","GSTRate","GSTAmount","amountAfterGST","expenseId","remark","GSTTotal","finalWithGSTAmount","dayjs","startDate","deadlineDate","description","calculateGST","index","gstRate","gstAmount","concat","updateFinancialSummary","calculateSubtotal","calculateTotalGST","calculateTotalWithGST","subtotal","totalGST","totalWithGST","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_data$items","finalPayload","managerId","employee","_projectserviceList$f","_ServerManagementList","find","service","server","serverName","customDayjs","updateprojectmanagementFunc","inputLabelClassName","_objectSpread","required","inputClassName","placeholder","message","Controller","rules","render","_ref","_sortByPropertyAlphab","field","Select","showSearch","filterOption","input","option","String","toLowerCase","includes","inputAntdSelectClassName","Option","value","disabled","ListLoader","sortByPropertyAlphabetically","element","fullName","_ref2","_sortByPropertyAlphab2","_ref3","charAt","toUpperCase","slice","_ref4","_sortByPropertyAlphab3","selected","step","_ref5","_ref6","CustomDatePicker","_ref7","disabledDate","current","isBefore","_ref8","_Fragment","_ref9","_ref0","_ref1","Array","from","length","_","i","_ref10","_ref11","_errors$items","_errors$items$index","_errors$items2","_errors$items2$index","_errors$items2$index$","_errors$items3","_errors$items3$index","_errors$items4","_errors$items4$index","_errors$items4$index$","_errors$items5","_errors$items5$index","_errors$items6","_errors$items6$index","_errors$items6$index$","_errors$items7","_errors$items7$index","_errors$items8","_errors$items8$index","_errors$items8$index$","_ref12","onChange","_ref13","_ref14","_sortByPropertyAlphab4","_sortByPropertyAlphab5","min","_ref15","e","parseFloat","target","_ref16","toFixed","_ref17","onClick","CloseOutlined","id","PlusOutlined","rows","reqData","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","payload","prev","htmlFor","FaRegFile","file","href","process","rel","filter","handleRemoveFile","FaTimes","Loader"],"sourceRoot":""}