{"version":3,"file":"static/js/3349.130105bb.chunk.js","mappings":"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","sources":["pages/reportsManager/finance_report/bankStatementReport/BankStatementReport.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  convertMinutesToHoursAndMinutes,\n  domainName,\n  organizationTypes,\n  pazeSizeReport,\n  sortByPropertyAlphabetically,\n} from \"../../../../constents/global\";\nimport { useEffect, useState } from \"react\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { Collapse, Modal, Select, Tooltip } from \"antd\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport CustomPagination from \"../../../../component/CustomPagination/CustomPagination\";\n\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport CustomDatePicker from \"../../../../global_layouts/DatePicker/CustomDatePicker\";\nimport * as ExcelJS from \"exceljs\";\nimport Loader2 from \"../../../../global_layouts/Loader/Loader2\";\nimport { reportsServices } from \"../../../../redux/_services/_reports_services\";\nimport { MdKeyboardArrowDown } from \"react-icons/md\";\nimport { jsPDF } from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\n\nimport { clientGrpSearch } from \"../../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { FaEye } from \"react-icons/fa\";\nimport { orgTypeSearch } from \"../../../organizationType/organizationTypeFeatures/_org_type_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { indusSearch } from \"../../../global/other/Industry/IndustryFeature/_industry_reducers\";\nimport { useNavigate } from \"react-router-dom\";\nimport { financeBankListReportFunc } from \"../../../../redux/_reducers/_reports_reducers\";\n\n\nfunction BankStatementReport() {\n  const {\n    control,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm();\n\n  const [pageSize, setPageSize] = useState(10);\n\n  const dispatch = useDispatch();\n  const {\n    financeBankListReportList,\n    financeBankListReportFunc_loading,\n    financeBankListReportCount,\n  } = useSelector((state) => state.reports);\n\n  const { departmentListData, financeBankListReportFunc_loading: depfinanceBankListReportFunc_loading } = useSelector(\n    (state) => state.department\n  );\n\n  const navigate = useNavigate()\n\n  const [departmentModalData, setDepartmentModalData] = useState({});\n\n  const { taskTypeList } = useSelector((state) => state.taskType);\n  const { clientGroupList } = useSelector((state) => state.clientGroup);\n  const { clientList } = useSelector((state) => state.client);\n  const { employeList } = useSelector((state) => state.employe);\n  const [searchText, setSearchText] = useState(\"\");\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  \n  const { orgTypeList, orgSearchfinanceBankListReportFunc_loading } = useSelector(\n    (state) => state.orgType\n  );\n  const [currentPage, setCurrentPage] = useState(1);\n  const [debouncedFilterText, setDebouncedFilterText] = useState(\"\");\n  const { branchList } = useSelector((state) => state.branch);\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n\n  const handlePageSizeChange = (e) => {\n    setPageSize(Number(e));\n    setCurrentPage(Number(1))\n  };\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedFilterText(searchText);\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [searchText]);\n\n  const onPaginationChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const handleFocusOrgType = () => {\n    if (!orgTypeList?.length) {\n      dispatch(\n        orgTypeSearch({\n          isPagination: false,\n          text: \"\",\n          sort: true,\n          status: true,\n        })\n      );\n    }\n  };\n\n  const handleFocusClientGrp = () => {\n    dispatch(\n      clientGrpSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"admin\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    );\n  };\n\n  const handleFocusIndustry = () => {\n    // if (!industryListData?.length) {\n    dispatch(\n      indusSearch({\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n      })\n    );\n    // }\n  };\n\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n\n  const financialYears = generateFinancialYears();\n\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sep\", \"Oct-Dec\"];\n\n  const requestPayLoadReturn = (pagination = true) => {\n    return {\n      currentPage: currentPage,\n      pageSize: pageSize,\n      reqPayload: {\n        text: debouncedFilterText,\n        sort: true,\n        isPagination: pagination,\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? CompanyId\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        // directorId: \"\",\n        branchId:\n          userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"admin\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n            ? BranchId\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n\n        // status: Status == \"true\" ? true : Status == \"false\" ? false : \"\",\n        // organizationId: PDOrganizationType,\n        // organizationIds: [],\n        // departmentId: department,\n        // departmentIds: [],\n        // industryId: PDindustrytype,\n        // industryIds: [],\n        // groupId: groupName,\n        // groupIds: [],\n\n        \n        \n\n      },\n    };\n  };\n  useEffect(() => {\n    fetchClientServiceTaskReport(debouncedFilterText);\n  }, [currentPage, debouncedFilterText, pageSize]);\n  const handleEmployeeFocus = () => {\n    dispatch(\n      employeSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? CompanyId\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n              branchId: [\"admin\", \"company\", \"companyDirector\"].includes(\n                userInfoglobal?.userType\n              )\n              ? BranchId\n              : userInfoglobal?.userType === \"companyBranch\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.branchId,\n              departmentId: \"\",\n              directorId: \"\",\n              text: \"\",\n              sort: true,\n              status: true,\n              isPagination: false,\n              isBranch: true,\n              isDirector: false,\n      })\n    );\n  };\n\n  const fetchClientServiceTaskReport = () => {\n    dispatch(financeBankListReportFunc(requestPayLoadReturn(true)));\n  };\n\n  const [departmentModalOpen, setDepartmentModalOpen] = useState(false);\n\n  const handleDepartmentModal = (element) => {\n    setDepartmentModalOpen(true);\n    setDepartmentModalData(element);\n  };\n\n\n\n  useEffect(() => {\n    if (\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? CompanyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n    setValue(\"startDate\", dayjs().subtract(1, \"month\"));\n    setValue(\"endDate\", dayjs());\n  }, []);\n\n  const onChange = (e) => {\n    setSearchText(e);\n  };\n\n  const handleSubmit = async () => {\n    fetchClientServiceTaskReport();\n  };\n\n  const generateExcel = async () => {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(\"OverDueTasks\");\n\n    worksheet.columns = [\n      { header: \"S.No.\", key: \"sno\", width: 10 },\n      { header: \"Employee Name\", key: \"name\", width: 30 },\n      { header: \"Client Name\", key: \"clientName\", width: 30 },\n      { header: \"Department\", key: \"department\", width: 25 },\n      { header: \"Task Name\", key: \"taskName\", width: 30 },\n      { header: \"Priority\", key: \"priority\", width: 30 },\n      { header: \"Financial Year\", key: \"financialYear\", width: 20 },\n      { header: \"Month Name\", key: \"monthName\", width: 20 },\n      { header: \"Month Quaters\", key: \"monthQuarter\", width: 20 },\n      { header: \"Status\", key: \"status\", width: 15 },\n\n      { header: \"Created At\", key: \"createdAt\", width: 25 },\n      { header: \"Created By\", key: \"createdBy\", width: 25 },\n    ];\n\n    const headerRow = worksheet.getRow(1);\n    headerRow.eachCell((cell) => {\n      cell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: \"FFB6D7A8\" },\n      };\n      cell.font = { bold: true };\n      cell.alignment = { vertical: \"middle\", horizontal: \"center\" };\n      cell.border = {\n        top: { style: \"thin\" },\n        left: { style: \"thin\" },\n        bottom: { style: \"thin\" },\n        right: { style: \"thin\" },\n      };\n    });\n\n    const response = await reportsServices?.financeBankListReportFunc(\n      requestPayLoadReturn(false)\n    );\n\n\n    if (!financeBankListReportList && !response) return;\n    const apiData = response?.data?.docs?.map((data, index) => {\n      return {\n        sno: index + 1,\n        // name: data?.employeData[0].fullName || \"-\",\n        clientName: data?.clientData?.fullName || \"-\",\n        department: data?.departmentData?.name || \"-\",\n        taskName: data?.taskName || \"-\",\n\n        priority: data?.priority || \"-\",\n        financialYear: data?.financialYear || \"-\",\n        monthName: data?.monthName || \"-\",\n        monthQuarter: data?.monthQuaters || \"-\",\n        status: data?.status || \"-\",\n        createdAt: data?.createdAt\n          ? dayjs(data?.createdAt).format(\"DD-MM-YYYY hh:mm A\")\n          : \"-\",\n        createdBy: data?.createdBy || \"-\",\n      };\n    });\n    apiData?.forEach((item) => {\n      const row = worksheet.addRow(item);\n      row.eachCell((cell) => {\n        cell.alignment = { vertical: \"middle\", horizontal: \"left\" };\n        cell.border = {\n          top: { style: \"thin\" },\n          left: { style: \"thin\" },\n          bottom: { style: \"thin\" },\n          right: { style: \"thin\" },\n        };\n      });\n    });\n\n    // Add auto-filter\n    worksheet.autoFilter = {\n      from: \"A1\",\n      to: \"I1\",\n    };\n\n    // Export\n    workbook.xlsx.writeBuffer().then((buffer) => {\n      const blob = new Blob([buffer], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      });\n      const link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(blob);\n      link.download = \"OverDueTasks.xlsx\";\n      link.click();\n    });\n  };\n  \n  const generatePDF = async () => {\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: \"pt\",\n    });\n    doc.setFontSize(16);\n    const headers = [\n      \"S.No.\",\n      \"Employee Name\",\n      \" Client Name\",\n      \"Department\",\n      \"Task Name\",\n      \"Priority\",\n      \"financial Year\",\n      \"Month Name\",\n      \"Month Quaters\",\n      \"Status\",\n\n      \"Created At\",\n      \"Created By\",\n    ];\n    const response = await reportsServices?.financeBankListReportFunc(\n      requestPayLoadReturn(false)\n    );\n\n    if (!financeBankListReportList && !response) return;\n    const body = response?.data?.docs?.map((data, index) => {\n      return [\n        index + 1,\n        // data?.employeData[0]?.fullName||'N/A',\n        data?.clientData?.fullName || \"N/A\",\n        data?.departmentData?.name || \"N/A\",\n        data?.taskTypeData?.name || \"N/A\",\n        data?.priority || \"N/A\",\n        data?.financialYear || \"N/A\",\n        data?.monthName || \"N/A\",\n        data?.monthQuaters || \"N/A\",\n        data?.status || \"N/A\",\n\n        dayjs(data?.createdAt).format(\"DD-MM-YYYY hh:mm\") || \"N/A\",\n        data?.createdBy || \"N/A\",\n      ];\n    });\n    autoTable(doc, {\n      startY: 40,\n      head: [headers],\n      body: body,\n      margin: { horizontal: 10 },\n      styles: {\n        cellPadding: 8,\n        fontSize: 10,\n        valign: \"middle\",\n        halign: \"left\",\n      },\n      headStyles: {\n        fillColor: [211, 211, 211],\n        textColor: [0, 0, 0],\n        fontStyle: \"bold\",\n      },\n      alternateRowStyles: {\n        fillColor: [245, 245, 245],\n      },\n    });\n    doc.save(`OverDueTasks.pdf`);\n  };\n\n  const items = [\n    {\n      key: \"1\",\n      label: <span className=\"text-white\">Advance Filters</span>,\n      children: (\n        <div className=\"bg-[#ececec]\">\n          <div className=\"sm:flex  grid grid-cols-1  gap-2 sm:flex-wrap text-[14px]\">\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n                <div className=\"\">\n                  <Controller\n                    name=\"PDBranchId\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        className={`inputAntdSelectClassNameFilterReport `}\n                        placeholder=\"Select Branch\"\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children)\n                            .toLowerCase()\n                            .includes(input.toLowerCase())\n                        }\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchList?.map((element) => (\n                          <Select.Option value={element?._id}>\n                            {\" \"}\n                            {element?.fullName}{\" \"}\n                          </Select.Option>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.PDBranchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDBranchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n         \n\n            <Controller\n              name=\"groupName\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  {...field}\n                  className=\"inputAntdSelectClassNameFilterReport\"\n                  options={[\n                    { label: \"Select Group Type\", value: \"\" },\n                    ...(Array.isArray(clientGroupList)\n                      ? clientGroupList.map((el) => ({\n                        label: `${el?.fullName} (${el?.groupName})`,\n                        value: el?._id,\n                      }))\n                      : []),\n                  ]}\n                  placeholder=\"Select Group Type\"\n                  onFocus={handleFocusClientGrp}\n                  classNamePrefix=\"react-select\"\n                  isSearchable\n                  onChange={(value) => {\n                    field.onChange(value);\n                  }}\n                  value={field?.value}\n                />\n              )}\n            />\n          </div>\n          <div className=\"flex justify-end items-center gap-2\">\n            <button\n              onClick={() => {\n                setValue(\"PDCompanyId\", \"\");\n                setValue(\"PDBranchId\", \"\");\n                setValue(\"status\", \"\");\n                setValue(\"PDOrganizationType\", \"\");\n                setValue(\"PDindustrytype\", \"\");\n                setValue(\"department\", \"\");\n                setValue(\"groupName\", \"\");\n\n                handleSubmit();\n              }}\n              className=\"bg-header py-2 my-0.5 rounded-md flex px-10 justify-center items-center text-white\"\n            >\n              <span className=\"text-[12px]\">Reset</span>\n            </button>\n            <button\n              onClick={() => {\n                handleSubmit();\n              }}\n              className=\"bg-header  py-2 my-0.5 rounded-md flex px-10 justify-center items-center  text-white\"\n            >\n              <span className=\"text-[12px]\">Submit</span>\n            </button>\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <GlobalLayout onChange={onChange}>\n      <div className=\"bg-grey-100 w-full p-1\">\n        <div className=\"\">\n          {/* <Collapse\n            className=\"custom-collapse\"\n            items={items}\n            defaultActiveKey={[1]}\n            expandIcon={({ isActive }) => (\n              <MdKeyboardArrowDown\n                size={20}\n                style={{\n                  color: \"white\",\n                  transform: isActive ? \"rotate(-90deg)\" : \"rotate(0deg)\",\n                  transition: \"transform 0.3s ease\",\n                }}\n              />\n            )}\n          ></Collapse> */}\n          <div className=\"space-y-1.5 flex justify-between items-center\">\n            <div className=\"flex items-center gap-2\">\n              <span\n                htmlFor=\"pageSize\"\n                className=\"text-sm font-light text-gray-500\"\n              >\n                Rows per page:\n              </span>\n              <Select\n                id=\"pageSize\"\n                value={pageSize}\n                onChange={handlePageSizeChange}\n                className=\"text-sm font-light text-gray-700 bg-white border border-gray-200 rounded-md px-3 py-1.5 shadow-sm focus:outline-none focus:ring-1 focus:ring-gray-300 transition\"\n              >\n                {pazeSizeReport.map((size) => (\n                  <Select.Option key={size} value={size}>\n                    {size}\n                  </Select.Option>\n                ))}\n              </Select>\n            </div>\n\n            {/* <div className=\"flex justify-end items-center gap-2\">\n              <button\n                onClick={() => {\n                  generatePDF();\n                }}\n                className=\"bg-header  py-2 my-0.5 rounded-md flex px-10 justify-center items-center  text-white\"\n              >\n                <span className=\"text-[12px]\">Export PDF</span>\n              </button>\n              <button\n                onClick={() => {\n                  generateExcel();\n                }}\n                className=\"bg-header  py-2 my-0.5 rounded-md flex px-10 justify-center items-center  text-white\"\n              >\n                <span className=\"text-[12px]\">Export Excel</span>\n              </button>\n            </div> */}\n          </div>\n        </div>\n        <div className=\"bg-[#ffffff]  w-full overflow-x-auto mt-1 rounded-xl\">\n          <table className=\"w-full max-w-full rounded-xl overflow-x-auto\">\n            <thead>\n              <tr className=\"border-b-[1px] border-[#DDDDDD] capitalize text-[12px] bg-header text-white font-[500] h-[40px]\">\n                <th className=\"border-none p-2 whitespace-nowrap  w-[5%]\">\n                  S.No.\n                </th>\n\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                  Bank Name\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                  Bank Branch Name\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                  Bank Holder Name\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                  Account Number\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap text-right\">\n                 Closing Balance\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                 Branch Name\n                </th>\n\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                  Statement\n                </th>\n                {/* <th className=\"border-none p-2 whitespace-nowrap \">\n                  Status\n                </th> */}\n              </tr>\n            </thead>\n            {financeBankListReportFunc_loading ? (\n              <tr className=\"bg-white bg-opacity-5 \">\n                <td\n                  colSpan={15}\n                  className=\"px-6 py-2 whitespace-nowrap  font-[600] text-sm text-gray-500\"\n                >\n                  <Loader2 />\n                </td>\n              </tr>\n            ) : (\n              <tbody>\n                {financeBankListReportList &&\n                  financeBankListReportList?.length > 0 ? (\n                  financeBankListReportList?.map((element, index) => (\n                    <tr\n                      className={`border-b-[1px] ${index % 2 === 0 ? \"bg-[#e9ecef]/80\" : \"bg-white\"\n                        } border-[#DDDDDD] text-[#374151] text-[14px]`}\n                    >\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                        {index + 1 + (currentPage - 1) * pageSize}\n                      </td>\n\n                      {/* <td className=\"whitespace-nowrap  border-none p-2\">\n                        {element.profileImage ? (\n                          <img\n                            alt=\"\"\n                            src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${element.profileImage}`}\n                            className=\"rounded-full min-w-10 min-h-10 w-10 h-10 ring-1 ring-amber-300\"\n                          />\n                        ) : (\n                          <img\n                            alt=\"\"\n                            src={`/images/avatar.jpg`}\n                            className=\"rounded-full min-w-10 min-h-10 w-10 h-10 ring-1 ring-amber-300\"\n                          />\n                        )}\n                      </td> */}\n\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                       { `${element?.bankName}`}\n                      </td>\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                       { `${element?.branchName}`}\n                      </td>\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                       { `${element?.bankholderName}`}\n                      </td>\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                       { `${element?.accountNumber}`}\n                      </td>\n                     \n\n\n\n                        <td className=\"whitespace-nowrap  border-none p-2 text-right\">\n                        {element?.summary?.closingBalance  ? Number(element?.summary?.closingBalance).toFixed(2) : 0.00}\n                      </td>\n                        <td className=\"whitespace-nowrap  border-none p-2\">\n                        {element?.branchNames}\n                      </td>\n                      <td className=\"tableData \">\n                        {(\n                          <div className=\"flex justify-start items-center gap-1\">\n                            <span>{element?.departmentData?.length}</span>\n                            <Tooltip placement=\"topLeft\"  title='View Statement'>\n                              <span className=\"flex justify-center items-center cursor-pointer\">\n                                  <FaEye\n                                  onClick={() => { navigate(`/admin/finance-bank-statement-Summary-report/${element?.bankId}`) }} \n                                  className=\" hover:text-[#337ab7] text-[#3c8dbc]\"\n                                  size={14} \n                                  />\n                              </span>\n                            </Tooltip>\n                          </div>\n                        ) || \"-\"}\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  <tr className=\"bg-white bg-opacity-5\">\n                    <td\n                      colSpan={15}\n                      className=\"px-6 py-2 whitespace-nowrap  font-[600] text-sm text-gray-500\"\n                    >\n                      Record Not Found\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            )}\n          </table>\n        </div>\n        <CustomPagination\n          totalCount={financeBankListReportCount}\n          pageSize={pageSize}\n          currentPage={currentPage}\n          onChange={onPaginationChange}\n        />\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default BankStatementReport;\n"],"names":["control","formState","errors","setValue","watch","useForm","pageSize","setPageSize","useState","dispatch","useDispatch","financeBankListReportList","financeBankListReportFunc_loading","financeBankListReportCount","useSelector","state","reports","departmentListData","depfinanceBankListReportFunc_loading","department","navigate","useNavigate","departmentModalData","setDepartmentModalData","taskTypeList","taskType","clientGroupList","clientGroup","clientList","client","employeList","employe","searchText","setSearchText","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","orgTypeList","orgSearchfinanceBankListReportFunc_loading","orgType","currentPage","setCurrentPage","debouncedFilterText","setDebouncedFilterText","branchList","branch","CompanyId","useWatch","name","defaultValue","BranchId","useEffect","timer","setTimeout","clearTimeout","requestPayLoadReturn","generateFinancialYears","financialYears","year","push","reqPayload","text","sort","isPagination","arguments","length","undefined","companyId","userType","_id","branchId","fetchClientServiceTaskReport","financeBankListReportFunc","departmentModalOpen","setDepartmentModalOpen","branchSearch","status","dayjs","subtract","Controller","PDBranchId","message","_jsx","GlobalLayout","onChange","e","children","_jsxs","className","htmlFor","Select","id","value","Number","pazeSizeReport","map","size","Option","colSpan","Loader2","element","index","_element$summary","_element$summary2","_element$departmentDa","bankName","branchName","bankholderName","accountNumber","summary","closingBalance","toFixed","branchNames","departmentData","Tooltip","placement","title","FaEye","onClick","bankId","CustomPagination","totalCount","page"],"sourceRoot":""}