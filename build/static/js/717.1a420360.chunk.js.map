{"version":3,"file":"static/js/717.1a420360.chunk.js","mappings":"+PAoHA,QAtGA,WACE,MAAQA,QAASC,IAAmBC,EAAAA,EAAAA,IAAYC,GAASA,EAAMC,UACzD,SACJC,EAAQ,aACRC,EAAY,SACZC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,MACEC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,aAAEC,IAAiBC,EAAAA,EAAAA,KACnBC,GAAYC,EAAAA,EAAAA,IAAQH,IACpB,uBAAEI,IAA2BjB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,SAiChE,OA/BAgB,EAAAA,EAAAA,WAAU,KACR,IAAIC,EAAU,CACZC,IAAKL,GAEPN,GAASY,EAAAA,EAAAA,IAAmBF,KAC3B,KAEHD,EAAAA,EAAAA,WAAU,KACJD,GAEFZ,EAAS,aAAoC,OAAtBY,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwBK,aAEhD,CAACL,KAoBFM,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,UACXF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,QAAOD,UACpBE,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMF,UAAU,eAAeG,SAAUzB,EApBhD0B,IAChB,MAAMC,EAAe,CACnB,UAAmC,OAAtBd,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwBe,UACrC,WAAoC,OAAtBf,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwBgB,WACtC,SAAkC,OAAtBhB,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwBiB,SAGpCd,IAAKL,EAELO,YAAaQ,EAAKR,YAGpBb,GAAS0B,EAAAA,EAAAA,IAAkBJ,IAAeK,KAAMN,IACzCA,EAAKO,OAAO1B,GAAU,OAO0Dc,SAAA,EACjFF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gDAA+CD,UAmB5DE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAAY,OAAKC,EAAAA,IAAsBd,SAAC,gBAC5CF,EAAAA,EAAAA,KAAA,SAAAiB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,UACDtC,EAAS,aAAc,CACzBuC,SAAU,4BACV,IACFhB,UAAS,IAAAY,OAAMK,EAAAA,GAAc,KAAAL,OAAI/B,EAAOe,WAAa,gBAAkB,kBAAiB,KAExFsB,YAAY,mBACZC,KAAK,SAENtC,EAAOe,aACNC,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChClB,EAAOe,WAAWwB,gBAK3BvB,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmBD,UAChCF,EAAAA,EAAAA,KAAA,UACEkB,KAAK,SACLM,SAAUhD,EACV2B,UAAS,GAAAY,OAAKvC,EAAiB,cAAgB,YAAW,qCAAoC0B,SAE7F1B,GAAiBwB,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,IAAM,mBAO7C,C","sources":["pages/global/other/GstType/EditGstType.js"],"sourcesContent":["import { useForm } from \"react-hook-form\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport {\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { getGstTypeByIdFunc, updateGstTypeFunc } from \"./GstTypeFeatures/_gstType_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\n\nfunction EditGstType() {\n  const { loading: gstTypeLoading } = useSelector(state => state.gstType)\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { gstTypeIdEnc } = useParams();\n  const gstTypeId = decrypt(gstTypeIdEnc);\n  const { GstTypeDetailsDataById } = useSelector((state) => state.gstType);\n\n  useEffect(() => {\n    let reqData = {\n      _id: gstTypeId,\n    };\n    dispatch(getGstTypeByIdFunc(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (GstTypeDetailsDataById) {\n      // setValue(\"gstTypeName\", GstTypeDetailsDataById?.name);\n      setValue(\"percentage\", GstTypeDetailsDataById?.percentage);\n    }\n  }, [GstTypeDetailsDataById]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      \"companyId\": GstTypeDetailsDataById?.companyId,\n      \"directorId\": GstTypeDetailsDataById?.directorId,\n      \"branchId\": GstTypeDetailsDataById?.branchId,\n\n\n      _id: gstTypeId,\n      // name: data.gstTypeName,\n      percentage: +data.percentage,\n    };\n\n    dispatch(updateGstTypeFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Gst Type</label>\n              <input\n                type=\"text\"\n                {...register(\"gstTypeName\", {\n                  required: \"Gst Type is required\",\n                })}\n                className={` ${inputClassName} ${\n                  errors.gstTypeName ? \"border-[1px] \" : \"border-gray-300\"\n                } `}\n                placeholder=\"Enter Gst Type\"\n              />\n              {errors.gstTypeName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.gstTypeName.message}\n                </p>\n              )}\n            </div> */}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Percentage</label>\n              <input\n                type=\"number\"\n                {...register(\"percentage\", {\n                  required: \"Percentage is required\",\n                })}\n                className={` ${inputClassName} ${errors.percentage ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Percentage\"\n                step=\"any\"\n              />\n              {errors.percentage && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.percentage.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={gstTypeLoading}\n              className={`${gstTypeLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 mt-3 px-4 rounded`}\n            >\n              {gstTypeLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default EditGstType;\n"],"names":["loading","gstTypeLoading","useSelector","state","gstType","register","handleSubmit","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","gstTypeIdEnc","useParams","gstTypeId","decrypt","GstTypeDetailsDataById","useEffect","reqData","_id","getGstTypeByIdFunc","percentage","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","companyId","directorId","branchId","updateGstTypeFunc","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","step","message","disabled","Loader"],"sourceRoot":""}