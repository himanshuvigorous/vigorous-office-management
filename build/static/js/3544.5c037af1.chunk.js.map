{"version":3,"file":"static/js/3544.5c037af1.chunk.js","mappings":"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","sources":["pages/branch/branchManagement/EditBranch.js","pages/branch/branchManagement/GoogleMapEdit.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  domainName,\n  formButtonClassName,\n  getLocationDataByPincode,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputDisabledClassName,\n  inputerrorClassNameAutoComplete,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global.js\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { stateSearch } from \"../../global/address/state/featureStates/_state_reducers\";\nimport { citySearch } from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport { empDoctSearch } from \"../../global/other/employeeDocument/EmployeeDocumentFeatures/_emp_document_reducers\";\nimport { decrypt } from \"../../../config/Encryption.js\";\nimport {\n  getBranchDetails,\n  updateBranch,\n} from \"./branchFeatures/_branch_reducers.js\";\nimport {\n  deleteDocument,\n  fileUploadFunc,\n  updateDocument,\n} from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers.js\";\nimport Loader from \"../../../global_layouts/Loader/Loader.js\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport GoogleMapContainerEdit from \"./GoogleMapEdit.js\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker.js\";\nimport Swal from \"sweetalert2\";\nimport { banknameSearch } from \"../../global/other/bankname/bankNameFeatures/_bankName_reducers.js\";\nimport CommonImageViewer from \"../../../global_layouts/ImageViewrModal/CommonImageViewer.js\";\nimport ImageUploader from \"../../../global_layouts/ImageUploader/ImageUploader.js\";\nimport ListLoader from \"../../../global_layouts/ListLoader.js\";\nimport { LiaEditSolid } from \"react-icons/lia\";\nimport { TbEditOff } from \"react-icons/tb\";\nimport getUserIds from \"../../../constents/getUserIds.js\";\nimport LocationPicker from \"./LocationPicker.js\";\nconst EditBranch = () => {\n  const { branchIdEnc } = useParams();\n  const documentRef = useRef([]);\n  const bankRef = useRef([])\n\n  const branchId = decrypt(branchIdEnc);\n  const [clickedLocationAddress, setClickLocationaddres] = useState(null);\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [pageLoading, setPageLoading] = useState(true);\n  const [documents, setDocuments] = useState([\n    { id: 1, documentType: \"\", documentNo: \"\", file: [], isEditable: true },\n  ]);\n  const [banks, setBanks] = useState([1]);\n  const [profileImage, setProfileImage] = useState(null);\n  const { countryListData, loading: countryListLoading } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const { employeeDocumentList, loading: employeeListLoading } = useSelector(\n    (state) => state.employeeDocument\n  );\n  const [location, setLocation] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoadingLocation, setIsLoadingLocation] = useState(false);\n  const { bankNameListData } = useSelector((state) => state.bankname);\n  const { loadingUpdateFile } = useSelector((state) => state.fileUpload);\n\n  const [fileName, setFileName] = useState({});\n  const [fileUrl, setFileUrl] = useState({});\n  // const [location, setLocation] = useState({});\n  const { branchDetailsData, branchListloading } = useSelector((state) => state.branch);\n  const [formErrors, setFormErrors] = useState([]);\n  const [doctformErrors, setDoctFormErrors] = useState([]);\n  const userType = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  )?.userType;\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    clearErrors,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const PrintAddress = useWatch({\n    control,\n    name: \"PDAddress\",\n    defaultValue: \"\",\n  });\n  const PrintState = useWatch({\n    control,\n    name: \"PDState\",\n    defaultValue: \"\",\n  });\n  const PrintCountry = useWatch({\n    control,\n    name: \"PDcountry\",\n    defaultValue: \"\",\n  });\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPin\",\n    defaultValue: \"\",\n  });\n  const handleEditButton = (index) => {\n    setDocuments((prevDocuments) =>\n      prevDocuments.map((doc, i) =>\n        i === index ? { ...doc, isEditable: !doc.isEditable } : doc\n      )\n    );\n\n  };\n  useEffect(() => {\n    if (\n      PrintPincode &&\n      PrintPincode.length >= 4 &&\n      PrintPincode.length <= 6 &&\n      /^\\d{6}$/.test(PrintPincode)\n    ) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data.city);\n            setValue(\"PDState\", data.state);\n            setValue(\"PDCountry\", data.country);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setPageLoading(true);\n        await dispatch(empDoctSearch({ isPagination: false, companyId: getUserIds()?.userCompanyId, }));\n        const reqData = {\n          _id: branchId,\n        };\n        await dispatch(getBranchDetails(reqData)).then((data) => {\n          setPageLoading(false);\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setPageLoading(true);\n        await dispatch(\n          banknameSearch({\n            isPagination: false,\n            text: \"\",\n            sort: true,\n            status: true,\n          })\n        );\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (branchDetailsData?.data) {\n      const documentData = branchDetailsData?.data?.documentData?.length ? branchDetailsData?.data?.documentData?.map(\n        (document) => {\n          return {\n            _id: document?._id,\n            documentType: document?.name,\n            documentNo: document?.number,\n            file: document?.filePath,\n            isEditable: false,\n          };\n        }\n      ) : [\n        {\n          _id: '',\n          documentType: \"\",\n          documentNo: \"\",\n          file: [],\n          isEditable: true,\n        },\n      ];\n\n      setDocuments([...documentData])\n\n      setProfileImage(\n        `${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${branchDetailsData?.data?.profileImage}`\n      );\n      setValue(\"ProfileImage\", branchDetailsData?.data?.profileImage)\n      setValue(\"PDcompanyName\", branchDetailsData?.data?.fullName);\n      setValue(\"PDFirstName\", branchDetailsData?.data?.firstName);\n      setValue(\"PDLastName\", branchDetailsData?.data?.lastName);\n      setValue(\"PDtagline\", branchDetailsData?.data?.companyProfile?.tagline);\n      setValue(\n        \"PDBranchHead\",\n        branchDetailsData?.data?.companyProfile?.tagline\n      );\n\n      setValue(\n        \"PDBranchCode\",\n        branchDetailsData?.data?.branchProfile?.branchCode\n      );\n      setValue(\n        \"PDAddress\",\n        branchDetailsData?.data?.addresses?.primary?.street\n      );\n      setValue(\n        \"PDcountry\",\n        branchDetailsData?.data?.addresses?.primary?.country\n      );\n      setValue(\"PDState\", branchDetailsData?.data?.addresses?.primary?.state);\n      setValue(\"PDCity\", branchDetailsData?.data?.addresses?.primary?.city);\n      setValue(\"PDPin\", branchDetailsData?.data?.addresses?.primary?.pinCode);\n\n      setLocation({\n        lat: branchDetailsData?.data?.addresses?.location?.latitude,\n        lng: branchDetailsData?.data?.addresses?.location?.longitude,\n      })\n      setValue(\"PDEmail\", branchDetailsData?.data?.email);\n      setValue(\"PDMobileCode\", branchDetailsData?.data?.mobile?.code);\n      setValue(\"PDMobileNo\", branchDetailsData?.data?.mobile?.number);\n      setValue(\"PDaadharNumber\", branchDetailsData?.data?.aadharNumber);\n      setValue(\"PDgstnumber\", branchDetailsData?.data?.gstNumber);\n      setValue(\"PDpannumber\", branchDetailsData?.data?.panNumber);\n      setValue(\"PDfrn\", branchDetailsData?.data?.frn);\n      setValue(\"PDtannumber\", branchDetailsData?.data?.tanNumber);\n      setValue(\"DCdocumenttype0\", branchDetailsData?.data?.documentType0);\n      setValue(\"DCdocumentno0\", branchDetailsData?.data?.documentNo0);\n      setValue(\"DCdocumentUpload0\", branchDetailsData?.data?.documentUpload0);\n      setValue(\"PDBranchHead\", branchDetailsData?.data?.branchProfile?.head);\n      setValue(\"PDRemark\", branchDetailsData?.data?.branchProfile?.remarks);\n      branchDetailsData?.data?.documentData?.forEach((doc, index) => {\n        setValue(`DCdocumentId${index}`, doc?._id);\n        setValue(`DCdocumenttype${index}`, doc?.name);\n        setValue(`DCdocumentno${index}`, doc?.number);\n        setValue(`DCdocumentUpload${index}`, doc?.filePath);\n        setValue(`openingBalance${index}`, doc?.openingBalance);\n      });\n\n      const bankData = branchDetailsData?.data?.bankData?.length\n        ? branchDetailsData.data.bankData.map((bank) => ({\n          _id: bank?._id || \"\",\n          accountType: bank?.accountType || \"\",\n          bankName: bank?.bankName || \"\",\n          branchName: bank?.branchName || \"\",\n          bankholderName: bank?.bankholderName || \"\",\n          accountNumber: bank?.accountNumber || \"\",\n          ifscCode: bank?.ifscCode || \"\",\n          openingBalance: Number(bank?.openingBalance) || '',\n          file: bank?.filePath || [],\n        }))\n        : [\n          {\n            _id: \"\",\n            accountType: \"\",\n            bankName: \"\",\n            branchName: \"\",\n            bankholderName: \"\",\n            accountNumber: \"\",\n            ifscCode: \"\",\n            openingBalance: '',\n            file: [],\n          },\n        ];\n\n      setBanks([...bankData]);\n    }\n  }, [branchDetailsData]);\n  const handleLocationChange = async (locationData) => {\n    try {\n      setIsLoadingLocation(true);\n      setError(null);\n      if (!locationData || !locationData.lat || !locationData.lng) {\n        throw new Error('Invalid location data received');\n      }\n      setLocation(locationData);\n      setValue(\"PDPin\", locationData?.pincode)\n      setValue(\"PDCountry\", locationData?.country)\n      setValue(\"PDState\", locationData?.state)\n      setValue(\"PDCity\", locationData?.city)\n      setValue(\"PDAddress\", locationData?.street)\n    } catch (err) {\n      console.error('Error handling location change:', err);\n      setError(err.message || 'Failed to process location');\n    } finally {\n      setIsLoadingLocation(false);\n    }\n  };\n  const handleAddMore = () => {\n    setDocuments([...documents, { id: Date.now(), isEditable: true }]);\n  };\n\n  const handleDocsFileChange = (name, e, path) => {\n    const file = e.target.files[0];\n    dispatch(\n      fileUploadFunc({\n        filePath: file,\n        isVideo: false,\n        isMultiple: false,\n      })\n    ).then((res) => {\n      setValue(path, res?.payload?.data);\n    });\n    clearErrors(path);\n\n    if (file) {\n      setFileName((prevState) => ({\n        ...prevState,\n        [name]: file.name,\n      }));\n      const url = URL.createObjectURL(file);\n      setFileUrl((prevState) => ({\n        ...prevState,\n        [name]: url,\n      }));\n    }\n  };\n\n  const handleBankAddMore = () => {\n    setBanks([...banks, { id: Date.now() }]);\n  };\n\n  const handleInputChangeBank = (index, field, value) => {\n    const updatedBanks = [...banks];\n    const newFormErrors = [...formErrors];\n\n    if (field === \"ifscCode\") {\n      const ifscPattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n      if (!ifscPattern.test(value)) {\n        if (!newFormErrors[index]) newFormErrors[index] = {};\n        newFormErrors[index][field] = \"Invalid IFSC code. Example: SBIN0001234\";\n      } else {\n        if (newFormErrors[index]?.[field]) {\n          delete newFormErrors[index][field];\n        }\n      }\n    }\n\n    if (field === \"accountNumber\") {\n      const accountPattern = /^\\d{6,18}$/;\n\n      if (!accountPattern.test(value)) {\n        if (!newFormErrors[index]) newFormErrors[index] = {};\n        newFormErrors[index][field] =\n          \"Invalid account number. Must be 6 to 18 digits.\";\n      } else {\n        if (newFormErrors[index]?.[field]) {\n          delete newFormErrors[index][field];\n        }\n      }\n    }\n\n    updatedBanks[index][field] = value;\n    setBanks(updatedBanks);\n    setFormErrors(newFormErrors);\n  };\n\n  const handleBankFileChange = (index, file) => {\n    if (!file) return;\n\n    // Variable to track the newly selected file\n    let selectedFile = file;\n\n    // Create a preview of the file\n    const fileReader = new FileReader();\n    let filePreviewUrl = \"\";\n\n    fileReader.onload = (e) => {\n      filePreviewUrl = e.target.result;\n\n      // Show SweetAlert to confirm upload\n      Swal.fire({\n        title: \"Preview your file\",\n        html: `\n          <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n            <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n            <img id=\"filePreview\" src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">\n            <br>\n            <button id=\"changeImageBtn\" style=\"  margin-top: 15px;\n  padding: 10px 18px;\n  cursor: pointer;\n  background-color: #074173;\n  color: white;\n  font-size: 16px;\n  font-weight: 600;\n  border: none;\n  border-radius: 8px;\n  transition: background-color 0.3s, transform 0.2s;\n  box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);\">Change Image</button>\n            <input type=\"file\" id=\"fileInput\" style=\"display: none;\" accept=\"image/*\">\n          </div>\n        `,\n        showCancelButton: true,\n        confirmButtonText: \"Confirm!\",\n        cancelButtonText: \"Cancel\",\n        didOpen: () => {\n          // Attach the change image functionality to the button\n          const changeImageBtn = document.getElementById(\"changeImageBtn\");\n          const fileInput = document.getElementById(\"fileInput\");\n          const filePreview = document.getElementById(\"filePreview\");\n\n          changeImageBtn.addEventListener(\"click\", () => {\n            fileInput.click(); // Trigger file input click\n          });\n\n          // When a new file is selected\n          fileInput.addEventListener(\"change\", (event) => {\n            const newFile = event.target.files[0];\n            if (newFile) {\n              selectedFile = newFile; // Update the selected file\n              const newFileReader = new FileReader();\n              newFileReader.onload = (e) => {\n                filePreview.src = e.target.result; // Update preview\n              };\n              newFileReader.readAsDataURL(newFile);\n            }\n          });\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          dispatch(\n            fileUploadFunc({\n              filePath: selectedFile,\n              isVideo: false,\n              isMultiple: false,\n            })\n          ).then((data) => {\n            if (!data.error) {\n              const updatedBanks = [...banks];\n              updatedBanks[index].file = [data?.payload?.data];\n              setDocuments(updatedBanks);\n              const newFormErrors = [...formErrors];\n              if (newFormErrors[index]?.file) {\n                delete newFormErrors[index].file;\n              }\n              setFormErrors(newFormErrors);\n            }\n          }).then((data) => {\n            if (bankRef.current[index]) bankRef.current[index].value = ''\n          })\n        } else {\n          // Handle the cancel case\n\n        }\n      });\n    };\n\n    // Read the file to generate the preview\n    fileReader.readAsDataURL(file);\n  };\n\n  const handleDeleteBankImage = (index, file) => {\n    const updatedBanks = [...banks];\n    updatedBanks[index].file = [];\n    setBanks(updatedBanks);\n    if (bankRef.current[index]) bankRef.current[index].value = ''\n  };\n\n  const handleBankDelete = (bank, index) => {\n    if (bank?._id) {\n      dispatch(deleteDocument({ _id: bank?._id })).then((data) => {\n        if (!data.error) {\n          setBanks((prevBanks) =>\n            prevBanks.filter((_, index2) => index2 !== index)\n          );\n        }\n      });\n    } else {\n      setBanks((prevBanks) =>\n        prevBanks.filter((_, index2) => index2 !== index)\n      );\n    }\n  };\n\n  const validateBankForm = () => {\n    let errors = [];\n    banks.forEach((bank, index) => {\n      let error = {};\n      if (!bank.accountType) {\n        error.accountType = \"Account Type is required.\";\n      }\n      if (!bank.bankholderName) {\n        error.bankholderName = \"Account Holder name is required.\";\n      }\n      if (!bank.accountNumber) {\n        error.accountNumber = \"Account No is required.\";\n      }\n      if (!bank.bankName) {\n        error.bankName = \"Bank Name is required.\";\n      }\n      if (!bank.branchName) {\n        error.branchName = \"Branch Name is required.\";\n      }\n      if (!bank.ifscCode) {\n        error.ifscCode = \"Ifsc code is required.\";\n      }\n      // if (!bank.openingBalance) {\n      //   error.openingBalance = \"openingBalance is required.\";\n      // }\n      // if (!bank.file || bank.file.length === 0) {\n      //   error.file = \"Bank file is required.\";\n      // }\n      if (Object.keys(error).length > 0) {\n        errors[index] = error;\n      }\n    });\n\n    setFormErrors(errors);\n    return errors.every((error) => Object.keys(error).length === 0);\n  };\n\n  const onSubmit = (data) => {\n    if (step === 1) {\n      const finalPayload = {\n        _id: branchId,\n        profileImage: data?.ProfileImage,\n        companyId: branchDetailsData?.data?.companyId,\n        directorId: branchDetailsData?.data?.directorId,\n        branchId: branchId,\n        fullName: data?.PDcompanyName,\n        email: data?.PDEmail,\n        userType: \"companyBranch\",\n        status: branchDetailsData?.data?.status,\n        mobile: {\n          code: data?.PDMobileCode,\n          number: data?.PDMobileNo,\n        },\n        branchProfile: {\n          head: data?.PDBranchHead,\n          remarks: data?.PDRemark,\n        },\n        addresses: {\n          primary: {\n            street: data?.PDAddress ?? \"\",\n            city: data?.PDCity ?? \"\",\n            state: data?.PDState ?? \"\",\n            country: data?.PDcountry ?? \"\",\n            pinCode: data?.PDPin,\n          },\n          location: {\n            latitude: location?.lat,\n            longitude: location?.lng,\n            address: data?.PDAddress,\n          },\n        },\n      };\n\n      dispatch(updateBranch(finalPayload));\n    }\n    if (step === 2) {\n      if (validateForm()) {\n        const documentPayload = documents.map((doc, index) => {\n          if (doc?._id) {\n            return {\n              userId: branchId,\n              _id: doc?._id,\n\n              name: doc?.documentType,\n              number: doc?.documentNo,\n              filePath: doc?.file,\n            };\n          } else {\n            return {\n              userId: branchId,\n              name: doc?.documentType,\n              number: doc?.documentNo,\n              filePath: doc?.file,\n            };\n          }\n        });\n        const finalPayload = {\n          documents: documentPayload,\n          userType: \"companyBranch\",\n          type: \"documents\",\n        };\n        dispatch(updateDocument(finalPayload)).then((data) => {\n          if (!data.error) {\n            dispatch(\n              getBranchDetails({\n                _id: branchId,\n              })\n            );\n          }\n        });\n      }\n    }\n    if (step === 3) {\n      if (validateBankForm()) {\n        const bankPayload = banks.map((bank, index) => {\n          if (bank?._id) {\n            return {\n              userId: branchId,\n              _id: bank?._id,\n              bankholderName: bank?.bankholderName,\n              bankName: bank?.bankName,\n              accountNumber: bank?.accountNumber,\n              branchName: bank?.branchName,\n              ifscCode: bank?.ifscCode,\n              openingBalance: Number(bank?.openingBalance),\n              accountType: bank?.accountType,\n              filePath: bank?.file,\n            };\n          } else {\n            return {\n              userId: branchId,\n              bankholderName: bank?.bankholderName,\n              bankName: bank?.bankName,\n              accountNumber: bank?.accountNumber,\n              branchName: bank?.branchName,\n              ifscCode: bank?.ifscCode,\n              openingBalance: Number(bank?.openingBalance),\n              accountType: bank?.accountType,\n              filePath: bank?.file,\n            };\n          }\n        });\n\n        const finalPayload = {\n          bank: bankPayload,\n          type: \"bank\",\n        };\n        dispatch(updateDocument(finalPayload)).then((data) => {\n          if (!data.error) {\n            dispatch(\n              getBranchDetails({\n                _id: branchId,\n              })\n            );\n          }\n        });\n      }\n    }\n  };\n\n  const navTabClick = (clickedStep) => {\n    if (clickedStep < step) {\n      setStep(clickedStep);\n    } else {\n      setStep(clickedStep);\n    }\n  };\n\n  const handleInputChange = (index, field, value) => {\n    const updatedDocuments = [...documents];\n    updatedDocuments[index][field] = value;\n    setDocuments(updatedDocuments);\n    const newFormErrors = [...doctformErrors];\n    if (newFormErrors[index]?.[field]) {\n      delete newFormErrors[index][field];\n    }\n    setDoctFormErrors(newFormErrors);\n  };\n\n  const handleFileChange = (index, file) => {\n    if (!file) return;\n\n    // Variable to track the newly selected file\n    let selectedFile = file;\n\n    // Create a preview of the file\n    const fileReader = new FileReader();\n    let filePreviewUrl = \"\";\n\n    fileReader.onload = (e) => {\n      filePreviewUrl = e.target.result;\n\n      // Show SweetAlert to confirm upload\n      Swal.fire({\n        title: \"Preview your file\",\n        html: `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n              <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n              <img id=\"filePreview\" src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">\n              <br>\n              <button id=\"changeImageBtn\" style=\"  margin-top: 15px;\n    padding: 10px 18px;\n    cursor: pointer;\n    background-color:#074173;\n    color: white;\n    font-size: 16px;\n    font-weight: 600;\n    border: none;\n    border-radius: 8px;\n    transition: background-color 0.3s, transform 0.2s;\n    box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);\">Change Image</button>\n              <input type=\"file\" id=\"fileInput\" style=\"display: none;\" accept=\"image/*\">\n            </div>\n          `,\n        showCancelButton: true,\n        confirmButtonText: \"Confirm!\",\n        cancelButtonText: \"Cancel\",\n        didOpen: () => {\n          // Attach the change image functionality to the button\n          const changeImageBtn = document.getElementById(\"changeImageBtn\");\n          const fileInput = document.getElementById(\"fileInput\");\n          const filePreview = document.getElementById(\"filePreview\");\n\n          changeImageBtn.addEventListener(\"click\", () => {\n            fileInput.click(); // Trigger file input click\n          });\n\n          // When a new file is selected\n          fileInput.addEventListener(\"change\", (event) => {\n            const newFile = event.target.files[0];\n            if (newFile) {\n              selectedFile = newFile; // Update the selected file\n              const newFileReader = new FileReader();\n              newFileReader.onload = (e) => {\n                filePreview.src = e.target.result; // Update preview\n              };\n              newFileReader.readAsDataURL(newFile);\n            }\n          });\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          dispatch(\n            fileUploadFunc({\n              filePath: selectedFile,\n              isVideo: false,\n              isMultiple: false,\n            })\n          ).then((data) => {\n            if (!data.error) {\n              const updatedDocuments = [...documents];\n              updatedDocuments[index].file = [data?.payload?.data];\n              setDocuments(updatedDocuments);\n              const newFormErrors = [...doctformErrors];\n              if (newFormErrors[index]?.file) {\n                delete newFormErrors[index].file;\n              }\n              setDoctFormErrors(newFormErrors);\n            }\n          })\n        } else {\n          // Handle the cancel case\n\n        }\n      }).then((data) => {\n        if (documentRef.current[index]) documentRef.current[index].value = ''\n      })\n    };\n\n    // Read the file to generate the preview\n    fileReader.readAsDataURL(file);\n  };\n\n  const handleDelete = (document, index) => {\n    if (document?._id) {\n      dispatch(deleteDocument({ _id: document?._id })).then((data) => {\n        if (!data.error) {\n          setDocuments((prevDocuments) =>\n            prevDocuments.filter((_, index2) => index2 !== index)\n          );\n        }\n      });\n    } else {\n      setDocuments((prevDocuments) =>\n        prevDocuments.filter((_, index2) => index2 !== index)\n      );\n    }\n  };\n\n  const handleDeleteDoctImage = (index, file) => {\n    const updatedDocuments = [...documents];\n    updatedDocuments[index].file = [];\n    setDocuments(updatedDocuments);\n    if (documentRef.current[index]) documentRef.current[index].value = ''\n  };\n\n  const validateForm = () => {\n    let errors = [];\n    documents.forEach((document, index) => {\n      let error = {};\n      if (!document.documentType) {\n        error.documentType = \"Document Type is required.\";\n      }\n      if (!document.documentNo) {\n        error.documentNo = \"Document No is required.\";\n      }\n      if (!document.file || document.file.length === 0) {\n        error.file = \"Document file is required.\";\n      }\n      if (Object.keys(error).length > 0) {\n        errors[index] = error;\n      }\n    });\n\n    setDoctFormErrors(errors);\n    return errors.every((error) => Object.keys(error).length === 0); // returns true if no errors\n  };\n\n  useEffect(() => {\n    if (clickedLocationAddress) {\n      setValue(\"PDAddress\", clickedLocationAddress?.address);\n      setValue(\"PDCountry\", clickedLocationAddress?.country);\n      setValue(\"PDState\", clickedLocationAddress?.state);\n      setValue(\"PDCity\", clickedLocationAddress?.city);\n      setValue(\"PDPin\", clickedLocationAddress?.postalCode);\n    }\n  }, [clickedLocationAddress]);\n\n  // useEffect(() => {\n  //   if (location && location?.lat && location?.lng) {\n  //     setValue(\"PDlatitude\", location?.lat);\n  //     setValue(\"PDLongitude\", location?.lng);\n  //   }\n  // }, [location]);\n  useEffect(() => {\n    if (PrintCountry !== branchDetailsData?.data?.addresses?.primary?.country) {\n      setValue(\"PDState\", \"\");\n      setValue(\"PDCity\", \"\");\n    }\n  }, [PrintCountry]);\n\n  useEffect(() => {\n    if (PrintState !== branchDetailsData?.data?.addresses?.primary?.state) {\n      setValue(\"PDCity\", \"\");\n    }\n  }, [PrintState]);\n\n  return (\n    <GlobalLayout>\n      {pageLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"grid grid-cols-12 gap-2\">\n          <form\n            className=\"space-y-2 md:col-span-12 col-span-12\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <div className=\"flex bg-header justify-start items-center rounded-lg gap-5 px-3 pt-2 overflow-x-auto overflow-y-hidden text-nowrap\">\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(1)}\n                className={`flex relative flex-col items-center  pb-2 ${step === 1 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 1 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold text-nowrap\">\n                  Primary Details\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(2)}\n                className={`flex flex-col items-center relative pb-2 ${step === 2 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 2 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">Documents</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(3)}\n                className={`flex flex-col items-center relative pb-2 ${step === 3 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 3 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">Bank</span>\n              </button>\n            </div>\n            {step === 1 && (\n              <>\n                {\" \"}\n                <div className=\"grid  grid-cols-1 md:grid-cols-2\">\n                  <div>\n                    <div className=\" \">\n                      <Controller\n                        name=\"ProfileImage\"\n                        control={control}\n                        render={({ field }) => (\n                          <ImageUploader\n                            setValue={setValue} // Pass setValue to the ImageUploader\n                            name=\"image\" // The field name in React Hook Form\n                            field={field}\n\n                          />\n                        )}\n                      />\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Branch Name <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDcompanyName\", {\n                              required: \"Branch Name is required\",\n                            })}\n                            className={`placeholder: ${inputClassName} ${errors.PDcompanyName\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Branch Name\"\n                          />\n                          {errors.PDcompanyName && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDcompanyName.message}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Status<span className=\"text-red-600\">*</span>\n                      </label>\n                      <select\n                        {...register(\"PDBranchStatus\")}\n                        className={` ${inputClassName} ${errors.PDBranchStatus\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n                      >\n                        <option className=\"\" value=\"\">\n                          Select Status\n                        </option>\n                        <option className=\"\" value={true}>\n                          Active\n                        </option>\n                        <option className=\"\" value={false}>\n                          InActive\n                        </option>\n                      </select>\n\n                      {errors.PDBranchStatus && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDBranchStatus.message}\n                        </p>\n                      )}\n                    </div> */}\n\n                        {userType === \"admin\" && (\n                          <div className=\"\">\n                            <label className={`${inputLabelClassName}`}>\n                              Company <span className=\"text-red-600\">*</span>\n                            </label>\n                            <select\n                              disabled\n                              {...register(\"PDCompanyId\")}\n                              className={`${inputDisabledClassName}  ${errors.PDCompanyId\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                } `}\n                            // onFocus={handleFocusCompany}\n                            >\n                              <option\n                                value={\n                                  branchDetailsData?.data?.companyData?._id\n                                }\n                              >\n                                {branchDetailsData?.data?.companyData?.fullName}\n                              </option>\n                            </select>\n                            {errors.PDCompanyId && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors.PDCompanyId.message}\n                              </p>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Branch Head <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDBranchHead\", {\n                              required: \"Branch Head is required\",\n                            })}\n                            className={` ${inputClassName} ${errors.PDBranchHead\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Branch Head\"\n                          />\n                          {errors.PDBranchHead && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDBranchHead.message}\n                            </p>\n                          )}\n                        </div>\n                        {/* <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Remark <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDRemark\", {\n                              required: \"Remark is required\",\n                            })}\n                            className={` ${inputClassName} ${errors.PDRemark\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Remark\"\n                          />\n                          {errors.PDRemark && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDRemark.message}\n                            </p>\n                          )}\n                        </div> */}\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                        <div className=\"col-span-2\">\n                          <label className={`${inputLabelClassName}`}>\n                            Primary Address{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDAddress\", {\n                              required: \"Address  is required\",\n                            })}\n                            className={`${inputClassName} ${errors.PDAddress\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Address \"\n                          />\n                          {errors.PDAddress && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDAddress.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Email <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDEmail\", {\n                              required: \"Email is required\",\n                              pattern: {\n                                value:\n                                  /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                                message: \"Please enter a valid email address\",\n                              },\n                            })}\n                            className={` ${inputClassName} ${errors.PDEmail\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Email\"\n                          />\n                          {errors.PDEmail && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDEmail.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <div className=\"w-[150px]\">\n                            <label className={`${inputLabelClassName}`}>\n                              Code <span className=\"text-red-600\">*</span>\n                            </label>\n\n                            <Controller\n                              control={control}\n                              name=\"PDMobileCode\"\n                              rules={{ required: \"code is required\" }}\n                              render={({ field }) => (\n                                <CustomMobileCodePicker\n                                  field={field}\n                                  errors={errors}\n                                />\n                              )}\n                            />\n                            {errors[`PDMobileCode`] && (\n                              <p\n                                className={`${inputerrorClassNameAutoComplete}`}\n                              >\n                                {errors[`PDMobileCode`].message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                              Mobile No <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              type=\"number\"\n                              {...register(`PDMobileNo`, {\n                                required: \"Mobile No is required\",\n                                minLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                                maxLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                              })}\n                              className={` ${inputClassName} ${errors[`PDMobileNo`]\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                              placeholder=\"Enter Mobile No\"\n                              maxLength={10}\n                              onInput={(e) => {\n                                if (e.target.value.length > 10) {\n                                  e.target.value = e.target.value.slice(0, 10);\n                                }\n                              }}\n                            />\n                            {errors[`PDMobileNo`] && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors[`PDMobileNo`].message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 px-3\">\n                        <div>\n                          <div className={`${inputLabelClassName}`}>\n                            Country <span className=\"text-red-600\">*</span>\n                          </div>\n                          <Controller\n                            control={control}\n                            name=\"PDcountry\"\n                            rules={{ required: \"Country is required\" }}\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                onChange={(value) => {\n                                  // Directly handle country change by using setValue from React Hook Form\n                                  field.onChange(value); // Update the value in the form control\n                                }}\n                                className=\"w-full\"\n                                options={countryListData?.docs?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                                notFoundContent={countryListLoading && <ListLoader />}\n                              >\n                                <input\n                                  placeholder=\"Enter Country\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      countrySearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        sort: true,\n                                        status: true,\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDcountry\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDcountry && (\n                            <p className={`${inputerrorClassNameAutoComplete}`}>\n                              {errors.PDcountry.message}\n                            </p>\n                          )}\n                        </div>\n                        <div>\n                          <div className={`${inputLabelClassName}`}>\n                            State <span className=\"text-red-600\">*</span>\n                          </div>\n                          <Controller\n                            control={control}\n                            name=\"PDState\"\n                            rules={{ required: \"State is required\" }}\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                className=\"w-full\"\n                                onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                                options={stateListData?.docs?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter State\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      stateSearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        countryName: PrintCountry,\n                                        sort: true,\n                                        status: true,\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDState\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDState && (\n                            <p className={`${inputerrorClassNameAutoComplete}`}>\n                              {errors.PDState.message}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* City Field */}\n                        <div>\n                          <div className={`${inputLabelClassName}`}>\n                            City <span className=\"text-red-600\">*</span>\n                          </div>\n                          <Controller\n                            control={control}\n                            name=\"PDCity\"\n                            rules={{ required: \"City is required\" }}\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                className=\"w-full\"\n                                onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                                options={cityListData?.docs?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter City\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      citySearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        sort: true,\n                                        status: true,\n                                        stateName: PrintState,\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDCity\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDCity && (\n                            <p className={`${inputerrorClassNameAutoComplete}`}>\n                              {errors.PDCity.message}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* Pin Code Field */}\n                        <div>\n                          <label className={`${inputLabelClassName}`}>\n                            Pin Code <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Controller\n                            control={control}\n                            name=\"PDPin\"\n                            rules={{ required: \"Pin Code is required\" }}\n                            render={({ field }) => (\n                              <input\n                                {...field}\n                                type=\"number\"\n                                placeholder=\"Enter Pin Code\"\n                                maxLength={6}\n                                onInput={(e) => {\n                                  if (e.target.value.length > 6) {\n                                    e.target.value = e.target.value.slice(0, 6);\n                                  }\n                                }}\n                                className={`${inputClassName} ${errors.PDPin\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                              />\n                            )}\n                          />\n                          {errors.PDPin && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDPin.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\"></div>\n                    </div>\n                    <div className=\"flex justify-between px-3 pb-2\">\n                      <button\n                        type=\"Submit\"\n                        className={`${formButtonClassName}`}\n                      >\n                        Submit Details\n                      </button>\n                    </div>\n                  </div>\n                  {/* <LocationPicker\n                    initialLat={location?.lat}\n                    initialLng={location?.lng}\n                    onLocationChange={handleLocationChange}\n                    editable={true}\n                  /> */}\n                  <GoogleMapContainerEdit\n                    setLocation={setLocation}\n                    address={PrintAddress}\n                    setClickLocationaddres={setClickLocationaddres}\n                    innitialLocation={\n                      branchDetailsData?.data?.addresses?.location\n                    }\n                  />\n                </div>\n              </>\n            )}\n            {step === 2 && (\n              <div>\n                <div className=\" rounded-md \">\n                  {documents.map((document, index) => (\n                    <div\n                      className=\"border border-gray-300 rounded-md my-2\"\n                      key={index}\n                    >\n                      <div className=\"flex justify-between items-center mb-4 bg-header rounded-t-md\">\n                        <div className=\"px-3 py-2 text-white font-semibold\">\n                          {\" \"}\n                          Document {index + 1}\n                        </div>\n                        <div className=\"flex justify-end items-end\">\n\n                          <button\n                            type=\"button\"\n                            onClick={() => handleDelete(document, index)}\n                            className=\"text-red-600 hover:text-red-800\"\n                          >\n                            <AiFillDelete size={20} className=\"m-2\" />\n                          </button>\n\n                          <button\n                            type=\"button\"\n                            onClick={() => handleEditButton(index)}\n\n                            className='text-white'\n                          >\n                            {document?.isEditable ? <TbEditOff size={20} className=\"m-2\" /> : <LiaEditSolid size={20} className=\"m-2\" />}\n                          </button>\n                        </div>\n                      </div>\n\n                      <div className=\"px-3 grid sm:grid-cols-2 grid-cols-1 gap-4 items-end mb-3\">\n                        <div>\n                          <label className={`${inputLabelClassName}`}>\n                            Document Type{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n\n                          <Select\n                            disabled={!document.isEditable}\n                            value={document.documentType}\n                            className={` ${inputAntdSelectClassName} ${errors.documentType\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            onChange={(e) =>\n                              handleInputChange(index, \"documentType\", e)\n                            }\n                            placeholder=\"Select Document Type\"\n                            showSearch\n                          >\n                            <Select.Option value=\"\">\n                              Select Document\n                            </Select.Option>\n                            {employeeListLoading ? <Select.Option disabled>\n                              <ListLoader />\n                            </Select.Option> : (employeeDocumentList\n                              ?.filter((data) => data?.type === \"General\")\n\n                              .map((type) => (\n                                <Select.Option\n                                  key={type.name}\n                                  value={type.name}\n                                >\n                                  {type.name}\n                                </Select.Option>\n                              )))}\n                          </Select>\n\n                          {doctformErrors[index]?.documentType && (\n                            <p className=\"text-red-600 text-sm\">\n                              {doctformErrors[index].documentType}\n                            </p>\n                          )}\n                        </div>\n\n                        <div>\n                          <label className={`${inputLabelClassName}`}>\n                            Document No <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            disabled={!document.isEditable}\n                            type=\"text\"\n                            value={document.documentNo}\n                            onChange={(e) =>\n                              handleInputChange(\n                                index,\n                                \"documentNo\",\n                                e.target.value\n                              )\n                            }\n                            className={`${!document.isEditable ? inputDisabledClassName : inputClassName} ${doctformErrors[index]?.documentNo\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Document No\"\n                          />\n                          {doctformErrors[index]?.documentNo && (\n                            <p className=\"text-red-600 text-sm\">\n                              {doctformErrors[index].documentNo}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"flex items-center gap-2\">\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Upload Document <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              disabled={!document.isEditable}\n                              type=\"file\"\n                              ref={(el) => (documentRef.current[index] = el)}\n                              id={`documentUpload${index}`}\n                              className=\"hidden\"\n                              onChange={(e) =>\n                                handleFileChange(index, e.target.files[0])\n                              }\n                            />\n                            <br />\n                            <label\n                              htmlFor={`documentUpload${index}`}\n                              className={`${document?.isEditable ? 'bg-header' : 'bg-gray-400'} text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer`}\n                            >\n                              Upload\n                            </label>\n                          </div>\n                          {document?.file?.length > 0\n                            ? document.file.map((file, fileIndex) => (\n                              <div key={fileIndex} className=\"relative\">\n                                <CommonImageViewer\n                                  // key={index}\n                                  src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                                  alt={`Uploaded ${fileIndex + 1}`}\n                                />\n                                <button\n                                  disabled={!document?.isEditable}\n                                  className={`absolute -top-1 -right-2 ${document?.isEditable ? 'bg-red-600' : 'bg-gray-400'} text-white rounded-full w-5 h-5 flex items-center justify-center text-xs`}\n                                  onClick={() =>\n                                    handleDeleteDoctImage(index, file)\n                                  }\n                                >\n                                  ✕\n                                </button>\n                              </div>\n                            ))\n                            : null}\n\n\n                          {doctformErrors[index]?.file && (\n                            <p className=\"text-red-600 text-sm\">\n                              {doctformErrors[index].file}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* <div className=\"px-3 gap-4 items-end mb-3\">\n                        <button\n                          type=\"button\"\n                          onClick={() => handleDelete(document, index)}\n                          className=\"text-gray-600 hover:text-gray-800 flex items-center justify-center border-2 border-gray-500 p-1 rounded-lg\"\n                        >\n                          <i className=\"fas fa-trash-alt flex items-center justify-center w-[25px] h-[25px]\"></i>\n                        </button>\n                      </div> */}\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"flex justify-between px-3 pb-2\">\n                    <button\n                      type=\"button\"\n                      onClick={handleAddMore}\n                      className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n                    >\n                      Add More\n                    </button>\n                  </div>\n                </div>\n                <div className=\"flex justify-between px-3 pb-2\">\n                  <button\n                    disabled={loadingUpdateFile}\n                    type=\"Submit\"\n                    className={`${formButtonClassName}`}\n                  >\n                    {loadingUpdateFile ? \"Submitting ...\" : \"Submit Details\"}\n                  </button>\n                </div>\n              </div>\n            )}\n            {step === 3 && (\n              <div>\n                <div className=\"rounded-md\">\n                  {banks.map((bank, index) => (\n                    <div\n                      className=\"border border-gray-300 rounded-md my-2\"\n                      key={index}\n                    >\n                      <div className=\"flex justify-between items-center mb-4 bg-header rounded-t-md\">\n                        <div className=\"px-3 py-2 text-white font-semibold\">\n                          {\" \"}\n                          Bank Document {index + 1}\n                        </div>\n                        {index !== 0 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => handleBankDelete(bank, index)}\n                            className=\"text-red-600 hover:text-red-800\"\n                          >\n                            <AiFillDelete size={20} className=\"m-2\" />\n                          </button>\n                        )}\n                      </div>\n                      <div className=\"px-3 grid sm:grid-cols-2 grid-cols-1 gap-4 mb-3\">\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Account Holder Name{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={bank.bankholderName}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"bankholderName\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.bankholderName\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Account Holder name\"\n                          />\n                          {formErrors[index]?.bankholderName && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].bankholderName}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Bank Name <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Select\n                            value={bank.bankName}\n                            onChange={(e) =>\n                              handleInputChangeBank(index, \"bankName\", e)\n                            }\n                            className={`${inputAntdSelectClassName} ${formErrors[index]?.bankName\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                          >\n                            <Select.Option value=\"\">\n                              Select Bank Name\n                            </Select.Option>\n                            {branchListloading ? <Select.Option disabled>\n                              <ListLoader />\n                            </Select.Option> : (sortByPropertyAlphabetically(bankNameListData, 'name')?.map((data) => (\n                              <Select.Option key={data.name} value={data.name}>\n                                {data.name}\n                              </Select.Option>\n                            )))}\n                          </Select>\n                          {formErrors[index]?.bankName && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].bankName}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Branch Name <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={bank.branchName}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"branchName\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.branchName\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Branch name\"\n                          />\n                          {formErrors[index]?.branchName && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].branchName}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Account Number\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"number\"\n                            value={bank.accountNumber}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"accountNumber\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.accountNumber\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Account Number\"\n                          />\n                          {formErrors[index]?.accountNumber && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].accountNumber}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            IFSC Code<span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={bank.ifscCode}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"ifscCode\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.ifscCode\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter IFSC Code\"\n                          />\n                          {formErrors[index]?.ifscCode && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].ifscCode}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Account Type <span className=\"text-red-600\">*</span>\n                          </label>\n                          {/* <select\n                            value={bank.accountType}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"accountType\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.accountType\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                          >\n                            <option value=\"\">Select Account Type</option>\n                            <option className=\"\" value=\"saving\">\n                              Saving\n                            </option>\n                            <option className=\"\" value=\"current\">\n                              Current\n                            </option>\n                            <option className=\"\" value=\"Salary\">\n                              Salary\n                            </option>\n                            <option className=\"\" value=\"Joint\">\n                              Joint\n                            </option>\n                          </select> */}\n                          <Select\n                            value={bank.accountType}\n                            onChange={(e) =>\n                              handleInputChangeBank(index, \"accountType\", e)\n                            }\n                            className={`${inputAntdSelectClassName} ${formErrors[index]?.accountType\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            showSearch\n                          >\n                            <Select.Option value=\"\">\n                              Select Account Type\n                            </Select.Option>\n                            <Select.Option className=\"\" value=\"saving\">\n                              Saving\n                            </Select.Option>\n                            <Select.Option className=\"\" value=\"current\">\n                              Current\n                            </Select.Option>\n                            <Select.Option className=\"\" value=\"Salary\">\n                              Salary\n                            </Select.Option>\n                            <Select.Option className=\"\" value=\"Joint\">\n                              Joint\n                            </Select.Option>\n                          </Select>\n                          {formErrors[index]?.accountType && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].accountType}\n                            </p>\n                          )}\n                        </div>\n                        {/* <div className=\"flex items-center gap-2\">\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Upload <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              type=\"file\"\n                              id={`bankUpload${index}`}\n                              className=\"hidden\"\n                              onChange={(e) =>\n                                handleBankFileChange(index, e.target.files[0])\n                              }\n                            />\n                            <br />\n                            <label\n                              htmlFor={`bankUpload${index}`}\n                              className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                            >\n                              Upload\n                            </label>\n                          </div>\n                          {bank?.file?.length > 0\n                            ? bank.file.map((file, index) => (\n                              <img\n                                key={index}\n                                src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                                alt={`Uploaded ${index + 1}`}\n                                className=\"w-20 h-20 shadow rounded-sm\"\n                              />\n                            ))\n                            : null}\n                          {formErrors[index]?.file && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].file}\n                            </p>\n                          )}\n                        </div> */}\n\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Opening Balance\n                          </label>\n                          <input\n                            type=\"number\"\n                            step=\"any\"\n                            disabled={branchDetailsData?.data?.bankData?.find(el => el?._id === bank?._id)?.openingBalance}\n                            value={bank.openingBalance}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"openingBalance\",\n                                e.target.value\n                              )\n                            }\n                            className={`${branchDetailsData?.data?.bankData?.find(el => el?._id === bank?._id)?.openingBalance ? inputDisabledClassName : inputClassName} ${formErrors[index]?.openingBalance\n                              ? \"border-[1px] \"\n                              : \"\"\n                              } `}\n                            placeholder=\"Enter Opening name\"\n                          />\n                          {formErrors[index]?.openingBalance && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].openingBalance}\n                            </p>\n                          )}\n                        </div>\n\n\n\n                        <div className=\"flex items-center gap-2\">\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Upload Image\n                            </label>\n                            <input\n                              ref={(el) => (bankRef.current[index] = el)}\n                              type=\"file\"\n                              id={`bankUpload${index}`}\n                              className=\"hidden\"\n                              onChange={(e) =>\n                                handleBankFileChange(index, e.target.files[0])\n                              }\n                            />\n                            <br />\n                            <label\n                              htmlFor={`bankUpload${index}`}\n                              className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                            >\n                              Upload Image\n                            </label>\n                          </div>\n                          {bank?.file?.length > 0\n                            ? bank.file.map((file, fileIndex) => (\n                              <div key={fileIndex} className=\"relative\">\n                                <CommonImageViewer\n                                  src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                                  alt={`Uploaded ${fileIndex + 1}`}\n                                />\n                                <button\n                                  className=\"absolute -top-1 -right-2 bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs\"\n                                  onClick={() =>\n                                    handleDeleteBankImage(index, file)\n                                  }\n                                >\n                                  ✕\n                                </button>\n                              </div>\n                            ))\n                            : null}\n                          {formErrors[index]?.file && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].file}\n                            </p>\n                          )}\n                        </div>\n                        {/* <div className=\"px-3 gap-4 items-end mb-3\">\n                        <button\n                          type=\"button\"\n                          onClick={() => handleBankDelete(bank, index)}\n                          className=\"text-gray-600 hover:text-gray-800 flex items-center justify-center border-2 border-gray-500 p-1 rounded-lg\"\n                        >\n                          <i className=\"fas fa-trash-alt flex items-center justify-center w-[25px] h-[25px]\"></i>\n                        </button>\n                      </div> */}\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"flex justify-between px-3 pb-2\">\n                    <button\n                      type=\"button\"\n                      onClick={handleBankAddMore}\n                      className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n                    >\n                      Add More\n                    </button>\n                  </div>\n                </div>\n                <div className=\"flex justify-between px-3 pb-2\">\n                  <button\n                    disabled={loadingUpdateFile}\n                    type=\"Submit\"\n                    className={`${formButtonClassName}`}\n                  >\n                    {loadingUpdateFile ? \"Submitting ...\" : \"Submit Details\"}\n                  </button>\n                </div>\n              </div>\n            )}\n          </form>\n        </div>\n      )}\n    </GlobalLayout>\n  );\n};\n\nexport default EditBranch;\n","import {\n    GoogleMap,\n    LoadScript,\n    Marker,\n    Autocomplete,\n  } from \"@react-google-maps/api\";\n  import React, { useEffect, useState, useRef } from \"react\";\n  import { inputClassName } from \"../../../constents/global\";\n  \n  const containerStyle = {\n    width: \"100%\",\n    height: \"90%\",\n  };\n  \n  const GoogleMapContainerEdit = ({\n    setLocation,\n    setClickLocationaddres,\n    innitialLocation\n  }) => {\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    const [clickedLocation, setClickedLocation] = useState(null);\n    const [currentLocation, setCurrentLocation] = useState(null);\n    const autocompleteRef = useRef(null);\n    const mapRef = useRef(null);\n\n\n  \n    const getFullAddress = (lat, lng) => {\n      if (!window.google || !window.google.maps || !window.google.maps.Geocoder) {\n        console.error(\"Google Maps API is not loaded properly.\");\n        return;\n      }\n  \n      const geocoder = new window.google.maps.Geocoder();\n  \n      geocoder.geocode({ location: { lat, lng } }, (results, status) => {\n        if (status === \"OK\" && results[0]) {\n          const addressComponents = results[0].address_components;\n          const formattedAddress = results[0].formatted_address;\n  \n          const country = addressComponents.find((comp) =>\n            comp.types.includes(\"country\")\n          )?.long_name;\n          const state = addressComponents.find((comp) =>\n            comp.types.includes(\"administrative_area_level_1\")\n          )?.long_name;\n          const city = addressComponents.find((comp) =>\n            comp.types.includes(\"locality\")\n          )?.long_name;\n          const postalCode = addressComponents.find((comp) =>\n            comp.types.includes(\"postal_code\")\n          )?.long_name;\n  \n          setClickLocationaddres({\n            address: formattedAddress,\n            country,\n            state,\n            city,\n            postalCode,\n          });\n        } else {\n          console.error(\"Geocoder failed due to: \", status);\n        }\n      });\n    };\n\n    const handleMapClick = (event) => {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      setClickedLocation({ lat, lng });\n      getFullAddress(lat, lng); \n    };\n  \n    const handlePlaceSelect = () => {\n      if (autocompleteRef.current) {\n        const place = autocompleteRef.current.getPlace();\n        if (place.geometry) {\n          const location = {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n          };\n          setClickedLocation(location);\n          mapRef.current.panTo(location);\n          getFullAddress(location.lat, location.lng);\n        }\n      }\n    };\n  \n    useEffect(() => {\nif(innitialLocation?.latitude && innitialLocation?.longitude ){\n  const location = { lat: innitialLocation?.latitude, lng: innitialLocation?.longitude };\n  setCurrentLocation(location);\n  setClickedLocation(location);\n}\n    }, [innitialLocation]);\n  \n    useEffect(() => {\n      if (clickedLocation) {\n        setLocation(clickedLocation);\n      }\n    }, [clickedLocation]);\n  \n\n    return (\n      <div className=\"p-3 m-2 min-h-[400px]\">\n        {/* <LoadScript googleMapsApiKey={apiKey} libraries={[\"places\"]}> */}\n          <div className=\"mb-3\">\n            <Autocomplete\n              onLoad={(ref) => (autocompleteRef.current = ref)}\n              onPlaceChanged={handlePlaceSelect}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Search for a place\"\n                className={`${inputClassName}`}\n              />\n            </Autocomplete>\n          </div>\n  \n          <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={currentLocation || { lat: 0, lng: 0 }}\n            zoom={(currentLocation ) ? 17 : 2}\n            onClick={handleMapClick}\n            onLoad={(map) => (mapRef.current = map)}\n            options={{\n              disableDefaultUI: false,\n              zoomControl: true,\n              fullscreenControl: true,\n              mapTypeControl: true,\n              streetViewControl: true,\n            }}\n          >\n            {clickedLocation && (\n              <Marker\n                position={clickedLocation}\n                icon=\"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n              />\n            )}\n          </GoogleMap>\n        {/* </LoadScript> */}\n      </div>\n    );\n  };\n  \n  export default GoogleMapContainerEdit;\n  ","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["EditBranch","_JSON$parse","_branchDetailsData$da65","_branchDetailsData$da66","_branchDetailsData$da67","_branchDetailsData$da68","_branchDetailsData$da69","_branchDetailsData$da70","branchIdEnc","useParams","documentRef","useRef","bankRef","branchId","decrypt","clickedLocationAddress","setClickLocationaddres","useState","step","setStep","useNavigate","pageLoading","setPageLoading","documents","setDocuments","id","documentType","documentNo","file","isEditable","banks","setBanks","profileImage","setProfileImage","countryListData","loading","countryListLoading","useSelector","state","country","stateListData","states","cityListData","city","employeeDocumentList","employeeListLoading","employeeDocument","location","setLocation","error","setError","isLoadingLocation","setIsLoadingLocation","bankNameListData","bankname","loadingUpdateFile","fileUpload","fileName","setFileName","fileUrl","setFileUrl","branchDetailsData","branchListloading","branch","formErrors","setFormErrors","doctformErrors","setDoctFormErrors","userType","JSON","parse","localStorage","getItem","concat","domainName","register","handleSubmit","setValue","control","clearErrors","formState","errors","useForm","dispatch","useDispatch","PrintAddress","useWatch","name","defaultValue","PrintState","PrintCountry","PrintPincode","useEffect","length","test","getLocationDataByPincode","then","data","catch","console","async","_getUserIds","empDoctSearch","isPagination","companyId","getUserIds","userCompanyId","reqData","_id","getBranchDetails","fetchData","banknameSearch","text","sort","status","_branchDetailsData$da","_branchDetailsData$da2","_branchDetailsData$da3","_branchDetailsData$da4","_branchDetailsData$da5","_branchDetailsData$da6","_branchDetailsData$da7","_branchDetailsData$da8","_branchDetailsData$da9","_branchDetailsData$da0","_branchDetailsData$da1","_branchDetailsData$da10","_branchDetailsData$da11","_branchDetailsData$da12","_branchDetailsData$da13","_branchDetailsData$da14","_branchDetailsData$da15","_branchDetailsData$da16","_branchDetailsData$da17","_branchDetailsData$da18","_branchDetailsData$da19","_branchDetailsData$da20","_branchDetailsData$da21","_branchDetailsData$da22","_branchDetailsData$da23","_branchDetailsData$da24","_branchDetailsData$da25","_branchDetailsData$da26","_branchDetailsData$da27","_branchDetailsData$da28","_branchDetailsData$da29","_branchDetailsData$da30","_branchDetailsData$da31","_branchDetailsData$da32","_branchDetailsData$da33","_branchDetailsData$da34","_branchDetailsData$da35","_branchDetailsData$da36","_branchDetailsData$da37","_branchDetailsData$da38","_branchDetailsData$da39","_branchDetailsData$da40","_branchDetailsData$da41","_branchDetailsData$da42","_branchDetailsData$da43","_branchDetailsData$da44","_branchDetailsData$da45","_branchDetailsData$da46","_branchDetailsData$da47","_branchDetailsData$da48","_branchDetailsData$da49","_branchDetailsData$da50","_branchDetailsData$da51","_branchDetailsData$da52","_branchDetailsData$da53","_branchDetailsData$da54","_branchDetailsData$da55","documentData","map","document","number","filePath","process","fullName","firstName","lastName","companyProfile","tagline","branchProfile","branchCode","addresses","primary","street","pinCode","lat","latitude","lng","longitude","email","mobile","code","aadharNumber","gstNumber","panNumber","frn","tanNumber","documentType0","documentNo0","documentUpload0","head","remarks","forEach","doc","index","openingBalance","bankData","bank","accountType","bankName","branchName","bankholderName","accountNumber","ifscCode","Number","handleInputChangeBank","field","value","updatedBanks","newFormErrors","_newFormErrors$index","_newFormErrors$index2","navTabClick","clickedStep","handleInputChange","_newFormErrors$index4","updatedDocuments","handleFileChange","selectedFile","fileReader","FileReader","filePreviewUrl","onload","e","target","result","Swal","title","html","showCancelButton","confirmButtonText","cancelButtonText","didOpen","changeImageBtn","getElementById","fileInput","filePreview","addEventListener","click","event","newFile","files","newFileReader","src","readAsDataURL","isConfirmed","fileUploadFunc","isVideo","isMultiple","_data$payload2","_newFormErrors$index5","payload","current","validateForm","Object","keys","every","address","postalCode","_branchDetailsData$da59","_branchDetailsData$da60","_branchDetailsData$da61","_branchDetailsData$da62","_branchDetailsData$da63","_branchDetailsData$da64","_jsx","GlobalLayout","children","Loader","className","_jsxs","onSubmit","_branchDetailsData$da56","_branchDetailsData$da57","_branchDetailsData$da58","_data$PDAddress","_data$PDCity","_data$PDState","_data$PDcountry","finalPayload","ProfileImage","directorId","PDcompanyName","PDEmail","PDMobileCode","PDMobileNo","PDBranchHead","PDRemark","PDAddress","PDCity","PDState","PDcountry","PDPin","updateBranch","userId","type","updateDocument","validateBankForm","onClick","_Fragment","Controller","render","_ref","ImageUploader","inputLabelClassName","_objectSpread","required","inputClassName","placeholder","message","disabled","inputDisabledClassName","PDCompanyId","companyData","pattern","rules","_ref2","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","maxLength","onInput","slice","_ref3","_countryListData$docs","AutoComplete","onChange","options","docs","notFoundContent","ListLoader","onFocus","countrySearch","_ref4","_stateListData$docs","stateSearch","countryName","_ref5","_cityListData$docs","citySearch","stateName","_ref6","formButtonClassName","GoogleMapContainerEdit","innitialLocation","_doctformErrors$index","_doctformErrors$index2","_doctformErrors$index3","_document$file","_doctformErrors$index4","handleDelete","deleteDocument","prevDocuments","filter","_","index2","AiFillDelete","size","i","handleEditButton","TbEditOff","LiaEditSolid","Select","inputAntdSelectClassName","showSearch","Option","ref","el","htmlFor","fileIndex","CommonImageViewer","alt","handleDeleteDoctImage","handleAddMore","Date","now","_formErrors$index","_formErrors$index2","_formErrors$index3","_sortByPropertyAlphab","_formErrors$index4","_formErrors$index5","_formErrors$index6","_formErrors$index7","_formErrors$index8","_formErrors$index9","_formErrors$index0","_formErrors$index1","_formErrors$index10","_branchDetailsData$da71","_branchDetailsData$da72","_branchDetailsData$da73","_branchDetailsData$da74","_branchDetailsData$da75","_branchDetailsData$da76","_formErrors$index11","_formErrors$index12","_bank$file","_formErrors$index13","handleBankDelete","prevBanks","sortByPropertyAlphabetically","find","handleBankFileChange","_data$payload","_newFormErrors$index3","handleDeleteBankImage","handleBankAddMore","containerStyle","width","height","clickedLocation","setClickedLocation","currentLocation","setCurrentLocation","autocompleteRef","mapRef","getFullAddress","window","google","maps","Geocoder","geocode","results","_addressComponents$fi","_addressComponents$fi2","_addressComponents$fi3","_addressComponents$fi4","addressComponents","address_components","formattedAddress","formatted_address","comp","types","includes","long_name","Autocomplete","onLoad","onPlaceChanged","handlePlaceSelect","place","getPlace","geometry","panTo","GoogleMap","mapContainerStyle","center","zoom","latLng","disableDefaultUI","zoomControl","fullscreenControl","mapTypeControl","streetViewControl","Marker","position","icon","Spin"],"sourceRoot":""}