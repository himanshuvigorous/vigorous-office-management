{"version":3,"file":"static/js/8212.88f0983c.chunk.js","mappings":"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","sources":["pages/global/other/interviewRoundName/EditInterviewRound.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport { getInterviewRoundDetails, updateInterviewRoundType } from \"./InterviewRoundFeatures/_interviewRound_type_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\n\n\nconst EditInterviewRound = () => {\n  const { loading: interviewRoundLoading } = useSelector((state) => state.interviewRound);\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { interviewroundnameIdEnc } = useParams();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const interviewRoundTypeId = decrypt(interviewroundnameIdEnc);\n  const { interviewRoundDetails } = useSelector((state) => state.interviewRound);\n\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector(\n    (state) => state.branch\n  );\n  useEffect(() => {\n    dispatch(employeSearch());\n  }, []);\n  useEffect(() => {\n    let reqData = {\n      _id: interviewRoundTypeId,\n    };\n    dispatch(getInterviewRoundDetails(reqData));\n  }, []);\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  useEffect(() => {\n    if (interviewRoundDetails) {\n      // setValue(\"PDCompanyId\", interviewRoundDetails?.companyId);\n      // setValue(\"PDBranchId\", interviewRoundDetails?.branchId);\n      setValue(\"name\", interviewRoundDetails?.name);\n      setValue(\"status\", interviewRoundDetails?.status);\n    }\n  }, [interviewRoundDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: interviewRoundTypeId,\n      companyId: interviewRoundDetails?.companyId,\n      directorId: interviewRoundDetails?.directorId,\n      branchId: interviewRoundDetails?.branchId,\n      name: data?.name,\n      isDeleted: false,\n      status: data?.status,\n    };\n    dispatch(updateInterviewRoundType(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {/* {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select>\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select>\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>} */}\n\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Interview Round Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: \"Interview Round name is required\",\n                })}\n                className={`${inputClassName} ${errors.name ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter interview Round name\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\n              )}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value=\"\">Select Status</Select.Option>\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Status</label>\n              <select\n                {...register(\"status\")}\n                className={`${inputClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value={true}>Active</option>\n                <option value={false}>InActive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={interviewRoundLoading}\n              className={`${interviewRoundLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n            >\n              {interviewRoundLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditInterviewRound;\n"],"names":["EditInterviewRound","loading","interviewRoundLoading","useSelector","state","interviewRound","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","interviewroundnameIdEnc","useParams","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","interviewRoundTypeId","decrypt","interviewRoundDetails","companyList","company","branchList","branch","useEffect","employeSearch","reqData","_id","getInterviewRoundDetails","useWatch","name","defaultValue","status","userType","companySearch","text","sort","isPagination","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","companyId","directorId","branchId","isDeleted","updateInterviewRoundType","then","error","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","Controller","render","_ref","field","Select","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","Loader"],"sourceRoot":""}