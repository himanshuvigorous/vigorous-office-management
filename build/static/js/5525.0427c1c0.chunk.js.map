{"version":3,"file":"static/js/5525.0427c1c0.chunk.js","mappings":"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","sources":["pages/organizationType/UpdateOrganizationType.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport { getOrgTypeDetails, updateOrgType } from \"./organizationTypeFeatures/_org_type_reducers\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../constents/global\";\nimport { Select } from \"antd\";\nimport Loader from \"../../global_layouts/Loader\";\n\n\nconst UpdateOrganizationType = () => {\n        const { loading:oragnisationTypeLoading} = useSelector(state => state.orgType)\n\n    const { register, handleSubmit, setValue, control, formState: { errors } } = useForm();\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const { orgTypeIdEnc } = useParams();\n    const orgTypeId = decrypt(orgTypeIdEnc);\n    const { orgTypeData } = useSelector((state) => state.orgType);\n\n    useEffect(() => {\n        let reqData = {\n            _id: orgTypeId,\n        };\n        dispatch(getOrgTypeDetails(reqData));\n    }, []);\n    const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n    useEffect(() => {\n        if (orgTypeData) {\n            setValue(\"organizationTypeName\", orgTypeData?.name);\n            setValue(\"status\", orgTypeData?.status);\n        }\n\n    }, [orgTypeData]);\n\n    const onSubmit = (data) => {\n        const finalPayload = {\n            _id: orgTypeId,\n            companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? ''\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n            \"name\": data?.organizationTypeName,\n            \"status\": data?.status\n        };\n\n        dispatch(updateOrgType(finalPayload)).then((data) => {\n            if (!data.error) navigate(-1);\n        });\n    };\n\n\n    return (\n        <GlobalLayout>\n            <div className=\"gap-4\">\n                {/* <h2 className=\"text-2xl font-bold mb-4 col-span-2\">\n                    Update Organization Types : {orgTypeData?.organizationTypeName}\n                </h2> */}\n                <form autoComplete=\"off\" className=\"mt-0 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n                        <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                                Name <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                                type=\"text\"\n                                {...register(\"organizationTypeName\", {\n                                    required: \"Designation Name is required\",\n                                })}\n                                className={`placeholder: ${inputClassName} ${errors.organizationTypeName\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                placeholder=\"Enter Designation Name\"\n                            />\n                            {errors.organizationTypeName && (\n                                <p className=\"text-red-500 text-sm\">\n                                    {errors.organizationTypeName.message}\n                                </p>\n                            )}\n                        </div>\n\n                        <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n                            <Controller\n                                name=\"status\"\n                                control={control}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                        placeholder=\"Select Status\"\n                                    >\n                                        <Select.Option value={true}>Active</Select.Option>\n                                        <Select.Option value={false}>In Active</Select.Option>\n                                    </Select>\n                                )}\n                            />\n                            {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n                        </div>\n\n                    </div>\n                    <div className=\"flex justify-end \">\n                    <button\n              type=\"submit\"\n              disabled={oragnisationTypeLoading}\n              className={`${oragnisationTypeLoading ? 'bg-gray-400': 'bg-header' } text-white p-2 px-4 mt-3 rounded`}\n            >\n            {oragnisationTypeLoading ? <Loader /> : 'Submit'}\n            </button>\n                    </div>\n                </form>\n            </div>\n        </GlobalLayout>\n    )\n}\n\nexport default UpdateOrganizationType"],"names":["UpdateOrganizationType","loading","oragnisationTypeLoading","useSelector","state","orgType","register","handleSubmit","setValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","orgTypeIdEnc","useParams","orgTypeId","decrypt","orgTypeData","useEffect","reqData","_id","getOrgTypeDetails","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","name","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","companyId","userType","organizationTypeName","updateOrgType","then","error","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","Controller","render","_ref","field","Select","inputAntdSelectClassName","Option","value","disabled","Loader"],"sourceRoot":""}