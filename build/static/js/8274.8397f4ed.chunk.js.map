{"version":3,"file":"static/js/8274.8397f4ed.chunk.js","mappings":"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","sources":["pages/visitorManagement/visitreason/CreateVisitReason.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../constents/global\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport { Select } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport { createVisitReasonType } from \"./visitReasonFeatures/_visitReason_type_reducers\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nconst CreateVisitReason = () => {\n  const { loading: VisiReasonLoading } = useSelector((state) => state.visitReason);\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n\n  // useEffect(() => {\n  //   dispatch(employeSearch());\n  // }, [dispatch]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      employeId: \"\",\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      title: data?.reason,\n    };\n    dispatch(createVisitReasonType(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Company\n                </option>\n                {companyListLoading ? <Select.Option disabled>\n                  <ListLoader />\n                </Select.Option> : (companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                )))}\n              </select>\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Branch\"\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n            {/* Work Type Name */}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Visit Reason  <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"reason\", {\n                  required: \"Visit Reason is required\",\n                })}\n                className={`${inputClassName} ${errors.reason ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Visit Reason\"\n              />\n              {errors.reason && (\n                <p className=\"text-red-500 text-sm\">{errors.reason.message}</p>\n              )}\n            </div>\n            {/* \n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Status</label>\n              <select\n                {...register(\"status\")}\n                className={`${inputClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value={true}>Active</option>\n                <option value={false}>InActive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={VisiReasonLoading}\n              className={`${VisiReasonLoading ? 'bg-gray-400' : 'bg-header'} text-white my-1 p-2 px-4 mt-3 rounded`}\n            >\n              {VisiReasonLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateVisitReason;\n"],"names":["CreateVisitReason","loading","VisiReasonLoading","useSelector","state","visitReason","register","handleSubmit","control","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","employeId","PDCompanyId","directorId","branchId","PDBranchId","title","reason","createVisitReasonType","then","error","inputLabelClassName","_objectSpread","required","inputClassName","value","Select","Option","disabled","ListLoader","map","type","fullName","message","Controller","rules","render","_ref","field","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","placeholder","Loader"],"sourceRoot":""}