{"version":3,"file":"static/js/1279.032f0700.chunk.js","mappings":"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","sources":["pages/client/digitalSignature/DigitalSignList.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\"\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useEffect, useState } from \"react\"\nimport Swal from \"sweetalert2\"\nimport { encrypt } from \"../../../config/Encryption\"\nimport { FaPlus, FaPenToSquare } from \"react-icons/fa6\"\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport moment from \"moment\";\nimport { domainName, inputClassNameSearch } from \"../../../constents/global\";\nimport CustomPagination from \"../../../component/CustomPagination/CustomPagination\"\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport Loader from \"../../../global_layouts/Loader/Loader\"\nimport { getDigitalSignList, eventSearch, deleteDigitalSign } from \"../digitalSignature/digitalSignatureFeatures/_digital_sign_reducers\";\nimport Loader2 from \"../../../global_layouts/Loader/Loader2\"\n\n\nfunction DigitalSignList() {\n    const { register, setValue, control, formState: { errors } } = useForm();\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n    const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n    const { companyList } = useSelector((state) => state.company);\n    const { branchList } = useSelector((state) => state.branch);\n    const { digitalSignList, totalDigitalSignCount, loading } = useSelector(state => state.digitalSign);\n\n    const CompanyId = useWatch({\n        control,\n        name: \"PDCompanyId\",\n        defaultValue: \"\",\n    });\n    const BranchId = useWatch({\n        control,\n        name: \"PDBranchId\",\n        defaultValue: \"\",\n    });\n\n    const [currentPage, setCurrentPage] = useState(1);\n\n    const limit = 10;\n\n    const onPaginationChange = (page) => {\n        setCurrentPage(page);\n    };\n\n    useEffect(() => {\n        fetchDigitalSignList()\n    }, [currentPage, BranchId, CompanyId])\n\n    const fetchDigitalSignList = () => {\n        const reqData = {\n            page: currentPage,\n            limit: limit,\n            reqPayload: {\n                companyId:\n                    userInfoglobal?.userType === \"admin\"\n                        ? CompanyId\n                        :\n                        userInfoglobal?.userType === \"company\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.companyId,\n                branchId:\n                    userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\"\n                        ? userInfoglobal?._id\n                        : userInfoglobal?.branchId,\n                \"directorId\": \"\",\n                \"text\": \"\",\n                \"sort\": true,\n                \"status\": \"\",\n                \"isPagination\": true,\n            }\n        }\n        dispatch(getDigitalSignList(reqData))\n    }\n\n    const handleDelete = (id) => {\n        let reqData = {\n            _id: id,\n        }\n        Swal.fire({\n            title: \"Warning\",\n            text: \"Are you sure you want to delete!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            cancelButtonText: \"No\",\n        }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteDigitalSign(reqData)).then((data) => {\n                    fetchDigitalSignList()\n                })\n            }\n        });\n    };\n\n    useEffect(() => {\n        if (\n            CompanyId ||\n            userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n        ) {\n            dispatch(\n                branchSearch({\n                    text: \"\",\n                    sort: true,\n                    status: true,\n                    isPagination:false,\n                    companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n                })\n            );\n        }\n    }, [CompanyId])\n\n    useEffect(() => {\n        if (userInfoglobal?.userType === \"admin\") {\n            dispatch(\n                companySearch({\n                    text: \"\",\n                    sort: true,\n                    status: true,\n                    isPagination: false,\n                })\n            );\n        }\n    }, []);\n\n    // const handleOnChange = async (event) => {\n    //     const searchValue = event.target.value;\n    //     setValue(\"search\", searchValue);\n\n    //     let reqData = {\n    //         searchValue: searchValue,\n    //         size: 3,\n    //         pageNo: 1,\n    //     };\n\n    //     if (searchValue.length >= 1) {\n    //         dispatch(eventSearch(reqData));\n    //     }\n    // };\n\n    return (\n        <GlobalLayout>\n\n                <section>\n                    <div className=\"sm:flex justify-between items-center md:space-y-0 space-y-2 py-1\">\n                        <div className=\"flex items-center space-x-2\">\n                            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n\n                                <select\n                                    {...register(\"PDCompanyId\", {\n                                        required: \"company is required\",\n                                    })}\n                                    className={` ${inputClassNameSearch} ${errors.PDCompanyId\n                                        ? \"border-[1px] \"\n                                        : \"border-gray-300\"\n                                        }`}\n                                >\n                                    <option className=\"\" value=\"\">\n                                        Select Comapany\n                                    </option>\n                                    {companyList?.map((type) => (\n                                        <option value={type?._id}>{type?.fullName}</option>\n                                    ))}\n                                </select>\n                                {errors.PDCompanyId && (\n                                    <p className=\"text-red-500 text-sm\">\n                                        {errors.PDCompanyId.message}\n                                    </p>\n                                )}\n                            </div>}\n                            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n\n                                <select\n                                    {...register(\"PDBranchId\", {\n                                        required: \"Branch is required\",\n                                    })}\n                                    className={` ${inputClassNameSearch} ${errors.PDBranchId\n                                        ? \"border-[1px] \"\n                                        : \"border-gray-300\"\n                                        }`}\n                                >\n                                    <option className=\"\" value=\"\">\n                                        Select Branch\n                                    </option>\n                                    {branchList?.map((type) => (\n                                        <option value={type?._id}>{type?.fullName}</option>\n                                    ))}\n                                </select>\n                                {errors.PDBranchId && (\n                                    <p className=\"text-red-500 text-sm\">\n                                        {errors.PDBranchId.message}\n                                    </p>\n                                )}\n                            </div>}\n                        </div>\n                        <div className=\"flex justify-end items-end\">\n                            <button\n                                onClick={() => {\n                                    navigate(\"/admin/digital-sign/create\");\n                                }}\n                                className=\"bg-header px-2 py-1.5 rounded-md flex justify-center items-center space-x-2 text-white\"\n                            >\n                                <FaPlus />\n                                <span className=\"text-[12px]\">Add Digital Signature</span>\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"bg-[#ffffff] w-full overflow-x-auto mt-1 rounded-xl\">\n                        <table className=\"w-full max-w-full rounded-xl overflow-x-auto \">\n                            <thead className=''>\n                                <tr className='border-b-[1px] border-[#DDDDDD] capitalize text-[12px] bg-header text-white font-[500] h-[40px]'>\n                                    <th className='border-none p-2 whitespace-nowrap w-[15%]'>S.No.</th>\n                                    <th className='border-none p-2 whitespace-nowrap'>Name</th>\n                                    <th className=\"border-none p-2 whitespace-nowrap\">Start Date</th>\n                                    <th className=\"border-none p-2 whitespace-nowrap\">Expiry Date</th>\n                                    <th className='border-none p-2 whitespace-nowrap'>Status</th>\n                                    <th className='border-none p-2 whitespace-nowrap w-[15%]'>Action</th>\n                                </tr>\n                            </thead>\n                            {loading ?<tr className=\"bg-white bg-opacity-5 \">\n                <td\n                  colSpan={10}\n                  className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\"\n                >\n                  <Loader2 />\n                </td>\n              </tr>:\n                            <tbody>\n                                {digitalSignList && digitalSignList?.length > 0 ?\n                                    digitalSignList?.map((element, index) => (\n                                        <tr className={`border-b-[1px] border-[#DDDDDD] ${index % 2 === 0 ? 'bg-[#e9ecef]/80' : 'bg-white'} text-[#374151] text-[14px]`}>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {index + 1 + ((currentPage - 1) * limit)}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>{element?.name ?? \"-\"}</td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {moment(element?.startDate).format(\"DD-MM-YYYY\")}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {moment(element?.expiryDate).format(\"DD-MM-YYYY\")}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                <span\n                                                    className={`${element?.status\n                                                        ? \"bg-[#E0FFBE] border-green-500\"\n                                                        : \"bg-red-200 border-red-500\"\n                                                        } border-[1px] px-2 py-1.5 rounded-lg text-black text-[12px]`}\n                                                >\n                                                    {element?.status ? \"Active\" : \"Inactive\" ?? \"-\"}\n                                                </span>\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2'>\n                                                <span className=\"py-1.5 flex justify-start items-center space-x-2\">\n                                                    <button\n                                                        onClick={() => {\n                                                            navigate(`/admin/digital-sign/edit/${encrypt(element?._id)}`);\n                                                        }}\n                                                        className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\" type=\"button\">\n                                                        <FaPenToSquare className=' hover:text-[#337ab7] text-[#3c8dbc]' size={16} />\n                                                    </button>\n                                                    <button onClick={() => handleDelete(element?._id)} className=\"px-2 py-1.5 rounded-md bg-transparent border border-muted\" type=\"button\">\n                                                        <RiDeleteBin5Line className='text-red-600 hover:text-red-500' size={16} />\n                                                    </button>\n                                                </span>\n                                            </td>\n                                        </tr>\n                                    ))\n                                    : (<tr className=\"bg-white bg-opacity-5 \" >\n                                        <td colSpan={5} className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\">Record Not Found</td>\n                                    </tr>)}\n                            </tbody>}\n                        </table>\n                    </div>\n                    {totalDigitalSignCount > limit && (\n                        <CustomPagination\n                            totalCount={totalDigitalSignCount}\n                            pageSize={limit}\n                            currentPage={currentPage}\n                            onChange={onPaginationChange}\n                        />)}\n                </section>\n     \n        </GlobalLayout>\n    )\n}\nexport default DigitalSignList;","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["register","setValue","control","formState","errors","useForm","navigate","useNavigate","dispatch","useDispatch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","useSelector","state","company","branchList","branch","digitalSignList","totalDigitalSignCount","loading","digitalSign","CompanyId","useWatch","name","defaultValue","BranchId","currentPage","setCurrentPage","useState","useEffect","fetchDigitalSignList","reqData","page","limit","reqPayload","companyId","userType","_id","branchId","getDigitalSignList","branchSearch","text","sort","status","isPagination","companySearch","_jsx","GlobalLayout","children","_jsxs","className","_objectSpread","required","inputClassNameSearch","PDCompanyId","value","map","type","fullName","message","PDBranchId","onClick","FaPlus","colSpan","Loader2","length","element","index","_element$name","_Inactive","moment","startDate","format","expiryDate","encrypt","FaPenToSquare","size","id","Swal","title","icon","showCancelButton","cancelButtonText","then","result","isConfirmed","deleteDigitalSign","data","handleDelete","RiDeleteBin5Line","CustomPagination","totalCount","pageSize","onChange","Spin"],"sourceRoot":""}