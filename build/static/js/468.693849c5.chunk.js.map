{"version":3,"file":"static/js/468.693849c5.chunk.js","mappings":"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","sources":["pages/global/other/bankAccounts/CreateBankAccount.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fileUploadFunc } from \"../fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createbankAccount } from \"./bankAccountFeature/_bank_account_reducers\";\nimport Swal from \"sweetalert2\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { Select } from \"antd\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nconst CreateBankAccount = () => {\n  const { loading: bankLoading } = useSelector(\n    (state) => state.bankAccount\n  );\n  const bankRef = useRef([])\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const fileUploadValue = watch('fileUpload');\n  const submitDetails = (data) => {\n\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"bankholderName\": data?.holderName,\n      \"bankName\": data?.bankName,\n      \"accountNumber\": data?.accountNumber,\n      \"ifscCode\": data?.ifscCode,\n      \"accountType\": data?.accountType,\n      \"branchName\": data?.branchName,\n      \"filePath\": [\n        data?.fileUplaod\n      ]\n\n    }\n    dispatch(createbankAccount(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  const handleBankFileChange = (file) => {\n    if (!file) return;\n    const isPdf = file.type === 'application/pdf';\n    const filePreviewUrl = URL.createObjectURL(file); // Generate preview URL for non-PDF files\n\n    // Show SweetAlert confirmation before uploading\n    Swal.fire({\n      title: 'Preview your file',\n      html: `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n                <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n                ${isPdf\n          ? `<p style=\"font-size: 16px; color: #074173;\">${file.name}</p>`\n          : `<img src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">`\n        }\n                <br>\n            </div>\n        `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm!',\n      cancelButtonText: 'Cancel',\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Proceed with file upload only if the user confirms\n        dispatch(\n          fileUploadFunc({\n            filePath: file,\n            isVideo: false,\n            isMultiple: false,\n          })\n        ).then((data) => {\n          if (!data.error) {\n            setValue('fileUplaod', data?.payload?.data);\n\n            // Show success message after upload\n            Swal.fire({\n              icon: 'success',\n              title: 'Uploaded!',\n              text: 'Your file has been successfully uploaded.',\n              timer: 2000,\n              showConfirmButton: false\n            });\n          }\n        });\n      } else {\n\n      }\n    });\n  };\n\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  const ifscPattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n  return (\n    <GlobalLayout>\n      <div className=\"mt-2\">\n\n        <form autoComplete=\"off\" onSubmit={handleSubmit(submitDetails)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-4 gap-2\">\n\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Branch\"\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Account Holder Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Bank Holder Name\"\n                name=\"holderName\"\n                {...register(\"holderName\", {\n                  required: \" Bank Holder Name is required\",\n                })}\n              />\n              {errors.holderName && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.holderName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Bank Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Bank  Name\"\n                name=\"bankName\"\n                {...register(\"bankName\", {\n                  required: \" Bank  Name is required\",\n                })}\n              />\n              {errors.bankName && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.bankName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Branch  Name\"\n                name=\"branchName\"\n                {...register(\"branchName\", {\n                  required: \" Branch  Name is required\",\n                })}\n              />\n              {errors.branchName && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.branchName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Account Number <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Account  Number\"\n                type=\"number\"\n                name=\"accountNumber\"\n                {...register(\"accountNumber\", {\n                  required: \" Account Number is required\",\n                  minLength: {\n                    value: 6,\n                    message: \"Account number must be at least 6 characters long\"\n                  },\n                  maxLength: {\n                    value: 18,\n                    message: \"Account number must not exceed 18 characters\"\n                  },\n                })}\n              />\n              {errors.accountNumber && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.accountNumber.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                IFSC Code <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter IFSC Code\"\n                name=\"ifscCode\"\n                {...register(\"ifscCode\", {\n                  required: \"IFSC Code is required\",\n                  pattern: {\n                    value: ifscPattern,\n                    message: \"Invalid IFSC code. Example: SBIN0001234\",\n                  }\n                })}\n              />\n              {errors.ifscCode && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.ifscCode.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Account Type <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n             \n                className={`${inputClassName} `}\n                {...register(\"accountType\", {\n                  required:  \" Account Type is required\",\n                })}\n              >\n                <option value=\"\">Select Account Type</option>\n                <option className=\"\" value=\"saving\">\n                  Saving\n                </option>\n                <option className=\"\" value=\"current\">\n                  Current\n                </option>\n                <option className=\"\" value=\"Salary\">\n                  Salary\n                </option>\n                <option className=\"\" value=\"Joint\">\n                  Joint\n                </option>\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"accountType\"\n                rules={{ required: \"accountType is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select accountType</Select.Option>\n                    <Select.Option className=\"\" value=\"saving\">\n                      Saving\n                    </Select.Option>\n                    <Select.Option className=\"\" value=\"current\">\n                      Current\n                    </Select.Option>\n                    <Select.Option className=\"\" value=\"Salary\">\n                      Salary\n                    </Select.Option>\n                    <Select.Option className=\"\" value=\"Joint\">\n                      Joint\n                    </Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.accountType && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.accountType.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex items-center gap-2 \">\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Upload <span className=\"text-red-600\">*</span>\n                </label>\n\n                <Controller\n                  name=\"fileUpload\"\n                  control={control}\n                  rules={{ required: \"File upload is required\" }}\n                  render={({ field }) => (\n                    <>\n                      <input\n                        type=\"file\"\n                        id=\"file-upload\"\n                        accept=\".pdf,image/*\"\n                        className=\"hidden\"\n                        ref={bankRef}\n                        onChange={(e) => {\n                          field.onChange(e); // Pass the file to React Hook Form\n                          handleBankFileChange(e.target.files[0]); // Custom file handling function\n                        }}\n                      />\n                      <br />\n                      <label\n                        htmlFor=\"file-upload\"\n                        className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                      >\n                        Upload\n                      </label>\n                      {errors.fileUpload && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.fileUpload.message}</p>\n                      )}\n                    </>\n                  )}\n                />\n              </div>\n\n              {/* Check if file is valid and then render the image */}\n              {fileUploadValue ? (\n                <img\n                  src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('fileUplaod')}`}\n                  alt=\"Uploaded\"\n                  className=\"w-20 h-20 shadow rounded-sm\"\n                />\n              ) : null}\n            </div>\n\n          </div>\n\n          <div className=\"flex justify-end items-center \">\n            <button\n              type=\"submit\"\n              disabled={bankLoading}\n              className={`${bankLoading ? 'bg-gray-400' : 'bg-header'} text-white mt-4 p-2 px-4 rounded`}\n            >\n              {bankLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateBankAccount;\n"],"names":["CreateBankAccount","loading","bankLoading","useSelector","state","bankAccount","bankRef","useRef","register","handleSubmit","watch","setValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","fileUploadValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","branchId","PDBranchId","holderName","bankName","accountNumber","ifscCode","accountType","branchName","fileUplaod","createbankAccount","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","message","_ref2","placeholder","inputClassName","minLength","maxLength","pattern","_ref3","_ref4","_Fragment","id","accept","ref","onChange","e","file","isPdf","filePreviewUrl","URL","createObjectURL","Swal","title","html","showCancelButton","confirmButtonText","cancelButtonText","result","isConfirmed","fileUploadFunc","filePath","isVideo","isMultiple","_data$payload","payload","icon","timer","showConfirmButton","handleBankFileChange","target","files","htmlFor","fileUpload","src","process","alt","Loader"],"sourceRoot":""}