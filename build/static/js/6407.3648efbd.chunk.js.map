{"version":3,"file":"static/js/6407.3648efbd.chunk.js","mappings":"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","sources":["pages/VigotaskmanagementNew/VigoTaskMangement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Table, \n  Button, \n  Modal, \n  Form, \n  Input, \n  Select, \n  DatePicker, \n  Card, \n  Tag, \n  message,\n  Popconfirm,\n  Space,\n  Badge\n} from 'antd';\nimport { \n  PlusOutlined, \n  PlayCircleOutlined, \n  PauseOutlined, \n  CheckCircleOutlined, \n  EditOutlined, \n  DeleteOutlined,\n  ClockCircleOutlined\n} from '@ant-design/icons';\nimport dayjs from 'dayjs';\nimport GlobalLayout from '../../global_layouts/GlobalLayout/GlobalLayout';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\n// Helper functions for localStorage\nconst getFromStorage = (key) => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : [];\n};\n\nconst saveToStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\n// Initial data setup\nconst initializeData = () => {\n  if (!localStorage.getItem('employees')) {\n    saveToStorage('employees', [\n      { id: 1, name: 'John Doe', position: 'Developer', role: 'employee' },\n      { id: 2, name: 'Jane Smith', position: 'Designer', role: 'employee' },\n      { id: 3, name: 'Mike Johnson', position: 'Manager', role: 'manager' }\n    ]);\n  }\n  \n  if (!localStorage.getItem('tasks')) {\n    saveToStorage('tasks', []);\n  }\n  \n  if (!localStorage.getItem('taskLogs')) {\n    saveToStorage('taskLogs', []);\n  }\n};\n\ninitializeData();\n\nconst VigoTaskManagement = ({ currentUser }) => {\n  const [employees, setEmployees] = useState(getFromStorage('employees') || [\n      { id: 1, name: 'John Doe', position: 'Developer', role: 'employee' },\n      { id: 2, name: 'Jane Smith', position: 'Designer', role: 'employee' },\n      { id: 3, name: 'Mike Johnson', position: 'Manager', role: 'manager' }\n    ]);\n  const [tasks, setTasks] = useState(getFromStorage('tasks'));\n  const [taskLogs, setTaskLogs] = useState(getFromStorage('taskLogs'));\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [isEditModalVisible, setIsEditModalVisible] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [activeTaskId, setActiveTaskId] = useState(null);\n  const [form] = Form.useForm();\n  const [editForm] = Form.useForm();\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    const storedEmployees = getFromStorage('employees');\n    const storedTasks = getFromStorage('tasks');\n    const storedTaskLogs = getFromStorage('taskLogs');\n    \n    setEmployees(storedEmployees);\n    setTasks(storedTasks);\n    setTaskLogs(storedTaskLogs);\n    \n    // Check if any task was active when the app was closed\n    const activeTask = storedTasks.find(task => task.status === 'In Progress' && task.assignedTo === currentUser?.id);\n    if (activeTask) {\n      setActiveTaskId(activeTask.id);\n    }\n  }, [currentUser]);\n\n  // Save data to localStorage whenever it changes\n  useEffect(() => {\n    saveToStorage('employees', employees);\n    saveToStorage('tasks', tasks);\n    saveToStorage('taskLogs', taskLogs);\n  }, [employees, tasks, taskLogs]);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n    form.resetFields();\n  };\n\n  const handleEditCancel = () => {\n    setIsEditModalVisible(false);\n    editForm.resetFields();\n  };\n\n  const onFinish = (values) => {\n    const newTask = {\n      id: Date.now(),\n      title: values.title,\n      description: values.description,\n      assignedTo: values.assignedTo,\n      assignedBy: currentUser?.id || 1,\n      dueDate: values.dueDate.format('YYYY-MM-DD'),\n      status: 'Pending',\n      createdAt: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n      completedAt: null,\n      approved: null\n    };\n    \n    const updatedTasks = [...tasks, newTask];\n    setTasks(updatedTasks);\n    message.success('Task created successfully!');\n    setIsModalVisible(false);\n    form.resetFields();\n  };\n\n  const startTask = (taskId) => {\n    // Pause any currently active task\n    if (activeTaskId) {\n      pauseTask(activeTaskId);\n    }\n    \n    const updatedTasks = tasks.map(task => {\n      if (task.id === taskId) {\n        return { ...task, status: 'In Progress' };\n      }\n      return task;\n    });\n    \n    setTasks(updatedTasks);\n    setActiveTaskId(taskId);\n    \n    // Create a new task log entry\n    const newLog = {\n      id: Date.now(),\n      taskId,\n      startTime: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n      endTime: null,\n      duration: null\n    };\n    \n    setTaskLogs([...taskLogs, newLog]);\n    message.info('Task started!');\n  };\n\n  const pauseTask = (taskId) => {\n    if (!activeTaskId) return;\n    \n    const updatedTasks = tasks.map(task => {\n      if (task.id === taskId) {\n        return { ...task, status: 'Paused' };\n      }\n      return task;\n    });\n    \n    setTasks(updatedTasks);\n    setActiveTaskId(null);\n    \n    // Update the task log\n    const activeLogIndex = taskLogs.findIndex(\n      log => log.taskId === taskId && log.endTime === null\n    );\n    \n    if (activeLogIndex !== -1) {\n      const startTime = dayjs(taskLogs[activeLogIndex].startTime);\n      const endTime = dayjs();\n      const duration = endTime.diff(startTime, 'seconds');\n      \n      const updatedLogs = [...taskLogs];\n      updatedLogs[activeLogIndex] = {\n        ...updatedLogs[activeLogIndex],\n        endTime: endTime.format('YYYY-MM-DD HH:mm:ss'),\n        duration\n      };\n      \n      setTaskLogs(updatedLogs);\n    }\n    \n    message.warning('Task paused!');\n  };\n\n  const resumeTask = (taskId) => {\n    startTask(taskId);\n    message.info('Task resumed!');\n  };\n\n  const completeTask = (taskId) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === taskId) {\n        return { \n          ...task, \n          status: 'Completed',\n          completedAt: dayjs().format('YYYY-MM-DD HH:mm:ss')\n        };\n      }\n      return task;\n    });\n    \n    setTasks(updatedTasks);\n    \n    // If the task was active, update its log\n    if (activeTaskId === taskId) {\n      pauseTask(taskId);\n    }\n    \n    message.success('Task marked as completed!');\n  };\n\n  const editTask = (task) => {\n    setCurrentTask(task);\n    editForm.setFieldsValue({\n      title: task.title,\n      description: task.description,\n      assignedTo: task.assignedTo,\n      dueDate: dayjs(task.dueDate)\n    });\n    setIsEditModalVisible(true);\n  };\n\n  const onEditFinish = (values) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === currentTask.id) {\n        return {\n          ...task,\n          title: values.title,\n          description: values.description,\n          assignedTo: values.assignedTo,\n          dueDate: values.dueDate.format('YYYY-MM-DD')\n        };\n      }\n      return task;\n    });\n    \n    setTasks(updatedTasks);\n    message.success('Task updated successfully!');\n    setIsEditModalVisible(false);\n    editForm.resetFields();\n  };\n\n  const deleteTask = (taskId) => {\n    const updatedTasks = tasks.filter(task => task.id !== taskId);\n    setTasks(updatedTasks);\n    \n    // Also remove related logs\n    const updatedLogs = taskLogs.filter(log => log.taskId !== taskId);\n    setTaskLogs(updatedLogs);\n    \n    message.success('Task deleted successfully!');\n  };\n\n  const calculateTotalTime = (taskId) => {\n    const logsForTask = taskLogs.filter(log => log.taskId === taskId);\n    return logsForTask.reduce((total, log) => total + (log.duration || 0), 0);\n  };\n\n  const columns = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: 'Assigned To',\n      dataIndex: 'assignedTo',\n      key: 'assignedTo',\n      render: (id) => {\n        const employee = employees.find(emp => emp.id === id);\n        return employee ? employee.name : 'Unknown';\n      }\n    },\n    {\n      title: 'Due Date',\n      dataIndex: 'dueDate',\n      key: 'dueDate',\n      render: (date) => dayjs(date).format('MMM D, YYYY')\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      render: (status, record) => {\n        let color = '';\n        let icon = null;\n        \n        switch (status) {\n          case 'Pending':\n            color = 'orange';\n            icon = <ClockCircleOutlined />;\n            break;\n          case 'In Progress':\n            color = 'blue';\n            icon = <PlayCircleOutlined />;\n            break;\n          case 'Paused':\n            color = 'gold';\n            icon = <PauseOutlined />;\n            break;\n          case 'Completed':\n            color = 'purple';\n            icon = <CheckCircleOutlined />;\n            break;\n          case 'Approved':\n            color = 'green';\n            icon = <CheckCircleOutlined />;\n            break;\n          case 'Rejected':\n            color = 'red';\n            icon = <CheckCircleOutlined />;\n            break;\n          default:\n            color = 'gray';\n        }\n        \n        return (\n          <Badge dot={status === 'In Progress'} color={color}>\n            <Tag icon={icon} color={color}>\n              {status}\n            </Tag>\n          </Badge>\n        );\n      }\n    },\n    {\n      title: 'Time Spent',\n      key: 'timeSpent',\n      render: (_, record) => {\n        const totalSeconds = calculateTotalTime(record.id);\n        const hours = Math.floor(totalSeconds / 3600);\n        const minutes = Math.floor((totalSeconds % 3600) / 60);\n        const seconds = totalSeconds % 60;\n        return `${hours}h ${minutes}m ${seconds}s`;\n      }\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_, record) => {\n        const isAssignedUser = true;\n        const isCreator = true; \n        return (\n          <Space>\n            {isAssignedUser && record.status === 'Pending' && (\n              <Button \n                type=\"primary\" \n                icon={<PlayCircleOutlined />} \n                onClick={() => startTask(record.id)}\n              >\n                Start\n              </Button>\n            )}\n            \n            {isAssignedUser && record.status === 'In Progress' && (\n              <>\n                <Button \n                  icon={<PauseOutlined />} \n                  onClick={() => pauseTask(record.id)}\n                >\n                  Pause\n                </Button>\n                <Button \n                  type=\"primary\" \n                  icon={<CheckCircleOutlined />} \n                  onClick={() => completeTask(record.id)}\n                >\n                  Complete\n                </Button>\n              </>\n            )}\n            \n            {isAssignedUser && record.status === 'Paused' && (\n              <>\n                <Button \n                  type=\"primary\" \n                  icon={<PlayCircleOutlined />} \n                  onClick={() => resumeTask(record.id)}\n                >\n                  Resume\n                </Button>\n                <Button \n                  icon={<CheckCircleOutlined />} \n                  onClick={() => completeTask(record.id)}\n                >\n                  Complete\n                </Button>\n              </>\n            )}\n            \n            {(isCreator || currentUser?.role === 'manager') && (\n              <Button \n                icon={<EditOutlined />} \n                onClick={() => editTask(record)}\n              />\n            )}\n            \n            {(isCreator || currentUser?.role === 'manager') && (\n              <Popconfirm\n                title=\"Are you sure to delete this task?\"\n                onConfirm={() => deleteTask(record.id)}\n                okText=\"Yes\"\n                cancelText=\"No\"\n              >\n                <Button icon={<DeleteOutlined />} danger />\n              </Popconfirm>\n            )}\n          </Space>\n        );\n      }\n    }\n  ];\n\n  return (\n    <GlobalLayout>\n      <div className=\"task-management\">\n        <Card \n          title=\"Task Management\" \n          extra={\n            <Button type=\"primary\" icon={<PlusOutlined />} onClick={showModal}>\n              Create Task\n            </Button>\n          }\n        >\n          <Table \n            dataSource={tasks} \n            columns={columns} \n            rowKey=\"id\"\n            pagination={{ pageSize: 10 }}\n          />\n        </Card>\n        \n        {/* Create Task Modal */}\n        <Modal\n          title=\"Create New Task\"\n          visible={isModalVisible}\n          onCancel={handleCancel}\n          footer={null}\n          className=\"antmodalclassName\"\n        >\n          <Form form={form} onFinish={onFinish} layout=\"vertical\">\n            <Form.Item\n              name=\"title\"\n              label=\"Task Title\"\n              rules={[{ required: true, message: 'Please enter task title' }]}\n            >\n              <input placeholder=\"Enter task title\" />\n            </Form.Item>\n            \n            <Form.Item\n              name=\"description\"\n              label=\"Description\"\n              rules={[{ required: true, message: 'Please enter task description' }]}\n            >\n              <TextArea rows={4} placeholder=\"Enter task description\" />\n            </Form.Item>\n            \n            <Form.Item\n              name=\"assignedTo\"\n              label=\"Assign To\"\n              rules={[{ required: true, message: 'Please select an employee' }]}\n            >\n              <Select\n                getPopupContainer={() => document.body}\n                popupClassName={'!z-[1580]'} \n                placeholder=\"Select employee\"\n              >\n                {console.log(employees)}\n                {employees.filter(emp => emp.role === 'employee').map(employee => (\n                  <Option key={employee.id} value={employee.id}>\n                    {employee.name} ({employee.position})\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            \n            <Form.Item\n              name=\"dueDate\"\n              label=\"Due Date\"\n              rules={[{ required: true, message: 'Please select due date' }]}\n            >\n              <DatePicker\n                getPopupContainer={() => document.body}\n                popupClassName={'!z-[1580]'} \n                style={{ width: '100%' }} \n              />\n            </Form.Item>\n            \n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Create Task\n              </Button>\n            </Form.Item>\n          </Form>\n        </Modal>\n        \n        {/* Edit Task Modal */}\n        <Modal\n          title=\"Edit Task\"\n          visible={isEditModalVisible}\n          onCancel={handleEditCancel}\n          footer={null}\n          className=\"antmodalclassName\"\n        >\n          <Form form={editForm} onFinish={onEditFinish} layout=\"vertical\">\n            <Form.Item\n              name=\"title\"\n              label=\"Task Title\"\n              rules={[{ required: true, message: 'Please enter task title' }]}\n            >\n              <input placeholder=\"Enter task title\" />\n            </Form.Item>\n            \n            <Form.Item\n              name=\"description\"\n              label=\"Description\"\n              rules={[{ required: true, message: 'Please enter task description' }]}\n            >\n              <TextArea rows={4} placeholder=\"Enter task description\" />\n            </Form.Item>\n            \n            <Form.Item\n              name=\"assignedTo\"\n              label=\"Assign To\"\n              rules={[{ required: true, message: 'Please select an employee' }]}\n            >\n              <Select\n                getPopupContainer={() => document.body}\n                popupClassName={'!z-[1580]'} \n                placeholder=\"Select employee\"\n              >\n                {employees.filter(emp => emp.role === 'employee').map(employee => (\n                  <Option key={employee.id} value={employee.id}>\n                    {employee.name} ({employee.position})\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            \n            <Form.Item\n              name=\"dueDate\"\n              label=\"Due Date\"\n              rules={[{ required: true, message: 'Please select due date' }]}\n            >\n              <DatePicker\n                getPopupContainer={() => document.body}\n                popupClassName={'!z-[1580]'} \n                style={{ width: '100%' }} \n              />\n            </Form.Item>\n            \n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\">\n                Update Task\n              </Button>\n            </Form.Item>\n          </Form>\n        </Modal>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default VigoTaskManagement;"],"names":["Option","Select","TextArea","Input","getFromStorage","key","data","localStorage","getItem","JSON","parse","saveToStorage","setItem","stringify","id","name","position","role","_ref","currentUser","employees","setEmployees","useState","tasks","setTasks","taskLogs","setTaskLogs","isModalVisible","setIsModalVisible","isEditModalVisible","setIsEditModalVisible","currentTask","setCurrentTask","activeTaskId","setActiveTaskId","form","Form","useForm","editForm","useEffect","storedEmployees","storedTasks","storedTaskLogs","activeTask","find","task","status","assignedTo","startTask","taskId","pauseTask","updatedTasks","map","_objectSpread","newLog","Date","now","startTime","dayjs","format","endTime","duration","message","info","activeLogIndex","findIndex","log","diff","updatedLogs","warning","completeTask","completedAt","success","columns","title","dataIndex","render","employee","emp","date","record","color","icon","_jsx","ClockCircleOutlined","PlayCircleOutlined","PauseOutlined","CheckCircleOutlined","Badge","dot","children","Tag","_","totalSeconds","filter","reduce","total","hours","Math","floor","minutes","seconds","concat","_jsxs","Space","Button","type","onClick","_Fragment","resumeTask","EditOutlined","editTask","setFieldsValue","description","dueDate","Popconfirm","onConfirm","deleteTask","okText","cancelText","DeleteOutlined","danger","GlobalLayout","className","Card","extra","PlusOutlined","showModal","Table","dataSource","rowKey","pagination","pageSize","Modal","visible","onCancel","handleCancel","resetFields","footer","onFinish","values","newTask","assignedBy","createdAt","approved","layout","Item","label","rules","required","placeholder","rows","getPopupContainer","document","body","popupClassName","console","value","DatePicker","style","width","htmlType","handleEditCancel"],"sourceRoot":""}