{"version":3,"file":"static/js/8818.7d986ba3.chunk.js","mappings":"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","sources":["pages/department/CreateDepartment.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createDepartmentFunc } from \"./departmentFeatures/_department_reducers\";\nimport { useNavigate } from \"react-router-dom\";\nimport { formButtonClassName, inputClassName, inputLabelClassName, domainName, usertypelist, inputerrorClassNameAutoComplete, } from \"../../constents/global\";\nimport getUserIds from '../../constents/getUserIds';\nimport { useEffect } from \"react\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport Loader from \"../../global_layouts/Loader\";\nimport CustomMobileCodePicker from \"../../global_layouts/MobileCode/MobileCodePicker\";\n\nfunction CreateDepartment() {\n\n  const { loading: departmentLoading } = useSelector(\n    (state) => state.department\n  );\n  const { register, handleSubmit, control, formState: { errors } } = useForm();\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const { userCompanyId, userType } = getUserIds();\n  const { companyList } = useSelector((state) => state.company);\n\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(companySearch({ isPagination: false, text: \"\", sort: true, status: true }));\n    }\n  }, []);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      \"name\": data.departmentName,\n      email: data?.email,\n      companyId: companyId,\n      mobile: {\n        code: data?.PDMobileCode,\n        number: data?.PDMobileNo\n      }\n    };\n\n    dispatch(createDepartmentFunc(finalPayload)).then((data) => {\n      !data.error && navigate(-1)\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"companyId\", {\n                  required: \"Company is required\",\n                })}\n                className={` ${inputClassName} ${errors.companyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                showSearch\n                filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                }\n              >\n                <option className=\"\" value=\"\">\n                  Select Company\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>\n                    {type?.fullName}({type?.userName})\n                  </option>\n                ))}\n              </select>\n\n              {errors.companyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.companyId.message}\n                </p>\n              )}\n            </div>}\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Department Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"departmentName\", {\n                  required: \"Department Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.departmentName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Department Name\"\n              />\n              {errors.departmentName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.departmentName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Email\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"email\", {\n\n                  pattern: {\n                    value:\n                      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                    message: \"Please enter a valid email address\",\n                  },\n                })}\n                className={` ${inputClassName} ${errors.email ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Email\"\n              />\n              {errors.email && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex gap-3 pt-7\">\n              <div className=\"w-[100px] grid\">\n                <label className={`!text-[#5e6366] !text-sm  !font-normal !font-[Poppins] `}>\n                  Code\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDMobileCode\"\n\n                  render={({ field }) => (\n                    <CustomMobileCodePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n\n                {errors[`PDMobileCode`] && (\n                  <p className={`${inputerrorClassNameAutoComplete}`}>\n                    {errors[`PDMobileCode`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName} `}>\n                  Mobile No\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`PDMobileNo`, {\n\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName}  ${errors[`PDMobileNo`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`PDMobileNo`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`PDMobileNo`].message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={departmentLoading}\n              className={`${departmentLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3 `}\n            >\n              {departmentLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateDepartment\n"],"names":["loading","departmentLoading","useSelector","state","department","register","handleSubmit","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","userCompanyId","userType","getUserIds","companyList","company","companyId","useWatch","name","defaultValue","useEffect","companySearch","isPagination","text","sort","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","departmentName","email","mobile","code","PDMobileCode","number","PDMobileNo","createDepartmentFunc","then","error","concat","inputLabelClassName","_objectSpread","required","inputClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","value","map","type","_id","fullName","userName","message","placeholder","pattern","Controller","render","_ref","field","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","maxLength","onInput","e","target","length","slice","disabled","Loader"],"sourceRoot":""}