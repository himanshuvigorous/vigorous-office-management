{"version":3,"file":"static/js/4021.37d3558c.chunk.js","mappings":"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","sources":["pages/client/clientManagement/EditClient.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useForm, useWatch, Controller, useFieldArray } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  inputClassName,\n  inputLabelClassName,\n  domainName,\n  inputerrorClassNameAutoComplete,\n  inputAntdSelectClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport {\n  countrySearch,\n  secCountrySearch,\n} from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport { decrypt } from \"../../../config/Encryption.js\";\nimport {\n  getClientDetails,\n  updateClientFunc,\n} from \"./clientFeatures/_client_reducers\";\nimport { useParams } from \"react-router-dom\";\nimport { citySearch } from \"../../global/address/city/CityFeatures/_city_reducers.js\";\nimport { stateSearch } from \"../../global/address/state/featureStates/_state_reducers.js\";\nimport OwnersDetails from \"./OwnersDetails.js\";\nimport BranchDetails from \"./BranchDetails.js\";\nimport ContactPerson from \"./ContactPerson.js\";\nimport ServicesDetails from \"./ServicesDetails.js\";\nimport KycDocuments from \"./KycDocuments.js\";\nimport FInancialDetails from \"./FInancialDetails.js\";\nimport BankDetails from \"./BankDetails.js\";\nimport DigitalSignature from \"./DigitalSignature.js\";\nimport { orgTypeSearch } from \"../../organizationType/organizationTypeFeatures/_org_type_reducers.js\";\nimport { indusSearch } from \"../../global/other/Industry/IndustryFeature/_industry_reducers.js\";\nimport moment from \"moment\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker.js\";\nimport dayjs from \"dayjs\";\nimport { clientGrpSearch } from \"../clientGroup/clientGroupFeatures/_client_group_reducers.js\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker.js\";\n\nimport Loader from \"../../../global_layouts/Loader/Loader\";\nimport ImageUploader from \"../../../global_layouts/ImageUploader/ImageUploader.js\";\nimport ListLoader from \"../../../global_layouts/ListLoader.js\";\n\nconst EditClient = () => {\n   const { clientIdEnc } = useParams();\n  const clientId = useMemo(() => decrypt(clientIdEnc), [clientIdEnc]);\n\n  // State management\n  const [step, setStep] = useState(1);\n  const [navStep, setNavStep] = useState(1);\n  const [clientGroupOwner, setClientGroupOwner] = useState(true);\n  const [sameAsCurrentAddress, setSameAsCurrentAddress] = useState(false);\n  const [datasetLoader, setDatasetLoader] = useState(false);\n\n  // Redux selectors with direct destructuring\n  const { loading: clientLoading } = useSelector((state) => state.client);\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const { \n    industryListData, \n    indusSearchloading \n  } = useSelector((state) => state.industry);\n  const { \n    orgTypeList, \n    orgSearchloading \n  } = useSelector((state) => state.orgType);\n  const { \n    clientGroupList, \n    groupSearchLoading \n  } = useSelector(state => state.clientGroup);\n  const { \n    clientDetailsData, \n    loading \n  } = useSelector((state) => state.client);\n\n\n  // Form setup with default values\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    getValues,\n    watch,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      gender: \"Male\",\n      maritalStatus: \"Single\",\n      PDStatus: true,\n    }\n  });\n\n  const dispatch = useDispatch();\n\n  // Memoized form values\n  const formValues = useMemo(() => ({\n    PDAddress: watch(\"PDAddress\"),\n    PDcountry: watch(\"PDcountry\"),\n    PDState: watch(\"PDState\"),\n    PDCity: watch(\"PDCity\"),\n    PDPin: watch(\"PDPin\"),\n  }), [watch]);\n\n  // Fetch client data\n  const fetchData = useCallback(async () => {\n    try {\n      await dispatch(getClientDetails({ _id: clientId }));\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  }, [clientId, dispatch]);\n\n  // Initialize data\n  const initializeData = useCallback(async () => {\n   if(!countryListData && !countryListData?.length) await dispatch(countrySearch({ isPagination: false, text: \"\", sort: true, status: true }));\n    await dispatch(orgTypeSearch({ isPagination: false, text: \"\", sort: true, status: true }));\n    await dispatch(indusSearch({ isPagination: false, text: \"\", sort: true, status: true }));\n    fetchData();\n  }, [dispatch, fetchData]);\n\n  // Set form values from client data\n  const setFormValues = useCallback(() => {\n    if (!clientDetailsData?.data) return;\n\n    setDatasetLoader(true);\n    const { data } = clientDetailsData;\n\n    // Dispatch client group search\n    dispatch(\n      clientGrpSearch({\n        branchId: data?.branchId,\n        companyId: data?.companyId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    ).then((res) => {\n      if (!res.error) {\n        setValue(\"PDGroupName\", data?.groupId || '');\n      }\n    });\n\n    // Basic info\n    setValue(\"PDFullName\", data?.fullName);\n    setValue(\"ProfileImage\", data?.profileImage);\n    setValue(\"clientfistName\", data?.clientfirstName);\n    setValue(\"clientlastName\", data?.clientlastName);\n    setValue(\"PDStatus\", data?.status);\n    setValue(\"PDPlan\", data?.planId);\n    setValue(\"PDOrganizationType\", data?.organizationId);\n    setValue(\"PDindustrytype\", data?.industryId);\n\n    // Addresses\n    setValue(\"PDAddress\", data?.addresses?.primary?.street);\n    setValue(\"PDCity\", data?.addresses?.primary?.city);\n    setValue(\"PDcountry\", data?.addresses?.primary?.country);\n    setValue(\"PDState\", data?.addresses?.primary?.state);\n    setValue(\"PDPin\", data?.addresses?.primary?.pinCode);\n    setValue(\"PDSecAddress\", data?.addresses?.secondary?.street);\n    setValue(\"PDSecCountry\", data?.addresses?.secondary?.country);\n    setValue(\"PDSecState\", data?.addresses?.secondary?.state);\n    setValue(\"PDSecCity\", data?.addresses?.secondary?.city);\n    setValue(\"PDSecPinCode\", data?.addresses?.secondary?.pinCode);\n    setValue(\"openingBalance\", +data?.openingBalance);\n\n    // Contact info\n    setValue(\"PDEmail\", data?.email);\n    setValue(\"code\", data?.mobile?.code);\n    setValue(\"number\", data?.mobile?.number);\n    setValue(\"Lcode\", data?.clientProfile?.landline?.code);\n    setValue(\"Lnumber\", data?.clientProfile?.landline?.number);\n\n    // General info\n    setValue(\"gender\", data?.generalInfo?.gender);\n    if (data?.generalInfo?.dateOfBirth) {\n      setValue(\"dateOfBirth\", dayjs(data?.generalInfo?.dateOfBirth));\n    }\n    setValue(\"maritalStatus\", data?.generalInfo?.maritalStatus);\n    setClientGroupOwner(data?.clientProfile?.isGroupOwner);\n\n    // Documents\n    setValue(\"adharNumber\", data?.clientProfile?.adharNumber);\n    setValue(\"GSTNumber\", data?.clientProfile?.GSTNumber);\n    setValue(\"penNumber\", data?.clientProfile?.penNumber);\n    if (data?.clientProfile?.dateOfJoining) {\n      setValue(\"PDDateOfJoin\", dayjs(data?.clientProfile?.dateOfJoining));\n    }\n\n    // Other info\n    setValue(\"PDfrn\", data?.frn);\n    setValue(\"PDTanNumber\", data?.tanNumber);\n\n    // Social links\n    if (data?.socialLinks?.length > 0) {\n      setValue(\"SMInstagram\", data?.socialLinks[0]?.link);\n      setValue(\"SMTwitter\", data?.socialLinks[1]?.link);\n      setValue(\"SMFacebook\", data?.socialLinks[2]?.link);\n      setValue(\"SMWebsite\", data?.socialLinks[3]?.link);\n    }\n\n    setDatasetLoader(false);\n  }, [clientDetailsData, dispatch, setValue]);\n\n  // Handle same address checkbox\n  useEffect(() => {\n    if (sameAsCurrentAddress) {\n      setValue(\"PDSecAddress\", formValues.PDAddress);\n      setValue(\"PDSecPinCode\", formValues.PDPin);\n      setValue(\"PDSecCountry\", formValues.PDcountry);\n      setValue(\"PDSecState\", formValues.PDState);\n      setValue(\"PDSecCity\", formValues.PDCity);\n    } else {\n      setValue(\"PDSecAddress\", \"\");\n      setValue(\"PDSecCountry\", \"\");\n      setValue(\"PDSecState\", \"\");\n      setValue(\"PDSecCity\", \"\");\n      setValue(\"PDSecPinCode\", \"\");\n    }\n  }, [sameAsCurrentAddress, formValues, setValue]);\n\n  // Initial effects\n  useEffect(() => {\n    initializeData();\n  }, [initializeData]);\n\n  useEffect(() => {\n    setFormValues();\n  }, [setFormValues]);\n\n  // Event handlers\n  const handleAddressCheckbox = useCallback((checked) => {\n    setSameAsCurrentAddress(checked);\n  }, []);\n\n  const handleGroupOwnerCheckbox = useCallback((checked) => {\n    setClientGroupOwner(checked);\n  }, []);\n\n  const navTabClick = useCallback((clickedStep) => {\n    setStep(clickedStep);\n  }, []);\n\n  // Form submission\n  const onSubmit = useCallback((data) => {\n    if (step !== 1) return;\n\n    const finalPayload = {\n      _id: clientId,\n      companyId: clientDetailsData?.data?.companyId,\n      directorId: \"\",\n      branchId: clientDetailsData?.data?.branchId,\n      organizationId: data?.PDOrganizationType,\n      industryId: data?.PDindustrytype,\n      groupId: data?.PDGroupName,\n      fullName: data?.PDFullName,\n      openingBalance: +data?.openingBalance,\n      mobile: {\n        number: data?.number ?? \"\",\n        code: data?.code ?? \"\",\n      },\n      profileImage: data.ProfileImage,\n      userType: \"client\",\n      email: data?.PDEmail,\n      clientProfile: {\n        penNumber: data?.penNumber,\n        adharNumber: data?.adharNumber,\n        GSTNumber: data?.GSTNumber,\n        dateOfJoining: data?.PDDateOfJoin,\n        secondaryEmail: \"\",\n        isGroupOwner: clientGroupOwner,\n        contactInfo: clientDetailsData?.data?.clientProfile?.contactInfo,\n        secondaryMobile: {\n          code: +5,\n          number: 1236548529,\n        },\n        landline: {\n          code: data?.Lcode,\n          number: data?.Lnumber,\n        },\n      },\n      generalInfo: {\n        gender: \"Male\",\n        dateOfBirth: data?.dateOfBirth,\n        maritalStatus: \"Single\",\n      },\n      addresses: {\n        primary: {\n          street: data?.PDAddress ?? \"\",\n          city: data?.PDCity ?? \"\",\n          state: data?.PDState ?? \"\",\n          country: data?.PDcountry ?? \"\",\n          pinCode: data?.PDPin ?? \"\",\n        },\n        secondary: {\n          street: data?.PDSecAddress ?? \"\",\n          city: data?.PDSecCity ?? \"\",\n          state: data?.PDSecState ?? \"\",\n          country: data?.PDSecCountry ?? \"\",\n          pinCode: data?.PDSecPinCode ?? \"\",\n        },\n      },\n    };\n\n    dispatch(updateClientFunc(finalPayload)).then((data) => {\n      if (!data.error) {\n        dispatch(getClientDetails({ _id: clientId }));\n      }\n    });\n  }, [step, clientId, clientDetailsData, clientGroupOwner, dispatch]);\n\n  if (loading || datasetLoader) {\n    return <Loader />;\n  }\n\n  return (\n    <GlobalLayout>\n      <section>\n        <div className=\"\">\n          <div>\n            <div className=\"flex bg-header justify-start items-center rounded-t-lg gap-5 px-3 pt-2 mt-2 overflow-x-auto overflow-y-hidden text-nowrap\">\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(1)}\n                className={`flex relative flex-col items-center  pb-2 ${step === 1 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 1 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold text-nowrap\">\n                  Profile Information\n                </span>\n              </button>\n\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(2)}\n                className={`flex flex-col items-center relative pb-2 ${step === 2 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 2 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">Branch Details</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(3)}\n                className={`flex flex-col items-center relative pb-2 ${step === 3 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 3 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\"> Owner</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(4)}\n                className={`flex flex-col items-center relative pb-2 ${step === 4 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 4 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">Contact Person</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(5)}\n                className={`flex flex-col items-center relative pb-2 ${step === 5 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 5 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\"> Services</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(6)}\n                className={`flex flex-col items-center relative pb-2 ${step === 6 ? \"text-white ]\" : \"text-gray-600\"\n                  } cursor-pointer`}\n              >\n                {step === 6 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\"> Registration</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(7)}\n                className={`flex flex-col items-center relative pb-2 ${step === 7 ? \"text-white ]\" : \"text-gray-600\"\n                  } cursor-pointer`}\n              >\n                {step === 7 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">\n                  {\" \"}\n                  Financial Document\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(8)}\n                className={`flex flex-col items-center relative pb-2 ${step === 8 ? \"text-white ]\" : \"text-gray-600\"\n                  } cursor-pointer`}\n              >\n                {step === 8 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\"> Bank Account</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(9)}\n                className={`flex flex-col items-center relative pb-2 ${step === 9 ? \"text-white ]\" : \"text-gray-600\"\n                  } cursor-pointer`}\n              >\n                {step === 9 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">\n                  {\" \"}\n                  Digital Signature\n                </span>\n              </button>\n              {/* <button\n                type=\"button\"\n                onClick={() => navTabClick(10)}\n                className={`flex flex-col items-center relative pb-2 ${step === 10 ? \"text-white ]\" : \"text-gray-600\"\n                  } cursor-pointer`}\n              >\n                {step === 10 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\"> Status</span>\n              </button> */}\n            </div>\n            {loading || datasetLoader ? (\n              <Loader />\n            ) : (\n              <div>\n                <form\n                  autoComplete=\"off\"\n                  className=\"\"\n                  onSubmit={handleSubmit(onSubmit)}\n                >\n                  {step === 1 && (\n                    <div className=\"gap-4\">\n                      <div className=\"flex w-full justify-start items-center p-2\">\n                        <Controller\n                          name=\"ProfileImage\"\n                          control={control}\n                          render={({ field }) => (\n                            <ImageUploader\n                              setValue={setValue}\n                              name=\"image\"\n                              field={field}\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 md:my-2 px-3\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Group Name\n                          </label>\n                          {/* <select\n                        {...register(\"PDGroupName\", {\n                          required: \"Group is required\",\n                        })}\n                        disabled = {clientDetailsData?.data?.groupId ? true : false}\n                        className={` ${clientDetailsData?.data?.groupId ? inputDisabledClassName : inputClassName} ${errors.PDGroupName\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Group Name\n                        </option>\n                        {clientGroupList?.map((type) => (\n                          <option value={type?._id}>{type?.fullName}({type?.groupName})</option>\n                        ))}\n\n\n                          \n                      </select> */}\n\n                          <Controller\n                            control={control}\n                            name=\"PDGroupName\"\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                className={`${inputAntdSelectClassName}`}\n                                showSearch\n                                filterOption={(input, option) =>\n                                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                }\n                              >\n                                <Select.Option value=\"\">\n                                  Select Group Name\n                                </Select.Option>\n                                {groupSearchLoading ? <Select.Option disabled>\n                                  <ListLoader />\n                                </Select.Option> : (clientGroupList?.map((type) => (\n                                  <Select.Option\n                                    key={type?._id}\n                                    value={type?._id}\n                                  >\n                                    {type?.fullName}({type?.groupName})\n                                  </Select.Option>\n                                )))}\n                              </Select>\n                            )}\n                          />\n                          {errors.PDGroupName && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDGroupName.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Organization Type{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          {/* <select\n                        {...register(\"PDOrganizationType\", {\n                          required: \"Organization type is required\",\n                        })}\n                        className={` ${inputClassName} ${errors.PDOrganizationType\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Organization Type\n                        </option>\n                        {orgTypeList?.map((elment, index) => (\n                          <option value={elment?._id}>{elment?.name}</option>\n                        ))}\n                      </select> */}\n\n                          <Controller\n                            control={control}\n                            name=\"PDOrganizationType\"\n                            rules={{ required: \"Organization is required\" }}\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                defaultValue={\"\"}\n                                className={`${inputAntdSelectClassName} `}\n                                showSearch\n                                filterOption={(input, option) =>\n                                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                }\n                              >\n                                <Select.Option value=\"\">\n                                  Select Organization Type\n                                </Select.Option>\n                                {orgSearchloading ? <Select.Option disabled>\n                                  <ListLoader />\n                                </Select.Option> : (orgTypeList?.map((type) => (\n                                  <Select.Option\n                                    key={type?._id}\n                                    value={type?._id}\n                                  >\n                                    {type?.name}\n                                  </Select.Option>\n                                )))}\n                              </Select>\n                            )}\n                          />\n                          {errors.PDOrganizationType && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDOrganizationType.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Industry Type{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          {/* <select\n                        {...register(\"PDindustrytype\", {\n                          required: \"Industry type is required\",\n                        })}\n                        className={` ${inputClassName} ${errors.PDindustrytype\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Industry Type\n                        </option>\n                        {industryListData?.map((type) => (\n                          <option value={type._id}>{type.name}</option>\n                        ))}\n                      </select> */}\n                          <Controller\n                            control={control}\n                            name=\"PDindustrytype\"\n                            rules={{ required: \"Industry type is required\" }}\n                            render={({ field }) => (\n                              <Select\n                                {...field}\n                                defaultValue={\"\"}\n                                className={`${inputAntdSelectClassName} `}\n                                showSearch\n                                filterOption={(input, option) =>\n                                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                }\n                              >\n                                <Select.Option value=\"\">\n                                  {\" \"}\n                                  Select Industry Type\n                                </Select.Option>\n                                {indusSearchloading ? <Select.Option disabled>\n                                  <ListLoader />\n                                </Select.Option> : (industryListData?.map((type) => (\n                                  <Select.Option\n                                    key={type?._id}\n                                    value={type?._id}\n                                  >\n                                    {type?.name}\n                                  </Select.Option>\n                                )))}\n                              </Select>\n                            )}\n                          />\n                          {errors.PDindustrytype && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDindustrytype.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 md:my-1 px-3 md:mt-4\">\n                        <div className=\"col-span-2\">\n                          <label className={`${inputLabelClassName}`}>\n                            Name\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDFullName\", {\n                              required: \"Client Name is required\",\n                            })}\n                            className={` ${inputClassName} ${errors.PDFullName\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              } `}\n                            placeholder=\"Enter Client Name\"\n                          />\n                          {errors.PDFullName && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDFullName.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-8 md:my-1 px-3 md:mt-4\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Email<span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDEmail\", {\n                              required: \"Email is required\",\n                              pattern: {\n                                value:\n                                  /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                                message: \"Please enter a valid email address\",\n                              },\n                            })}\n                            className={` ${inputClassName} ${errors.PDEmail\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Email\"\n                          />\n                          {errors.PDEmail && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDEmail.message}\n                            </p>\n                          )}\n                        </div>\n                        {/* <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Password <span className=\"text-red-600\">*</span>\n                      </label>\n                      <input\n                        type=\"password\"\n                        {...register(\"PDPassword\", {\n                          required: \"Password is required\",\n                        })}\n                        className={` ${inputClassName} ${errors.PDPassword ? \"border-[1px] \" : \"border-gray-300\"\n                          }`}\n                        placeholder=\"Enter Password\"\n                      />\n                      {errors.PDPassword && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDPassword.message}\n                        </p>\n                      )}\n                    </div> */}\n                        <div className=\"flex gap-3\">\n                          <div className=\"w-[150px]\">\n                            <label className={`${inputLabelClassName}`}>\n                              code<span className=\"text-red-600\">*</span>\n                            </label>\n                            <Controller\n                              control={control}\n                              name=\"code\"\n                              rules={{ required: \"code is required\" }}\n                              render={({ field }) => (\n                                <CustomMobileCodePicker\n                                  field={field}\n                                  errors={errors}\n                                />\n                              )}\n                            />\n                            {/* <Controller\n                          control={control}\n                          name=\"code\"\n                          rules={{ required: \"code is required\" }}\n                          render={({ field }) => (\n                            <AutoComplete\n                              {...field}\n                              onChange={(value) => field.onChange(value)}\n                              options={countryListDataData?.docs?.map((type) => ({\n                                value: type?.countryMobileNumberCode,\n                              }))}\n                            >\n                              <input\n                                onFocus={() => {\n                                  dispatch(\n                                    countrySearch({\n                                      isPagination: false,\n                                      text: \"\",\n\n                                      sort: true,\n                                      status: true,\n                                    })\n                                  );\n                                }}\n                                className={`${inputClassName} ${errors.PDState\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                              />\n                            </AutoComplete>\n                          )}\n                        /> */}\n\n                            {errors[`code`] && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors[`code`].message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                              Mobile No<span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              type=\"number\"\n                              {...register(`number`, {\n                                required: \"Mobile No is required\",\n                                minLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                                maxLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                              })}\n                              className={` ${inputClassName} ${errors[`number`]\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                              placeholder=\"Enter Mobile No\"\n                              maxLength={10}\n                              onInput={(e) => {\n                                if (e.target.value.length > 10) {\n                                  e.target.value = e.target.value.slice(0, 10);\n                                }\n                              }}\n                            />\n                            {errors[`number`] && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors[`number`].message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Date of birth / incorporation{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Controller\n                            name=\"dateOfBirth\"\n                            control={control}\n                            rules={{\n                              required:\n                                \"Date of birth / incorporation  is required\",\n                            }}\n                            render={({ field }) => (\n                              <CustomDatePicker\n                                field={field}\n                                errors={errors}\n                                disabledDate={(current) => {\n                                  return (\n                                    current &&\n                                    current.isAfter(\n                                      moment().endOf(\"day\"),\n                                      \"day\"\n                                    )\n                                  );\n                                }}\n                              />\n                            )}\n                          />\n                          {errors.dateOfBirth && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.dateOfBirth.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Date of Joining{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Controller\n                            name=\"PDDateOfJoin\"\n                            control={control}\n                            render={({ field }) => (\n                              <CustomDatePicker\n                                field={field}\n                                errors={errors}\n                                disabledDate={(current) => {\n                                  return current.isAfter(\n                                    moment().endOf(\"day\"),\n                                    \"day\"\n                                  );\n                                }}\n                              />\n                            )}\n                          />\n                          {errors.PDDateOfJoin && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDDateOfJoin.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-2 gap-8 md:my-1 px-3\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            PAN Number\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"penNumber\", {\n                              pattern: {\n                                value: /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/,\n                                message: \"Invalid PAN card format (ABCDE1234E)\",\n                              },\n                            })}\n                            className={` ${inputClassName} ${errors.penNumber\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              } `}\n                            placeholder=\"Enter PAN number\"\n                            maxLength={15}\n                          />\n                          {errors.penNumber && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.penNumber.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Aadhar Number\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"adharNumber\", {})}\n                            className={` ${inputClassName} ${errors.adharNumber\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              } `}\n                            placeholder=\"Enter Aadhar number\"\n                          />\n                          {errors.adharNumber && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.adharNumber.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            GST Number\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"GSTNumber\", {})}\n                            className={` ${inputClassName} ${errors.GSTNumber\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              } `}\n                            placeholder=\"Enter GST number\"\n                          />\n                          {errors.GSTNumber && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.GSTNumber.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <div className=\"w-[150px]\">\n                            <label className={`${inputLabelClassName}`}>\n                              STD\n                            </label>\n                            <Controller\n                              control={control}\n                              name=\"Lcode\"\n                              render={({ field }) => (\n                                <CustomMobileCodePicker\n                                  field={field}\n                                  errors={errors}\n                                />\n                              )}\n                            />\n\n                            {errors[`code`] && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors[`code`].message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                              Landline\n                            </label>\n                            <input\n                              type=\"number\"\n                              {...register(`Lnumber`, {\n                                minLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                                maxLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                              })}\n                              className={` ${inputClassName} ${errors[`Lnumber`]\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                              placeholder=\"Enter Mobile No\"\n                              maxLength={10}\n                              onInput={(e) => {\n                                if (e.target.value.length > 10) {\n                                  e.target.value = e.target.value.slice(0, 10);\n                                }\n                              }}\n                            />\n                            {errors[`Lnumber`] && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors[`Lnumber`].message}\n                              </p>\n                            )}\n                          </div>\n\n                          \n                        </div>\n                            <div className=\"\">\n                                              <label className={`${inputLabelClassName}`}>\n                                                Opening Balance\n                                              </label>\n                                              <input\n                                                type=\"number\"\n                                                step=\"any\"\n                                                 {...register(\"openingBalance\", {\n                                                  \n                                                  \n                                                    })}\n                                                    disabled={clientDetailsData?.data?.openingBalance}\n                                                className={` mt-1 block w-full px-2 py-[12px] shadow-sm rounded-xl text-sm   focus:outline-none   ${clientDetailsData?.data?.openingBalance\n                                                  ? \"bg-gray-200 \"\n                                                  : \"bg-white \"\n                                                  } `}\n                                                placeholder=\"Enter Opening Balance\"\n                                               \n                                              />\n                                              {errors.openingBalance && (\n                                                <p className=\"text-red-500 text-sm\">\n                                                  {errors.openingBalance.message}\n                                                </p>\n                                              )}\n                                            </div>\n                      </div>\n                      <div className=\"mt-3\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 md:my-1 px-3\">\n                          <div className=\"col-span-2\">\n                            <label className={`${inputLabelClassName}`}>\n                              Primary Address\n                              <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              type=\"text\"\n                              {...register(\"PDAddress\", {\n                                required: \"Primary Address is required\",\n                              })}\n                              className={`${inputClassName} ${errors.PDAddress\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                              placeholder=\"Enter Primary Address\"\n                            />\n                            {errors.PDAddress && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors.PDAddress.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-4 md:my-1 px-3\">\n                          <div>\n                            <div className={`${inputLabelClassName}`}>\n                              Country <span className=\"text-red-600\">*</span>\n                            </div>\n                            {/* <Controller\n                          control={control}\n                          name=\"PDcountry\"\n                          rules={{ required: \"Country is required\" }}\n                          render={({ field }) => (\n                            <CustomMobileCodePicker\n                            field={field}\n                              errors={errors} \n                            />\n                          )}\n                        /> */}\n                            <Controller\n                              control={control}\n                              name=\"PDcountry\"\n                              render={({ field }) => (\n                                <AutoComplete\n                                  {...field}\n                                  className=\"w-full\"\n                                  options={sortByPropertyAlphabetically(countryListData?.docs)?.map(\n                                    (type) => ({\n                                      value: type?.name,\n                                    })\n                                  )}\n                                  \n                                >\n                                  <input\n                                    placeholder=\"Enter Country\"\n                                    // onFocus={() =>\n                                    //   dispatch(\n                                    //     secCountrySearch({\n                                    //       isPagination: false,\n                                    //       text: \"\",\n                                    //       sort: true,\n                                    //       status: true,\n                                    //     })\n                                    //   )\n                                    // }\n                                    className={`${inputClassName} ${errors.PDSecCountry\n                                      ? \"border-[1px] \"\n                                      : \"border-gray-300\"\n                                      }`}\n                                  />\n                                </AutoComplete>\n                              )}\n                            />\n                            {errors.PDcountry && (\n                              <p\n                                className={`${inputerrorClassNameAutoComplete}`}\n                              >\n                                {errors.PDcountry.message}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <div className={`${inputLabelClassName}`}>\n                              State <span className=\"text-red-600\">*</span>\n                            </div>\n                            <Controller\n                              control={control}\n                              name=\"PDState\"\n                              rules={{ required: \"State is required\" }}\n                              render={({ field }) => (\n                                <AutoComplete\n                                  {...field}\n                                  className=\"w-full\"\n                                  onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                                  options={sortByPropertyAlphabetically(stateListData?.docs)?.map((type) => ({\n                                    value: type?.name,\n                                  }))}\n                                  \n                                >\n                                  <input\n                                    placeholder=\"Enter State\"\n                                    onFocus={() => {\n                                      dispatch(\n                                        stateSearch({\n                                          isPagination: false,\n                                          text: \"\",\n                                          countryName: watch(\"PDcountry\"),\n                                          sort: true,\n                                          status: true,\n                                        })\n                                      );\n                                    }}\n                                    className={`${inputClassName} ${errors.PDState\n                                      ? \"border-[1px] \"\n                                      : \"border-gray-300\"\n                                      }`}\n                                  />\n                                </AutoComplete>\n                              )}\n                            />\n                            {errors.PDState && (\n                              <p\n                                className={`${inputerrorClassNameAutoComplete}`}\n                              >\n                                {errors.PDState.message}\n                              </p>\n                            )}\n                          </div>\n\n                          {/* City Field */}\n                          <div>\n                            <div className={`${inputLabelClassName}`}>\n                              City <span className=\"text-red-600\">*</span>\n                            </div>\n                            <Controller\n                              control={control}\n                              name=\"PDCity\"\n                              rules={{ required: \"City is required\" }}\n                              render={({ field }) => (\n                                <AutoComplete\n                                  {...field}\n                                  className=\"w-full\"\n                                  onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                                  options={sortByPropertyAlphabetically(cityListData?.docs)?.map((type) => ({\n                                    value: type?.name,\n                                  }))}\n                                  \n                                >\n                                  <input\n                                    placeholder=\"Enter City\"\n                                    onFocus={() => {\n                                      dispatch(\n                                        citySearch({\n                                          isPagination: false,\n                                          text: \"\",\n                                          sort: true,\n                                          status: true,\n                                          stateName: watch(\"PDState\"),\n                                        })\n                                      );\n                                    }}\n                                    className={`${inputClassName} ${errors.PDCity\n                                      ? \"border-[1px] \"\n                                      : \"border-gray-300\"\n                                      }`}\n                                  />\n                                </AutoComplete>\n                              )}\n                            />\n                            {errors.PDCity && (\n                              <p\n                                className={`${inputerrorClassNameAutoComplete}`}\n                              >\n                                {errors.PDCity.message}\n                              </p>\n                            )}\n                          </div>\n\n                          {/* Pin Code Field */}\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Pin Code <span className=\"text-red-600\">*</span>\n                            </label>\n                            <Controller\n                              control={control}\n                              name=\"PDPin\"\n                              rules={{ required: \"Pin Code is required\" }}\n                              render={({ field }) => (\n                                <input\n                                  {...field}\n                                  type=\"number\"\n                                  placeholder=\"Enter Pin Code\"\n                                  maxLength={6}\n                                  onInput={(e) => {\n                                    if (e.target.value.length > 6) {\n                                      e.target.value = e.target.value.slice(\n                                        0,\n                                        6\n                                      );\n                                    }\n                                  }}\n                                  className={`${inputClassName} ${errors.PDPin\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              )}\n                            />\n                            {errors.PDPin && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors.PDPin.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"mt-3\">\n                        <div className=\"mt-3\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 md:my-1 px-3\">\n                            <div className=\"col-span-2\">\n                              <label\n                                className={`${inputLabelClassName} flex justify-between items-center`}\n                              >\n                                <span>Secondary Address</span>\n                                <div className=\"flex items-center mt-2\">\n                                  <input\n                                    type=\"checkbox\"\n                                    id=\"sameAsCurrentAddress\"\n                                    onChange={(e) =>\n                                      handleAddressCheckbox(e.target.checked)\n                                    }\n                                    className=\"mr-2\"\n                                  />\n                                  <label\n                                    htmlFor=\"sameAsCurrentAddress\"\n                                    className={`${inputLabelClassName}`}\n                                  >\n                                    same as Current Address\n                                  </label>\n                                </div>\n                              </label>\n                              <input\n                                type=\"text\"\n                                {...register(\"PDSecAddress\")}\n                                className={`${inputClassName} ${errors.PDSecAddress\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                                placeholder=\"Enter Secondary Address\"\n                              />\n                              {errors.PDSecAddress && (\n                                <p className=\"text-red-500 text-sm\">\n                                  {errors.PDSecAddress.message}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-8 md:my-1 px-3\">\n                            {/* Secondary Address Fields (mirroring Primary Address) */}\n                            <div>\n                              <div className={`${inputLabelClassName}`}>\n                                Country\n                              </div>\n                              <Controller\n                                control={control}\n                                name=\"PDSecCountry\"\n                                render={({ field }) => (\n                                  <AutoComplete\n                                    {...field}\n                                    className=\"w-full\"\n                                    options={sortByPropertyAlphabetically(countryListData?.docs)?.map(\n                                      (type) => ({\n                                        value: type?.name,\n                                      })\n                                    )}\n                                  >\n                                    <input\n                                      placeholder=\"Enter Country\"\n                                      // onFocus={() =>\n                                      //   dispatch(\n                                      //     secCountrySearch({\n                                      //       isPagination: false,\n                                      //       text: \"\",\n                                      //       sort: true,\n                                      //       status: true,\n                                      //     })\n                                      //   )\n                                      // }\n                                      className={`${inputClassName} ${errors.PDSecCountry\n                                        ? \"border-[1px] \"\n                                        : \"border-gray-300\"\n                                        }`}\n                                    />\n                                  </AutoComplete>\n                                )}\n                              />\n                              {errors.PDSecCountry && (\n                                <p className=\"text-red-500 text-sm\">\n                                  {errors.PDSecCountry.message}\n                                </p>\n                              )}\n                            </div>\n\n                            <div>\n                              <div className={`${inputLabelClassName}`}>\n                                State\n                              </div>\n                              <Controller\n                                control={control}\n                                name=\"PDSecState\"\n                                render={({ field }) => (\n                                  <AutoComplete\n                                    {...field}\n                                    className=\"w-full\"\n                                    onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                                    options={sortByPropertyAlphabetically(stateListData?.docs)?.map(\n                                      (type) => ({\n                                        value: type?.name,\n                                      })\n                                    )}\n                                  >\n                                    <input\n                                      placeholder=\"Enter State\"\n                                      onFocus={() => {\n                                        dispatch(\n                                          stateSearch({\n                                            isPagination: false,\n                                            text: \"\",\n                                            countryName: watch(`PDSecCountry`),\n                                            sort: true,\n                                            status: true,\n                                          })\n                                        );\n                                      }}\n                                      className={`${inputClassName} ${errors.PDState\n                                        ? \"border-[1px] \"\n                                        : \"border-gray-300\"\n                                        }`}\n                                    />\n                                  </AutoComplete>\n                                )}\n                              />\n                              {errors.PDSecState && (\n                                <p className=\"text-red-500 text-sm\">\n                                  {errors.PDSecState.message}\n                                </p>\n                              )}\n                            </div>\n\n                            <div>\n                              <div className={`${inputLabelClassName}`}>\n                                City\n                              </div>\n                              <Controller\n                                control={control}\n                                name=\"PDSecCity\"\n                                render={({ field }) => (\n                                  <AutoComplete\n                                    {...field}\n                                    className=\"w-full\"\n                                    onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                                    options={sortByPropertyAlphabetically(cityListData?.docs)?.map(\n                                      (type) => ({\n                                        value: type?.name,\n                                      })\n                                    )}\n                                  >\n                                    <input\n                                      placeholder=\"Enter City\"\n                                      onFocus={() => {\n                                        dispatch(\n                                          citySearch({\n                                            isPagination: false,\n                                            text: \"\",\n                                            sort: true,\n                                            status: true,\n                                            stateName: watch(`PDSecState`),\n                                          })\n                                        );\n                                      }}\n                                      className={`${inputClassName} ${errors.PDCity\n                                        ? \"border-[1px] \"\n                                        : \"border-gray-300\"\n                                        }`}\n                                    />\n                                  </AutoComplete>\n                                )}\n                              />\n                              {errors.PDSecCity && (\n                                <p className=\"text-red-500 text-sm\">\n                                  {errors.PDSecCity.message}\n                                </p>\n                              )}\n                            </div>\n\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Pin Code\n                              </label>\n                              <Controller\n                                control={control}\n                                name=\"PDSecPinCode\"\n                                render={({ field }) => (\n                                  <input\n                                    {...field}\n                                    type=\"number\"\n                                    placeholder=\"Enter Pin Code\"\n                                    maxLength={6}\n                                    onInput={(e) => {\n                                      if (e.target.value.length > 6) {\n                                        e.target.value = e.target.value.slice(\n                                          0,\n                                          6\n                                        );\n                                      }\n                                    }}\n                                    className={`${inputClassName} ${errors.PDSecPinCode\n                                      ? \"border-[1px] \"\n                                      : \"border-gray-300\"\n                                      }`}\n                                  />\n                                )}\n                              />\n                              {errors.PDSecPinCode && (\n                                <p className=\"text-red-500 text-sm\">\n                                  {errors.PDSecPinCode.message}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center mt-2 p-3\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"clientGroupOwner\"\n                          className=\"mr-2\"\n                          checked={clientGroupOwner}\n                          onChange={(e) =>\n                            handleGroupOwnerCheckbox(e.target.checked)\n                          }\n                        />\n                        <label\n                          htmlFor=\"clientGroupOwner\"\n                          className={`${inputLabelClassName}`}\n                        >\n                          isGroupOwner\n                        </label>\n                      </div>\n\n                      <div className=\"flex justify-end col-span-2 mt-4\">\n                        <button\n                          type=\"submit\"\n                          disabled={clientLoading}\n                          className={`${clientLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n                        >\n                          {clientLoading ? <Loader /> : 'Submit'}\n                        </button>\n\n                      </div>\n                    </div>\n                  )}\n                </form>\n                {step === 3 && (\n                  <OwnersDetails\n                    clientDataParent={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n                {step === 2 && (\n                  <BranchDetails\n                    clientData={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n                {step === 4 && (\n                  <ContactPerson\n                    clientData={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n                {step === 5 && (\n                  <ServicesDetails\n                    clientData={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n                {step === 6 && (\n                  <KycDocuments\n                    clientData={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n                {step === 7 && (\n                  <FInancialDetails\n                    clientData={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n                {step === 8 && (\n                  <BankDetails\n                    clientData={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n                {step === 9 && (\n                  <DigitalSignature\n                    clientData={clientDetailsData}\n                    fetchData={fetchData}\n                  />\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n    </GlobalLayout>\n  );\n};\n\nexport default EditClient;\n","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["EditClient","_clientDetailsData$da5","_clientDetailsData$da6","clientIdEnc","useParams","clientId","useMemo","decrypt","step","setStep","useState","navStep","setNavStep","clientGroupOwner","setClientGroupOwner","sameAsCurrentAddress","setSameAsCurrentAddress","datasetLoader","setDatasetLoader","loading","clientLoading","useSelector","state","client","countryListData","country","stateListData","states","cityListData","city","industryListData","indusSearchloading","industry","orgTypeList","orgSearchloading","orgType","clientGroupList","groupSearchLoading","clientGroup","clientDetailsData","register","control","handleSubmit","setValue","getValues","watch","formState","errors","useForm","defaultValues","gender","maritalStatus","PDStatus","dispatch","useDispatch","formValues","PDAddress","PDcountry","PDState","PDCity","PDPin","fetchData","useCallback","async","getClientDetails","_id","error","console","initializeData","length","countrySearch","isPagination","text","sort","status","orgTypeSearch","indusSearch","setFormValues","_data$addresses","_data$addresses$prima","_data$addresses2","_data$addresses2$prim","_data$addresses3","_data$addresses3$prim","_data$addresses4","_data$addresses4$prim","_data$addresses5","_data$addresses5$prim","_data$addresses6","_data$addresses6$seco","_data$addresses7","_data$addresses7$seco","_data$addresses8","_data$addresses8$seco","_data$addresses9","_data$addresses9$seco","_data$addresses0","_data$addresses0$seco","_data$mobile","_data$mobile2","_data$clientProfile","_data$clientProfile$l","_data$clientProfile2","_data$clientProfile2$","_data$generalInfo","_data$generalInfo2","_data$generalInfo4","_data$clientProfile3","_data$clientProfile4","_data$clientProfile5","_data$clientProfile6","_data$clientProfile7","_data$socialLinks","data","_data$generalInfo3","_data$clientProfile8","_data$socialLinks$","_data$socialLinks$2","_data$socialLinks$3","_data$socialLinks$4","clientGrpSearch","branchId","companyId","groupId","then","res","fullName","profileImage","clientfirstName","clientlastName","planId","organizationId","industryId","addresses","primary","street","pinCode","secondary","openingBalance","email","mobile","code","number","clientProfile","landline","generalInfo","dateOfBirth","dayjs","isGroupOwner","adharNumber","GSTNumber","penNumber","dateOfJoining","frn","tanNumber","socialLinks","link","useEffect","handleAddressCheckbox","checked","handleGroupOwnerCheckbox","navTabClick","clickedStep","onSubmit","_clientDetailsData$da","_clientDetailsData$da2","_data$number","_data$code","_clientDetailsData$da3","_clientDetailsData$da4","_data$PDAddress","_data$PDCity","_data$PDState","_data$PDcountry","_data$PDPin","_data$PDSecAddress","_data$PDSecCity","_data$PDSecState","_data$PDSecCountry","_data$PDSecPinCode","finalPayload","directorId","PDOrganizationType","PDindustrytype","PDGroupName","PDFullName","ProfileImage","userType","PDEmail","PDDateOfJoin","secondaryEmail","contactInfo","secondaryMobile","Lcode","Lnumber","PDSecAddress","PDSecCity","PDSecState","PDSecCountry","PDSecPinCode","updateClientFunc","_jsx","Loader","GlobalLayout","children","className","_jsxs","type","onClick","concat","autoComplete","Controller","name","render","_ref","field","ImageUploader","inputLabelClassName","_ref2","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","groupName","message","rules","required","_ref3","defaultValue","_ref4","inputClassName","placeholder","pattern","_ref5","CustomMobileCodePicker","minLength","maxLength","onInput","e","target","slice","_ref6","CustomDatePicker","disabledDate","current","isAfter","moment","endOf","_ref7","_ref8","_ref9","_sortByPropertyAlphab","AutoComplete","options","sortByPropertyAlphabetically","docs","inputerrorClassNameAutoComplete","_ref0","_sortByPropertyAlphab2","onChange","onFocus","stateSearch","countryName","_ref1","_sortByPropertyAlphab3","citySearch","stateName","_ref10","id","htmlFor","_ref11","_sortByPropertyAlphab4","_ref12","_sortByPropertyAlphab5","_ref13","_sortByPropertyAlphab6","_ref14","OwnersDetails","clientDataParent","BranchDetails","clientData","ContactPerson","ServicesDetails","KycDocuments","FInancialDetails","BankDetails","DigitalSignature","Spin","size"],"sourceRoot":""}