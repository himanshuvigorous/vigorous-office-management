{"version":3,"file":"static/js/8956.426fcba5.chunk.js","mappings":"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","sources":["pages/timeSlot/UpdateTimeSlots.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../config/Encryption\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../constents/global\";\nimport getUserIds from '../../constents/getUserIds';\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { designationSearch } from \"../designation/designationFeatures/_designation_reducers\";\nimport { branchSearch } from \"../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../Director/director/DirectorFeatures/_director_reducers\";\nimport { updateTimeSlotsFunc, getTimeSlotsById } from \"./timeSlotsFeatures/_timeSlots_reducers\";\nimport ReactSelect from 'react-select';\nimport Loader from \"../../global_layouts/Loader\";\nimport { Select } from \"antd\";\nimport ListLoader from \"../../global_layouts/ListLoader\";\n\n\nfunction UpdateTimeSlots() {\n  const { loading: timeSlotLoading } = useSelector(state => state.timeSlots)\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    getValues,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [tags, setTags] = useState([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType\n  } = getUserIds();\n\n  const [pageLoading, setPageLoading] = useState(true);\n  const { companyList } = useSelector((state) => state.company);\n  const { designationList } = useSelector((state) => state.designation);\n\n\n  const { timeSlotsIdEnc } = useParams();\n  const timeSlotsId = decrypt(timeSlotsIdEnc);\n  const { timeSlotsByIdData } = useSelector((state) => state.timeSlots);\n\n \n  const { departmentListData } = useSelector(state => state.department);\n\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { directorLists } = useSelector((state) => state.director);\n\n\n  const [days, setDays] = useState([]);\n  const [selectedDays, setSelectedDays] = useState([]);\n\n  const [weekOffs, setWeekOffs] = useState([]);\n  const [selectedWeeks, setSelectedWeeks] = useState([]);\n\n\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"branchId\",\n    defaultValue: userBranchId,\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"departmentId\",\n    defaultValue: userDepartmentId,\n  });\n\n  const designationId = useWatch({\n    control,\n    name: \"designationId\",\n    defaultValue: userDesignationId,\n  });\n\n  const employeId = useWatch({\n    control,\n    name: \"employeId\",\n    defaultValue: userEmployeId,\n  });\n\n\n  useEffect(() => {\n\n    const fetchData = async () => {\n      try {\n        if (userType === \"admin\") {\n          await dispatch(companySearch({ text: \"\", sort: true, status: true, isPagination: false }));\n        }\n        const reqData = {\n          _id: timeSlotsId,\n        };\n        await dispatch(getTimeSlotsById(reqData)).then((data) => {\n          setPageLoading(false);\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const fetchDaysList = async () => {\n    const dayListData = [\n      { dayName: \"Monday\", label: \"Monday\" },\n      { dayName: \"Tuesday\", label: \"Tuesday\" },\n      { dayName: \"Wednesday\", label: \"Wednesday\" },\n      { dayName: \"Thursday\", label: \"Thursday\" },\n      { dayName: \"Friday\", label: \"Friday\" },\n      { dayName: \"Saturday\", label: \"Saturday\" },\n    ];\n    return dayListData;\n  };\n\n  useEffect(() => {\n    const weekDaysList = async () => {\n      const daysList = await fetchDaysList();\n      const formattedOptions = daysList.map((day) => ({\n        value: day.dayName,\n        label: day.dayName,\n      }));\n      setDays(formattedOptions);\n    };\n    weekDaysList();\n  }, []);\n\n  const handleWorkingDays = (selected) => {\n    setSelectedDays(selected || []);\n  };\n\n  useEffect(() => {\n    if (timeSlotsByIdData?.data?.workingDays) {\n      const formattedSelectedDays = Object.values(\n        timeSlotsByIdData?.data?.workingDays\n      ).map((day) => ({\n        value: day,\n        label: day,\n      }));\n      setSelectedDays(formattedSelectedDays);\n    }\n  }, [timeSlotsByIdData]);\n\n  const getWorkingDaysValues = () => {\n    return selectedDays.map((day) => day.value);\n  };\n\n  const fetchWeekOffList = async () => {\n    const weekListCount = [\n      { weekCount: 1 },\n      { weekCount: 2 },\n      { weekCount: 3 },\n      { weekCount: 4 },\n      { weekCount: 5 },\n    ];\n    return weekListCount;\n  };\n\n  useEffect(() => {\n    const fetchAndSetWeekOffs = async () => {\n      const daysList = await fetchWeekOffList();\n      const formattedOptions = daysList.map((week) => ({\n        value: week.weekCount,\n        label: `Week ${week.weekCount}`,\n      }));\n      setWeekOffs(formattedOptions);\n    };\n    fetchAndSetWeekOffs();\n  }, []);\n\n  const handleSaturdays = (selected) => {\n    setSelectedWeeks(selected || []);\n  };\n\n  const getWeekOffValues = () => {\n    return selectedWeeks.map((week) => week.value);\n  };\n\n  useEffect(() => {\n    const preloadedWeeks = timeSlotsByIdData?.data?.weekOffRules?.saturdaysOff;\n    const formattedPreloadedWeeks = preloadedWeeks?.map((week) => ({\n      value: week,\n      label: `Week ${week}`,\n    }));\n    setSelectedWeeks(formattedPreloadedWeeks);\n  }, [timeSlotsByIdData]);\n\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(\n        companySearch({\n          userType: \"company\",\n          text: \"\",\n          status: true,\n        })\n      );\n    }\n  }, []);\n\n\n\n  useEffect(() => {\n    if ((companyId && userType === \"company\" || companyId && userType === \"admin\")) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (companyId && userType === \"company\" || userType === \"admin\") {\n      dispatch(directorSearch({\n        text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n      })\n      );\n    }\n  }, [companyId]);\n\n  useEffect(() => {\n    if (departmentId) {\n      dispatch(\n        designationSearch({\n          departmentId: departmentId,\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, [departmentId]);\n\n  useEffect(() => {\n    if (timeSlotsByIdData && timeSlotsByIdData?.data) {\n      setValue(\"companyId\", timeSlotsByIdData?.data?.companyId);\n      setValue(\"departmentName\", timeSlotsByIdData?.data?.name);\n      setValue(\"directorId\", timeSlotsByIdData?.data?.directorId);\n      setValue(\"branchId\", timeSlotsByIdData?.data?.branchId);\n\n      setValue(\"shiftName\", timeSlotsByIdData?.data?.shiftName);\n      setValue(\"lateMIN\", timeSlotsByIdData?.data?.lateMIN);\n      setValue(\"lunchMin\", timeSlotsByIdData?.data?.lunchMin);\n      setValue(\"skipHRS\", timeSlotsByIdData?.data?.skipHRS);\n\n      setValue(\"openingTime\", timeSlotsByIdData?.data?.openingTime);\n      setValue(\"closingTime\", timeSlotsByIdData?.data?.closingTime);\n      setValue(\"workingDaysvalue\", timeSlotsByIdData?.data?.workingDaysvalue);\n      setValue(\"weekoffvalue\", timeSlotsByIdData?.data?.weekoffvalue);\n      // setValue(\"sundaysOff\", timeSlotsByIdData?.data?.weekOffRules?.sundaysOff);\n      setValue(\"sundaysOff\", timeSlotsByIdData?.data?.weekOffRules?.sundaysOff ? \"Yes\" : \"No\");\n      setValue(\"isApplySandwich\", timeSlotsByIdData?.data?.isApplySandwich ? \"Yes\" : \"No\");\n\n\n    }\n  }, [timeSlotsByIdData]);\n\n\n  const onSubmit = (data) => {\n    const workingDaysvalue = getWorkingDaysValues();\n    const weekoffvalue = getWeekOffValues();\n    const finalPayload = {\n      _id: timeSlotsId,\n      companyId: companyId,\n      directorId: directorId,\n      branchId: branchId,\n      // departmentId: departmentId,\n      // designationId: designationId,\n      shiftName: data?.shiftName,\n      \"skipHRS\": + data?.skipHRS,\n      \"lunchMin\": + data?.lunchMin,\n      \"lateMIN\": + data?.lateMIN,\n      \"workingDays\": workingDaysvalue,\n      \"weekOffRules\": {\n        \"sundaysOff\": data?.sundaysOff == \"Yes\" ? true : false,\n        \"saturdaysOff\": weekoffvalue,\n      },\n      openingTime: String(data?.openingTime),\n      closingTime: String(data?.closingTime),\n      isApplySandwich: data?.isApplySandwich == \"true\" ? true : false,\n    };\n\n    dispatch(updateTimeSlotsFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 \">\n              {(userType === \"admin\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Company<span className=\"text-red-600\">*</span>\n                  </label>\n                  <select\n                    {...register(\"companyId\", {\n                      required: \"Company is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.companyId ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Company\n                    </option>\n                    {companyList?.map((type) => (\n                      <option value={type?._id}>\n                        {type?.fullName}({type?.userName})\n                      </option>\n                    ))}\n                  </select>\n                  {errors.companyId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.companyId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n              {/* {(userType === \"admin\" || userType === \"company\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Director<span className=\"text-red-600\">*</span>\n                  </label>\n                  <select\n                    {...register(\"PDDirectorId\", {\n                      required: \"Director is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.PDDirectorId ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Director\n                    </option>\n                    {directorLists?.map((element) => (\n                      <option value={element?._id}>{element?.fullName}</option>\n                    ))}\n                  </select>\n                  {errors.PDDirectorId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDDirectorId.message}\n                    </p>\n                  )}\n                </div>)} */}\n              {(userType === \"admin\" || userType === \"company\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch<span className=\"text-red-600\">*</span>\n                  </label>\n                  {/* <select\n                    {...register(\"branchId\", {\n                      required: \"Branch is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.branchId ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Branch\n                    </option>\n\n                    {branchList\n                      ?.filter((element) => element?.companyId === companyId)\n                      ?.map((element) => (\n                        <option value={element?._id}>{element?.fullName}</option>\n                      ))}\n\n                    {branchList?.map((element) => (\n                      <option value={element?._id}>{element?.fullName}</option>\n                    ))}\n                  </select> */}\n\n                  <Controller\n                    control={control}\n                    name=\"branchId\"\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        defaultValue={\"\"}\n                        className={`${inputAntdSelectClassName} `}\n                        showSearch\n                       filterOption={(input, option) =>\n                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                              }\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))}\n                      </Select>\n                    )}\n                  />\n                  {errors.branchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.branchId.message}\n                    </p>\n                  )}\n                </div>)}\n\n              {/* {(userType === \"admin\" || userType === \"company\") && ( */}\n              {/* <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Department<span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"departmentId\", {\n                    required: \"Department is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.departmentId ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Department\n                  </option>\n   \n\n                  {departmentListData?.map((element) => (\n                    <option value={element?._id}>{element?.name}</option>\n                  ))}\n                </select>\n                {errors.departmentId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.departmentId.message}\n                  </p>\n                )}\n              </div> */}\n              {/* )} */}\n\n            </div>\n\n            {/* <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 \">\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Designation</label>\n                <select\n                  {...register(\"designationId\", {\n                    required: \"Designation is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.designationId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Designation\n                  </option>\n                  {designationList?.map((type) => (\n                    <option value={type?._id}>{type?.name}</option>\n                  ))}\n\n\n                </select>\n                {errors.designationId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.designationId.message}\n                  </p>\n                )}\n              </div>\n            </div> */}\n\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-2\">\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Shift Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"shiftName\", {\n                    required: \"Shift Name is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.shiftName ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Shift Name\"\n                />\n                {errors.shiftName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.shiftName.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Late Minutes <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"lateMIN\", {\n                    required: \"Late Minutes is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.lateMIN ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Late Minutes\"\n                />\n                {errors.lateMIN && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.lateMIN.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Lunch Minutes <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"lunchMin\", {\n                    required: \"Lunch Minutes is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.lunchMin ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Lunch Minutes\"\n                />\n                {errors.lunchMin && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.lunchMin.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Skip Minutes <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"skipHRS\", {\n                    required: \"Skip Minutes is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.skipHRS ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Skip Minutes\"\n                />\n                {errors.skipHRS && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.skipHRS.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Opening Time <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"time\"\n                  typeof=\"time\"\n                  {...register(\"openingTime\", { required: \"Opening Time is required\" })}\n                  className={`mt-1 block w-full border ${errors.openingTime ? \"border-[1px] \" : \"border-gray-300\"\n                    } p-2 rounded`}\n                />\n                {errors.openingTime && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.openingTime.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Closing Time <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"time\"\n                  typeof=\"time\"\n                  {...register(\"closingTime\", { required: \"Closing Time is required\" })}\n                  className={`mt-1 block w-full border ${errors.closingTime ? \"border-[1px] \" : \"border-gray-300\"\n                    } p-2 rounded`}\n                />\n                {errors.closingTime && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.closingTime.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-2\">\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Working Days  <span className=\"text-red-600\">*</span>\n                </label>\n                <ReactSelect\n                  isMulti\n                  options={days}\n                  value={selectedDays}\n                  onChange={handleWorkingDays}\n                  className=\"basic-multi-select\"\n                  classNamePrefix=\"select\"\n                />\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Saturday Off <span className=\"text-red-600\">*</span>\n                </label>\n                <ReactSelect\n                  isMulti\n                  options={weekOffs}\n                  value={selectedWeeks}\n                  onChange={handleSaturdays}\n                  className=\"basic-multi-select\"\n                  classNamePrefix=\"select\"\n                />\n              </div>\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Sundays Off <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"sundaysOff\", {\n                    required: \"Sundays Off is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.sundaysOff ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Sundays Off</option>\n                  <option value={\"Yes\"}>Yes</option>\n                  <option value={\"No\"}>No</option>\n\n                  \n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"sundaysOff\"\n                  rules={{ required: \"sundaysOff is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Sundays Off</Select.Option>\n                      <Select.Option value=\"Yes\">Yes</Select.Option>\n                      <Select.Option value=\"No\">No</Select.Option>\n\n                    </Select>\n                  )}\n                />\n                {errors.sundaysOff && (\n                  <p className=\"text-red-500 text-sm\">{errors.sundaysOff.message}</p>\n                )}\n              </div>\n\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Select Sandwich <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"isApplySandwich\"\n                  rules={{ required: \"Select Sandwich is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Sandwich</Select.Option>\n                      <Select.Option value=\"true\">Yes</Select.Option>\n                      <Select.Option value=\"false\">No</Select.Option>\n\n                    </Select>\n                  )}\n                />\n                {errors.isApplySandwich && (\n                  <p className=\"text-red-500 text-sm\">{errors.isApplySandwich.message}</p>\n                )}\n              </div>\n\n\n            </div>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={timeSlotLoading}\n              className={`${timeSlotLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {timeSlotLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default UpdateTimeSlots;"],"names":["loading","timeSlotLoading","useSelector","state","timeSlots","register","handleSubmit","control","setValue","getValues","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","tags","setTags","useState","tagInput","setTagInput","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","pageLoading","setPageLoading","companyList","company","designationList","designation","timeSlotsIdEnc","useParams","timeSlotsId","decrypt","timeSlotsByIdData","departmentListData","department","branchList","branchListloading","branch","directorLists","director","days","setDays","selectedDays","setSelectedDays","weekOffs","setWeekOffs","selectedWeeks","setSelectedWeeks","companyId","useWatch","name","defaultValue","directorId","branchId","departmentId","useEffect","async","companySearch","text","sort","status","isPagination","reqData","_id","getTimeSlotsById","then","data","error","console","fetchData","formattedOptions","dayName","label","fetchDaysList","map","day","value","weekDaysList","_timeSlotsByIdData$da","workingDays","_timeSlotsByIdData$da2","formattedSelectedDays","Object","values","weekCount","fetchWeekOffList","week","concat","fetchAndSetWeekOffs","_timeSlotsByIdData$da3","_timeSlotsByIdData$da4","preloadedWeeks","weekOffRules","saturdaysOff","formattedPreloadedWeeks","branchSearch","directorSearch","designationSearch","_timeSlotsByIdData$da5","_timeSlotsByIdData$da6","_timeSlotsByIdData$da7","_timeSlotsByIdData$da8","_timeSlotsByIdData$da9","_timeSlotsByIdData$da0","_timeSlotsByIdData$da1","_timeSlotsByIdData$da10","_timeSlotsByIdData$da11","_timeSlotsByIdData$da12","_timeSlotsByIdData$da13","_timeSlotsByIdData$da14","_timeSlotsByIdData$da15","_timeSlotsByIdData$da16","_timeSlotsByIdData$da17","shiftName","lateMIN","lunchMin","skipHRS","openingTime","closingTime","workingDaysvalue","weekoffvalue","sundaysOff","isApplySandwich","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","finalPayload","String","updateTimeSlotsFunc","inputLabelClassName","_objectSpread","required","inputClassName","showSearch","filterOption","input","option","toLowerCase","includes","type","fullName","userName","message","Controller","rules","render","_ref","_sortByPropertyAlphab","field","Select","inputAntdSelectClassName","Option","disabled","ListLoader","sortByPropertyAlphabetically","placeholder","typeof","ReactSelect","isMulti","options","onChange","selected","classNamePrefix","_ref2","_ref3","Loader"],"sourceRoot":""}