{"version":3,"file":"static/js/605.d93a6cb7.chunk.js","mappings":"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","sources":["pages/global/other/GstType/CreateGstType.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { createGstTypeFunc } from \"./GstTypeFeatures/_gstType_reducers\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport { useEffect } from \"react\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { Select } from \"antd\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\nfunction CreateGstType() {\n  const { loading: gstTypeLoading } = useSelector(state => state.gstType)\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      // \"name\": data.gstTypeName,\n      \"percentage\": + data.percentage\n\n    };\n\n    dispatch(createGstTypeFunc(finalPayload)).then((data) => {\n      navigate(-1)\n    });\n  }\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n\n              </select> */}\n\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Branch\"\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Gst Type</label>\n              <input\n                type=\"text\"\n                {...register(\"gstTypeName\", {\n                  required: \"Gst Type is required\",\n                })}\n                className={` ${inputClassName} ${errors.gstTypeName ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Gst Type\"\n              />\n              {errors.gstTypeName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.gstTypeName.message}\n                </p>\n              )}\n            </div> */}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Percentage</label>\n              <input\n                type=\"number\"\n                {...register(\"percentage\", {\n                  required: \"Percentage is required\",\n                })}\n                className={` ${inputClassName} ${errors.percentage ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Percentage\"\n                step=\"any\"\n              />\n              {errors.percentage && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.percentage.message}\n                </p>\n              )}\n            </div>\n\n\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={gstTypeLoading}\n              className={`${gstTypeLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 mt-3 px-4 rounded`}\n            >\n              {gstTypeLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n\n        </form>\n\n\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateGstType\n"],"names":["loading","gstTypeLoading","useSelector","state","gstType","register","handleSubmit","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","branchList","branchListloading","branch","CompanyId","useWatch","name","defaultValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","branchId","PDBranchId","percentage","createGstTypeFunc","then","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","message","_ref2","placeholder","inputClassName","step","Loader"],"sourceRoot":""}