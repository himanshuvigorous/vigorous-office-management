{"version":3,"file":"static/js/5046.1965f7c0.chunk.js","mappings":"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","sources":["pages/client/clientManagement/BranchDetails.js"],"sourcesContent":["import { AutoComplete, Input } from \"antd\";\nimport { Controller, useFieldArray, useForm } from \"react-hook-form\";\nimport { inputClassName, inputerrorClassNameAutoComplete, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { citySearch } from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport { stateSearch } from \"../../global/address/state/featureStates/_state_reducers\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { AiFillDelete } from \"react-icons/ai\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteService, updateService } from \"./clientFeatures/_client_reducers\";\nimport { useEffect } from \"react\";\nimport moment from \"moment\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nfunction BranchDetails({ clientData ,fetchData }) {\n    const dispatch = useDispatch();\n    const {\n        register,\n        control,\n        handleSubmit,\n        setValue,\n        watch,\n        formState: { errors },\n        reset\n    } = useForm({\n        defaultValues: {\n            BranchDetails: [{\n                fullName: \"\",\n                userType: \"clientBranch\",\n\n                email: \"\",\n                mobile: { code: \"\", number: \"\" },\n                directorProfile: {\n                    isShareLoginDetails: false,\n                    secondaryEmail: \"\",\n                    secondaryMobile: [{ code: \"\", number: \"\" }],\n                    landline: { code: \"\", number: \"\" }\n                },\n                addresses: { street: \"\", city: \"\", state: \"\", country: \"\", pinCode: \"\" }\n            }]\n        },\n    });\n    const { countryListData,loading:countryListLoading } = useSelector((state) => state.country);\n    const { stateListData } = useSelector((state) => state.states);\n    const { cityListData } = useSelector((state) => state.city);\n    const { fields: branchDetails,\n        append: appendBranch,\n        remove: removeBranch, } = useFieldArray({\n            control,\n            name: \"BranchDetails\"\n        });\n\n    useEffect(() => {\n        if (clientData?.data?.branchData && clientData?.data?.branchData?.length > 0) {\n          const formattedBranchData = clientData?.data?.branchData?.map((eduDetail) => {\n            return {\n              clientData: [], \n              addresses: {\n                street: eduDetail?.addresses?.primary?.street,\n                country: eduDetail?.addresses?.primary?.country,\n                state: eduDetail?.addresses?.primary?.state,\n                city: eduDetail?.addresses?.primary?.city,\n                pinCode: eduDetail?.addresses?.primary?.pinCode,\n              },\n              _id: eduDetail?._id,\n              fullName: eduDetail?.fullName,\n              userType: \"clientOwner\",\n              gst : eduDetail?.branchProfile?.GSTNumber,\n             \n              email: eduDetail?.email,\n              mobile: {\n                  code: eduDetail?.mobile?.code,\n                  number: eduDetail?.mobile?.number,\n              },\n            //   landline: {\n            //       code: eduDetail?.directorProfile?.landline?.code,  \n            //   },\n              branchProfile: {\n\n                  isShareLoginDetails: eduDetail?.branchProfile?.isShareLoginDetails,\n                  secondaryEmail: \"\",\n                  secondaryMobile: {\n                      code: \"\",\n                      number: \"\",\n                  },\n                  landline: {\n                      code: eduDetail?.branchProfile?.landline?.code,\n                      number: eduDetail?.branchProfile?.landline?.number,\n                  },\n              },\n            };\n          });\n    \n          reset({\n            BranchDetails: formattedBranchData,\n          });\n        }\n      }, [clientData, reset]);\n\n      \n    const onSubmit = (data) => {\n    \n\n    \n            const payload = {\n\n                \"companyId\": clientData?.data?.companyId,\n                \"directorId\": \"\",\n                \"branchId\": clientData?.data?.branchId,\n                \"clientId\": clientData?.data?._id,\n                \"type\": \"Branch\",\n                \"branchArr\": data?.BranchDetails?.map((owner) =>{\n                   return {\n                    \"_id\": owner?._id,\n                        \"fullName\": owner?.fullName,\n                        \"userType\": \"clientBranch\",\n                        \"password\": \"\",\n                        \"email\": owner?.email,\n                        \"mobile\": {\n                            \"code\": owner?.mobile?.code,\n                            \"number\": owner?.mobile?.number\n                        },\n                        \n                        \"branchProfile\": {\n                            \"secondaryEmail\": \"\",\n                            \"secondaryMobile\": {\n                                \"code\": \"\",\n                                \"number\": \"\"\n                            },\n                            \"landline\": {\n                                \"code\": null,\n                                \"number\": null\n                            },\n                            GSTNumber: owner?.gst,\n                        },\n                        // \"generalInfo\": {\n                        //     \"gender\": '',\n                        //     \"dateOfBirth\": '',\n                        //     \"maritalStatus\": '',\n                        // },\n                        \"addresses\": {\n                            \"primary\": {\n                                \"street\": owner?.addresses?.street,\n                                \"city\": owner?.addresses?.city,\n                                \"state\": owner?.addresses?.state,\n                                \"country\": owner?.addresses?.country,\n                                \"pinCode\": owner?.addresses?.pinCode\n                            },\n                            \"secondary\": {\n                                \"street\": \"\",\n                                \"city\": \"\",\n                                \"state\": \"\",\n                                \"country\": \"\",\n                                \"pinCode\": \"\"\n                            },\n                            \"location\": {\n                                \"latitude\": 0,\n                                \"longitude\": 0,\n                                \"address\": \"\"\n                            }\n                        }\n                    }\n                }\n                ),\n\n            }\n\n            dispatch(updateService(payload)).then((res)=>{\n                if(!res?.error){\n                    fetchData()\n                }\n            })\n       \n    };\n    const deleteData = (data , index)=>{\n        if(data?._id){\n        dispatch( deleteService({\n             _id:data?._id\n         })).then((res)=>{\n             if(!res?.error){\n                 fetchData()\n             }\n         })\n        }  else {\n            removeBranch(index)\n        }\n     }\n \n    \n    return (\n        <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n            <>\n                {branchDetails.map((item, index) => (\n                    <div key={item.id} className=\"border border-gray-300 rounded-md my-2\">\n                        <div className=\"flex justify-between items-center mb-4 bg-header rounded-t-md\">\n                            <div className=\"px-3 py-2 text-white font-semibold\">Branch {index + 1}</div>\n                            {index !== 0 && <button\n                                type=\"button\"\n                                onClick={() =>deleteData(item, index)}\n                                className=\"text-red-600 hover:text-red-800\"\n                            >\n                                <AiFillDelete size={20} className=\"m-2\" />\n                            </button>}\n\n                        </div>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                            <div>\n                                <label className={`${inputLabelClassName}`}>\n                                    Full Name <span className=\"text-red-600\">*</span>\n                                </label>\n                                <input\n                                placeholder=\"Full Name\"\n                                    {...register(`BranchDetails.${index}.fullName`, { required: \"Full Name is required\" })}\n                                    defaultValue={item.fullName}\n                                    className={`${inputClassName} ${errors?.BranchDetails?.[index]?.fullName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                />\n                                {errors?.BranchDetails?.[index]?.fullName && (\n                                    <p className=\"text-red-500 text-sm\">\n                                        {errors.BranchDetails[index].fullName.message}\n                                    </p>\n                                )}\n                            </div>\n\n\n\n                            <div>\n                                <label className={`${inputLabelClassName}`}>\n                                    Email <span className=\"text-red-600\">*</span>\n                                </label>\n                                <input\n                                placeholder=\"Email\"\n                                    {...register(`BranchDetails.${index}.email`, {\n                                        required: \"Email is required\",\n                                        pattern: {\n                                            value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                                            message: \"Invalid email address\",\n                                        },\n                                    })}\n                                    defaultValue={item.email}\n                                    className={`${inputClassName} ${errors?.BranchDetails?.[index]?.email ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                />\n                                {errors?.BranchDetails?.[index]?.email && (\n                                    <p className=\"text-red-500 text-sm\">\n                                        {errors.BranchDetails[index].email.message}\n                                    </p>\n                                )}\n                            </div>\n\n\n                            <div>\n                                <label className={`${inputLabelClassName}`}>\n                                    Mobile <span className=\"text-red-600\">*</span>\n                                </label>\n\n                                <div className=\"flex gap-2\">\n                                    <div className=\"w-[150px]\">\n                                        <Controller\n                                            control={control}\n                                            name={`BranchDetails.${index}.mobile.code`}\n                                            rules={{ required: \"code is required\" }}\n                                            render={({ field }) => (\n                                                <CustomMobileCodePicker\n                                                field={field}\n                                                  errors={errors} \n                                                />\n                                            )}\n                                        />\n                                    </div>\n                                    <div className=\"w-full\"><input\n                                        type=\"number\"\n                                        {...register(`BranchDetails.${index}.mobile.number`, {\n                                            required: \"Mobile number is required\",\n\n                                            minLength: {\n                                                value: 10,\n                                                message: \"Must be exactly 10 digits\",\n                                            },\n                                            maxLength: {\n                                                value: 10,\n                                                message: \"Must be exactly 10 digits\",\n                                            },\n                                        })}\n                                        maxLength={10}\n                                        onInput={(e) => {\n                                            if (e.target.value.length > 10) {\n                                                e.target.value = e.target.value.slice(0, 10);\n                                            }\n                                        }}\n                                        placeholder=\"Number\"\n                                        className={`${inputClassName} ${errors?.BranchDetails?.[index]?.mobile?.number ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                    />\n\n                                    </div>\n\n\n                                </div>\n                                <div className=\"flex gap-3\">\n                                    {errors?.BranchDetails?.[index]?.mobile?.code && (\n                                        <p className=\"text-red-500 text-sm\">\n                                            {errors.BranchDetails[index].mobile.code.message}\n                                        </p>\n                                    )}\n                                    {errors?.BranchDetails?.[index]?.mobile?.number && (\n                                        <p className=\"text-red-500 text-sm\">\n                                            {errors.BranchDetails[index].mobile.number.message}\n                                        </p>\n                                    )}\n                                </div>\n                            </div>\n                            <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        GST Number \n                      </label>\n                      <input\n                        type=\"text\"\n                        {...register(`BranchDetails.${index}.gst`, {\n                          // required: \"GST Number is required\",\n                          pattern: {\n                            value: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}[Z]{1}[0-9A-Z]{1}$/,\n                            message: \"Invalid GST Number format (29AAACH7409R1ZX)\",\n                          },\n\n                        })}\n                        className={` ${inputClassName} ${errors.BranchDetails?.[index]?.gst ? \"border-[1px] \" : \"border-gray-300\"\n                          }`}\n                        placeholder=\"Enter GST Number\"\n                        maxLength={15}\n                      />\n                      {errors.BranchDetails?.[index]?.gst && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.BranchDetails?.[index]?.gst.message}\n                        </p>\n                      )}\n                    </div>\n                            \n                            {/* <div>\n                                <label className={`${inputLabelClassName}`}>\n                                    Landline\n                                </label>\n                                <div className=\"flex gap-2\">\n                                    <div className=\"w-[150px]\">\n                                        <Controller\n                                            control={control}\n                                            name={`BranchDetails.${index}.branchProfile.landline.code`}\n                                        \n                                            render={({ field }) => (\n                                                <CustomMobileCodePicker\n                                                field={field}\n                                                  errors={errors} \n                                                />\n                                            )}\n                                        /> </div>\n                                    <div className=\"w-full\">\n                                        <input\n                                            type=\"number\"\n                                            {...register(`BranchDetails.${index}.branchProfile.landline.number`,{\n                                                minLength: {\n                                                    value: 10,\n                                                    message: \"Must be exactly 10 digits\",\n                                                },\n                                                maxLength: {\n                                                    value: 10,\n                                                    message: \"Must be exactly 10 digits\",\n                                                },\n                                            })}\n                                            maxLength={10}\n                                            onInput={(e) => {\n                                                if (e.target.value.length > 10) {\n                                                    e.target.value = e.target.value.slice(0, 10);\n                                                }\n                                            }}\n                                            placeholder=\"Number\"\n                                            className={`${inputClassName} ${errors?.BranchDetails?.[index]?.branchProfile?.landline?.number ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                        />\n                                    </div>\n                                </div>\n                            </div> */}\n                        </div>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                            <div className=\"col-span-2\">\n                                <label className={`${inputLabelClassName}`}>\n                                    Primary Address<span className=\"text-red-600\">*</span>\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    {...register(`BranchDetails.${index}.addresses.street`, {\n                                        required: \"Primary Address is required\",\n                                    })}\n                                    className={`${inputClassName} ${errors.BranchDetails?.[index]?.addresses?.street ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                    placeholder=\"Enter Primary Address\"\n                                />\n                                {errors.BranchDetails?.[index]?.addresses?.street && (\n                                    <p className=\"text-red-500 text-sm\">\n                                        {errors.BranchDetails?.[index]?.addresses?.street.message}\n                                    </p>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 md:my-1 px-3\">\n\n                            <div>\n                                <div className={`${inputLabelClassName}`}>\n                                    Country <span className=\"text-red-600\">*</span>\n                                </div>\n                                <Controller\n                                    control={control}\n                                    name={`BranchDetails.${index}.addresses.country`}\n                                    rules={{ required: \"Country is required\" }}\n                                    render={({ field }) => (\n                                        <AutoComplete\n                                            {...field}\n                                            onChange={(value) => field.onChange(value)} // Handle country change\n                                            className=\"w-full\"\n                                            options={sortByPropertyAlphabetically(countryListData?.docs)?.map((type) => ({\n                                                value: type?.name,\n                                            }))}\n                                            notFoundContent={countryListLoading && <ListLoader/>}\n                                        >\n                                            <input\n                                                placeholder=\"Enter Country\"\n                                                onFocus={() => {\n                                                    dispatch(\n                                                        countrySearch({\n                                                            isPagination: false,\n                                                            text: \"\",\n                                                            sort: true,\n                                                            status: true,\n                                                        })\n                                                    );\n                                                }}\n                                                className={`${inputClassName} ${errors.BranchDetails?.[index]?.addresses?.country\n                                                    ? \"border-[1px] \"\n                                                    : \"border-gray-300\"\n                                                    }`}\n                                            />\n                                        </AutoComplete>\n                                    )}\n                                />\n                                {errors.BranchDetails?.[index]?.addresses?.country && (\n                                    <p className={`${inputerrorClassNameAutoComplete}`}>\n                                        {errors.BranchDetails[index].addresses.country.message}\n                                    </p>\n                                )}\n                            </div>\n                            <div>\n                                <div className={`${inputLabelClassName}`}>\n                                    State <span className=\"text-red-600\">*</span>\n                                </div>\n                                <Controller\n                                    control={control}\n                                    name={`BranchDetails.${index}.addresses.state`}\n                                    rules={{ required: \"State is required\" }}\n                                    render={({ field }) => (\n                                        <AutoComplete\n                                            {...field}\n                                            onChange={(value) => field.onChange(value)} // Handle state change\n                                            className=\"w-full\"\n                                            options={sortByPropertyAlphabetically(stateListData?.docs)?.map((type) => ({\n                                                value: type?.name,\n                                            }))}\n                                            notFoundContent={<ListLoader/>}\n                                        >\n                                            <input\n                                                placeholder=\"Enter State\"\n                                                onFocus={() => {\n                                                    dispatch(\n                                                        stateSearch({\n                                                            isPagination: false,\n                                                            text: \"\",\n                                                            countryName: watch(`BranchDetails.${index}.addresses.country`),\n                                                            sort: true,\n                                                            status: true,\n                                                        })\n                                                    );\n                                                }}\n                                                className={`${inputClassName} ${errors.BranchDetails?.[index]?.addresses?.state\n                                                    ? \"border-[1px] \"\n                                                    : \"border-gray-300\"\n                                                    }`}\n                                            />\n                                        </AutoComplete>\n                                    )}\n                                />\n                                {errors.BranchDetails?.[index]?.addresses?.state && (\n                                    <p className={`${inputerrorClassNameAutoComplete}`}>\n                                        {errors.BranchDetails[index].addresses.state.message}\n                                    </p>\n                                )}\n                            </div>\n\n                            <div>\n                                <div className={`${inputLabelClassName}`}>\n                                    City <span className=\"text-red-600\">*</span>\n                                </div>\n                                <Controller\n                                    control={control}\n                                    name={`BranchDetails.${index}.addresses.city`}\n                                    rules={{ required: \"City is required\" }}\n                                    render={({ field }) => (\n                                        <AutoComplete\n                                            {...field}\n                                            onChange={(value) => field.onChange(value)} // Handle city change\n                                            className=\"w-full\"\n                                            options={sortByPropertyAlphabetically(cityListData?.docs)?.map((type) => ({\n                                                value: type?.name,\n                                            }))}\n                                            notFoundContent={<ListLoader/>}\n                                        >\n                                            <input\n                                                placeholder=\"Enter City\"\n                                                onFocus={() => {\n                                                    dispatch(\n                                                        citySearch({\n                                                            isPagination: false,\n                                                            text: \"\",\n                                                            sort: true,\n                                                            status: true,\n                                                            stateName: watch(`BranchDetails.${index}.addresses.state`),\n                                                        })\n                                                    );\n                                                }}\n                                                className={`${inputClassName} ${errors.BranchDetails?.[index]?.addresses?.city\n                                                    ? \"border-[1px] \"\n                                                    : \"border-gray-300\"\n                                                    }`}\n                                            />\n                                        </AutoComplete>\n                                    )}\n                                />\n                                {errors.BranchDetails?.[index]?.addresses?.city && (\n                                    <p className={`${inputerrorClassNameAutoComplete}`}>\n                                        {errors.BranchDetails[index].addresses.city.message}\n                                    </p>\n                                )}\n                            </div>\n                            {/* Pin Code Field */}\n                            <div>\n                                <label className={`${inputLabelClassName}`}>\n                                    Pin Code <span className=\"text-red-600\">*</span>\n                                </label>\n                                <Controller\n                                    control={control}\n                                    name={`BranchDetails.${index}.addresses.pinCode`}\n                                    rules={{ required: \"Pin Code is required\" }}\n                                    render={({ field }) => (\n                                        <input\n                                            {...field}\n                                            type=\"number\"\n                                            placeholder=\"Enter Pin Code\"\n                                            maxLength={6}\n                                            onInput={(e) => {\n                                                if (e.target.value.length > 6) {\n                                                    e.target.value = e.target.value.slice(0, 6);\n                                                }\n                                            }}\n                                            className={`${inputClassName} ${errors.BranchDetails?.[index]?.addresses?.pinCode\n                                                ? \"border-[1px] \"\n                                                : \"border-gray-300\"\n                                                }`}\n                                        />\n                                    )}\n                                />\n                                {errors.BranchDetails?.[index]?.addresses?.pinCode && (\n                                    <p className=\"text-red-500 text-sm\">\n                                        {errors.BranchDetails[index].addresses.pinCode.message}\n                                    </p>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                ))}\n                <div className=\"flex gap-2 justify-between items-center my-2\">\n                    <button\n                        type=\"button\"\n                        onClick={() => appendBranch({\n                            fullName: \"\",\n                            userType: \"clientBranch\",\n\n                            email: \"\",\n                            mobile: { code: \"\", number: \"\" },\n                            directorProfile: {\n                                isShareLoginDetails: false,\n                                secondaryEmail: \"\",\n                                secondaryMobile: [{ code: \"\", number: \"\" }],\n                                landline: { code: \"\", number: \"\" }\n                            },\n                            addresses: { street: \"\", city: \"\", state: \"\", country: \"\", pinCode: \"\" }\n                        })}\n                        className=\"bg-header px-2 py-2 text-sm rounded-md text-white\"\n                    >\n                        Add New Branch\n                    </button>\n\n                    <button type=\"submit\" className=\"bg-header px-2 py-2 text-sm rounded-md text-white\">\n                        Submit\n                    </button></div>\n            </>\n        </form>\n    )\n}\n\nexport default BranchDetails\n"],"names":["_ref","clientData","fetchData","dispatch","useDispatch","register","control","handleSubmit","setValue","watch","formState","errors","reset","useForm","defaultValues","BranchDetails","fullName","userType","email","mobile","code","number","directorProfile","isShareLoginDetails","secondaryEmail","secondaryMobile","landline","addresses","street","city","state","country","pinCode","countryListData","loading","countryListLoading","useSelector","stateListData","states","cityListData","fields","branchDetails","append","appendBranch","remove","removeBranch","useFieldArray","name","useEffect","_clientData$data","_clientData$data2","_clientData$data2$bra","data","branchData","length","_clientData$data3","_clientData$data3$bra","formattedBranchData","map","eduDetail","_eduDetail$addresses","_eduDetail$addresses$","_eduDetail$addresses2","_eduDetail$addresses3","_eduDetail$addresses4","_eduDetail$addresses5","_eduDetail$addresses6","_eduDetail$addresses7","_eduDetail$addresses8","_eduDetail$addresses9","_eduDetail$branchProf","_eduDetail$mobile","_eduDetail$mobile2","_eduDetail$branchProf2","_eduDetail$branchProf3","_eduDetail$branchProf4","_eduDetail$branchProf5","_eduDetail$branchProf6","primary","_id","gst","branchProfile","GSTNumber","_jsx","autoComplete","onSubmit","_clientData$data4","_clientData$data5","_clientData$data6","_data$BranchDetails","payload","companyId","branchId","owner","_owner$mobile","_owner$mobile2","_owner$addresses","_owner$addresses2","_owner$addresses3","_owner$addresses4","_owner$addresses5","updateService","then","res","error","children","_jsxs","_Fragment","item","index","_errors$BranchDetails","_errors$BranchDetails2","_errors$BranchDetails3","_errors$BranchDetails4","_errors$BranchDetails5","_errors$BranchDetails6","_errors$BranchDetails7","_errors$BranchDetails8","_errors$BranchDetails9","_errors$BranchDetails0","_errors$BranchDetails1","_errors$BranchDetails10","_errors$BranchDetails11","_errors$BranchDetails12","_errors$BranchDetails13","_errors$BranchDetails14","_errors$BranchDetails15","_errors$BranchDetails16","_errors$BranchDetails17","_errors$BranchDetails18","_errors$BranchDetails19","_errors$BranchDetails20","_errors$BranchDetails21","_errors$BranchDetails22","_errors$BranchDetails23","_errors$BranchDetails24","_errors$BranchDetails25","_errors$BranchDetails26","_errors$BranchDetails27","_errors$BranchDetails28","_errors$BranchDetails29","_errors$BranchDetails30","_errors$BranchDetails34","_errors$BranchDetails35","_errors$BranchDetails36","_errors$BranchDetails40","_errors$BranchDetails41","_errors$BranchDetails42","_errors$BranchDetails46","_errors$BranchDetails47","_errors$BranchDetails48","_errors$BranchDetails52","_errors$BranchDetails53","_errors$BranchDetails54","className","type","onClick","deleteData","deleteService","AiFillDelete","size","concat","inputLabelClassName","_objectSpread","placeholder","required","defaultValue","inputClassName","message","pattern","value","Controller","rules","render","_ref2","field","CustomMobileCodePicker","minLength","maxLength","onInput","e","target","slice","_ref3","_sortByPropertyAlphab","_errors$BranchDetails31","_errors$BranchDetails32","_errors$BranchDetails33","AutoComplete","onChange","options","sortByPropertyAlphabetically","docs","notFoundContent","ListLoader","onFocus","countrySearch","isPagination","text","sort","status","inputerrorClassNameAutoComplete","_ref4","_sortByPropertyAlphab2","_errors$BranchDetails37","_errors$BranchDetails38","_errors$BranchDetails39","stateSearch","countryName","_ref5","_sortByPropertyAlphab3","_errors$BranchDetails43","_errors$BranchDetails44","_errors$BranchDetails45","citySearch","stateName","_ref6","_errors$BranchDetails49","_errors$BranchDetails50","_errors$BranchDetails51","id"],"sourceRoot":""}