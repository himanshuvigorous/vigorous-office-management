{"version":3,"file":"static/js/6174.fbc846bb.chunk.js","mappings":"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","sources":["pages/branch/branchManagement/GoogleMapEdit.js","global_layouts/Loader/Loader.js","pages/branch/branchManagement/MyBranchDetails.js"],"sourcesContent":["import {\n    GoogleMap,\n    LoadScript,\n    Marker,\n    Autocomplete,\n  } from \"@react-google-maps/api\";\n  import React, { useEffect, useState, useRef } from \"react\";\n  import { inputClassName } from \"../../../constents/global\";\n  \n  const containerStyle = {\n    width: \"100%\",\n    height: \"90%\",\n  };\n  \n  const GoogleMapContainerEdit = ({\n    setLocation,\n    setClickLocationaddres,\n    innitialLocation\n  }) => {\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    const [clickedLocation, setClickedLocation] = useState(null);\n    const [currentLocation, setCurrentLocation] = useState(null);\n    const autocompleteRef = useRef(null);\n    const mapRef = useRef(null);\n\n\n  \n    const getFullAddress = (lat, lng) => {\n      if (!window.google || !window.google.maps || !window.google.maps.Geocoder) {\n        console.error(\"Google Maps API is not loaded properly.\");\n        return;\n      }\n  \n      const geocoder = new window.google.maps.Geocoder();\n  \n      geocoder.geocode({ location: { lat, lng } }, (results, status) => {\n        if (status === \"OK\" && results[0]) {\n          const addressComponents = results[0].address_components;\n          const formattedAddress = results[0].formatted_address;\n  \n          const country = addressComponents.find((comp) =>\n            comp.types.includes(\"country\")\n          )?.long_name;\n          const state = addressComponents.find((comp) =>\n            comp.types.includes(\"administrative_area_level_1\")\n          )?.long_name;\n          const city = addressComponents.find((comp) =>\n            comp.types.includes(\"locality\")\n          )?.long_name;\n          const postalCode = addressComponents.find((comp) =>\n            comp.types.includes(\"postal_code\")\n          )?.long_name;\n  \n          setClickLocationaddres({\n            address: formattedAddress,\n            country,\n            state,\n            city,\n            postalCode,\n          });\n        } else {\n          console.error(\"Geocoder failed due to: \", status);\n        }\n      });\n    };\n\n    const handleMapClick = (event) => {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      setClickedLocation({ lat, lng });\n      getFullAddress(lat, lng); \n    };\n  \n    const handlePlaceSelect = () => {\n      if (autocompleteRef.current) {\n        const place = autocompleteRef.current.getPlace();\n        if (place.geometry) {\n          const location = {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n          };\n          setClickedLocation(location);\n          mapRef.current.panTo(location);\n          getFullAddress(location.lat, location.lng);\n        }\n      }\n    };\n  \n    useEffect(() => {\nif(innitialLocation?.latitude && innitialLocation?.longitude ){\n  const location = { lat: innitialLocation?.latitude, lng: innitialLocation?.longitude };\n  setCurrentLocation(location);\n  setClickedLocation(location);\n}\n    }, [innitialLocation]);\n  \n    useEffect(() => {\n      if (clickedLocation) {\n        setLocation(clickedLocation);\n      }\n    }, [clickedLocation]);\n  \n\n    return (\n      <div className=\"p-3 m-2 min-h-[400px]\">\n        {/* <LoadScript googleMapsApiKey={apiKey} libraries={[\"places\"]}> */}\n          <div className=\"mb-3\">\n            <Autocomplete\n              onLoad={(ref) => (autocompleteRef.current = ref)}\n              onPlaceChanged={handlePlaceSelect}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Search for a place\"\n                className={`${inputClassName}`}\n              />\n            </Autocomplete>\n          </div>\n  \n          <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={currentLocation || { lat: 0, lng: 0 }}\n            zoom={(currentLocation ) ? 17 : 2}\n            onClick={handleMapClick}\n            onLoad={(map) => (mapRef.current = map)}\n            options={{\n              disableDefaultUI: false,\n              zoomControl: true,\n              fullscreenControl: true,\n              mapTypeControl: true,\n              streetViewControl: true,\n            }}\n          >\n            {clickedLocation && (\n              <Marker\n                position={clickedLocation}\n                icon=\"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n              />\n            )}\n          </GoogleMap>\n        {/* </LoadScript> */}\n      </div>\n    );\n  };\n  \n  export default GoogleMapContainerEdit;\n  ","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n","\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LiaEditSolid } from \"react-icons/lia\";\nimport {\n  domainName,\n  formButtonClassName,\n  getLocationDataByPincode,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputDisabledClassName,\n  inputerrorClassNameAutoComplete,\n  inputLabelClassName,\n} from \"../../../constents/global.js\";\nimport { FaCamera, FaUserAlt } from \"react-icons/fa\";\nimport { AiFillDelete, AiFillInstagram } from \"react-icons/ai\";\nimport { IoLogoFacebook } from \"react-icons/io\";\nimport { TbEditOff, TbWorld } from \"react-icons/tb\";\nimport { FaSquareXTwitter } from \"react-icons/fa6\";\nimport { showNotification } from \"../../../global_layouts/CustomNotification/NotificationManager.js\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { countrySearch, getCountryListFunc } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { getStateList, stateSearch } from \"../../global/address/state/featureStates/_state_reducers\";\nimport { citySearch, getCityList } from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport { empDoctSearch, getEmployeeDocument } from \"../../global/other/employeeDocument/EmployeeDocumentFeatures/_emp_document_reducers\";\nimport { decrypt } from \"../../../config/Encryption.js\";\nimport {\n  getBranchDetails,\n  updateBranch,\n} from \"./branchFeatures/_branch_reducers.js\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers.js\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers.js\";\nimport {\n  deleteDocument,\n  fileUploadFunc,\n  updateDocument,\n} from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers.js\";\nimport Loader from \"../../../global_layouts/Loader/Loader.js\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport GoogleMapContainerEdit from \"./GoogleMapEdit.js\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker.js\";\nimport Swal from \"sweetalert2\";\nimport { banknameSearch } from \"../../global/other/bankname/bankNameFeatures/_bankName_reducers.js\";\nimport CommonImageViewer from \"../../../global_layouts/ImageViewrModal/CommonImageViewer.js\";\nimport getUserIds from \"../../../constents/getUserIds.js\";\n\nconst MyBranchDetails = () => {\n const branchId = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  )?._id;\n  const [clickedLocationAddress, setClickLocationaddres] = useState(null);\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [pageLoading, setPageLoading] = useState(true);\n  const [documents, setDocuments] = useState([\n    { id: 1, documentType: \"\", documentNo: \"\", file: [] ,isEditable:false},\n  ]);\n  const [banks, setBanks] = useState([1]);\n  const [profileImage, setProfileImage] = useState(null);\n  const [profileImagePayload, setProfileImagePayload] = useState();\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const { employeeDocumentList } = useSelector(\n    (state) => state.employeeDocument\n  );\n  const { bankNameListData } = useSelector((state) => state.bankname);\n  const { loadingUpdateFile } = useSelector((state) => state.fileUpload);\n\n  const [fileName, setFileName] = useState({});\n  const [fileUrl, setFileUrl] = useState({});\n  const [location, setLocation] = useState({});\n  const { branchDetailsData } = useSelector((state) => state.branch);\n  const [formErrors, setFormErrors] = useState([]);\n  const [doctformErrors, setDoctFormErrors] = useState([]);\n  const userType = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  )?.userType;\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    clearErrors,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const PrintAddress = useWatch({\n    control,\n    name: \"PDAddress\",\n    defaultValue: \"\",\n  });\n  const PrintState = useWatch({\n    control,\n    name: \"PDState\",\n    defaultValue: \"\",\n  });\n  const PrintCountry = useWatch({\n    control,\n    name: \"PDcountry\",\n    defaultValue: \"\",\n  });\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPin\",\n    defaultValue: \"\",\n  });\n\n  useEffect(() => {\n    if (\n      PrintPincode &&\n      PrintPincode.length >=4 &&\n      PrintPincode.length <= 6 &&\n      /^\\d{6}$/.test(PrintPincode)\n    ) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data.city);\n            setValue(\"PDState\", data.state);\n            setValue(\"PDCountry\", data.country);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setPageLoading(true);\n        // await dispatch(\n        //   countrySearch({\n        //     isPagination: false,\n        //     text: \"\",\n        //     sort: true,\n        //     status: true,\n        //   })\n        // );\n        // await dispatch(\n        //   stateSearch({ isPagination: false, text: \"\", sort: true, status: true })\n        // );\n        // await dispatch(\n        //   citySearch({ isPagination: false, text: \"\", sort: true, status: true })\n        // );\n               await dispatch(empDoctSearch({ isPagination:false, companyId:getUserIds()?.userCompanyId,}));\n        const reqData = {\n          _id: branchId,\n        };\n        await dispatch(getBranchDetails(reqData)).then((data) => {\n          setPageLoading(false);\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setPageLoading(true);\n        await dispatch(banknameSearch({ isPagination: false, text: \"\", sort: true, status: true }));\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (branchDetailsData?.data) {\n      const documentData = branchDetailsData?.data?.documentData?.length ? branchDetailsData?.data?.documentData?.map(\n        (document) => {\n          return {\n            _id: document?._id,\n            documentType: document?.name,\n            documentNo: document?.number,\n            file: document?.filePath,\n             isEditable: false,\n          };\n        }\n      ) : [\n            {\n              _id: '',\n              documentType: \"\",\n              documentNo: \"\",\n              file: [],\n              isEditable: true,\n            },\n          ];\n     \n        setDocuments([...documentData]) \n      setProfileImage(\n        `${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${branchDetailsData?.data?.profileImage}`\n      );\n      setValue(\"PDcompanyName\", branchDetailsData?.data?.fullName);\n      setValue(\"PDFirstName\", branchDetailsData?.data?.firstName);\n      setValue(\"PDLastName\", branchDetailsData?.data?.lastName);\n      setValue(\"PDtagline\", branchDetailsData?.data?.companyProfile?.tagline);\n\n      setValue(\n        \"PDBranchCode\",\n        branchDetailsData?.data?.branchProfile?.branchCode\n      );\n      setValue(\n        \"PDAddress\",\n        branchDetailsData?.data?.addresses?.primary?.street\n      );\n      setValue(\n        \"PDcountry\",\n        branchDetailsData?.data?.addresses?.primary?.country\n      );\n      setValue(\"PDState\", branchDetailsData?.data?.addresses?.primary?.state);\n      setValue(\"PDCity\", branchDetailsData?.data?.addresses?.primary?.city);\n      setValue(\"PDPin\", branchDetailsData?.data?.addresses?.primary?.pinCode);\n      setValue(\"PDEmail\", branchDetailsData?.data?.email);\n      setValue(\"PDMobileCode\", branchDetailsData?.data?.mobile?.code);\n      setValue(\"PDMobileNo\", branchDetailsData?.data?.mobile?.number);\n      setValue(\"PDaadharNumber\", branchDetailsData?.data?.aadharNumber);\n      setValue(\"PDgstnumber\", branchDetailsData?.data?.gstNumber);\n      setValue(\"PDpannumber\", branchDetailsData?.data?.panNumber);\n      setValue(\"PDfrn\", branchDetailsData?.data?.frn);\n      setValue(\"PDtannumber\", branchDetailsData?.data?.tanNumber);\n      setValue(\"DCdocumenttype0\", branchDetailsData?.data?.documentType0);\n      setValue(\"DCdocumentno0\", branchDetailsData?.data?.documentNo0);\n      setValue(\"DCdocumentUpload0\", branchDetailsData?.data?.documentUpload0);\n      setValue(\"PDBranchHead\", branchDetailsData?.data?.branchProfile?.head);\n      // setValue(\"PDRemark\", branchDetailsData?.data?.branchProfile?.remarks);\n      branchDetailsData?.data?.documentData?.forEach((doc, index) => {\n        setValue(`DCdocumentId${index}`, doc?._id);\n        setValue(`DCdocumenttype${index}`, doc?.name);\n        setValue(`DCdocumentno${index}`, doc?.number);\n        setValue(`DCdocumentUpload${index}`, doc?.filePath);\n      });\n\n      const bankData = branchDetailsData?.data?.bankData?.length\n        ? branchDetailsData.data.bankData.map((bank) => ({\n          _id: bank?._id || \"\",\n          accountType: bank?.accountType || \"\",\n          bankName: bank?.bankName || \"\",\n          branchName: bank?.branchName || \"\",\n          bankholderName: bank?.bankholderName || \"\",\n          accountNumber: bank?.accountNumber || \"\",\n          openingBalance:bank?.openingBalance||'',\n          ifscCode: bank?.ifscCode || \"\",\n          file: bank?.filePath || [],\n        }))\n        : [\n          {\n            _id: \"\",\n            accountType: \"\",\n            bankName: \"\",\n            branchName: \"\",\n            bankholderName: \"\",\n            accountNumber: \"\",\n             openingBalance:'',\n            ifscCode: \"\",\n            file: [],\n          },\n        ];\n\n      setBanks([...bankData]);\n    }\n  }, [branchDetailsData]);\n\n  const handleAddMore = () => {\n    setDocuments([...documents, { id: Date.now() ,isEditable:true}]);\n  };\n\n  const handleDocsFileChange = (name, e, path) => {\n    const file = e.target.files[0];\n    dispatch(\n      fileUploadFunc({\n        filePath: file,\n        isVideo: false,\n        isMultiple: false,\n      })\n    ).then((res) => {\n      setValue(path, res?.payload?.data);\n    });\n    clearErrors(path);\n\n    if (file) {\n      setFileName((prevState) => ({\n        ...prevState,\n        [name]: file.name,\n      }));\n      const url = URL.createObjectURL(file);\n      setFileUrl((prevState) => ({\n        ...prevState,\n        [name]: url,\n      }));\n    }\n  };\n\n  const handleBankAddMore = () => {\n    setBanks([...banks, { id: Date.now() }]);\n  };\n\n  const handleInputChangeBank = (index, field, value) => {\n    const updatedBanks = [...banks];\n    const newFormErrors = [...formErrors];\n\n    if (field === \"ifscCode\") {\n      const ifscPattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n\n      if (!ifscPattern.test(value)) {\n        if (!newFormErrors[index]) newFormErrors[index] = {};\n        newFormErrors[index][field] = \"Invalid IFSC code. Example: SBIN0001234\";\n      } else {\n        if (newFormErrors[index]?.[field]) {\n          delete newFormErrors[index][field];\n        }\n      }\n    }\n\n    if (field === \"accountNumber\") {\n      const accountPattern = /^\\d{6,18}$/;\n\n      if (!accountPattern.test(value)) {\n        if (!newFormErrors[index]) newFormErrors[index] = {};\n        newFormErrors[index][field] =\n          \"Invalid account number. Must be 6 to 18 digits.\";\n      } else {\n        if (newFormErrors[index]?.[field]) {\n          delete newFormErrors[index][field];\n        }\n      }\n    }\n\n    updatedBanks[index][field] = value;\n    setBanks(updatedBanks);\n    setFormErrors(newFormErrors);\n  };\n\n  const handleBankFileChange = (index, file) => {\n\n    if (!file) return;\n\n    // Variable to track the newly selected file\n    let selectedFile = file;\n\n    // Create a preview of the file\n    const fileReader = new FileReader();\n    let filePreviewUrl = '';\n\n    fileReader.onload = (e) => {\n      filePreviewUrl = e.target.result;\n\n      // Show SweetAlert to confirm upload\n      Swal.fire({\n        title: 'Preview your file',\n        html: `\n          <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n            <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n            <img id=\"filePreview\" src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">\n            <br>\n            <button id=\"changeImageBtn\" style=\"  margin-top: 15px;\n  padding: 10px 18px;\n  cursor: pointer;\n  background-color: #074173;\n  color: white;\n  font-size: 16px;\n  font-weight: 600;\n  border: none;\n  border-radius: 8px;\n  transition: background-color 0.3s, transform 0.2s;\n  box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);\">Change Image</button>\n            <input type=\"file\" id=\"fileInput\" style=\"display: none;\" accept=\"image/*\">\n          </div>\n        `,\n        showCancelButton: true,\n        confirmButtonText: 'Confirm!',\n        cancelButtonText: 'Cancel',\n        didOpen: () => {\n          // Attach the change image functionality to the button\n          const changeImageBtn = document.getElementById('changeImageBtn');\n          const fileInput = document.getElementById('fileInput');\n          const filePreview = document.getElementById('filePreview');\n\n          changeImageBtn.addEventListener('click', () => {\n            fileInput.click(); // Trigger file input click\n          });\n\n          // When a new file is selected\n          fileInput.addEventListener('change', (event) => {\n            const newFile = event.target.files[0];\n            if (newFile) {\n              selectedFile = newFile; // Update the selected file\n              const newFileReader = new FileReader();\n              newFileReader.onload = (e) => {\n                filePreview.src = e.target.result; // Update preview\n              };\n              newFileReader.readAsDataURL(newFile);\n            }\n          });\n        }\n      }).then((result) => {\n        if (result.isConfirmed) {\n          dispatch(\n            fileUploadFunc({\n              filePath: selectedFile,\n              isVideo: false,\n              isMultiple: false,\n            })\n          ).then((data) => {\n            if (!data.error) {\n              const updatedBanks = [...banks];\n              updatedBanks[index].file = [data?.payload?.data];\n              setDocuments(updatedBanks);\n              const newFormErrors = [...formErrors];\n              if (newFormErrors[index]?.file) {\n                delete newFormErrors[index].file;\n              }\n              setFormErrors(newFormErrors);\n            }\n          });\n        } else {\n          // Handle the cancel case\n      \n        }\n      });\n    };\n\n    // Read the file to generate the preview\n    fileReader.readAsDataURL(file);\n  }\n\n  const handleDeleteBankImage = (index, file) => {\n    const updatedBanks = [...banks];\n    updatedBanks[index].file = [];\n    setBanks(updatedBanks);\n  };\n\n  const handleBankDelete = (bank, index) => {\n    if (bank?._id) {\n      dispatch(deleteDocument({ _id: bank?._id })).then((data) => {\n        if (!data.error) {\n          setBanks((prevBanks) =>\n            prevBanks.filter((_, index2) => index2 !== index)\n          );\n        }\n      });\n    } else {\n      setBanks((prevBanks) =>\n        prevBanks.filter((_, index2) => index2 !== index)\n      );\n    }\n  };\n\n  const validateBankForm = () => {\n    let errors = [];\n    banks.forEach((bank, index) => {\n      let error = {};\n      if (!bank.accountType) {\n        error.accountType = \"Account Type is required.\";\n      }\n      if (!bank.bankholderName) {\n        error.bankholderName = \"Account Holder name is required.\";\n      }\n      if (!bank.accountNumber) {\n        error.accountNumber = \"Account No is required.\";\n      }\n      if (!bank.bankName) {\n        error.bankName = \"Bank Name is required.\";\n      }\n      if (!bank.branchName) {\n        error.branchName = \"Branch Name is required.\";\n      }\n      if (!bank.ifscCode) {\n        error.ifscCode = \"Ifsc code is required.\";\n      }\n\n     \n      // if (!bank.file || bank.file.length === 0) {\n      //   error.file = \"Bank file is required.\";\n      // }\n      if (Object.keys(error).length > 0) {\n        errors[index] = error;\n      }\n    });\n\n    setFormErrors(errors);\n    return errors.every((error) => Object.keys(error).length === 0);\n  };\n\n  const handleEditButton = (index) => {\n    setDocuments((prevDocuments) =>\n      prevDocuments.map((doc, i) =>\n      i === index ? { ...doc, isEditable: !doc.isEditable } : doc\n      )\n    );\n    \n  };\n\n  const onSubmit = (data) => {\n    if (step === 1) {\n      const finalPayload = {\n        _id: branchId,\n        companyId: branchDetailsData?.data?.companyId,\n        directorId: branchDetailsData?.data?.directorId,\n        branchId: branchId,\n        fullName: data?.PDcompanyName,\n        email: data?.PDEmail,\n        userType: \"companyBranch\",\n        profileImage: \"\",\n        status: branchDetailsData?.data?.status,\n        mobile: {\n          code: data?.PDMobileCode,\n          number: data?.PDMobileNo,\n        },\n        branchProfile: {\n          head: data?.PDBranchHead,\n          // remarks: data?.PDRemark,\n        },\n        addresses: {\n          primary: {\n            street: data?.PDAddress ?? \"\",\n            city: data?.PDCity ?? \"\",\n            state: data?.PDState ?? \"\",\n            country: data?.PDcountry ?? \"\",\n            pinCode: data?.PDPin,\n          },\n          location: {\n            latitude: location?.lat,\n            longitude: location?.lng,\n            address: data?.PDAddress,\n          },\n        },\n      };\n\n      dispatch(updateBranch(finalPayload));\n    }\n    if (step === 2) {\n      if (validateForm()) {\n        const documentPayload = documents.map((doc, index) => {\n          if (doc?._id) {\n            return {\n              userId: branchId,\n              _id: doc?._id,\n\n              name: doc?.documentType,\n              number: doc?.documentNo,\n              filePath: doc?.file,\n            };\n          } else {\n            return {\n              userId: branchId,\n              name: doc?.documentType,\n              number: doc?.documentNo,\n              filePath: doc?.file,\n            };\n          }\n        });\n        const finalPayload = {\n          documents: documentPayload,\n          userType: \"companyBranch\",\n          type: \"documents\",\n        };\n        dispatch(updateDocument(finalPayload)).then((data) => {\n          if (!data.error) {\n            dispatch(\n              getBranchDetails({\n                _id: branchId,\n              })\n            );\n          }\n        });\n      }\n    }\n    if (step === 3) {\n      if (validateBankForm()) {\n        const bankPayload = banks.map((bank, index) => {\n          if (bank?._id) {\n            return {\n              userId: branchId,\n              _id: bank?._id,\n              bankholderName: bank?.bankholderName,\n              bankName: bank?.bankName,\n              accountNumber: bank?.accountNumber,\n              branchName: bank?.branchName,\n               openingBalance:bank?.openingBalance,\n              ifscCode: bank?.ifscCode,\n              accountType: bank?.accountType,\n              filePath: bank?.file,\n            };\n          } else {\n            return {\n              userId: branchId,\n              bankholderName: bank?.bankholderName,\n              bankName: bank?.bankName,\n              accountNumber: bank?.accountNumber,\n              branchName: bank?.branchName,\n               openingBalance:bank?.openingBalance,\n              ifscCode: bank?.ifscCode,\n              accountType: bank?.accountType,\n              filePath: bank?.file,\n            };\n          }\n        });\n\n        const finalPayload = {\n          bank: bankPayload,\n          type: \"bank\",\n        };\n        dispatch(updateDocument(finalPayload)).then((data) => {\n          if (!data.error) {\n            dispatch(\n              getBranchDetails({\n                _id: branchId,\n              })\n            );\n          }\n        });\n      }\n    }\n  };\n\n  const navTabClick = (clickedStep) => {\n    if (clickedStep < step) {\n      setStep(clickedStep);\n    } else {\n      setStep(clickedStep);\n    }\n  };\n\n  const handleInputChange = (index, field, value) => {\n    const updatedDocuments = [...documents];\n    updatedDocuments[index][field] = value;\n    setDocuments(updatedDocuments);\n    const newFormErrors = [...doctformErrors];\n    if (newFormErrors[index]?.[field]) {\n      delete newFormErrors[index][field];\n    }\n    setDoctFormErrors(newFormErrors);\n  };\n\n  const handleFileChange = (index, file) => {\n    if (!file) return;\n\n    // Variable to track the newly selected file\n    let selectedFile = file;\n\n    // Create a preview of the file\n    const fileReader = new FileReader();\n    let filePreviewUrl = '';\n\n    fileReader.onload = (e) => {\n      filePreviewUrl = e.target.result;\n\n      // Show SweetAlert to confirm upload\n      Swal.fire({\n        title: 'Preview your file',\n        html: `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n              <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n              <img id=\"filePreview\" src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">\n              <br>\n              <button id=\"changeImageBtn\" style=\"  margin-top: 15px;\n    padding: 10px 18px;\n    cursor: pointer;\n    background-color:#074173;\n    color: white;\n    font-size: 16px;\n    font-weight: 600;\n    border: none;\n    border-radius: 8px;\n    transition: background-color 0.3s, transform 0.2s;\n    box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);\">Change Image</button>\n              <input type=\"file\" id=\"fileInput\" style=\"display: none;\" accept=\"image/*\">\n            </div>\n          `,\n        showCancelButton: true,\n        confirmButtonText: 'Confirm!',\n        cancelButtonText: 'Cancel',\n        didOpen: () => {\n          // Attach the change image functionality to the button\n          const changeImageBtn = document.getElementById('changeImageBtn');\n          const fileInput = document.getElementById('fileInput');\n          const filePreview = document.getElementById('filePreview');\n\n          changeImageBtn.addEventListener('click', () => {\n            fileInput.click(); // Trigger file input click\n          });\n\n          // When a new file is selected\n          fileInput.addEventListener('change', (event) => {\n            const newFile = event.target.files[0];\n            if (newFile) {\n              selectedFile = newFile; // Update the selected file\n              const newFileReader = new FileReader();\n              newFileReader.onload = (e) => {\n                filePreview.src = e.target.result; // Update preview\n              };\n              newFileReader.readAsDataURL(newFile);\n            }\n          });\n        }\n      }).then((result) => {\n        if (result.isConfirmed) {\n          // Use the updated selectedFile (which could be the original or changed file)\n          dispatch(\n            fileUploadFunc({\n              filePath: selectedFile,\n              isVideo: false,\n              isMultiple: false,\n            })\n          ).then((data) => {\n            if (!data.error) {\n              const updatedDocuments = [...documents];\n              updatedDocuments[index].file = [data?.payload?.data];\n              setDocuments(updatedDocuments);\n              const newFormErrors = [...doctformErrors];\n              if (newFormErrors[index]?.file) {\n                delete newFormErrors[index].file;\n              }\n              setDoctFormErrors(newFormErrors);\n            }\n          });\n        } else {\n          // Handle the cancel case\n\n        }\n      });\n    };\n\n    // Read the file to generate the preview\n    fileReader.readAsDataURL(file);\n  };\n\n  const handleDelete = (document, index) => {\n    if (document?._id) {\n      dispatch(deleteDocument({ _id: document?._id })).then((data) => {\n        if (!data.error) {\n          setDocuments((prevDocuments) =>\n            prevDocuments.filter((_, index2) => index2 !== index)\n          );\n        }\n      });\n    } else {\n      setDocuments((prevDocuments) =>\n        prevDocuments.filter((_, index2) => index2 !== index)\n      );\n    }\n  };\n\n  const handleDeleteDoctImage = (index, file) => {\n    const updatedDocuments = [...documents];\n    updatedDocuments[index].file = [];\n    setDocuments(updatedDocuments);\n  };\n\n  const validateForm = () => {\n    let errors = [];\n    documents.forEach((document, index) => {\n      let error = {};\n      if (!document.documentType) {\n        error.documentType = \"Document Type is required.\";\n      }\n      if (!document.documentNo) {\n        error.documentNo = \"Document No is required.\";\n      }\n      if (!document.file || document.file.length === 0) {\n        error.file = \"Document file is required.\";\n      }\n      if (Object.keys(error).length > 0) {\n        errors[index] = error;\n      }\n    });\n\n    setDoctFormErrors(errors);\n    return errors.every((error) => Object.keys(error).length === 0); // returns true if no errors\n  };\n\n  useEffect(() => {\n    if (clickedLocationAddress) {\n      setValue(\"PDAddress\", clickedLocationAddress?.address);\n      setValue(\"PDCountry\", clickedLocationAddress?.country);\n      setValue(\"PDState\", clickedLocationAddress?.state);\n      setValue(\"PDCity\", clickedLocationAddress?.city);\n      setValue(\"PDPin\", clickedLocationAddress?.postalCode);\n    }\n  }, [clickedLocationAddress]);\n\n  // useEffect(() => {\n  //   if (location && location?.lat && location?.lng) {\n  //     setValue(\"PDlatitude\", location?.lat);\n  //     setValue(\"PDLongitude\", location?.lng);\n  //   }\n  // }, [location]);\n  useEffect(() => {\n    if (PrintCountry !== branchDetailsData?.data?.addresses?.primary?.country) {\n      setValue(\"PDState\", \"\");\n      setValue(\"PDCity\", \"\");\n    }\n  }, [PrintCountry]);\n\n  useEffect(() => {\n    if (PrintState !== branchDetailsData?.data?.addresses?.primary?.state) {\n      setValue(\"PDCity\", \"\");\n    }\n  }, [PrintState]);\n\n  return (\n    <GlobalLayout>\n      {pageLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"grid grid-cols-12 gap-2\">\n          <form\n            className=\"space-y-2 md:col-span-12 col-span-12\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <div className=\"flex bg-header justify-start items-center rounded-lg gap-5 px-3 pt-2 overflow-x-auto overflow-y-hidden text-nowrap\">\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(1)}\n                className={`flex relative flex-col items-center  pb-2 ${step === 1 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 1 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold text-nowrap\">\n                  Primary Details\n                </span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(2)}\n                className={`flex flex-col items-center relative pb-2 ${step === 2 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 2 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">Documents</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => navTabClick(3)}\n                className={`flex flex-col items-center relative pb-2 ${step === 3 ? \"text-white ]\" : \"text-gray-500\"\n                  } cursor-pointer`}\n              >\n                {step === 3 && (\n                  <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n                )}\n                <span className=\"text-sm font-semibold\">Bank</span>\n              </button>\n            </div>\n            {step === 1 && (\n              <>\n                {\" \"}\n                <div className=\"grid  grid-cols-1 md:grid-cols-2\">\n                  <div>\n                    <div className=\" \">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Branch Name <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDcompanyName\", {\n                              required: \"Branch Name is required\",\n                            })}\n                            className={`placeholder: ${inputClassName} ${errors.PDcompanyName\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Branch Name\"\n                          />\n                          {errors.PDcompanyName && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDcompanyName.message}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Status<span className=\"text-red-600\">*</span>\n                      </label>\n                      <select\n                        {...register(\"PDBranchStatus\")}\n                        className={` ${inputClassName} ${errors.PDBranchStatus\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n                      >\n                        <option className=\"\" value=\"\">\n                          Select Status\n                        </option>\n                        <option className=\"\" value={true}>\n                          Active\n                        </option>\n                        <option className=\"\" value={false}>\n                          InActive\n                        </option>\n                      </select>\n\n                      {errors.PDBranchStatus && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDBranchStatus.message}\n                        </p>\n                      )}\n                    </div> */}\n\n                        {userType === \"admin\" && <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Company <span className=\"text-red-600\">*</span>\n                          </label>\n                          <select\n                            disabled\n                            {...register(\"PDCompanyId\")}\n                            className={`${inputDisabledClassName}  ${errors.PDCompanyId\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              } `}\n                          // onFocus={handleFocusCompany}\n                          >\n                            <option\n                              value={branchDetailsData?.data?.companyData?._id}\n                            >\n                              {branchDetailsData?.data?.companyData?.fullName}\n                            </option>\n                          </select>\n                          {errors.PDCompanyId && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDCompanyId.message}\n                            </p>\n                          )}\n                        </div>}\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Branch Head <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDBranchHead\", {\n                              required: \"Branch Head is required\",\n                            })}\n                            className={` ${inputClassName} ${errors.PDBranchHead\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Branch Head\"\n                          />\n                          {errors.PDBranchHead && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDBranchHead.message}\n                            </p>\n                          )}\n                        </div>\n                        {/* <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Remark <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDRemark\", {\n                              required: \"Remark is required\",\n                            })}\n                            className={` ${inputClassName} ${errors.PDRemark\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Remark\"\n                          />\n                          {errors.PDRemark && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDRemark.message}\n                            </p>\n                          )}\n                        </div> */}\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                        <div className=\"col-span-2\">\n                          <label className={`${inputLabelClassName}`}>\n                            Primary Address <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDAddress\", {\n                              required: \"Address  is required\",\n                            })}\n                            className={`${inputClassName} ${errors.PDAddress\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Address \"\n                          />\n                          {errors.PDAddress && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDAddress.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                        <div className=\"\">\n                          <label className={`${inputLabelClassName}`}>\n                            Email <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDEmail\", {\n                              required: \"Email is required\",\n                              pattern: {\n                                value:\n                                  /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                                message: \"Please enter a valid email address\",\n                              },\n                            })}\n                            className={` ${inputClassName} ${errors.PDEmail\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Email\"\n                          />\n                          {errors.PDEmail && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDEmail.message}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-3\">\n                          <div className=\"w-[150px]\">\n                            <label className={`${inputLabelClassName}`}>\n                              Code <span className=\"text-red-600\">*</span>\n                            </label>\n\n                            <Controller\n                              control={control}\n                              name=\"PDMobileCode\"\n                              rules={{ required: \"code is required\" }}\n                              render={({ field }) => (\n                                <CustomMobileCodePicker\n                                  field={field}\n                                  errors={errors}\n                                />\n                              )}\n                            />\n                            {errors[`PDMobileCode`] && (\n                              <p\n                                className={`${inputerrorClassNameAutoComplete}`}\n                              >\n                                {errors[`PDMobileCode`].message}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                              Mobile No <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              type=\"number\"\n                              {...register(`PDMobileNo`, {\n                                required: \"Mobile No is required\",\n                                minLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                                maxLength: {\n                                  value: 10,\n                                  message: \"Must be exactly 10 digits\",\n                                },\n                              })}\n                              className={` ${inputClassName} ${errors[`PDMobileNo`]\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                              placeholder=\"Enter Mobile No\"\n                              maxLength={10}\n                              onInput={(e) => {\n                                if (e.target.value.length > 10) {\n                                  e.target.value = e.target.value.slice(0, 10);\n                                }\n                              }}\n                            />\n                            {errors[`PDMobileNo`] && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors[`PDMobileNo`].message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 px-3\">\n                        <div>\n                          <div className={`${inputLabelClassName}`}>\n                            Country <span className=\"text-red-600\">*</span>\n                          </div>\n                          <Controller\n                            control={control}\n                            name=\"PDcountry\"\n                            rules={{ required: \"Country is required\" }}\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                onChange={(value) => {\n                                  // Directly handle country change by using setValue from React Hook Form\n                                  field.onChange(value); // Update the value in the form control\n                                }}\n                                className=\"w-full\"\n                                options={countryListData?.docs?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter Country\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      countrySearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        sort: true,\n                                        status: true,\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDcountry\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDcountry && (\n                            <p className={`${inputerrorClassNameAutoComplete}`}>\n                              {errors.PDcountry.message}\n                            </p>\n                          )}\n                        </div>\n                        <div>\n                          <div className={`${inputLabelClassName}`}>\n                            State <span className=\"text-red-600\">*</span>\n                          </div>\n                          <Controller\n                            control={control}\n                            name=\"PDState\"\n                            rules={{ required: \"State is required\" }}\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                className=\"w-full\"\n                                onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                                options={stateListData?.docs?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter State\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      stateSearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        countryName: PrintCountry,\n                                        sort: true,\n                                        status: true,\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDState\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDState && (\n                            <p className={`${inputerrorClassNameAutoComplete}`}>\n                              {errors.PDState.message}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* City Field */}\n                        <div>\n                          <div className={`${inputLabelClassName}`}>\n                            City <span className=\"text-red-600\">*</span>\n                          </div>\n                          <Controller\n                            control={control}\n                            name=\"PDCity\"\n                            rules={{ required: \"City is required\" }}\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                className=\"w-full\"\n                                onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                                options={cityListData?.docs?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter City\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      citySearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        sort: true,\n                                        status: true,\n                                        stateName: PrintState,\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDCity\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDCity && (\n                            <p className={`${inputerrorClassNameAutoComplete}`}>\n                              {errors.PDCity.message}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* Pin Code Field */}\n                        <div>\n                          <label className={`${inputLabelClassName}`}>\n                            Pin Code <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Controller\n                            control={control}\n                            name=\"PDPin\"\n                            rules={{ required: \"Pin Code is required\" }}\n                            render={({ field }) => (\n                              <input\n                                {...field}\n                                type=\"number\"\n                                placeholder=\"Enter Pin Code\"\n                                maxLength={6}\n                                onInput={(e) => {\n                                  if (e.target.value.length > 6) {\n                                    e.target.value = e.target.value.slice(0, 6);\n                                  }\n                                }}\n                                className={`${inputClassName} ${errors.PDPin\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                              />\n                            )}\n                          />\n                          {errors.PDPin && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDPin.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                                        <div className=\"\">\n                                          <label className={`${inputLabelClassName}`}>\n                                            latitude <span className=\"text-red-600\">*</span>\n                                          </label>\n                                          <input\n                                            type=\"number\"\n                                            disabled\n                                            {...register(\"PDlatitude\", {\n                                              required: \"latitude is required\",\n                                            })}\n                                            className={` ${inputDisabledClassName} ${\n                                              errors.PDlatitude\n                                                ? \"border-[1px] \"\n                                                : \"border-gray-300\"\n                                            }`}\n                                            placeholder=\"Enter latitude\"\n                                          />\n                                          {errors.PDlatitude && (\n                                            <p className=\"text-red-500 text-sm\">\n                                              {errors.PDlatitude.message}\n                                            </p>\n                                          )}\n                                        </div>\n                                        <div className=\"\">\n                                          <label className={`${inputLabelClassName}`}>\n                                            longitude <span className=\"text-red-600\">*</span>\n                                          </label>\n                                          <input\n                                            disabled\n                                            type=\"number\"\n                                            {...register(\"PDLongitude\", {\n                                              required: \"longitude is required\",\n                                            })}\n                                            className={` ${inputDisabledClassName} ${\n                                              errors.PDLongitude\n                                                ? \"border-[1px] \"\n                                                : \"border-gray-300\"\n                                            }`}\n                                            placeholder=\"Re-enter Password\"\n                                          />\n                                          {errors.PDLongitude && (\n                                            <p className=\"text-red-500 text-sm\">\n                                              {errors.PDLongitude.message}\n                                            </p>\n                                          )}\n                                        </div>\n                                      </div> */}\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\"></div>\n                    </div>\n                    <div className=\"flex justify-between px-3 pb-2\">\n                      <button\n                        type=\"Submit\"\n                        className={`${formButtonClassName}`}\n                      >\n                        Submit Details\n                      </button>\n                    </div>\n                  </div>\n                  <GoogleMapContainerEdit\n                    setLocation={setLocation}\n                    address={PrintAddress}\n                    setClickLocationaddres={setClickLocationaddres}\n                    innitialLocation={\n                      branchDetailsData?.data?.addresses?.location\n                    }\n                  />\n                </div>\n              </>\n            )}\n            {step === 2 && (\n              <div>\n                <div className=\" rounded-md \">\n                  {documents.map((document, index) => (\n                    <div\n                      className=\"border border-gray-300 rounded-md my-2\"\n                      key={index}\n                    >\n                      <div className=\"flex justify-between items-center mb-4 bg-header rounded-t-md\">\n                        <div className=\"px-3 py-2 text-white font-semibold\">\n                          {\" \"}\n                          Document {index + 1}\n                        </div>\n                        <div className=\"flex justify-end items-end\">\n                        \n                          <button\n                            type=\"button\"\n                            onClick={() => handleDelete(document, index)}\n                            className=\"text-red-600 hover:text-red-800\"\n                          >\n                            <AiFillDelete size={20} className=\"m-2\" />\n                          </button>\n                       \n                        <button\n                                                  type=\"button\"\n                                                  onClick={() => handleEditButton(index)}\n                                                  \n                                                  className='text-white'\n                                                >\n                                                  {document?.isEditable ? <TbEditOff size={20} className=\"m-2\"/> : <LiaEditSolid  size={20} className=\"m-2\" /> }\n                                                </button>\n                        </div>\n                      </div>\n\n                      <div className=\"px-3 grid sm:grid-cols-2 grid-cols-1 gap-4 items-end mb-3\">\n                        <div>\n                          <label className={`${inputLabelClassName}`}>\n                            Document Type{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n\n\n                          <Select\n                          disabled={!document.isEditable}\n                            value={document.documentType}\n                            className={` ${inputAntdSelectClassName} ${errors.documentType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            onChange={(e) =>\n                              handleInputChange(\n                                index,\n                                \"documentType\",\n                                e\n                              )\n                            }\n                            placeholder=\"Select Document Type\"\n                            showSearch\n                          >\n                            <Select.Option value=\"\">Select Document</Select.Option>\n                            {employeeDocumentList\n                              ?.filter((data) => data?.type === \"General\")\n                              \n                              .map((type) => (\n                                <Select.Option key={type.name} value={type.name}>\n                                  {type.name}\n                                </Select.Option>\n                              ))}\n\n                          </Select>\n\n                          {doctformErrors[index]?.documentType && (\n                            <p className=\"text-red-600 text-sm\">\n                              {doctformErrors[index].documentType}\n                            </p>\n                          )}\n                        </div>\n\n                        <div>\n                          <label className={`${inputLabelClassName}`}>\n                            Document No <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                          disabled={!document.isEditable}\n                            type=\"text\"\n                            value={document.documentNo}\n                            onChange={(e) =>\n                              handleInputChange(\n                                index,\n                                \"documentNo\",\n                                e.target.value\n                              )\n                            }\n                            className={`${!document?.isEditable ? inputDisabledClassName : inputClassName} ${doctformErrors[index]?.documentNo\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Document No\"\n                          />\n                          {doctformErrors[index]?.documentNo && (\n                            <p className=\"text-red-600 text-sm\">\n                              {doctformErrors[index].documentNo}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"flex items-center gap-2\">\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Upload <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              type=\"file\"\n                              disabled={!document.isEditable}\n                              id={`documentUpload${index}`}\n                              className=\"hidden\"\n                              onChange={(e) =>\n                                handleFileChange(index, e.target.files[0])\n                              }\n                            />\n                            <br />\n                            <label\n                              htmlFor={`documentUpload${index}`}\n                              className={`${document?.isEditable ? 'bg-header' :'bg-gray-400'} text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer`}\n                            >\n                              Upload\n                            </label>\n                          </div>\n                          {document?.file?.length > 0\n                            ? document.file.map((file, fileIndex) => (\n                              <div key={fileIndex} className=\"relative\">\n                                <CommonImageViewer\n                                  // key={index}\n                                  src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                                  alt={`Uploaded ${fileIndex + 1}`}\n                                  className=\"w-20 h-20 shadow rounded-sm\"\n                                />\n                                <button\n                                disabled={!document.isEditable}\n                                className={`absolute -top-1 -right-2 ${document?.isEditable ?'bg-red-600' :'bg-gray-400'} text-white rounded-full w-5 h-5 flex items-center justify-center text-xs`}\n                                  onClick={() => handleDeleteDoctImage(index, file)}\n                                >\n                                  ✕\n                                </button>\n                              </div>\n\n                            ))\n                            : null}\n                          {doctformErrors[index]?.file && (\n                            <p className=\"text-red-600 text-sm\">\n                              {doctformErrors[index].file}\n                            </p>\n                          )}\n                        </div>\n\n                        {/* <div className=\"px-3 gap-4 items-end mb-3\">\n                        <button\n                          type=\"button\"\n                          onClick={() => handleDelete(document, index)}\n                          className=\"text-gray-600 hover:text-gray-800 flex items-center justify-center border-2 border-gray-500 p-1 rounded-lg\"\n                        >\n                          <i className=\"fas fa-trash-alt flex items-center justify-center w-[25px] h-[25px]\"></i>\n                        </button>\n                      </div> */}\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"flex justify-between px-3 pb-2\">\n                    <button\n                      type=\"button\"\n                      onClick={handleAddMore}\n                      className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n                    >\n                      Add More\n                    </button>\n                  </div>\n                </div>\n                <div className=\"flex justify-between px-3 pb-2\">\n                  <button\n                    disabled={loadingUpdateFile}\n                    type=\"Submit\"\n                    className={`${formButtonClassName}`}\n                  >\n                    {loadingUpdateFile ? \"Submitting ...\" : \"Submit Details\"}\n                  </button>\n                </div>\n              </div>\n            )}\n            {step === 3 && (\n              <div>\n                <div className=\"rounded-md\">\n                  {banks.map((bank, index) => (\n                    <div\n                      className=\"border border-gray-300 rounded-md my-2\"\n                      key={index}\n                    >\n                      <div className=\"flex justify-between items-center mb-4 bg-header rounded-t-md\">\n                        <div className=\"px-3 py-2 text-white font-semibold\">\n                          {\" \"}\n                          Bank Document {index + 1}\n                        </div>\n                        {index !== 0 && (\n                          <button\n                            type=\"button\"\n                            onClick={() => handleBankDelete(bank, index)}\n                            className=\"text-red-600 hover:text-red-800\"\n                          >\n                            <AiFillDelete size={20} className=\"m-2\" />\n                          </button>\n                        )}\n                      </div>\n                      <div className=\"px-3 grid sm:grid-cols-2 grid-cols-1 gap-4 mb-3\">\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Account Holder Name{\" \"}\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={bank.bankholderName}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"bankholderName\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.bankholderName\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Account Holder name\"\n                          />\n                          {formErrors[index]?.bankholderName && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].bankholderName}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Bank Name <span className=\"text-red-600\">*</span>\n                          </label>\n                          <Select\n                            value={bank.bankName}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"bankName\",\n                                e\n                              )\n                            }\n                            className={`${inputAntdSelectClassName} ${formErrors[index]?.bankName\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                          >\n                            <Select.Option value=\"\">Select Bank Name</Select.Option>\n                            {bankNameListData?.map((data) => (\n                              <Select.Option key={data.name} value={data.name}>\n                                {data.name}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                          {formErrors[index]?.bankName && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].bankName}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Branch Name <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={bank.branchName}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"branchName\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.branchName\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Branch name\"\n                          />\n                          {formErrors[index]?.branchName && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].branchName}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Account Number\n                            <span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"number\"\n                            value={bank.accountNumber}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"accountNumber\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.accountNumber\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter Account Number\"\n                          />\n                          {formErrors[index]?.accountNumber && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].accountNumber}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            IFSC Code<span className=\"text-red-600\">*</span>\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={bank.ifscCode}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"ifscCode\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.ifscCode\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                            placeholder=\"Enter IFSC Code\"\n                          />\n                          {formErrors[index]?.ifscCode && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].ifscCode}\n                            </p>\n                          )}\n                        </div>\n\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Opening Balance                            \n                          </label>\n                          <input\n                            type=\"number\"\n                            step=\"any\"\n                            value={bank?.openingBalance}\n                           disabled={branchDetailsData?.data?.bankData?.find(el=>el?._id === bank?._id)?.openingBalance}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"openingBalance\",\n                                e.target.value\n                              )\n                            }\n                             className={`${branchDetailsData?.data?.bankData?.find(el=>el?._id === bank?._id)?.openingBalance ? inputDisabledClassName : inputClassName} ${formErrors[index]?.openingBalance\n                              ? \"border-[1px] \"\n                              : \"\"\n                              } `}\n                            placeholder=\"Enter openingBalance \"\n                          />\n                          {formErrors[index]?.openingBalance && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].openingBalance}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Account Type <span className=\"text-red-600\">*</span>\n                          </label>\n                          {/* <select\n                            value={bank.accountType}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"accountType\",\n                                e.target.value\n                              )\n                            }\n                            className={`${inputClassName} ${formErrors[index]?.accountType\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                          >\n                            <option value=\"\">Select Account Type</option>\n                            <option className=\"\" value=\"saving\">\n                              Saving\n                            </option>\n                            <option className=\"\" value=\"current\">\n                              Current\n                            </option>\n                            <option className=\"\" value=\"Salary\">\n                              Salary\n                            </option>\n                            <option className=\"\" value=\"Joint\">\n                              Joint\n                            </option>\n                          </select> */}\n                          <Select\n                            value={bank.accountType}\n                            onChange={(e) =>\n                              handleInputChangeBank(\n                                index,\n                                \"accountType\",\n                                e\n                              )\n                            }\n                            className={`${inputAntdSelectClassName} ${formErrors[index]?.accountType\n                              ? \"border-[1px] \"\n                              : \"\"\n                              }`}\n                          >\n                            <Select.Option value=\"\">Select Account Type</Select.Option>\n                            <Select.Option className=\"\" value=\"saving\">\n                              Saving\n                            </Select.Option>\n                            <Select.Option className=\"\" value=\"current\">\n                              Current\n                            </Select.Option>\n                            <Select.Option className=\"\" value=\"Salary\">\n                              Salary\n                            </Select.Option>\n                            <Select.Option className=\"\" value=\"Joint\">\n                              Joint\n                            </Select.Option>\n                          </Select>\n                          {formErrors[index]?.accountType && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].accountType}\n                            </p>\n                          )}\n                        </div>\n                        {/* <div className=\"flex items-center gap-2\">\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Upload <span className=\"text-red-600\">*</span>\n                            </label>\n                            <input\n                              type=\"file\"\n                              id={`bankUpload${index}`}\n                              className=\"hidden\"\n                              onChange={(e) =>\n                                handleBankFileChange(index, e.target.files[0])\n                              }\n                            />\n                            <br />\n                            <label\n                              htmlFor={`bankUpload${index}`}\n                              className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                            >\n                              Upload\n                            </label>\n                          </div>\n                          {bank?.file?.length > 0\n                            ? bank.file.map((file, index) => (\n                              <img\n                                key={index}\n                                src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                                alt={`Uploaded ${index + 1}`}\n                                className=\"w-20 h-20 shadow rounded-sm\"\n                              />\n                            ))\n                            : null}\n                          {formErrors[index]?.file && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].file}\n                            </p>\n                          )}\n                        </div> */}\n                        <div className=\"flex items-center gap-2\">\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Upload Image\n                            </label>\n                            <input\n                              type=\"file\"\n                              id={`bankUpload${index}`}\n                              className=\"hidden\"\n                              onChange={(e) =>\n                                handleBankFileChange(index, e.target.files[0])\n                              }\n                            />\n                            <br />\n                            <label\n                              htmlFor={`bankUpload${index}`}\n                              className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                            >\n                              Upload Image\n                            </label>\n                          </div>\n                          {bank?.file?.length > 0\n                            ? bank.file.map((file, fileIndex) => (\n                              <div key={fileIndex} className=\"relative\">\n                                <CommonImageViewer\n                                  // key={index}\n                                  src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                                  alt={`Uploaded ${fileIndex + 1}`}\n                                  className=\"w-20 h-20 shadow rounded-sm\"\n                                />\n                                <button\n                                  className=\"absolute -top-1 -right-2 bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs\"\n                                  onClick={() => handleDeleteBankImage(index, file)}\n                                >\n                                  ✕\n                                </button>\n                              </div>\n                            ))\n                            : null}\n                          {formErrors[index]?.file && (\n                            <p className=\"text-red-600 text-sm\">\n                              {formErrors[index].file}\n                            </p>\n                          )}\n                        </div>\n                        {/* <div className=\"px-3 gap-4 items-end mb-3\">\n                        <button\n                          type=\"button\"\n                          onClick={() => handleBankDelete(bank, index)}\n                          className=\"text-gray-600 hover:text-gray-800 flex items-center justify-center border-2 border-gray-500 p-1 rounded-lg\"\n                        >\n                          <i className=\"fas fa-trash-alt flex items-center justify-center w-[25px] h-[25px]\"></i>\n                        </button>\n                      </div> */}\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"flex justify-between px-3 pb-2\">\n                    <button\n                      type=\"button\"\n                      onClick={handleBankAddMore}\n                      className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n                    >\n                      Add More\n                    </button>\n                  </div>\n                </div>\n                <div className=\"flex justify-between px-3 pb-2\">\n                  <button\n                    disabled={loadingUpdateFile}\n                    type=\"Submit\"\n                    className={`${formButtonClassName}`}\n                  >\n                    {loadingUpdateFile ? \"Submitting ...\" : \"Submit Details\"}\n                  </button>\n                </div>\n              </div>\n            )}\n          </form>\n        </div>\n      )}\n    </GlobalLayout>\n  );\n};\n\nexport default MyBranchDetails;\n"],"names":["containerStyle","width","height","_ref","setLocation","setClickLocationaddres","innitialLocation","clickedLocation","setClickedLocation","useState","currentLocation","setCurrentLocation","autocompleteRef","useRef","mapRef","getFullAddress","lat","lng","window","google","maps","Geocoder","console","error","geocode","location","results","status","_addressComponents$fi","_addressComponents$fi2","_addressComponents$fi3","_addressComponents$fi4","addressComponents","address_components","formattedAddress","formatted_address","country","find","comp","types","includes","long_name","state","city","postalCode","address","useEffect","latitude","longitude","_jsxs","className","children","_jsx","Autocomplete","onLoad","ref","current","onPlaceChanged","handlePlaceSelect","place","getPlace","geometry","panTo","type","placeholder","concat","inputClassName","GoogleMap","mapContainerStyle","center","zoom","onClick","event","latLng","map","options","disableDefaultUI","zoomControl","fullscreenControl","mapTypeControl","streetViewControl","Marker","position","icon","Spin","size","MyBranchDetails","_JSON$parse","_JSON$parse2","_branchDetailsData$da54","_branchDetailsData$da55","_branchDetailsData$da56","_branchDetailsData$da57","_branchDetailsData$da58","_branchDetailsData$da59","branchId","JSON","parse","localStorage","getItem","domainName","_id","clickedLocationAddress","step","setStep","useNavigate","pageLoading","setPageLoading","documents","setDocuments","id","documentType","documentNo","file","isEditable","banks","setBanks","profileImage","setProfileImage","profileImagePayload","setProfileImagePayload","countryListData","useSelector","stateListData","states","cityListData","employeeDocumentList","employeeDocument","bankNameListData","bankname","loadingUpdateFile","fileUpload","fileName","setFileName","fileUrl","setFileUrl","branchDetailsData","branch","formErrors","setFormErrors","doctformErrors","setDoctFormErrors","userType","register","handleSubmit","setValue","control","clearErrors","formState","errors","useForm","dispatch","useDispatch","PrintAddress","useWatch","name","defaultValue","PrintState","PrintCountry","PrintPincode","length","test","getLocationDataByPincode","then","data","catch","async","_getUserIds","empDoctSearch","isPagination","companyId","getUserIds","userCompanyId","reqData","getBranchDetails","fetchData","banknameSearch","text","sort","_branchDetailsData$da","_branchDetailsData$da2","_branchDetailsData$da3","_branchDetailsData$da4","_branchDetailsData$da5","_branchDetailsData$da6","_branchDetailsData$da7","_branchDetailsData$da8","_branchDetailsData$da9","_branchDetailsData$da0","_branchDetailsData$da1","_branchDetailsData$da10","_branchDetailsData$da11","_branchDetailsData$da12","_branchDetailsData$da13","_branchDetailsData$da14","_branchDetailsData$da15","_branchDetailsData$da16","_branchDetailsData$da17","_branchDetailsData$da18","_branchDetailsData$da19","_branchDetailsData$da20","_branchDetailsData$da21","_branchDetailsData$da22","_branchDetailsData$da23","_branchDetailsData$da24","_branchDetailsData$da25","_branchDetailsData$da26","_branchDetailsData$da27","_branchDetailsData$da28","_branchDetailsData$da29","_branchDetailsData$da30","_branchDetailsData$da31","_branchDetailsData$da32","_branchDetailsData$da33","_branchDetailsData$da34","_branchDetailsData$da35","_branchDetailsData$da36","_branchDetailsData$da37","_branchDetailsData$da38","_branchDetailsData$da39","_branchDetailsData$da40","_branchDetailsData$da41","_branchDetailsData$da42","_branchDetailsData$da43","_branchDetailsData$da44","documentData","document","number","filePath","process","fullName","firstName","lastName","companyProfile","tagline","branchProfile","branchCode","addresses","primary","street","pinCode","email","mobile","code","aadharNumber","gstNumber","panNumber","frn","tanNumber","documentType0","documentNo0","documentUpload0","head","forEach","doc","index","bankData","bank","accountType","bankName","branchName","bankholderName","accountNumber","openingBalance","ifscCode","handleInputChangeBank","field","value","updatedBanks","newFormErrors","_newFormErrors$index","_newFormErrors$index2","navTabClick","clickedStep","handleInputChange","_newFormErrors$index4","updatedDocuments","handleFileChange","selectedFile","fileReader","FileReader","filePreviewUrl","onload","e","target","result","Swal","title","html","showCancelButton","confirmButtonText","cancelButtonText","didOpen","changeImageBtn","getElementById","fileInput","filePreview","addEventListener","click","newFile","files","newFileReader","src","readAsDataURL","isConfirmed","fileUploadFunc","isVideo","isMultiple","_data$payload2","_newFormErrors$index5","payload","validateForm","Object","keys","every","_branchDetailsData$da48","_branchDetailsData$da49","_branchDetailsData$da50","_branchDetailsData$da51","_branchDetailsData$da52","_branchDetailsData$da53","GlobalLayout","Loader","onSubmit","_branchDetailsData$da45","_branchDetailsData$da46","_branchDetailsData$da47","_data$PDAddress","_data$PDCity","_data$PDState","_data$PDcountry","finalPayload","directorId","PDcompanyName","PDEmail","PDMobileCode","PDMobileNo","PDBranchHead","PDAddress","PDCity","PDState","PDcountry","PDPin","updateBranch","userId","updateDocument","validateBankForm","_Fragment","inputLabelClassName","_objectSpread","required","message","disabled","inputDisabledClassName","PDCompanyId","companyData","pattern","Controller","rules","render","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","maxLength","onInput","slice","_ref2","_countryListData$docs","AutoComplete","onChange","docs","onFocus","countrySearch","_ref3","_stateListData$docs","stateSearch","countryName","_ref4","_cityListData$docs","citySearch","stateName","_ref5","formButtonClassName","GoogleMapContainerEdit","_doctformErrors$index","_doctformErrors$index2","_doctformErrors$index3","_document$file","_doctformErrors$index4","handleDelete","deleteDocument","prevDocuments","filter","_","index2","AiFillDelete","i","handleEditButton","TbEditOff","LiaEditSolid","Select","inputAntdSelectClassName","showSearch","Option","htmlFor","fileIndex","CommonImageViewer","alt","handleDeleteDoctImage","handleAddMore","Date","now","_formErrors$index","_formErrors$index2","_formErrors$index3","_formErrors$index4","_formErrors$index5","_formErrors$index6","_formErrors$index7","_formErrors$index8","_formErrors$index9","_formErrors$index0","_branchDetailsData$da60","_branchDetailsData$da61","_branchDetailsData$da62","_branchDetailsData$da63","_branchDetailsData$da64","_branchDetailsData$da65","_formErrors$index1","_formErrors$index10","_formErrors$index11","_formErrors$index12","_bank$file","_formErrors$index13","handleBankDelete","prevBanks","el","handleBankFileChange","_data$payload","_newFormErrors$index3","handleDeleteBankImage","handleBankAddMore"],"sourceRoot":""}