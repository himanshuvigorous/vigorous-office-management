{"version":3,"file":"static/js/5255.f3eb1121.chunk.js","mappings":"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","sources":["pages/timeSlot/CreateTimeSlots.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../constents/global\";\nimport getUserIds from '../../constents/getUserIds';\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { designationSearch } from \"../designation/designationFeatures/_designation_reducers\";\nimport { branchSearch } from \"../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../Director/director/DirectorFeatures/_director_reducers\";\nimport { createTimeSlotsFunc } from \"./timeSlotsFeatures/_timeSlots_reducers\";\nimport ReactSelect from \"react-select\";\nimport ListLoader from \"../../global_layouts/ListLoader\";\nimport { Select } from \"antd\";\n\nconst CreateTimeSlots = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    getValues,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [tags, setTags] = useState([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType\n  } = getUserIds();\n\n  const { companyList } = useSelector((state) => state.company);\n  const { designationList } = useSelector((state) => state.designation);\n  const { departmentListData } = useSelector(state => state.department);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { directorLists } = useSelector((state) => state.director);\n  const [days, setDays] = useState([]);\n  const [selectedDays, setSelectedDays] = useState([]);\n  const [weekOffs, setWeekOffs] = useState([]);\n  const [selectedweeks, setSelectedweeks] = useState([]);\n\n  const fetchDaysList = async () => {\n    const dayListData = [\n      { dayName: \"Monday\" },\n      { dayName: \"Tuesday\" },\n      { dayName: \"Wednesday\" },\n      { dayName: \"Thursday\" },\n      { dayName: \"Friday\" },\n      { dayName: \"Saturday\" },\n      { dayName: \"Sunday\" },\n    ];\n    return dayListData;\n  };\n\n  useEffect(() => {\n    const weekDaysList = async () => {\n      const daysList = await fetchDaysList();\n      const formattedOptions = daysList.map((day) => ({\n        value: day.dayName,\n        label: day.dayName,\n      }));\n      setDays(formattedOptions);\n    };\n    weekDaysList();\n  }, []);\n\n  const handleWorkingDays = (selected) => {\n    setSelectedDays(selected || []);\n  };\n\n  const getWorkingDaysValues = () => {\n    return selectedDays.map((day) => day.value);\n  };\n\n  const fetchWeekOffList = async () => {\n    const weekListCount = [\n      { weekCount: 1 },\n      { weekCount: 2 },\n      { weekCount: 3 },\n      { weekCount: 4 },\n      { weekCount: 5 },\n    ];\n    return weekListCount;\n  };\n\n  useEffect(() => {\n    const fetchAndSetWeekOffs = async () => {\n      const daysList = await fetchWeekOffList();\n      const formattedOptions = daysList.map((week) => ({\n        value: week.weekCount,\n        label: `Week ${week.weekCount}`,\n      }));\n      setWeekOffs(formattedOptions);\n    };\n    fetchAndSetWeekOffs();\n  }, []);\n\n  const handleSaturdays = (selected) => {\n    setSelectedweeks(selected || []);\n  };\n\n  const getWeekOffValues = () => {\n    return selectedweeks.map((week) => week.value);\n  };\n\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"branchId\",\n    defaultValue: userBranchId,\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"departmentId\",\n    defaultValue: userDepartmentId,\n  });\n\n  const designationId = useWatch({\n    control,\n    name: \"designationId\",\n    defaultValue: userDesignationId,\n  });\n\n  const employeId = useWatch({\n    control,\n    name: \"employeId\",\n    defaultValue: userEmployeId,\n  });\n\n  const onSubmit = (data) => {\n    const workingDaysvalue = getWorkingDaysValues();\n    const weekoffvalue = getWeekOffValues();\n    const sundaysOffValue = data?.sundaysOff == \"Yes\" ? true : false;\n    const finalPayload = {\n      companyId: companyId,\n      directorId: directorId,\n      branchId: branchId,\n      shiftName: data?.shiftName,\n      \"skipHRS\": + data?.skipHRS,\n      \"lunchMin\": + data?.lunchMin,\n      \"lateMIN\": + data?.lateMin,\n      workingDays: workingDaysvalue,\n      weekOffRules: {\n        sundaysOff: sundaysOffValue,\n        saturdaysOff: weekoffvalue,\n      },\n      openingTime: String(data?.openingTime),\n      closingTime: String(data?.closingTime),\n      isApplySandwich: data?.isApplySandwich == \"true\" ? true : false,\n    };\n    dispatch(createTimeSlotsFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(\n        companySearch({\n          userType: \"company\",\n          text: \"\",\n          status: true,\n        })\n      );\n    }\n  }, []);\n\n\n\n  useEffect(() => {\n    if ((companyId && userType === \"company\" || companyId && userType === \"admin\")) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (companyId && userType === \"company\" || userType === \"admin\") {\n      dispatch(directorSearch({\n        text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n      })\n      );\n    }\n  }, [companyId]);\n\n  useEffect(() => {\n    if (departmentId) {\n      dispatch(\n        designationSearch({\n          departmentId: departmentId,\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, [departmentId]);\n\n  const handleTagChange = (e) => {\n    setTagInput(e.target.value);\n  };\n\n  const handleAddTag = (e) => {\n    if (e.key === \"Enter\" && tagInput.trim() !== \"\") {\n      e.preventDefault();\n      setTags((prevTags) => [...prevTags, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove) => {\n    setTags((prevTags) => prevTags.filter((tag) => tag !== tagToRemove));\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 \">\n              {(userType === \"admin\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Company<span className=\"text-red-600\">*</span>\n                  </label>\n                  <select\n                    {...register(\"companyId\", {\n                      required: \"Company is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.companyId ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Company\n                    </option>\n                    {companyList?.map((type) => (\n                      <option value={type?._id}>\n                        {type?.fullName}({type?.userName})\n                      </option>\n                    ))}\n                  </select>\n                  {errors.companyId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.companyId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n              {(userType === \"admin\" || userType === \"company\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch<span className=\"text-red-600\">*</span>\n                  </label>\n                  {/* <select\n                    {...register(\"branchId\", {\n                      required: \"Branch is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.branchId ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Branch\n                    </option>\n\n                    {branchList\n                      ?.filter((element) => element?.companyId === companyId)\n                      ?.map((element) => (\n                        <option value={element?._id}>{element?.fullName}</option>\n                      ))}\n                  </select> */}\n\n                  <Controller\n                    control={control}\n                    name=\"branchId\"\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        defaultValue={\"\"}\n\n                        className={`${inputAntdSelectClassName} `}\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))}\n                      </Select>\n                    )}\n                  />\n                  {errors.branchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.branchId.message}\n                    </p>\n                  )}\n                </div>)}\n\n\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-2\">\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Shift Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"shiftName\", {\n                    required: \"Shift Name is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.shiftName ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Shift Name\"\n                />\n                {errors.shiftName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.shiftName.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Late Minutes <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"lateMin\", {\n                    required: \"Late Minutes is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.lateMin ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Late Minutes\"\n                />\n                {errors.lateMin && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.lateMin.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Lunch Minutes <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"lunchMin\", {\n                    required: \"Lunch Minutes is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.lunchMin ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Lunch Minutes\"\n                />\n                {errors.lunchMin && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.lunchMin.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Skip Minutes <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"skipHRS\", {\n                    required: \"Skip Minutes is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.skipHRS ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Skip Minutes\"\n                />\n                {errors.skipHRS && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.skipHRS.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Opening Time <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"time\"\n                  typeof=\"time\"\n                  {...register(\"openingTime\", { required: \"Opening Time is required\" })}\n                  className={`mt-1 block w-full border ${errors.openingTime ? \"border-[1px] \" : \"border-gray-300\"\n                    } p-2 rounded`}\n                />\n                {errors.openingTime && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.openingTime.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Closing Time <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"time\"\n                  typeof=\"time\"\n                  {...register(\"closingTime\", { required: \"Closing Time is required\" })}\n                  className={`mt-1 block w-full border ${errors.closingTime ? \"border-[1px] \" : \"border-gray-300\"\n                    } p-2 rounded`}\n                />\n                {errors.closingTime && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.closingTime.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-2\">\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Working Days <span className=\"text-red-600\">*</span>\n                </label>\n                <ReactSelect\n                  isMulti\n                  options={days}\n                  value={selectedDays}\n                  onChange={handleWorkingDays}\n                  className=\"basic-multi-select\"\n                  classNamePrefix=\"select\"\n                />\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Saturday Off <span className=\"text-red-600\">*</span>\n                </label>\n                <ReactSelect\n                  isMulti\n                  options={weekOffs}\n                  value={selectedweeks}\n                  onChange={handleSaturdays}\n                  className=\"basic-multi-select\"\n                  classNamePrefix=\"select\"\n                />\n              </div>\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Sundays Off <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"sundaysOff\", {\n                    required: \"Sundays Off is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.sundaysOff ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Sundays Off</option>\n                  <option value={\"Yes\"}>Yes</option>\n                  <option value={\"No\"}>No</option>\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"sundaysOff\"\n                  rules={{ required: \"sundaysOff is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                      className={`${inputAntdSelectClassName} `}\n                      placeholder='Select Sundays'\n                    >\n                      <Select.Option value=\"\">Select Sundays Off</Select.Option>\n                      <Select.Option value=\"Yes\">Yes</Select.Option>\n                      <Select.Option value=\"No\">No</Select.Option>\n\n                    </Select>\n                  )}\n                />\n\n                {errors.sundaysOff && (\n                  <p className=\"text-red-500 text-sm\">{errors.sundaysOff.message}</p>\n                )}\n              </div>\n\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Select Sandwich <span className=\"text-red-600\">*</span>\n                </label>\n\n                <Controller\n                  control={control}\n                  name=\"isApplySandwich\"\n                  rules={{ required: \"Select Sandwich is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      placeholder='Select Sandwich'\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Sandwich</Select.Option>\n                      <Select.Option value=\"true\">Yes</Select.Option>\n                      <Select.Option value=\"false\">No</Select.Option>\n\n                    </Select>\n                  )}\n                />\n\n                {errors.isApplySandwich && (\n                  <p className=\"text-red-500 text-sm\">{errors.isApplySandwich.message}</p>\n                )}\n              </div>\n            </div>\n\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateTimeSlots;"],"names":["CreateTimeSlots","register","handleSubmit","control","setValue","getValues","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","tags","setTags","useState","tagInput","setTagInput","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","companyList","useSelector","state","company","designationList","designation","departmentListData","department","branchList","branchListloading","branch","directorLists","director","days","setDays","selectedDays","setSelectedDays","weekOffs","setWeekOffs","selectedweeks","setSelectedweeks","useEffect","async","formattedOptions","dayName","fetchDaysList","map","day","value","label","weekDaysList","weekCount","fetchWeekOffList","week","concat","fetchAndSetWeekOffs","companyId","useWatch","name","defaultValue","directorId","branchId","departmentId","companySearch","text","status","branchSearch","sort","isPagination","directorSearch","designationSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","workingDaysvalue","weekoffvalue","sundaysOffValue","sundaysOff","finalPayload","shiftName","skipHRS","lunchMin","lateMin","workingDays","weekOffRules","saturdaysOff","openingTime","String","closingTime","isApplySandwich","createTimeSlotsFunc","then","error","inputLabelClassName","_objectSpread","required","inputClassName","type","_id","fullName","userName","message","Controller","rules","render","_ref","_sortByPropertyAlphab","field","Select","inputAntdSelectClassName","Option","disabled","ListLoader","sortByPropertyAlphabetically","placeholder","typeof","ReactSelect","isMulti","options","onChange","selected","classNamePrefix","_ref2","showSearch","filterOption","input","option","toLowerCase","includes","_ref3"],"sourceRoot":""}