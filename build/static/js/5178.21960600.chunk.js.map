{"version":3,"file":"static/js/5178.21960600.chunk.js","mappings":"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","sources":["pages/global/other/officeAddressManagement/EditOfficeAddress.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputerrorClassNameAutoComplete, inputLabelClassName } from \"../../../../constents/global\";\n\nimport { branchSearch, getBranchDetails } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { countrySearch } from \"../../address/country/CountryFeatures/_country_reducers\";\nimport { AutoComplete, Image, Input, Select } from \"antd\";\nimport { fileUploadFunc } from \"../fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { createofficeAddress, getofficeAddressDetails, updateofficeAddress } from \"./officeAddressFeature/_office_address_reducers\";\nimport { stateSearch } from \"../../address/state/featureStates/_state_reducers\";\nimport { citySearch } from \"../../address/city/CityFeatures/_city_reducers\";\nimport ReactQuill from \"react-quill\";\nimport CustomMobileCodePicker from \"../../../../global_layouts/MobileCode/MobileCodePicker\";\nimport Swal from \"sweetalert2\";\nimport Loader from \"../../../../global_layouts/Loader\";\n\n\nconst EditOfficeAddress = () => {\n  const { officeAddressIdEnc } = useParams();\n  const headerRef = useRef([])\n  const footerRef = useRef([])\n  const { loading: officeAddressLoading } = useSelector(\n    (state) => state.officeAddress\n  );\n  const officeAddressId = decrypt(officeAddressIdEnc)\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const [editorValue, setEditorValue] = useState(``);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const { branchDetailsData } = useSelector((state) => state.branch);\n  const { officeAddressDetails } = useSelector(\n    (state) => state.officeAddress\n  );\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: officeAddressId,\n      companyId: officeAddressDetails?.companyId,\n      directorId: officeAddressDetails?.directorId,\n      branchId: officeAddressDetails?.branchId,\n      \"bankAccountId\": data?.PDBankId,\n      \"address\": {\n        \"street\": data?.PDAddress,\n        \"city\": data?.PDCity,\n        \"state\": data?.PDState,\n        \"country\": data?.PDCountry,\n        \"pinCode\": data?.PDPinCode\n      },\n      \"type\": \"invoice\",\n      \"firmName\": data?.PDfirmName,\n      \"tagName\": data?.PDTagName,\n      \"mobile\": {\n        \"code\": data?.PDMobileCode,\n        \"number\": data?.PDMobileNo\n      },\n      \"email\": data?.PDEmail,\n      \"gstNumber\": data?.PDGstNumber,\n      \"panNumber\": data?.PDPanNumber,\n      \"designation\": data?.PDDesignation,\n      \"headerImage\": data?.headerfileUplaodLink,\n      \"signatureImage\": data?.footerfileUplaodLink,\n      \"signatureName\": data?.PDSignatureAuthority,\n      prefix: data?.PDPrefix,\n      startInvoiceCount: data?.startInvoiceCount,\n      isGSTEnabled: data?.isGstEnabled === \"true\" ? true : false,\n      status: data?.status === 'true' ? true : false,\n      upiId: data?.upiId,\n      termsAndCond: editorValue,\n      \"invoiceName\": data?.invoiceName,\n      \"receiptName\": data?.receiptName,\n      \"advanceName\": data?.advanceName\n\n    };\n    dispatch(updateofficeAddress(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n  useEffect(() => {\n    if (officeAddressDetails?.branchId) {\n      dispatch(getBranchDetails({\n        _id: officeAddressDetails?.branchId\n      })).then((data) => {\n        if (!data?.error) {\n          setValue(\"PDBankId\", officeAddressDetails?.bankAccountId)\n          setValue(\"PDType\", officeAddressDetails?.type)\n          setValue(\"PDfirmName\", officeAddressDetails?.firmName)\n          setValue(\"PDTagName\", officeAddressDetails?.tagName)\n          setValue(\"PDMobileCode\", officeAddressDetails?.mobile?.code)\n          setValue(\"PDMobileNo\", officeAddressDetails?.mobile?.number)\n          setValue(\"PDEmail\", officeAddressDetails?.email)\n          setValue(\"PDGstNumber\", officeAddressDetails?.gstNumber)\n          setValue(\"PDPanNumber\", officeAddressDetails?.panNumber)\n          setValue(\"startInvoiceCount\", officeAddressDetails?.startInvoiceCount)\n          setValue(\"PDDesignation\", officeAddressDetails?.designation)\n          setValue(\"PDSignatureAuthority\", officeAddressDetails?.signatureName)\n          setValue(\"PDPrefix\", officeAddressDetails?.prefix)\n          setValue(\"PDAddress\", officeAddressDetails?.address?.street)\n          setValue(\"PDCity\", officeAddressDetails?.address?.city)\n          setValue(\"PDState\", officeAddressDetails?.address?.state)\n          setValue(\"PDCountry\", officeAddressDetails?.address?.country)\n          setValue(\"PDPinCode\", officeAddressDetails?.address?.pinCode)\n          setValue(\"headerfileUplaodLink\", officeAddressDetails?.headerImage)\n          setValue(\"footerfileUplaodLink\", officeAddressDetails?.signatureImage)\n          setValue(\"upiId\", officeAddressDetails?.upiId)\n          setValue(\"invoiceName\", officeAddressDetails?.invoiceName)\n          setValue(\"receiptName\", officeAddressDetails?.receiptName)\n          setValue(\"advanceName\", officeAddressDetails?.advanceName)\n          setValue(\"isGstEnabled\", officeAddressDetails?.isGSTEnabled ? \"true\" : \"false\")\n          setValue(\"status\", officeAddressDetails?.status ? \"true\" : \"false\")\n          setEditorValue(officeAddressDetails?.termsAndCond)\n        }\n      })\n    }\n  }, [officeAddressDetails])\n  useEffect(() => {\n    dispatch(getofficeAddressDetails({\n      _id: officeAddressId\n    }))\n  }, [])\n  const handleHeaderFileChange = (file) => {\n    if (!file) return;\n    const isPdf = file.type === 'application/pdf';\n    const filePreviewUrl = URL.createObjectURL(file); // Generate preview URL for non-PDF files\n\n    // Show SweetAlert confirmation before uploading\n    Swal.fire({\n      title: 'Preview your file',\n      html: `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n                <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n                ${isPdf\n          ? `<p style=\"font-size: 16px; color: #074173;\">${file.name}</p>`\n          : `<img src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">`\n        }\n                <br>\n            </div>\n        `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm!',\n      cancelButtonText: 'Cancel',\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Proceed with file upload only if the user confirms\n        dispatch(\n          fileUploadFunc({\n            filePath: file,\n            isVideo: false,\n            isMultiple: false,\n          })\n        ).then((data) => {\n          if (!data.error) {\n            setValue('headerfileUplaodLink', data?.payload?.data);\n\n            // Show success message after upload\n            Swal.fire({\n              icon: 'success',\n              title: 'Uploaded!',\n              text: 'Your file has been successfully uploaded.',\n              timer: 2000,\n              showConfirmButton: false\n            });\n          }\n        }).then(() => {\n          if (headerRef.current) headerRef.current.value = ''\n        })\n      } else {\n\n      }\n    });\n  };\n\n  const handleFooterFileChange = (file) => {\n    if (!file) return;\n    const isPdf = file.type === 'application/pdf';\n    const filePreviewUrl = URL.createObjectURL(file); // Generate preview URL for non-PDF files\n\n    // Show SweetAlert confirmation before uploading\n    Swal.fire({\n      title: 'Preview your file',\n      html: `\n          <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n              <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n              ${isPdf\n          ? `<p style=\"font-size: 16px; color: #074173;\">${file.name}</p>`\n          : `<img src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">`\n        }\n              <br>\n          </div>\n      `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm!',\n      cancelButtonText: 'Cancel',\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Proceed with file upload only if the user confirms\n        dispatch(\n          fileUploadFunc({\n            filePath: file,\n            isVideo: false,\n            isMultiple: false,\n          })\n        ).then((data) => {\n          if (!data.error) {\n            setValue('footerfileUplaodLink', data?.payload?.data);\n\n            // Show success message after upload\n            Swal.fire({\n              icon: 'success',\n              title: 'Uploaded!',\n              text: 'Your file has been successfully uploaded.',\n              timer: 2000,\n              showConfirmButton: false\n            });\n          }\n        }).then(() => {\n          if (footerRef.current) footerRef.current.value = ''\n        })\n      } else {\n        \n      }\n    });\n  };\n\n  const handleEditorChange = (value) => {\n    setEditorValue(value);\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        {officeAddressLoading ? <Loader /> : <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Bank<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n\n                {...register(\"PDBankId\",)}\n                className={`${inputClassName}  ${errors.PDBankId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                showSearch\n                filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                }\n              // onFocus={handleFocusCompany}\n              >\n                <option value=''>\n                  select bank\n                </option>\n                {\n                  branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                  branchDetailsData.data.bankData.map((type) => (\n                    <option key={type._id} value={type._id}>\n                      {`${type.bankName} (${type.branchName})`}\n                    </option>\n                  ))\n                }\n              </select>\n              {errors.PDBankId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBankId.message}\n                </p>\n              )}\n            </div>\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Type<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDType\",)}\n                className={`${inputClassName}  ${errors.PDType\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                showSearch\n                filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                }\n              >\n                <option value=''>\n                  select Type\n                </option>\n                <option value='invoice'>\n                  Invoice\n                </option>\n                <option value='receipt'>\n                  Receipt\n                </option>\n              </select>\n              {errors.PDType && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDType.message}\n                </p>\n              )}\n            </div> */}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Firm Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDfirmName\", {\n                  required: \"Firm Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDfirmName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Firm Name\"\n              />\n              {errors.PDfirmName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDfirmName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Tag Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDTagName\", {\n                  required: \"Tag Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDTagName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Tag Name\"\n              />\n              {errors.PDTagName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDTagName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                invoice Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"invoiceName\", {\n                  required: \"invoice Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.invoiceName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter invoice Name\"\n              />\n              {errors.invoiceName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.invoiceName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                receipt Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"receiptName\", {\n                  required: \"receipt Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.receiptName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter receipt Name\"\n              />\n              {errors.receiptName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.receiptName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                advance Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"advanceName\", {\n                  required: \"advance Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.advanceName ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter advance Name\"\n              />\n              {errors.advanceName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.advanceName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Invoice Prefix<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDPrefix\", {\n                  required: \"Invoice Prefix is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDPrefix ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Invoice Prefix\"\n              />\n              {errors.PDPrefix && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDPrefix.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n                                      <label className={`${inputLabelClassName}`}>\n                                        Start Invoice Count<span className=\"text-red-600\">*</span>\n                                      </label>\n                                      <input\n                                        type=\"number\"\n                                        {...register(\"startInvoiceCount\", {\n                                          required: \"Start Invoice Count is required\",\n                        \n                                        })}\n                                        className={` ${inputClassName} ${errors.startInvoiceCount ? \"border-[1px] \" : \"border-gray-300\"\n                                          }`}\n                                        placeholder=\"Enter Start Invoice Count\"\n                                      />\n                                      {errors.startInvoiceCount && (\n                                        <p className=\"text-red-500 text-sm\">\n                                          {errors.startInvoiceCount.message}\n                                        </p>\n                                      )}\n                                    </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                GST Number\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDGstNumber\", {\n                  pattern: {\n                    value: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}[Z]{1}[0-9A-Z]{1}$/,\n                    message: \"Invalid GST Number format (29AAACH7409R1ZX)\",\n                  },\n                })}\n                className={` ${inputClassName} ${errors.PDGstNumber ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter GST Number\"\n                maxLength={15}\n              />\n              {errors.PDGstNumber && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDGstNumber.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Pan Number<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDPanNumber\", {\n                  required: \"Pan Number is required\",\n                  pattern: {\n                    value: /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/,\n                    message: \"Invalid PAN card format (ABCDE1234E)\",\n                  }\n\n                })}\n                className={` ${inputClassName} ${errors.PDPanNumber ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Pan Number\"\n              />\n              {errors.PDPanNumber && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDPanNumber.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Upi Id<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"upiId\", {\n                  required: \"Firm Name is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.upiId ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Firm Name\"\n              />\n              {errors.upiId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.upiId.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Designation<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDDesignation\", {\n                  required: \"Designation is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDDesignation ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Designation\"\n              />\n              {errors.PDDesignation && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDDesignation.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                SignatureAuthority Name<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDSignatureAuthority\", {\n                  required: \"Signature Authority is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.PDSignatureAuthority ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter SignatureAuthority\"\n              />\n              {errors.PDSignatureAuthority && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDSignatureAuthority.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Gst Enabled</label>\n              <select\n                {...register(\"isGstEnabled\", {\n                })}\n                className={`${inputClassName} bg-white ${errors.isGstEnabled ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n              >\n                <option value={true}>Yes</option>\n                <option value={false}>No</option>\n              </select>\n              {errors.isGstEnabled && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.isGstEnabled.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value=\"true\">Active</Select.Option>\n                    <Select.Option value=\"false\">In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1  md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName} `}>\n                Header Upload\n              </label>\n              <div className=\"flex  flex-col\">\n                <Controller\n                  name=\"headerfileUpload\"\n                  control={control}\n\n                  render={({ field }) => (\n                    <>\n                      <input\n                        ref={headerRef}\n                        type=\"file\"\n                        id=\"file-upload\"\n                        className=\"hidden \"\n                        onChange={(e) => {\n                          field.onChange(e);\n                          handleHeaderFileChange(e.target.files[0]);\n                        }}\n                      />\n                      <br />\n                      <label\n                        htmlFor=\"file-upload\"\n                        className=\"bg-header text-white w-36 py-1.5  px-3 text-nowrap text-sm rounded cursor-pointer\"\n                      >\n                        Header Upload\n                      </label>\n                      {errors.headerfileUpload && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.headerfileUpload.message}</p>\n                      )}\n                    </>\n                  )}\n                />\n                {watch('headerfileUplaodLink') &&\n                  //  <img\n                  //   src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('headerfileUplaodLink')}`}\n                  //   alt=\"Uploaded\"\n                  //   className=\"w-20 h-20 shadow rounded-sm\"\n                  // />\n\n                  <Image\n                    width={90}\n                    height={90}\n                    src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('headerfileUplaodLink')}`}\n                    className=\"w-20 h-20 shadow rounded-sm\"\n                  />\n                }\n              </div>\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>\n              Signature Upload \n              </label>\n              <div className=\"flex flex-col \">\n                <Controller\n                  name=\"footerfileUpload\"\n                  control={control}\n\n                  render={({ field }) => (\n                    <>\n                      <input\n                        type=\"file\"\n                        id=\"footer-file-upload\"\n                        ref={footerRef}\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          field.onChange(e);\n                          handleFooterFileChange(e.target.files[0]);\n                        }}\n                      />\n                      <br />\n                      <label\n                        htmlFor=\"footer-file-upload\"\n                        className=\"bg-header text-white  w-36  py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                      >\n                        Footer Upload\n                      </label>\n                      {errors.footerfileUpload && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.footerfileUpload.message}</p>\n                      )}\n                    </>\n                  )}\n                />\n                {watch('footerfileUplaodLink') &&\n                  // <img\n                  //   src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('footerfileUplaodLink')}`}\n                  //   alt=\"Uploaded\"\n                  //   className=\"w-20 h-20 shadow rounded-sm\"\n                  // />\n                  <Image\n                    width={90}\n                    height={90}\n                    src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('footerfileUplaodLink')}`}\n                    className=\"w-20 h-20 shadow rounded-sm\"\n                  />\n                }\n\n              </div>\n\n\n            </div>\n          </div>\n          <div className=\"mt-4 col-span-2\">\n            <ReactQuill\n              value={editorValue}\n              onChange={handleEditorChange}\n              placeholder=\"Write the email body here\"\n              modules={{\n                toolbar: [\n                  [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n                  [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                  ['bold', 'italic', 'underline', 'strike'],\n                  [{ 'align': [] }],\n                  ['link', 'image', 'video'],\n                  ['blockquote', 'code-block'],\n                  ['clean']\n                ],\n              }}\n              formats={['header', 'font', 'list', 'bold', 'italic', 'underline', 'link', 'align', 'clean']}\n            />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Email<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"email\"\n                {...register(\"PDEmail\", {\n                  required: \"Email is required\",\n                  pattern: {\n                    value:\n                      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                    message: \"Please enter a valid email address\",\n                  },\n                })}\n                className={` ${inputClassName} ${errors.PDEmail ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Email\"\n              />\n              {errors.PDEmail && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDEmail.message}\n                </p>\n              )}\n            </div>\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  code<span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDMobileCode\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n\n                {errors[`PDMobileCode`] && (\n                  <p className={`${inputerrorClassNameAutoComplete}`}>\n                    {errors[`PDMobileCode`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No<span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`PDMobileNo`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`PDMobileNo`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`PDMobileNo`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`PDMobileNo`].message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Primary Address<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"PDAddress\", {\n                  required: \"Address  is required\",\n                })}\n                className={`${inputClassName} ${errors.PDAddress\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Address \"\n              />\n              {errors.PDAddress && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDAddress.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 px-3\">\n            <div>\n              <div className={`${inputLabelClassName}`}>\n                Country <span className=\"text-red-600\">*</span>\n              </div>\n              <Controller\n                control={control}\n                name=\"PDCountry\"\n                rules={{ required: \"Country is required\" }}\n                render={({ field }) => (\n                  <AutoComplete\n                    className=\"w-full\"\n                    {...field}\n                    onChange={(value) => {\n                      // Directly handle country change by using setValue from React Hook Form\n                      field.onChange(value); // Update the value in the form control\n                    }}\n                    options={countryListData?.docs?.map((type) => ({\n                      value: type?.name,\n                    }))}\n                  >\n                    <input\n                      placeholder=\"Enter Country\"\n                      onFocus={() => {\n                        dispatch(\n                          countrySearch({\n                            isPagination: false,\n                            text: \"\",\n                            sort: true,\n                            status: true,\n                          })\n                        );\n                      }}\n                      className={`${inputClassName} ${errors.PDCountry\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    />\n                  </AutoComplete>\n                )}\n              />\n              {errors.PDCountry && (\n                <p className={`${inputerrorClassNameAutoComplete}`}>\n                  {errors.PDCountry.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <div className={`${inputLabelClassName}`}>\n                State <span className=\"text-red-600\">*</span>\n              </div>\n              <Controller\n                control={control}\n                name=\"PDState\"\n                rules={{ required: \"State is required\" }}\n                render={({ field }) => (\n                  <AutoComplete\n                    className=\"w-full\"\n                    {...field}\n                    onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                    options={stateListData?.docs?.map((type) => ({\n                      value: type?.name,\n                    }))}\n                  >\n                    <input\n                      placeholder=\"Enter State\"\n                      onFocus={() => {\n                        dispatch(\n                          stateSearch({\n                            isPagination: false,\n                            text: \"\",\n                            countryName: watch('PDCountry'),\n                            sort: true,\n                            status: true,\n                          })\n                        );\n                      }}\n                      className={`${inputClassName} ${errors.PDState\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    />\n                  </AutoComplete>\n                )}\n              />\n              {errors.PDState && (\n                <p className={`${inputerrorClassNameAutoComplete}`}>\n                  {errors.PDState.message}\n                </p>\n              )}\n            </div>\n\n            {/* City Field */}\n            <div>\n              <div className={`${inputLabelClassName}`}>\n                City <span className=\"text-red-600\">*</span>\n              </div>\n              <Controller\n                control={control}\n                name=\"PDCity\"\n                rules={{ required: \"City is required\" }}\n                render={({ field }) => (\n                  <AutoComplete\n                    className=\"w-full\"\n                    {...field}\n                    onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                    options={cityListData?.docs?.map((type) => ({\n                      value: type?.name,\n                    }))}\n                  >\n                    <input\n                      onFocus={() => {\n                        dispatch(\n                          citySearch({\n                            isPagination: false,\n                            text: \"\",\n                            sort: true,\n                            status: true,\n                            stateName: watch('PDState'),\n                          })\n                        );\n                      }}\n                      placeholder=\"Enter City\"\n                      className={`${inputClassName} ${errors.PDCity\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    />\n                  </AutoComplete>\n                )}\n              />\n              {errors.PDCity && (\n                <p className={`${inputerrorClassNameAutoComplete}`}>\n                  {errors.PDCity.message}\n                </p>\n              )}\n            </div>\n\n            {/* Pin Code Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Pin Code <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"PDPinCode\"\n                rules={{ required: \"Pin Code is required\" }}\n                render={({ field }) => (\n                  <input\n                    {...field}\n                    type=\"number\"\n                    placeholder=\"Enter Pin Code\"\n                    maxLength={6}\n                    onInput={(e) => {\n                      if (e.target.value.length > 6) {\n                        e.target.value = e.target.value.slice(0, 6);\n                      }\n                    }}\n                    className={`${inputClassName} ${errors.PDPinCode\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                      }`}\n                  />\n                )}\n              />\n              {errors.PDPinCode && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDPinCode.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex  mt-4 justify-end\">\n            <button\n              type=\"submit\"\n              disabled={officeAddressLoading}\n              className={`${officeAddressLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2  px-4 rounded`}\n            >\n              {officeAddressLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>}\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditOfficeAddress;\n"],"names":["EditOfficeAddress","_branchDetailsData$da","_branchDetailsData$da2","officeAddressIdEnc","useParams","headerRef","useRef","footerRef","loading","officeAddressLoading","useSelector","state","officeAddress","officeAddressId","decrypt","register","handleSubmit","control","watch","formState","errors","setValue","useForm","editorValue","setEditorValue","useState","dispatch","useDispatch","navigate","useNavigate","companyList","company","branchList","branch","countryListData","JSON","parse","localStorage","getItem","concat","domainName","country","stateListData","states","cityListData","city","branchDetailsData","officeAddressDetails","useEffect","branchId","getBranchDetails","_id","then","data","_officeAddressDetails","_officeAddressDetails2","_officeAddressDetails3","_officeAddressDetails4","_officeAddressDetails5","_officeAddressDetails6","_officeAddressDetails7","error","bankAccountId","type","firmName","tagName","mobile","code","number","email","gstNumber","panNumber","startInvoiceCount","designation","signatureName","prefix","address","street","pinCode","headerImage","signatureImage","upiId","invoiceName","receiptName","advanceName","isGSTEnabled","status","termsAndCond","getofficeAddressDetails","_jsx","GlobalLayout","children","className","Loader","_jsxs","autoComplete","onSubmit","finalPayload","companyId","directorId","PDBankId","PDAddress","PDCity","PDState","PDCountry","PDPinCode","PDfirmName","PDTagName","PDMobileCode","PDMobileNo","PDEmail","PDGstNumber","PDPanNumber","PDDesignation","headerfileUplaodLink","footerfileUplaodLink","PDSignatureAuthority","PDPrefix","isGstEnabled","updateofficeAddress","inputLabelClassName","_objectSpread","inputClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","value","bankData","length","map","bankName","branchName","message","required","placeholder","pattern","maxLength","Controller","name","render","_ref","field","Select","inputAntdSelectClassName","Option","_ref2","_Fragment","ref","id","onChange","e","file","isPdf","filePreviewUrl","URL","createObjectURL","Swal","title","html","showCancelButton","confirmButtonText","cancelButtonText","result","isConfirmed","fileUploadFunc","filePath","isVideo","isMultiple","_data$payload","payload","icon","text","timer","showConfirmButton","current","handleHeaderFileChange","target","files","htmlFor","headerfileUpload","Image","width","height","src","process","_ref3","_data$payload2","handleFooterFileChange","footerfileUpload","ReactQuill","modules","toolbar","formats","rules","_ref4","CustomMobileCodePicker","inputerrorClassNameAutoComplete","minLength","onInput","slice","_ref5","_countryListData$docs","AutoComplete","options","docs","onFocus","countrySearch","isPagination","sort","_ref6","_stateListData$docs","stateSearch","countryName","_ref7","_cityListData$docs","citySearch","stateName","_ref8","disabled"],"sourceRoot":""}