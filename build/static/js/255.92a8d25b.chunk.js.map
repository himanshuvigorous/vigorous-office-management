{"version":3,"file":"static/js/255.92a8d25b.chunk.js","mappings":"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","sources":["pages/global/other/Plan/PlanApprovalSidebarModal.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { transformDataRole, } from \"../../../../constents/global\";\nimport { Checkbox, Table } from \"antd\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { dynamicSidebarSearch } from \"../../../DyanmicSidebar/DyanmicSidebarFeatures/_dyanmicSidebar_reducers\";\nimport { planSidbarpermission, planSidbarpermissionDetails } from \"./PlanFeatures/_plan_reducers\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nfunction PlanApprovalSidebarModal() {\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n    } = useForm();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [checkAll, setCheckAll] = useState(false);\n    const { planManagerIdEnc } = useParams();\n    const planManagerId = decrypt(planManagerIdEnc);\n    const [permissionsState, setPermissionsState] = useState([]);\n    const [permissionsStateView, setPermissionsStateView] = useState([]);\n    const { sidebarListData } = useSelector((state) => state.dynamicSidebar);\n    const { sidebarViewData } = useSelector((state) => state.dynamicSidebar);\n      const { planSidbarpermissionDetailsData ,loading } = useSelector((state) => state.plan);\n    \n      \n    useEffect(() => {\n        dispatch(dynamicSidebarSearch({isPagination: false}));\n        dispatch(planSidbarpermissionDetails({planId:planManagerId}))\n        }      \n    , []);\n    useEffect(() => {\n        setPermissionsStateView(transformDataRole(sidebarViewData));\n    }, [sidebarViewData]);\n    useEffect(() => {\n        if (sidebarListData && planSidbarpermissionDetailsData) {\n            const allowedPermissions = planSidbarpermissionDetailsData;\n            const updatedPermissions = sidebarListData?.map((sidebarItem) => {\n                const data = allowedPermissions?.find(\n                    (perm) => perm?.pageId === sidebarItem?._id\n                );\n                return {\n                    ...sidebarItem,\n                    isAllowed: data?.isAllowed || false,\n                };\n            });\n            setPermissionsState(updatedPermissions);\n            if (updatedPermissions) {\n                const allChecked = updatedPermissions.every(item => item.isAllowed);\n                setCheckAll(allChecked);\n            }\n        } else if(sidebarListData ){\n            const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n                ...sidebarItem,\n                isAllowed:false\n            }));\n            setPermissionsState(updatedPermissions);\n        }\n    }, [sidebarListData, planSidbarpermissionDetailsData]);\n    const handlePermissionToggleRow = (e, pageId) => {\n        const isChecked = e.target.checked;\n        const updatedPermissions = permissionsState?.map(item => {\n            if (item._id === pageId) {\n                return { ...item, isAllowed: isChecked };\n            }\n            return item;\n        });\n        if (!isChecked) {\n            const uncheckChildren = (parentId) => {\n                updatedPermissions.forEach(item => {\n                    if (item.parentPageId === parentId) {\n                        item.isAllowed = false;\n                        uncheckChildren(item._id);\n                    }\n                });\n            };\n            uncheckChildren(pageId);\n        }\n        if (isChecked) {\n            let currentId = pageId;\n            let parentId = updatedPermissions.find(item => item._id === currentId)?.parentPageId;\n            \n            while (parentId) {\n                const parentIndex = updatedPermissions.findIndex(item => item._id === parentId);\n                if (parentIndex !== -1) {\n                    updatedPermissions[parentIndex].isAllowed = true;\n                    parentId = updatedPermissions[parentIndex].parentPageId;\n                } else {\n                    parentId = null;\n                }\n            }\n        }\n\n        setPermissionsState(updatedPermissions);\n        const allChecked = updatedPermissions.every(item => item.isAllowed);\n        setCheckAll(allChecked);\n    };\n\n    const handleCheckAll = (e) => {\n        const isChecked = e.target.checked;\n        setCheckAll(isChecked);\n\n        const updatedPermissions = permissionsState?.map((sidebarItem) => ({\n            ...sidebarItem,\n            isAllowed: isChecked,\n        }));\n        setPermissionsState(updatedPermissions);\n    };\n\n    const onSubmit = (data) => {\n        const permission = permissionsState\n            ?.map((permissionData) => {\n                if (permissionData?.isAllowed) {\n                    return {\n                        pageId: permissionData?._id,\n                        isAllowed: permissionData?.isAllowed ,\n                    };\n                }\n                return null;\n            })\n            .filter(Boolean);\n\n        const finalPayload = {\n            planId: planManagerId,\n            pageArr: permission,\n        };\n\n\n\ndispatch(planSidbarpermission(finalPayload)).then((response) => {\n      if (!response.error) {\n        navigate(-1);\n      }\n    });\n\n\n    };\n    const getPermission = (id) => {\n        return permissionsState?.find((item) => item._id === id)?.isAllowed;\n    };\n\n    const columns = [\n        {\n            title: \"Title\",\n            dataIndex: \"title\",\n            width: 300,\n            key: \"_id\",\n            render: (text, permission) => <div className=\"text-nowrap\">{text}</div>,\n        },\n        {\n            title: (\n                <div>\n                    <Checkbox checked={checkAll} \n                    onChange={handleCheckAll}\n                     />\n                </div>\n            ),\n            key: \"_id\",\n            width: 100,\n            render: (text, permission) => (\n                <div>\n                    <Checkbox\n                        checked={getPermission(permission._id)}\n                        onChange={(e) => handlePermissionToggleRow(e, permission._id)}\n                    />\n                </div>\n            ),\n        },\n    ];\n\n    return (\n        <GlobalLayout>\n            <div className=\"\">\n                <Table\n                    columns={columns}\n                    pagination={false}\n                    dataSource={permissionsStateView}\n                    scroll={{\n                   \n                        x: true,\n                    }}\n                    rowKey=\"_id\"\n                />\n                <div className=\"flex justify-end my-2 mx-2\">\n                    <button\n                        type=\"button\"\n                        disabled={loading}\n                        onClick={handleSubmit(onSubmit)}\n                        className={`${!loading ? 'bg-header' :'bg-gray-400'} text-white py-1.5 px-3 text-nowrap text-sm rounded `}\n                    >\n                        {loading?<ListLoader/>: 'Save'}\n                    </button>\n                </div>\n            </div>\n        </GlobalLayout>\n    );\n}\n\nexport default PlanApprovalSidebarModal;"],"names":["handleSubmit","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","checkAll","setCheckAll","useState","planManagerIdEnc","useParams","planManagerId","decrypt","permissionsState","setPermissionsState","permissionsStateView","setPermissionsStateView","sidebarListData","useSelector","state","dynamicSidebar","sidebarViewData","planSidbarpermissionDetailsData","loading","plan","useEffect","dynamicSidebarSearch","isPagination","planSidbarpermissionDetails","planId","transformDataRole","allowedPermissions","updatedPermissions","map","sidebarItem","data","find","perm","pageId","_id","_objectSpread","isAllowed","allChecked","every","item","getPermission","id","_permissionsState$fin","columns","title","dataIndex","width","key","render","text","permission","_jsx","className","children","Checkbox","checked","onChange","e","isChecked","target","handlePermissionToggleRow","uncheckChildren","parentId","forEach","parentPageId","_updatedPermissions$f","currentId","parentIndex","findIndex","GlobalLayout","_jsxs","Table","pagination","dataSource","scroll","x","rowKey","type","disabled","onClick","permissionData","filter","Boolean","finalPayload","pageArr","planSidbarpermission","then","response","error","concat","ListLoader"],"sourceRoot":""}