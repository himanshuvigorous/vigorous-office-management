{"version":3,"file":"static/js/6433.55919875.chunk.js","mappings":"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","sources":["pages/global/other/bankname/CreateBankName.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useNavigate } from \"react-router-dom\";\nimport { formButtonClassName, inputAntdSelectClassName, inputClassName, inputLabelClassName, } from \"../../../../constents/global\";\nimport getUserIds from '../../../../constents/getUserIds';\nimport { useEffect } from \"react\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { createbankNameFunc } from \"./bankNameFeatures/_bankName_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { Select } from \"antd\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nfunction CreateBankName() {\n  const { loading: bankLoading } = useSelector(\n    (state) => state.bankname\n  );\n\n  const { register, handleSubmit, control, formState: { errors } } = useForm();\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const { userCompanyId, userType } = getUserIds();\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(companySearch({ isPagination: false, text: \"\", sort: true, status: true }));\n    }\n  }, []);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      \"name\": data.bankname,\n      companyId: companyId,\n    };\n\n    dispatch(createbankNameFunc(finalPayload)).then((data) => {\n      !data.error && navigate(-1)\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company<span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"companyId\", {\n                  required: \"Company is required\",\n                })}\n                className={` ${inputClassName} ${errors.companyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Company\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>\n                    {type?.fullName}({type?.userName})\n                  </option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"companyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.companyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.companyId.message}\n                </p>\n              )}\n            </div>}\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Bank Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"bankname\", {\n                  required: \"bank name Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.bankname\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter bank name \"\n              />\n              {errors.bankname && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.bankname.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={bankLoading}\n              className={`${bankLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {bankLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateBankName\n"],"names":["loading","bankLoading","useSelector","state","bankname","register","handleSubmit","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","userCompanyId","userType","getUserIds","companyList","companyListLoading","company","companyId","useWatch","name","defaultValue","useEffect","companySearch","isPagination","text","sort","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","createbankNameFunc","then","error","concat","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","_id","fullName","message","inputClassName","placeholder","Loader"],"sourceRoot":""}