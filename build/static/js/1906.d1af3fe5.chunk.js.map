{"version":3,"file":"static/js/1906.d1af3fe5.chunk.js","mappings":"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","sources":["pages/supportModal/SupportModalList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport getUserIds from \"../../constents/getUserIds\";\nimport {\n  getSupportList,\n  statusupdateSupportFunc,\n} from \"./supportFeatures/_supportmodal_reducer\";\nimport Loader2 from \"../../global_layouts/Loader/Loader2\";\nimport { Modal, Select, Tooltip } from \"antd\";\nimport CustomPagination from \"../../component/CustomPagination/CustomPagination\";\nimport usePermissions from \"../../config/usePermissions\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport moment from \"moment\";\nimport { MdOutlineChangeCircle } from \"react-icons/md\";\nimport Loader from \"../../global_layouts/Loader\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputAntdSelectClassNameFilter,\n  inputLabelClassName,\n} from \"../../constents/global\";\nimport { FaEye, FaImages, FaIndustry, FaRegAddressCard } from \"react-icons/fa\";\nimport { FaPeopleGroup } from \"react-icons/fa6\";\nimport { AiOutlineMail, AiOutlineTags } from \"react-icons/ai\";\nimport { IoPersonSharp } from \"react-icons/io5\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport ListLoader from \"../../global_layouts/ListLoader\";\n\nconst SupportModalList = () => {\n  const {\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const [viewSupportDetails, setViewSupportDetails] = useState(false);\n  const { SupportList, loading, totalSupportCount } = useSelector(\n    (state) => state.supportModal\n  );\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const [viewAttachment, setViewAttachment] = useState(false)\n  const [viewAttachmentData, setViewAttachmentData] = useState([])\n  const [currentPage, setCurrentPage] = useState(1);\n  const limit = 10;\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const Status = useWatch({\n    control,\n    name: \"status\",\n    defaultValue: \"\",\n  });\n\n\n\n  const { canCreate, canRead, canUpdate, canDelete } = usePermissions();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const onPaginationChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType,\n  } = getUserIds();\n\n  useEffect(() => {\n    fetchSupportList();\n  }, [CompanyId, BranchId, Status]);\n\n\n\n  const fetchSupportList = () => {\n    const payload = {\n      companyId: userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.userType === \"employee\" ? userCompanyId : CompanyId,\n      directorId: userDirectorId,\n      branchId: userType == 'companyBranch' ? userInfoglobal?._id : userInfoglobal?.userType === \"employee\" ? userBranchId : BranchId,\n      page: currentPage,\n      limit: limit,\n      text: \"\",\n      sort: '',\n      status: Status,\n      isPagination: true,\n    };\n    dispatch(getSupportList(payload));\n  };\n\n  const changeStatus = (e, element) => {\n    const payload = {\n      _id: element?._id,\n      status: e.target.value,\n    };\n    dispatch(statusupdateSupportFunc(payload)).then((data) => {\n      fetchSupportList();\n    });\n  };\n  const [data, setData] = useState();\n  const handleViewStatusDetails = (element) => {\n    setViewSupportDetails((prev) => !prev);\n    setData(element);\n  };\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? CompanyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId]);\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"grid sm:grid xl:grid-cols-6 lg:grid-cols-3 grid-cols-1 gap-2 sm:justify-between items-center py-1 px-2 text-[14px] rounded-md\">\n        {userInfoglobal?.userType === \"admin\" && (\n          <div className=\"\">\n\n            <Controller\n              name=\"PDCompanyId\"\n              control={control}\n              rules={{\n                required: \"Company is required\",\n              }}\n              render={({ field }) => (\n                <Select\n                  {...field}\n                  className={` ${inputAntdSelectClassNameFilter} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Select Company\"\n                  showSearch\n                  filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                >\n                  <Select.Option value=\"\">Select Company</Select.Option>\n                  { companyListLoading ? (\n                    <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option>\n                  ) : companyList?.map((element) => (\n                    <Select.Option value={element?._id}>\n                      {\" \"}\n                      {element?.fullName}{\" \"}\n                    </Select.Option>\n                  ))}\n                </Select>\n              )}\n            />\n            {errors.PDCompanyId && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.PDCompanyId.message}\n              </p>\n            )}\n          </div>\n        )}\n        {(userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"companyDirector\") && (\n            <div className=\"\">\n\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{\n                  required: \"Branch is required\",\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={` ${inputAntdSelectClassNameFilter} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                    placeholder=\"Select Branch\"\n                    showSearch\n                    filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? (\n                      <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option>\n                    ) : branchList?.map((element) => (\n                      <Select.Option value={element?._id}>\n                        {\" \"}\n                        {element?.fullName}{\" \"}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>\n          )}\n        <Controller\n          name=\"status\"\n          control={control}\n          rules={{}}\n          render={({ field }) => (\n            <Select\n              {...field}\n              className={` w-32 ${inputAntdSelectClassNameFilter} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              placeholder=\"Select Status\"\n              showSearch\n              filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n              }\n            >\n\n              <Select.Option value=\"\">Select Status</Select.Option>\n\n              <Select.Option value=\"Rejected\"> Rejected </Select.Option>\n              <Select.Option value=\"Resolved\"> Resolved </Select.Option>\n              <Select.Option value=\"Open\"> Open </Select.Option>\n\n            </Select>\n          )}\n        />\n        <button\n          onClick={() => {\n            setValue(\"PDBranchId\", \"\");\n            setValue(\"PDCompanyId\", \"\");\n            setValue(\"status\", \"\");\n          }}\n          className=\"bg-header w-56  py-[6px] my-0.5 rounded-md flex px-5 justify-center items-center  text-white\"\n        >\n          <span className=\"text-[12px]\">Reset</span>\n        </button>\n      </div>\n      <div className=\"w-full overflow-x-auto bg-white\">\n        <table className=\"w-full max-w-full rounded-xl  \">\n          <thead className=\"\">\n            <tr className=\"border-b-[1px] border-[#DDDDDD] capitalize text-[12px] bg-header text-white font-[500]  h-[40px]\">\n              <th className=\"border-none p-2 whitespace-nowrap w-[5%]\">\n                <div className=\"flex justify-start items-center space-x-1\">\n                  <span>S.No.</span>\n                </div>\n              </th>\n              <th className=\"border-none p-2 whitespace-nowrap w-[10%]\">\n                <div className=\"flex justify-start items-center space-x-1\">\n                  <span>Title</span>\n                </div>\n              </th>\n              <th className=\"border-none p-2 whitespace-nowrap w-[10%]\">\n                <div className=\"flex justify-start items-center space-x-1\">\n                  <span>Description</span>\n                </div>\n              </th>\n              <th className=\"border-none p-2 whitespace-nowrap w-[10%]\">\n                <div className=\"flex justify-start items-center space-x-1\">\n                  <span>Attachements</span>\n                </div>\n              </th>\n\n\n              <th className=\"border-none p-2 whitespace-nowrap\">\n                <div className=\"flex justify-start items-center space-x-1\">\n                  <span>created By</span>\n                </div>\n              </th>\n              <th className=\"border-none p-2 whitespace-nowrap\">\n                <div className=\"flex justify-start items-center space-x-1\">\n                  <span>created At </span>\n                </div>\n              </th>\n\n              <th className=\"border-none p-2 whitespace-nowrap\">Status</th>\n\n              <th className=\"border-none p-2 whitespace-nowrap\">Action</th>\n            </tr>\n          </thead>\n          {loading ? (\n            <tr className=\"bg-white bg-opacity-5 \">\n              <td\n                colSpan={10}\n                className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\"\n              >\n                <Loader2 />\n              </td>\n            </tr>\n          ) : (\n            <tbody>\n              {SupportList && SupportList?.length > 0 ? (\n                SupportList?.map((element, index) => (\n                  <tr\n                    className={`\n                             \n                            `}\n                  >\n                    <td className=\"whitespace-nowrap border-none p-2 text-[12px]\">\n                      {index + 1 + (currentPage - 1) * limit}\n                    </td>\n                    <td className=\"whitespace-nowrap border-none p-2 text-[12px]\">\n                      {element?.title}\n                    </td>\n                    <td className=\"whitespace-nowrap border-none p-2 text-[12px]\">\n                      {element?.description}\n                    </td>\n\n                    <td className=\"whitespace-nowrap border-none p-2 text-[12px]\">\n                      <Tooltip placement=\"topLeft\"  title={`${element?.attachment?.length > 0 ? \"View Attachments\" : \"No Attachment\"}`}>\n                        <button\n                          onClick={() => {\n                            setViewAttachment(true)\n                            setViewAttachmentData(element?.attachment)\n                          }}\n\n                          className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\"\n                          type=\"button\"\n                          disabled={!element?.attachment?.length > 0}\n                        >\n                          <FaImages\n                            className={!element?.attachment?.length > 0 ? \"text-gray-500\" : \" text-rose-700\"}\n                            size={16}\n                          />\n                        </button>\n                      </Tooltip>\n                    </td>\n\n\n\n                    <td className=\"whitespace-nowrap border-none p-2 text-[12px]\">\n                      {element?.createdBy || \"-\"}\n                    </td>\n\n                    <td className=\"whitespace-nowrap border-none p-2 text-[12px]\">\n                      {moment(element?.createdAt).format(\"DD-MM-YYYY\")}\n                    </td>\n                    <td className=\"whitespace-nowrap border-none p-2\">\n                      <Tooltip placement=\"topLeft\" \n                        title={`Status - ${element?.status === \"Open\"\n                          ? \"Open\"\n                          : element?.status === \"Resolved\"\n                            ? \"Resolved\"\n                            : \"Rejected\"\n                          }`}\n                      >\n                        <span\n                          className={`${element?.status === \"Open\"\n                            ? \"bg-yellow-200 border-yellow-500\"\n                            : element?.status === \"Resolved\"\n                              ? \"bg-[#E0FFBE] border-green-500\"\n                              : \"bg-red-200 border-red-500\"\n                            } border-[1px] px-2 py-1.5 rounded-lg text-black text-[12px]`}\n                        >\n                          {element?.status === \"Open\"\n                            ? \"Open\"\n                            : element?.status === \"Resolved\"\n                              ? \"Resolved\"\n                              : element?.status === \"Rejected\"\n                                ? \"Rejected\"\n                                : \"-\"}\n                        </span>\n                      </Tooltip>\n                    </td>\n\n\n\n\n                    <td className=\"whitespace-nowrap flex gap-2 border-none p-2\">\n                      <Tooltip placement=\"topLeft\" >\n                        <select\n                          className=\"border-[1px] px-2 py-1.5 rounded-lg text-[12px]\"\n                          value={element?.status}\n                          disabled={\n                            element?.status == \"Rejected\" ||\n                            element?.status == \"Resolved\"\n                          }\n                          onChange={(e) => {\n                            changeStatus(e, element);\n                          }}\n                        >\n                          <option value=\"Open\">Open</option>\n                          <option value=\"Resolved\">Resolved</option>\n                          <option value=\"Rejected\">Rejected</option>\n                        </select>\n                      </Tooltip>\n                      <Tooltip placement=\"topLeft\"  title={\"View Support Details\"}>\n                        <button\n                          onClick={() => {\n                            handleViewStatusDetails(element);\n                          }}\n                          className=\"px-2 py-2 text-xs rounded-md bg-transparent text-header border border-muted\"\n                          type=\"button\"\n                        >\n                          <FaEye\n                            className={`${\" hover:text-[#337ab7] text-[#3c8dbc]\"}`}\n                          />\n                        </button>\n                      </Tooltip>\n                    </td>\n\n\n                    {/* <td className=\"whitespace-nowrap border-none p-2\">\n                                <div className=\"flex   flex-row gap-1 w-full overflow-x-auto\">\n                                  {element?.assignedEmployeData?.map((element,index) => {\n                                    return (\n                                      <Tooltip placement=\"topLeft\" \n                                        title={`${element?.fullName}`}\n                                        key={element?.id}\n                                      >\n                                        <div\n                                          onClick={() => handleImageClick(element)}\n                                          className={`w-10 h-10 ${index>0 ? ' -ml-4' :'0'} rounded-full bg-gray-500 flex items-center justify-center`}\n                                        >\n                                          {element.profileImage ? (\n                                            <img\n                                              alt=\"\"\n                                              src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${element.profileImage}`}\n                                              className=\"rounded-full cursor-pointer min-w-10 min-h-10 w-10 h-10 ring-1 ring-amber-300\"\n                                            />\n                                          ) : (\n                                            <img\n                                              alt=\"\"\n                                              src={`/images/avatar.jpg`}\n                                              className=\"rounded-full cursor-pointer min-w-10 min-h-10 w-10 h-10 ring-1 ring-amber-300\"\n                                            />\n                                          )}\n                                        </div>\n                                      </Tooltip>\n                                    );\n                                  })}\n                                </div>\n                              </td> */}\n                    {/* <td className=\"whitespace-nowrap border-none p-2\">\n                                <span\n                                  className={`\n                                  ${\n                                    element?.status === \"Assigned\"\n                                      ? \"bg-blue-500 text-white\"\n                                      : element?.status === \"Accepted\"\n                                      ? \"bg-green-500 text-white\"\n                                      : element?.status === \"Pending_at_client\"\n                                      ? \"bg-yellow-300 text-black\"\n                                      : element?.status === \"Pending_at_department\"\n                                      ? \"bg-purple-300 text-black\"\n                                      : element?.status === \"Pending_at_colleague\"\n                                      ? \"bg-teal-300 text-black\"\n                                      : element?.status === \"Pending_at_manager\"\n                                      ? \"bg-orange-300 text-black\"\n                                      : element?.status === \"Work_in_progress\"\n                                      ? \"bg-indigo-500 text-white\"\n                                      : element?.status === \"Pending_for_approval\"\n                                      ? \"bg-pink-300 text-black\"\n                                      : element?.status === \"Pending_for_fees\"\n                                      ? \"bg-gray-400 text-black\"\n                                      : element?.status === \"Completed\"\n                                      ? \"bg-green-600 text-white\"\n                                      : element?.status === \"Task_Stop\"\n                                      ? \"bg-red-600 text-white\"\n                                      : element?.status === \"reAssign_to_other\"\n                                      ? \"bg-cyan-700 text-white\"\n                                      : \"bg-white text-black\"\n                                  } border-header border-[1px] px-2 py-1.5 rounded-lg text-[12px]`}\n                                  // onClick={() => handleStatusClick(element)}\n                                >\n                                  {statusMapping[element?.status] ||\n                                    \"Unknown Status\"}\n                                </span>\n                              </td> */}\n                    {/* {(canUpdate || canDelete || canRead) && (\n                                <td className=\"whitespace-nowrap border-none p-2\">\n                                  <span className=\"py-1.5 flex justify-start items-center space-x-2\">\n                                    {canRead && (\n                                      <Tooltip placement=\"topLeft\"  title=\"View Task\">\n                                        <button\n                                          onClick={() => {\n                                            navigate(\n                                              `/admin/task/view/${encrypt(\n                                                element?._id\n                                              )}/${encrypt(`manager`)}`\n                                            );\n                                          }}\n                                          className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\"\n                                          type=\"button\"\n                                        >\n                                          <BsEye\n                                            className=\" hover:text-[#337ab7] text-[#3c8dbc]\"\n                                            size={16}\n                                          />\n                                        </button>\n                                      </Tooltip>\n                                    )}\n                                    {canUpdate &&  \n                                      <Tooltip placement=\"topLeft\"  title={(element?.status !== \"Assigned\" ) ? `No Actions ${element?.status}` : \"Edit Task\"}>\n                                        <button\n                                          onClick={() => {\n                                            navigate(\n                                              `/admin/task/edit/${encrypt(\n                                                element?._id\n                                              )}`\n                                            );\n                                          }}\n                                          disabled={element?.status !== \"Assigned\"  }\n                                          className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\"\n                                          type=\"button\"\n                                        >\n                                          <FaPenToSquare\n                                            className={` ${(element?.status !== \"Assigned\" )  ? 'text-gray-500' :'  hover:text-[#337ab7] text-[#3c8dbc]'}`}\n                                            size={16}\n                                          />\n                                        </button>\n                                      </Tooltip>\n                                    }\n                                    <button\n                                  onClick={() => { element?.description && handleButtonClick(element) }}\n                                  className={`px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted`}\n                                  type=\"button\"\n                                >\n                                  <HiViewGrid\n                                    className={` ${element?.description ? 'hover:text-[#337ab7] text-[#3c8dbc]' : 'text-gray-400 cursor-not-allowed'}`}\n                                    size={16}\n                                  />\n                                </button>\n                                    {canRead && (\n                                      <Tooltip placement=\"topLeft\"  title=\"View Description\">\n                                        <button\n                                          onClick={() => handleOpenChat(element)}\n                                          className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\"\n                                          type=\"button\"\n                                        >\n                                          <HiChatAlt\n                                            className=\"hover:text-[#337ab7] text-[#3c8dbc]\"\n                                            size={16}\n                                          />\n                                        </button>\n                                      </Tooltip>\n                                    )}\n    \n                                    {canDelete && (\n                                      <Tooltip placement=\"topLeft\"  title={element?.status == \"Assigned\" ? \"Delete Task\" : \"No Actions\"}>\n                                        <button\n                                          onClick={() => handleDelete(element?._id)}\n                                          className=\"px-2 py-1.5 rounded-md bg-transparent border border-muted\"\n                                          type=\"button\"\n                                          disabled={element?.status != \"Assigned\"}\n                                        >\n                                          <RiDeleteBin5Line\n                                            className={  element?.status == \"Assigned\" ?  \"text-red-600 hover:text-red-500\" : \"text-gray-500\"}\n                                            size={16}\n                                          />\n                                        </button>\n                                      </Tooltip>\n                                    )}\n                                  </span>\n                                </td>\n                              )} */}\n                  </tr>\n                ))\n              ) : (\n                <tr className=\"bg-white bg-opacity-5 \">\n                  <td\n                    colSpan={8}\n                    className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\"\n                  >\n                    Record Not Found\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          )}\n        </table>\n\n        {viewSupportDetails && (\n          <div\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-[1560]\"\n            onClick={() => {\n              handleViewStatusDetails();\n            }}\n          >\n            <div\n              className=\"grid grid-cols-1 md:grid-cols-1  w-full sm:w-1/2\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div\n                className=\"w-full overflow-auto \"\n                onClick={(e) => e.preventDefault()}\n              >\n                <table className=\"w-full  rounded-lg shadow-md overflow-hidden bg-white\">\n                  <thead>\n                    <tr>\n                      <th className=\"text-header \">\n                        <div className=\"mt-2 ml-2\">Support Details</div>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"text-sm text-gray-700\">\n                    {/* Company Name Row */}\n                    <tr className=\" hover:bg-indigo-50\">\n                      <td className=\"p-3 text-gray-600\">\n                        <div className=\"flex items-center gap-2\">\n                          <IoPersonSharp className=\"size-4 text-header text-lg\" />\n                          <span className=\"text-[16px] font-medium\">Title</span>\n                        </div>\n                        <span className=\"block text-[15px] ml-4 font-light mt-1\">\n                          {data?.title || \"N/A\"}\n                        </span>\n                      </td>\n\n                      <td className=\"p-3  text-gray-600\">\n                        <div className=\"flex items-center gap-2\">\n                          <AiOutlineTags className=\"size-4 text-header text-lg\" />\n                          <span className=\"text-[16px] font-medium\">\n                            Description\n                          </span>\n                        </div>\n                        <span className=\"block text-[15px] ml-4 font-light mt-1\">\n                          {data.description || \"N/A\"}\n                        </span>\n                      </td>\n                    </tr>\n\n                    <tr className=\" hover:bg-indigo-50\">\n                      <td className=\"p-3 text-gray-600\">\n                        <div className=\"flex items-center gap-2\">\n                          <IoPersonSharp className=\"size-4 text-header text-lg\" />\n                          <span className=\"text-[16px] font-medium\">\n                            Created AT\n                          </span>\n                        </div>\n                        <span className=\"block text-[15px] ml-4 font-light mt-1\">\n                          {moment(data?.createdAt).format(\"DD-MM-YYYY\") ||\n                            \"N/A\"}\n                        </span>\n                      </td>\n\n                      <td className=\"p-3  text-gray-600\">\n                        <div className=\"flex items-center gap-2\">\n                          <AiOutlineTags className=\"size-4 text-header text-lg\" />\n                          <span className=\"text-[16px] font-medium\">\n                            Created By\n                          </span>\n                        </div>\n                        <span className=\"block text-[15px] ml-4 font-light mt-1\">\n                          {data.createdBy || \"N/A\"}\n                        </span>\n                      </td>\n                    </tr>\n\n                    <tr className=\" hover:bg-indigo-50\">\n                      <td className=\"p-3 text-gray-600\">\n                        <div className=\"flex items-center gap-2\">\n                          <IoPersonSharp className=\"size-4 text-header text-lg\" />\n                          <span className=\"text-[16px] font-medium\">\n                            status\n                          </span>\n                        </div>\n                        <span className=\"block text-[15px] ml-4 font-light mt-1\">\n                          {data.status || \"N/A\"}\n                        </span>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {SupportList?.length > 0 && (\n          <CustomPagination\n            totalCount={totalSupportCount}\n            pageSize={limit}\n            currentPage={currentPage}\n            onChange={onPaginationChange}\n          />\n        )}\n\n        <Modal\n          visible={viewAttachment}\n          onCancel={() => {\n            setViewAttachment(false)\n            setViewAttachmentData([])\n          }}\n          footer={null}\n           className=\"antmodalclassName\"\n          width='700px'\n          destroyOnClose\n        >\n          <div className=\"flex gap-2 flex-wrap mt-4\">\n            {viewAttachmentData?.map((filePath, index) => {\n              const fileExtension = filePath.split('.').pop().toLowerCase();\n              const isImage = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(fileExtension);\n              const isPdf = fileExtension === 'pdf';\n\n              return (\n                <div key={index} style={{ flex: '1 1 calc(33.333% - 10px)', marginBottom: '20px' }}>\n                  {isImage ? (\n                    // If it's an image, show the image\n                    <a\n                      href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${filePath}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      <img\n                        src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${filePath}`}\n                        alt={`attachment-${index}`}\n                        style={{ width: '100%', height: 'auto', borderRadius: '8px' }}\n                      />\n                    </a>\n                  ) : isPdf ? (<a\n                    href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${filePath}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <div style={{ width: '100%', height: '400px', border: '1px solid #ccc', borderRadius: '8px', overflow: 'hidden' }}>\n                      <iframe\n                        src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${filePath}`}\n                        title={`attachment-${index}`}\n                        style={{ width: '100%', height: '100%' }}\n                      ></iframe>\n                    </div>\n                  </a>\n                  ) : (\n                    <p>Unsupported file type</p>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </Modal>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default SupportModalList;\n"],"names":["SupportModalList","control","formState","errors","setValue","useForm","dispatch","useDispatch","viewSupportDetails","setViewSupportDetails","useState","SupportList","loading","totalSupportCount","useSelector","state","supportModal","companyList","companyListLoading","company","branchList","branchListloading","branch","viewAttachment","setViewAttachment","viewAttachmentData","setViewAttachmentData","currentPage","setCurrentPage","CompanyId","useWatch","name","defaultValue","BranchId","Status","canCreate","canRead","canUpdate","canDelete","usePermissions","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","useEffect","fetchSupportList","payload","companyId","_id","directorId","branchId","page","limit","text","sort","status","isPagination","getSupportList","data","setData","handleViewStatusDetails","element","prev","branchSearch","companySearch","_jsxs","GlobalLayout","children","className","_jsx","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassNameFilter","PDPlan","placeholder","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","fullName","PDCompanyId","message","_ref2","PDBranchId","_ref3","onClick","colSpan","Loader2","length","index","_element$attachment","_element$attachment2","_element$attachment3","title","description","Tooltip","placement","attachment","type","FaImages","size","createdBy","moment","createdAt","format","onChange","e","changeStatus","target","statusupdateSupportFunc","then","FaEye","stopPropagation","preventDefault","IoPersonSharp","AiOutlineTags","CustomPagination","totalCount","pageSize","Modal","visible","onCancel","footer","width","destroyOnClose","filePath","fileExtension","split","pop","isImage","isPdf","style","flex","marginBottom","href","process","rel","src","alt","height","borderRadius","border","overflow"],"sourceRoot":""}