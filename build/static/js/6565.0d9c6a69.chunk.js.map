{"version":3,"file":"static/js/6565.0d9c6a69.chunk.js","mappings":"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","sources":["pages/global/other/bankname/EditBankName.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport getUserIds from '../../../../constents/getUserIds';\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport { getbankNameById, updatebankNameFunc } from \"./bankNameFeatures/_bankName_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\n\nfunction EditBankName() {\n    const {loading:bankLoading } = useSelector(\n      (state) => state.bankname\n    );\n  \n\n  const { register, handleSubmit, setValue, control, formState: { errors } } = useForm();\n\n  const [pageLoading, setPageLoading] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { userCompanyId, userType } = getUserIds();\n  const { banknameIdEnc } = useParams();\n  const banknameId = decrypt(banknameIdEnc);\n  const { bankNameByIdData } = useSelector((state) => state.bankname);\n  const { companyList ,companyListLoading} = useSelector((state) => state.company);\n\n  useEffect(() => {\n\n    const fetchData = async () => {\n      try {\n        if (userType === \"admin\") {\n          await dispatch(companySearch({ text: \"\", sort: true, status: true, isPagination: false }));\n        }\n        const reqData = {\n          _id: banknameId,\n        };\n        await dispatch(getbankNameById(reqData)).then((data) => {\n          setPageLoading(false);\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (bankNameByIdData && bankNameByIdData?.data) {\n      setValue(\"companyId\", bankNameByIdData?.data?.companyId);\n      setValue(\"bankname\", bankNameByIdData?.data?.name);\n      setValue(\"status\", bankNameByIdData?.data?.status);\n    }\n  }, [bankNameByIdData]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: banknameId,\n      name: data.bankname,\n      status: data?.status,\n      companyId:data?.companyId,\n    };\n    dispatch(updatebankNameFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userType === \"admin\" &&\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company<span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"companyId\", {\n                    required: \"Company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.companyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>\n                      {type?.fullName}({type?.userName})\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"companyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option>: companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n\n                {errors.companyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.companyId.message}\n                  </p>\n                )}\n              </div>}\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Bank Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"bankname\", {\n                  required: \"bankname Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.bankname\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter bankname Name\"\n              />\n              {errors.bankname && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.bankname.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Status\"\n                    showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                  >\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n\n\n          </div>\n          <div className=\"flex justify-end \">\n          <button\n              type=\"submit\"\n              disabled={bankLoading}\n              className={`${bankLoading ? 'bg-gray-400': 'bg-header' } text-white p-2 mt-3 px-4 rounded mt-3`}\n            >\n            {bankLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default EditBankName;\n"],"names":["loading","bankLoading","useSelector","state","bankname","register","handleSubmit","setValue","control","formState","errors","useForm","pageLoading","setPageLoading","useState","dispatch","useDispatch","navigate","useNavigate","userCompanyId","userType","getUserIds","banknameIdEnc","useParams","banknameId","decrypt","bankNameByIdData","companyList","companyListLoading","company","useEffect","async","companySearch","text","sort","status","isPagination","reqData","_id","getbankNameById","then","data","error","console","fetchData","_bankNameByIdData$dat","_bankNameByIdData$dat2","_bankNameByIdData$dat3","companyId","name","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","finalPayload","updatebankNameFunc","concat","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","defaultValue","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","message","inputClassName","placeholder","_ref2","Loader"],"sourceRoot":""}