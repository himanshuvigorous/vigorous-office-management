{"version":3,"file":"static/js/9557.5d045b8b.chunk.js","mappings":"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","sources":["pages/global/other/resignation/EditResignation.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputAntdSelectClassNameFilter,\n  inputClassName,\n  inputDisabledClassName,\n  inputLabelClassName,\n  inputLabelClassNameReactSelect,\n} from \"../../../../constents/global\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport { getResignationDetails, updateResignationFunc } from \"./resignationFeatures/resignation_reducers\";\nimport CustomDatePicker from \"../../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport getUserIds from \"../../../../constents/getUserIds\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport Loader2 from \"../../../../global_layouts/Loader/Loader2\";\nimport { fileUploadFunc } from \"../fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\n\n\nconst EditResignation = () => {\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { userCompanyId, userBranchId, userType } = getUserIds();\n  const [isPreview, setIsPreview] = useState(false);\n\n  const { resignIdEnc } = useParams();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const resignId = decrypt(resignIdEnc);\n  const { resignationDetails } = useSelector((state) => state.resignation);\n  const { employeList } = useSelector((state) => state.employe);\n  const { loading: reginationLoading } = useSelector((state) => state.resignation);\n  const [editPageLoader, setEditPageLoader] = useState(true);\n\n  useEffect(() => {\n    dispatch(employeSearch());\n  }, []);\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n  useEffect(() => {\n    if (\n      companyId ||\n      userType === \"company\" ||\n      userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          companyId: companyId\n        })\n      );\n    }\n  }, [companyId])\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  const [formData, setFormData] = useState({\n    attachments: []\n  });\n\n  useEffect(() => {\n    let reqData = {\n      _id: resignId,\n    };\n    dispatch(getResignationDetails(reqData)).then(() => {\n      setEditPageLoader(false)\n    })\n  }, []);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setFormData(prev => ({\n          ...prev,\n          attachments: [...prev?.attachments || [], res?.payload?.data]\n        }));\n      }\n    });\n  };\n\n  const handleRemoveFile = (index) => {\n    setFormData(prev => {\n      const updatedAttachments = prev?.attachments.filter((_, i) => i !== index);\n      return { ...prev, attachments: updatedAttachments };\n    });\n  };\n\n\n  useEffect(() => {\n    if (resignationDetails) {\n\n      setValue('PDBranchId', resignationDetails?.branchId)\n      setValue('PDCompanyId', resignationDetails?.companyId);\n      setValue(\"employee\", resignationDetails?.employeName);\n      setValue(\"title\", resignationDetails?.title);\n      setValue(\"description\", resignationDetails?.description);\n      setValue(\"applyDate\", dayjs(resignationDetails?.applyDate));\n      setFormData({\n        attachments: resignationDetails?.attachment\n      });\n    }\n  }, [resignationDetails]);\n\n\n\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      _id: resignId,\n      companyId: resignationDetails.companyId,\n      directorId: '',\n      branchId: resignationDetails?.branchId,\n      employeId: resignationDetails?.employeId,\n      title: data?.title,\n      description: data?.description,\n      applyDate: dayjs(data?.applyDate).format(\"YYYY-MM-DD\"),\n      attachment: formData?.attachments,\n      noticePeriod: resignationDetails?.noticePeriod,\n      type: \"resignation\",\n      status: resignationDetails?.status,\n    };\n\n    dispatch(updateResignationFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  return (\n    <GlobalLayout>\n      {editPageLoader ? <div className=\"h-screen w-full flex justify-center items-center\"><Loader2 /></div> : <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-3 my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                disabled\n                render={({ field }) => (\n                  <Select\n                    {...field}\n\n                    className={`${inputAntdSelectClassName} `}\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"PDBranchId\"\n                disabled\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n\n                    className={`${inputAntdSelectClassName} `}\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>\n            }\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Employee Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                disabled\n                {...register(\"employee\")}\n                className={`placeholder: ${inputDisabledClassName} ${errors.employee\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Employee Name\"\n              />\n              {errors.employee && (\n                <p className=\"text-red-500 text-sm\">{errors.employee.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-3 my-2\">\n\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`${inputClassName} ${errors.title ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div> */}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Description <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                className={`${inputClassName} ${errors.description ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Description\"\n              />\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">{errors.description.message}</p>\n              )}\n            </div>\n              <div>\n              <label className={`${inputLabelClassName}`}>\n                Apply Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"applyDate\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.applyDate && (\n                <p className=\"text-red-500 text-sm\">Apply Date is required</p>\n              )}\n            </div>\n\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-3 my-2\">\n\n          \n\n\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                Complete Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"completeDate\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.completeDate && (\n                <p className=\"text-red-500 text-sm\">Complete Date is required</p>\n              )}\n            </div> */}\n\n\n            {/* <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"status\"\n                control={control}\n                rules={{ required: \"Status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors?.status ? \"border-[1px] \" : \"\"}`}\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value=\"Requested\">Requested</Select.Option>\n                    <Select.Option value=\"Approved\">Approved</Select.Option>\n                    <Select.Option value=\"Rejected\">Rejected</Select.Option>\n                    <Select.Option value=\"Completed\">Completed</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors?.status && (\n                <p className=\"text-red-600 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n\n\n          </div>\n\n          <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n              Documents \n            </label>\n            {!isPreview ? (\n              <div className=\"space-y-4\">\n                <input type=\"file\" onChange={handleFileChange} className=\"hidden\" id=\"file-upload\" />\n                <label htmlFor=\"file-upload\" className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-600 bg-white cursor-pointer\">\n                  <FaRegFile className=\"mr-2\" /> Add Documents\n                </label>\n\n                <div className=\"space-y-2\">\n                  {formData?.attachments?.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                      <a\n                        href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                        className=\"flex items-center space-x-2\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <FaRegFile className=\"text-gray-500\" />\n                        <span className=\"text-sm text-gray-600\">{file}</span>\n                      </a>\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveFile(index)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <FaTimes />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {/* Attachments preview logic */}\n              </div>\n            )}\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={reginationLoading}\n              className={`${reginationLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {reginationLoading ? <Loader /> : 'Submit'}\n            </button>\n\n          </div>\n        </form>\n      </div>}\n    </GlobalLayout>\n  );\n};\n\nexport default EditResignation;"],"names":["EditResignation","_formData$attachments","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","userCompanyId","userBranchId","userType","getUserIds","isPreview","setIsPreview","useState","resignIdEnc","useParams","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","useSelector","state","company","branchList","branch","resignId","decrypt","resignationDetails","resignation","employeList","employe","loading","reginationLoading","editPageLoader","setEditPageLoader","useEffect","employeSearch","companyId","useWatch","name","defaultValue","branchSearch","text","sort","status","companySearch","isPagination","formData","setFormData","attachments","reqData","_id","getResignationDetails","then","branchId","employeName","title","description","dayjs","applyDate","attachment","_jsx","GlobalLayout","children","className","Loader2","_jsxs","autoComplete","onSubmit","data","finalPayload","directorId","employeId","format","noticePeriod","type","updateResignationFunc","error","inputLabelClassName","Controller","rules","required","disabled","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","Option","value","map","fullName","PDCompanyId","message","_ref2","PDBranchId","inputDisabledClassName","employee","placeholder","inputClassName","_ref3","CustomDatePicker","disabledDate","current","isBefore","moment","endOf","onChange","e","filePath","target","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","payload","prev","_res$payload2","id","htmlFor","FaRegFile","file","index","href","process","rel","onClick","updatedAttachments","filter","_","i","handleRemoveFile","FaTimes","Loader"],"sourceRoot":""}