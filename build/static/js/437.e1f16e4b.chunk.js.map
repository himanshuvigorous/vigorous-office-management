{"version":3,"file":"static/js/437.e1f16e4b.chunk.js","mappings":"sTAmWA,QAlVA,WACE,MAAQA,QAASC,IAAoBC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,WAC5D,SAAEC,EAAQ,aAAEC,EAAY,SAC5BC,EAAQ,UACRC,EAAS,WACTC,EAAU,MACVC,EAAK,QACLC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,OAEE,YAAEC,IAAgBb,EAAAA,EAAAA,IAAaC,GAAUA,EAAMa,UAC/C,mBAAEC,EAAoBjB,QAASkB,IAAmBhB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMgB,aAC/E,YAAEC,EAAapB,QAASqB,IAAmBnB,EAAAA,EAAAA,IAAYC,GAASA,EAAMmB,SACtEC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAiBC,KAAKC,MAC1BC,aAAaC,QAAQ,aAADC,OAAcC,EAAAA,OAE9B,WAAEC,EAAU,kBAAEC,IAAsBjC,EAAAA,EAAAA,IACvCC,GAAUA,EAAMiC,QAEbC,GAAYC,EAAAA,EAAAA,IAAS,CACzB3B,UACA4B,KAAM,YACNC,cAA4B,OAAdb,QAAc,IAAdA,OAAc,EAAdA,EAAgBU,YAAa,KA+D7C,OAzDAI,EAAAA,EAAAA,WAAU,KACyB,WAAf,OAAdd,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,WAClBjB,GAASkB,EAAAA,EAAAA,IAAc,CAAEC,KAAM,GAAIC,MAAM,EAAMC,QAAQ,EAAMC,cAAc,MAE5E,KAEHN,EAAAA,EAAAA,WAAU,MACJJ,GAA0C,WAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,YAC/BjB,GAASuB,EAAAA,EAAAA,IAAW,CAClBJ,KAAM,GAAIC,MAAM,EAAMC,QAAQ,EAAMC,cAAc,EAClDV,UAC+B,WAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UACZL,EAE2B,aAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UACE,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBsB,IACF,OAAdtB,QAAc,IAAdA,OAAc,EAAdA,EAAgBU,cAI3B,CAACA,KACJI,EAAAA,EAAAA,WAAU,MAENJ,GAC6B,aAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,WACa,qBAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,YAEhBjB,GACEyB,EAAAA,EAAAA,IAAa,CACXN,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRC,cAAc,EACdV,UAAwC,WAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAAuBL,EAAyC,aAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAAuC,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBsB,IAAoB,OAAdtB,QAAc,IAAdA,OAAc,EAAdA,EAAgBU,cAIlJ,CAACA,KAqBFc,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,UACXF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,QAAOD,UAEpBE,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMF,UAAU,OAAOG,SAAUnD,EAvBxCoD,IAChB,MAAMC,EAAe,CACnBtB,UAAwC,WAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAA2B,OAAJgB,QAAI,IAAJA,OAAI,EAAJA,EAAMrB,UAAyC,aAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAAuC,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBsB,IAAoB,OAAdtB,QAAc,IAAdA,OAAc,EAAdA,EAAgBU,UACnJuB,WAAY,GACZC,SAAwC,WAAf,OAAdlC,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,WAAqD,qBAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,WAA+D,aAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAA8B,OAAJgB,QAAI,IAAJA,OAAI,EAAJA,EAAMI,WAA0C,mBAAf,OAAdnC,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAA6C,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBsB,IAAoB,OAAdtB,QAAc,IAAdA,OAAc,EAAdA,EAAgBkC,SACvP,aAAoB,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMK,aACtB,KAAY,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMM,SACd,KAAY,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMO,KACd,UAAiB,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,UACnB,QAAe,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMS,SAInB1C,GAAS2C,EAAAA,EAAAA,IAAeT,IAAeU,KAAMX,IACtCA,EAAKY,OAAO/C,GAAU,OASkD8B,SAAA,EACzEE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gDAA+CD,SAAA,CAC9B,WAAf,OAAd1B,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,YAAwBa,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACxDE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAtB,OAAKuC,EAAAA,IAAsBlB,SAAA,CAAC,WACnCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAExCE,EAAAA,EAAAA,MAAA,UAAAiB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMnE,EAAS,YAAa,CACxBoE,SAAU,yBACV,IACFnB,UAAS,IAAAtB,OAAM0C,EAAAA,GAAc,KAAA1C,OAAInB,EAAOwB,UACpC,gBACA,mBACCgB,SAAA,EAELF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,GAAGqB,MAAM,GAAEtB,SAAC,mBAGlB,OAAXtC,QAAW,IAAXA,OAAW,EAAXA,EAAa6D,IAAKC,IACjBtB,EAAAA,EAAAA,MAAA,UAAQoB,MAAW,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,IAAII,SAAA,CAClB,OAAJwB,QAAI,IAAJA,OAAI,EAAJA,EAAMC,SAAS,IAAM,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,SAAS,YAKtClE,EAAOwB,YACNc,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCxC,EAAOwB,UAAU2C,cAKO,WAAf,OAAdrD,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,WAAqD,aAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,WAAuD,qBAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,aAAmCa,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACtJE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAtB,OAAKuC,EAAAA,IAAsBlB,SAAA,CAAC,WACnCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAExCF,EAAAA,EAAAA,KAAC8B,EAAAA,GAAU,CACT1C,KAAK,aACL5B,QAASA,EACTuE,MAAO,CAAET,SAAU,sBACnBU,OAAQC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAChB7B,EAAAA,EAAAA,MAAC+B,EAAAA,GAAMd,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDa,GAAK,IACT/B,UAAS,GAAAtB,OAAKuD,EAAAA,GAAwB,KAAAvD,OAAInB,EAAOiD,WAAa,gBAAkB,mBAChF0B,YAAY,gBACZC,YAAU,EACVC,aAAcA,CAACC,EAAOC,IACpBC,OAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQvC,UAAUyC,cAAcC,SAASJ,EAAMG,eACvDzC,SAAA,EAEDF,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAACrB,MAAM,GAAEtB,SAAC,kBACvBlB,GAAoBgB,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAACC,UAAQ,EAAA5C,UAC1CF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAU,MACiB,OAAVhE,QAAU,IAAVA,OAAU,EAAVA,EAAY0C,IAAKC,IACnC1B,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAAiBrB,MAAW,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,IAAII,SACzC,OAAJwB,QAAI,IAAJA,OAAI,EAAJA,EAAMC,UADe,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,aAOjCpC,EAAOiD,aACNX,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCxC,EAAOiD,WAAWkB,cAMzBzB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAtB,OAAKuC,EAAAA,IAAsBlB,SAAA,CAAC,eAC/BF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAG5CF,EAAAA,EAAAA,KAAC8B,EAAAA,GAAU,CACT1C,KAAK,eACL5B,QAASA,EACTuE,MAAO,CAAET,SAAU,sBACnBU,OAAQgB,IAAA,IAAC,MAAEd,GAAOc,EAAA,OAChB5C,EAAAA,EAAAA,MAAC+B,EAAAA,GAAMd,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDa,GAAK,IACT/B,UAAS,GAAAtB,OAAKuD,EAAAA,GAAwB,KAAAvD,OAAInB,EAAOkD,aAAe,gBAAkB,mBAClFyB,YAAY,oBACZC,YAAU,EACVC,aAAcA,CAACC,EAAOC,IACpBC,OAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQvC,UAAUyC,cAAcC,SAASJ,EAAMG,eACvDzC,SAAA,EAEDF,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAACrB,MAAM,GAAEtB,SAAC,sBACvBnC,GAAiBiC,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAACC,UAAQ,EAAA5C,UACvCF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAU,MACyB,OAAlBjF,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB2D,IAAKC,IAC3C1B,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAAiBrB,MAAW,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,IAAII,SACzC,OAAJwB,QAAI,IAAJA,OAAI,EAAJA,EAAMtC,MADe,OAAJsC,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,aAOjCpC,EAAOkD,eACNZ,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCxC,EAAOkD,aAAaiB,cAI3BzB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,SAAQD,SAAA,EACrBE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAtB,OAAKuC,EAAAA,IAAsBlB,SAAA,CAAC,cAChCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAE3CF,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEK,KAAK,QACDxE,EAAS,WAAY,CACvBoE,SAAU,2BACV,IACFnB,UAAS,gBAAAtB,OAAkB0C,EAAAA,GAAc,KAAA1C,OAAInB,EAAOmD,SAChD,gBACA,mBAEJwB,YAAY,qBAEb3E,EAAOmD,WACNb,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCxC,EAAOmD,SAASgB,cAIvBzB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAtB,OAAKuC,EAAAA,IAAsBlB,SAAA,CAAC,aACjCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAE1CF,EAAAA,EAAAA,KAAC8B,EAAAA,GAAU,CACT1C,KAAK,YACL5B,QAASA,EACTuE,MAAO,CAAET,SAAU,wBACnBU,OAAQiB,IAAA,IAAC,MAAEf,GAAOe,EAAA,OAChB7C,EAAAA,EAAAA,MAAC+B,EAAAA,GAAMd,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDa,GAAK,IACTG,YAAY,kBACZlC,UAAS,GAAAtB,OAAKuD,EAAAA,GAAwB,KAAAvD,OAAInB,EAAOqD,UAAY,gBAAkB,mBAK/EmC,QAASA,KACP,MAcMC,EAAa,CACjB1C,WAAY,GACZvB,UAf6B,WAAf,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UACZhC,EAAM,aACuB,aAAf,OAAdiB,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UACA,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBsB,IACF,OAAdtB,QAAc,IAAdA,OAAc,EAAdA,EAAgBU,UAYtBwB,SATA,CAAC,UAAW,QAAS,mBAAmBkC,SAAuB,OAAdpE,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAC7DhC,EAAM,cACuB,mBAAf,OAAdiB,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UACA,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBsB,IACF,OAAdtB,QAAc,IAAdA,OAAc,EAAdA,EAAgBkC,SAMtBjB,KAAM,GACNC,MAAM,EACNC,OAAQ,GACRC,cAAc,GAEhBtB,GAAS8E,EAAAA,EAAAA,IAAcD,KACvBjD,SAAA,EAEFF,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAACrB,MAAM,GAAEtB,SAAC,oBACvBhC,GAAiB8B,EAAAA,EAAAA,KAACmC,EAAAA,EAAOU,OAAM,CAACC,UAAQ,EAAA5C,UACvCF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAU,MACkB,OAAX9E,QAAW,IAAXA,OAAW,EAAXA,EAAawD,IAAK4B,IACpCjD,EAAAA,EAAAA,MAAC+B,EAAAA,EAAOU,OAAM,CAAoBrB,MAAc,OAAP6B,QAAO,IAAPA,OAAO,EAAPA,EAASvD,IAAII,SAAA,CAC5C,OAAPmD,QAAO,IAAPA,OAAO,EAAPA,EAASC,WAAW,OADI,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASvD,aAOpCpC,EAAOqD,YACNf,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCxC,EAAOqD,UAAUc,cAIxBzB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,SAAQD,SAAA,EACrBE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAtB,OAAKuC,EAAAA,IAAsBlB,SAAA,CAAC,YAClCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEzCF,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEK,KAAK,UACDxE,EAAS,UAAW,CACtBoE,SAAU,yBACV,IACFnB,UAAS,gBAAAtB,OAAkB0C,EAAAA,GAAc,KAAA1C,OAAInB,EAAOsD,QAChD,gBACA,mBAEJqB,YAAY,mBAEb3E,EAAOsD,UACNhB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCxC,EAAOsD,QAAQa,cAItBzB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,SAAQD,SAAA,EACrBE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAtB,OAAKuC,EAAAA,IAAsBlB,SAAA,CAAC,SACrCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEtCF,EAAAA,EAAAA,KAAA,SAAAqB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEK,KAAK,UACDxE,EAAS,OAAQ,CACnBoE,SAAU,sBACV,IACFnB,UAAS,gBAAAtB,OAAkB0C,EAAAA,GAAc,KAAA1C,OAAInB,EAAOoD,KAChD,gBACA,mBAEJuB,YAAY,gBAEb3E,EAAOoD,OACNd,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCxC,EAAOoD,KAAKe,iBAMrB7B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmBD,UAChCF,EAAAA,EAAAA,KAAA,UACE0B,KAAK,SACLoB,SAAUhG,EACVqD,UAAS,GAAAtB,OAAK/B,EAAkB,cAAgB,YAAW,qCAAoCoD,SAE9FpD,GAAkBkD,EAAAA,EAAAA,KAACuD,EAAAA,EAAM,IAAM,mBAO9C,C","sources":["pages/taskManagement/taskType/CreateTaskType.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n//import { createDesignation } from \"./designationFeatures/_designation_reducers\";\n\nimport { domainName, inputAntdSelectClassName, inputClassName, inputClassNameSearch, inputLabelClassName } from \"../../../constents/global\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { createTaskType } from \"./taskFeatures/_task_reducers\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { getGstTypeListFunc, gstTypeSearch } from \"../../global/other/GstType/GstTypeFeatures/_gstType_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nfunction CreateTaskType() {\n  const { loading: taskTypeloading } = useSelector((state) => state.taskType);\n  const { register, handleSubmit,\n    setValue,\n    getValues,\n    unregister,\n    watch,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const { companyList } = useSelector((state) => state.company);\n  const { departmentListData, loading: depListLoading } = useSelector((state) => state.department);\n  const { gstTypeList, loading: gstTypeLoading } = useSelector(state => state.gstType)\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userInfoglobal?.companyId || \"\",\n  });\n\n\n\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(companySearch({ text: \"\", sort: true, status: true, isPagination: false }));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (companyId || userInfoglobal?.userType !== \"admin\") {\n      dispatch(deptSearch({\n        text: \"\", sort: true, status: true, isPagination: false,\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? companyId\n            :\n            userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n      }));\n    }\n\n  }, [companyId])\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: '',\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"departmentId\": data?.departmentId,\n      \"name\": data?.taskName,\n      \"fees\": data?.fees,\n      \"gstTypeId\": data?.gstTypeId,\n      \"HSNCode\": data?.HSNCode,\n\n    };\n\n    dispatch(createTaskType(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"companyId\", {\n                  required: \"Company is required\",\n                })}\n                className={` ${inputClassName} ${errors.companyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Company\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>\n                    {type?.fullName}({type?.userName})\n                  </option>\n                ))}\n              </select>\n\n              {errors.companyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.companyId.message}\n                </p>\n              )}\n            </div>}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Branch\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Department <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"departmentId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.departmentId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Department\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Department</Select.Option>\n                    {depListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (departmentListData?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.name}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.departmentId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.departmentId.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Task Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"taskName\", {\n                  required: \"Task Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.taskName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Task Name\"\n              />\n              {errors.taskName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.taskName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Gst Type <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"gstTypeId\"\n                control={control}\n                rules={{ required: \"GST Type is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    placeholder=\"Select GST Type\"\n                    className={`${inputAntdSelectClassName} ${errors.gstTypeId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    // showSearch\n                    // filterOption={(input, option) =>\n                    //   String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    // }\n                    onFocus={() => {\n                      const selectedCompanyId =\n                        userInfoglobal?.userType === \"admin\"\n                          ? watch(\"companyId\")\n                          : userInfoglobal?.userType === \"company\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.companyId;\n\n                      const selectedBranchId =\n                        [\"company\", \"admin\", \"companyDirector\"].includes(userInfoglobal?.userType)\n                          ? watch(\"PDBranchId\")\n                          : userInfoglobal?.userType === \"companyBranch\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.branchId;\n\n                      const reqPayload = {\n                        directorId: \"\",\n                        companyId: selectedCompanyId,\n                        branchId: selectedBranchId,\n                        text: \"\",\n                        sort: true,\n                        status: \"\",\n                        isPagination: false,\n                      };\n                      dispatch(gstTypeSearch(reqPayload));\n                    }}\n                  >\n                    <Select.Option value=\"\">Select GST Type</Select.Option>\n                    {gstTypeLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (gstTypeList?.map((element) => (\n                      <Select.Option key={element?._id} value={element?._id}>\n                        {element?.percentage} %\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.gstTypeId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.gstTypeId.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                HSNCode <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                {...register(\"HSNCode\", {\n                  required: \"HSNCode is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.HSNCode\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter HSNCode\"\n              />\n              {errors.HSNCode && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.HSNCode.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Fees <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                {...register(\"fees\", {\n                  required: \"Fees is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.fees\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Fees\"\n              />\n              {errors.fees && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.fees.message}\n                </p>\n              )}\n            </div>\n\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={taskTypeloading}\n              className={`${taskTypeloading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {taskTypeloading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default CreateTaskType;\n"],"names":["loading","taskTypeloading","useSelector","state","taskType","register","handleSubmit","setValue","getValues","unregister","watch","control","formState","errors","useForm","companyList","company","departmentListData","depListLoading","department","gstTypeList","gstTypeLoading","gstType","navigate","useNavigate","dispatch","useDispatch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","useEffect","userType","companySearch","text","sort","status","isPagination","deptSearch","_id","branchSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","directorId","branchId","PDBranchId","departmentId","taskName","fees","gstTypeId","HSNCode","createTaskType","then","error","inputLabelClassName","_objectSpread","required","inputClassName","value","map","type","fullName","userName","message","Controller","rules","render","_ref","field","Select","inputAntdSelectClassName","placeholder","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","disabled","ListLoader","_ref2","_ref3","onFocus","reqPayload","gstTypeSearch","element","percentage","Loader"],"sourceRoot":""}