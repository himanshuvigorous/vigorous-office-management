{"version":3,"file":"static/js/1187.1375e7ed.chunk.js","mappings":"0SAmQA,QArPA,WAA8B,IAADA,EAC3B,MAAQC,QAASC,IAAuBC,EAAAA,EAAAA,IAAYC,GAASA,EAAMC,cAE7D,SAAEC,EAAQ,aAAEC,EAAY,SAAEC,EAAQ,QAAEC,EAASC,WAAW,OAAEC,KAAaC,EAAAA,EAAAA,OACtEC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GACzCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEX,WAAEC,IAAeC,EAAAA,EAAAA,KACjBC,GAAgBC,EAAAA,EAAAA,IAAQH,IACxB,mBAAEI,EAAkB,oBAAEC,IAAwBtB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,cAC3E,YAAEqB,IAAgBvB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMuB,UAC/C,mBAAEC,IAAuBzB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMyB,YACtDC,EAAiBC,KAAKC,MAC1BC,aAAaC,QAAQ,aAADC,OAAcC,EAAAA,MA+FpC,OA3FC,QAFmBpC,EAAG+B,KAAKC,MAC1BC,aAAaC,QAAQ,aAADC,OAAcC,EAAAA,aACnC,IAAApC,GAFsBA,EAEpBqC,UAEeC,EAAAA,EAAAA,IAAS,CACzB7B,UACA8B,KAAM,YACNC,cAA4B,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBW,YAAa,MAE5BH,EAAAA,EAAAA,IAAS,CACxB7B,UACA8B,KAAM,YACNC,cAA4B,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBY,WAAY,MAIvBJ,EAAAA,EAAAA,IAAS,CAC5B7B,UACA8B,KAAM,eACNC,cAA4B,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBa,eAAgB,MAE7BL,EAAAA,EAAAA,IAAS,CAC1B7B,UACA8B,KAAM,aACNC,cAA4B,OAAdV,QAAc,IAAdA,OAAc,EAAdA,EAAgBc,aAAc,MAG/BN,EAAAA,EAAAA,IAAS,CACtB7B,UACA8B,KAAM,SACNC,cAAgC,OAAlBhB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBqB,UAAW,MAG/CC,EAAAA,EAAAA,WAAU,KACUC,WAChB,IAGE,MAAMC,EAAU,CACdC,IAAK3B,SAEDN,GAASkC,EAAAA,EAAAA,IAAsBF,IAAUG,KAAMC,MAOvD,CAAE,MAAOC,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,CAAC,QAECvC,GAAe,EACjB,GAGFyC,IACC,KAEHT,EAAAA,EAAAA,WAAU,KACiB,IAADU,EAAAC,EAApBjC,IACFhB,EAAS,kBAAqC,OAAlBgB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBe,MAChD/B,EAAS,cAAiC,OAAlBgB,QAAkB,IAAlBA,GAA+B,QAAbgC,EAAlBhC,EAAoBkC,mBAAW,IAAAF,OAAb,EAAlBA,EAAiCG,UACzDnD,EAAS,iBAAoC,OAAlBgB,QAAkB,IAAlBA,GAAkC,QAAhBiC,EAAlBjC,EAAoBoC,sBAAc,IAAAH,OAAhB,EAAlBA,EAAoClB,MAC/D/B,EAAS,eAAkC,OAAlBgB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBmB,cAC7CnC,EAAS,SAA4B,OAAlBgB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBqB,SACvCrC,EAAS,SAA4B,OAAlBgB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBqC,UAGxC,CAACrC,KAiBJsB,EAAAA,EAAAA,WAAU,KAIR9B,GAAS8C,EAAAA,EAAAA,IAHK,CACZC,KAAM,OAGP,KAGDC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,SACTrD,GAgIAmD,EAAAA,EAAAA,KAACG,EAAAA,EAAM,KA/HPH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,QAAOF,UAIpBG,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMF,UAAU,OAAOG,SAAUhE,EA7B1C6C,IAChB,MAAMoB,EAAe,CACnBvB,IAAK3B,EACLiB,KAAU,OAAJa,QAAI,IAAJA,OAAI,EAAJA,EAAMqB,gBACZhC,UAA6B,OAAlBjB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBiB,UAC/BE,aAAgC,OAAlBnB,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBmB,aAClCkB,OAAY,OAAJT,QAAI,IAAJA,OAAI,EAAJA,EAAMS,OACdhB,QAAa,OAAJO,QAAI,IAAJA,OAAI,EAAJA,EAAMsB,QAGjB1D,GAAS2D,EAAAA,EAAAA,IAAkBH,IAAerB,KAAMC,IACzCA,EAAKC,OAAOnC,GAAU,OAkBoDgD,SAAA,EACzEG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gDAA+CF,SAAA,EAE5DG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAEF,SAAA,EACfG,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAjC,OAAKyC,EAAAA,IAAsBV,SAAA,CAAC,YAClCF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,UAEzCF,EAAAA,EAAAA,KAAA,SAAAa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,OACLC,UAAQ,GACJzE,EAAS,gBAAc,IAC3B8D,UAAS,gBAAAjC,OAAkB6C,EAAAA,GAAsB,KAAA7C,OAAIxB,EAAO8D,gBACxD,gBACA,mBAEJQ,YAAY,4BAGhBZ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAEF,SAAA,EACfG,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAjC,OAAKyC,EAAAA,IAAsBV,SAAA,CAAC,eAC/BF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,UAE5CF,EAAAA,EAAAA,KAAA,SAAAa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,OACLC,UAAQ,GACJzE,EAAS,mBAAiB,IAC9B8D,UAAS,gBAAAjC,OAAkB6C,EAAAA,GAAsB,KAAA7C,OAAIxB,EAAO8D,gBACxD,gBACA,mBAEJQ,YAAY,+BAGhBZ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,SAAQF,SAAA,EACrBG,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAjC,OAAKyC,EAAAA,IAAsBV,SAAA,CAAC,qBACzBF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,UAElDF,EAAAA,EAAAA,KAAA,SAAAa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,QACDxE,EAAS,kBAAmB,CAC9B4E,SAAU,kCACV,IACFd,UAAS,gBAAAjC,OAAkBgD,EAAAA,GAAc,KAAAhD,OAAIxB,EAAO8D,gBAChD,gBACA,mBAEJQ,YAAY,4BAEbtE,EAAO8D,kBACNT,EAAAA,EAAAA,KAAA,KAAGI,UAAU,uBAAsBF,SAChCvD,EAAO8D,gBAAgBW,cAK9Bf,EAAAA,EAAAA,MAAA,OAAKD,UAAU,SAAQF,SAAA,EACrBG,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAjC,OAAKyC,EAAAA,IAAsBV,SAAA,CAAC,SACrCF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,UAEtCF,EAAAA,EAAAA,KAACqB,EAAAA,GAAU,CACT9C,KAAK,SACL9B,QAASA,EACT6E,MAAO,CAAEJ,SAAU,oBACnBK,OAAQC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAChBnB,EAAAA,EAAAA,MAACqB,EAAAA,GAAMb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDY,GAAK,IACTrB,UAAS,GAAAjC,OAAKwD,EAAAA,GAAwB,KAAAxD,OAAIxB,EAAO+D,OAAS,gBAAkB,mBAC5EkB,YAAU,EACVC,aAAcA,CAACC,EAAOC,IACxBC,OAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQ7B,UAAU+B,cAAcC,SAASJ,EAAMG,eAEpDhB,YAAY,eAAcf,SAAA,EAE1BF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAOS,OAAM,CAACC,MAAM,GAAElC,SAAC,UACJ,OAAnBzC,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqB4E,IAAKC,IACzBtC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAOS,OAAM,CAAoBC,MAAc,OAAPE,QAAO,IAAPA,OAAO,EAAPA,EAAS/D,KAAK2B,SAC7C,OAAPoC,QAAO,IAAPA,OAAO,EAAPA,EAAS/D,MADe,OAAP+D,QAAO,IAAPA,OAAO,EAAPA,EAASrD,aAOpCtC,EAAO+D,SAAUV,EAAAA,EAAAA,KAAA,KAAGI,UAAU,uBAAsBF,SAAEvD,EAAO+D,OAAOU,cAGvEf,EAAAA,EAAAA,MAAA,OAAKD,UAAU,SAAQF,SAAA,EACrBG,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAjC,OAAKyC,EAAAA,IAAsBV,SAAA,CAAC,WAAOF,EAAAA,EAAAA,KAAA,QAAMI,UAAU,eAAcF,SAAC,UAClFF,EAAAA,EAAAA,KAACqB,EAAAA,GAAU,CACT9C,KAAK,SACL9B,QAASA,EACT8E,OAAQgB,IAAA,IAAC,MAAEd,GAAOc,EAAA,OAChBlC,EAAAA,EAAAA,MAACqB,EAAAA,GAAMb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDY,GAAK,IACTrB,UAAS,GAAAjC,OAAKwD,EAAAA,GAAwB,KAAAxD,OAAIxB,EAAOkD,OAAS,gBAAkB,mBAC5E+B,YAAU,EACVC,aAAcA,CAACC,EAAOC,IACxBC,OAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQ7B,UAAU+B,cAAcC,SAASJ,EAAMG,eAEpDhB,YAAY,gBAAef,SAAA,EAE3BF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAOS,OAAM,CAACC,MAAM,GAAElC,SAAC,mBACxBF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAOS,OAAM,CAACC,OAAO,EAAKlC,SAAC,YAC5BF,EAAAA,EAAAA,KAAC0B,EAAAA,EAAOS,OAAM,CAACC,OAAO,EAAMlC,SAAC,qBAIlCvD,EAAOkD,SAAUG,EAAAA,EAAAA,KAAA,KAAGI,UAAU,uBAAsBF,SAAEvD,EAAOkD,OAAOuB,iBAGzEpB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,oBAAmBF,UAChCF,EAAAA,EAAAA,KAAA,UACEc,KAAK,SACLC,SAAU7E,EACVkE,UAAS,GAAAjC,OAAKjC,EAAqB,cAAgB,YAAW,qCAAoCgE,SAEjGhE,GAAqB8D,EAAAA,EAAAA,KAAA,OAAKI,UAAU,+CAA8CF,UACjFF,EAAAA,EAAAA,KAACwC,EAAAA,EAAI,MACE,mBAUzB,C,6DCtPA,QATA,WACI,OACGxC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,4CAA2CF,UAExDF,EAAAA,EAAAA,KAACwC,EAAAA,EAAI,CAACC,KAAK,WAGpB,C","sources":["pages/designation/UpdateDesignation.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport { getDesignationDetails, getDesignationRole, updateDesignation } from \"./designationFeatures/_designation_reducers\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../department/departmentFeatures/_department_reducers\";\nimport Loader from \"../../global_layouts/Loader/Loader\";\nimport { inputClassName, inputLabelClassName, domainName, inputDisabledClassName, inputAntdSelectClassName } from \"../../constents/global\";\nimport { Select, Spin } from \"antd\";\n\n\nfunction UpdateDesignation() {\n  const { loading: designationLoading } = useSelector(state => state.designation);\n\n  const { register, handleSubmit, setValue, control, formState: { errors } } = useForm();\n  const [pageLoading, setPageLoading] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { desigIdEnc } = useParams();\n  const designationId = decrypt(desigIdEnc);\n  const { designationDetails, designationRoleData } = useSelector((state) => state.designation);\n  const { companyList } = useSelector((state) => state.company);\n  const { departmentListData } = useSelector((state) => state.department);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const userTypeglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  )?.userType;\n\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userInfoglobal?.companyId || \"\",\n  });\n  const branchId = useWatch({\n    control,\n    name: \"branchiId\",\n    defaultValue: userInfoglobal?.branchId || \"\",\n  });\n\n  \n  const departmentId = useWatch({\n    control,\n    name: \"departmentId\",\n    defaultValue: userInfoglobal?.departmentId || \"\",\n  });\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userInfoglobal?.directorId || \"\",\n  });\n\n  const roleId = useWatch({\n    control,\n    name: \"roleId\",\n    defaultValue: designationDetails?.roleKey || '',\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n\n\n        const reqData = {\n          _id: designationId,\n        };\n        await dispatch(getDesignationDetails(reqData)).then((data) => {\n          //         if(!data.error){\n          //            dispatch(deptSearch({ text: \"\", sort: true, status: true, isPagination: false,companyId: designationDetails?.companyId })).then((data)=>{\n          // !data?.error && setValue(\"departmentId\", designationDetails?.departmentId)\n          //            })\n          //         }\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n      finally {\n        setPageLoading(false)\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (designationDetails) {\n      setValue(\"designationName\", designationDetails?.name);\n      setValue(\"CompanyName\", designationDetails?.companyData?.fullName);\n      setValue(\"departmentName\", designationDetails?.departmentData?.name);\n      setValue(\"departmentId\", designationDetails?.departmentId);\n      setValue(\"roleId\", designationDetails?.roleKey);\n      setValue(\"status\", designationDetails?.status);\n    }\n\n  }, [designationDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: designationId,\n      name: data?.designationName,\n      companyId: designationDetails?.companyId,\n      departmentId: designationDetails?.departmentId,\n      status: data?.status,\n      roleKey: data?.roleId,\n    };\n\n    dispatch(updateDesignation(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    let reqData = {\n      text: ''\n    }\n    dispatch(getDesignationRole(reqData))\n  }, [])\n\n  return (\n    <GlobalLayout>\n      {!pageLoading ? (\n        <div className=\"gap-4\">\n          {/* <h2 className=\"text-2xl font-bold mb-4 col-span-2\">\n            Update User Designations: {designationDetails?.name}\n          </h2> */}\n          <form autoComplete=\"off\" className=\"mt-0\" onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  disabled\n                  {...register(\"CompanyName\")}\n                  className={`placeholder: ${inputDisabledClassName} ${errors.designationName\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Company Name\"\n                />\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Department <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  disabled\n                  {...register(\"departmentName\")}\n                  className={`placeholder: ${inputDisabledClassName} ${errors.designationName\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Department Name\"\n                />\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Designation Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"designationName\", {\n                    required: \"Designation Name is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.designationName\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Designation Name\"\n                />\n                {errors.designationName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.designationName.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Role <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"roleId\"\n                  control={control}\n                  rules={{ required: \"Role is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.roleId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                      placeholder=\"Select Roles\"\n                    >\n                      <Select.Option value=\"\">Roles</Select.Option>\n                      {designationRoleData?.map((element) => (\n                        <Select.Option key={element?._id} value={element?.name}>\n                          {element?.name}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.roleId && <p className=\"text-red-500 text-sm\">{errors.roleId.message}</p>}\n              </div>\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n                <Controller\n                  name=\"status\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                      placeholder=\"Select Status\"\n                    >\n                      <Select.Option value=\"\">Select Status</Select.Option>\n                      <Select.Option value={true}>Active</Select.Option>\n                      <Select.Option value={false}>In Active</Select.Option>\n                    </Select>\n                  )}\n                />\n                {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n              </div>\n            </div>\n            <div className=\"flex justify-end \">\n              <button\n                type=\"submit\"\n                disabled={designationLoading}\n                className={`${designationLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n              >\n                {designationLoading ? <div className='text-center flex justify-center items-center'>\n                  <Spin />\n                </div> : 'Submit'}\n              </button>\n            </div>\n          </form>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </GlobalLayout>\n  );\n}\n\nexport default UpdateDesignation;","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["_JSON$parse","loading","designationLoading","useSelector","state","designation","register","handleSubmit","setValue","control","formState","errors","useForm","pageLoading","setPageLoading","useState","dispatch","useDispatch","navigate","useNavigate","desigIdEnc","useParams","designationId","decrypt","designationDetails","designationRoleData","companyList","company","departmentListData","department","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","userType","useWatch","name","defaultValue","companyId","branchId","departmentId","directorId","roleKey","useEffect","async","reqData","_id","getDesignationDetails","then","data","error","console","fetchData","_designationDetails$c","_designationDetails$d","companyData","fullName","departmentData","status","getDesignationRole","text","_jsx","GlobalLayout","children","Loader","className","_jsxs","autoComplete","onSubmit","finalPayload","designationName","roleId","updateDesignation","inputLabelClassName","_objectSpread","type","disabled","inputDisabledClassName","placeholder","required","inputClassName","message","Controller","rules","render","_ref","field","Select","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","map","element","_ref2","Spin","size"],"sourceRoot":""}