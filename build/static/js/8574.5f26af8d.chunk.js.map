{"version":3,"file":"static/js/8574.5f26af8d.chunk.js","mappings":"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","sources":["global_layouts/Loader/Loader.js","pages/department/EditDepartment.js"],"sourcesContent":["import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n","import React, { useCallback, useEffect, useMemo } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Select, Spin } from \"antd\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { getDepartmentById, updateDepartmentFunc } from \"./departmentFeatures/_department_reducers\";\nimport { decrypt } from \"../../config/Encryption\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputerrorClassNameAutoComplete, inputLabelClassName } from \"../../constents/global\";\nimport getUserIds from '../../constents/getUserIds';\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport Loader from \"../../global_layouts/Loader/Loader\";\nimport CustomMobileCodePicker from \"../../global_layouts/MobileCode/MobileCodePicker\";\n\nconst MemoizedCustomMobileCodePicker = React.memo(CustomMobileCodePicker);\n\nfunction EditDepartment() {\n  // Selectors with memoization\n  const departmentLoading = useSelector((state) => state.department.loading);\n  const departmentByIdData = useSelector((state) => state.department.departmentByIdData);\n  const companyList = useSelector((state) => state.company.companyList);\n\n  const { register, handleSubmit, setValue, control, formState: { errors } } = useForm({\n    mode: 'onChange',\n    defaultValues: {\n      status: true // Default value for status\n    }\n  });\n\n  const [pageLoading, setPageLoading] = React.useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { userCompanyId, userType } = getUserIds();\n  const { departmentIdEnc } = useParams();\n  const departmentId = useMemo(() => decrypt(departmentIdEnc), [departmentIdEnc]);\n\n  // Memoized company options\n  const companyOptions = useMemo(() => \n    companyList?.map((type) => (\n      <option key={type?._id} value={type?._id}>\n        {type?.fullName}({type?.userName})\n      </option>\n    )),\n    [companyList]\n  );\n\n  // Fetch data callback\n  const fetchData = useCallback(async () => {\n    try {\n      if (userType === \"admin\") {\n        await dispatch(companySearch({ \n          text: \"\", \n          sort: true, \n          status: true, \n          isPagination: false \n        }));\n      }\n      const reqData = { _id: departmentId };\n      await dispatch(getDepartmentById(reqData));\n      setPageLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setPageLoading(false);\n    }\n  }, [departmentId, dispatch, userType]);\n\n  // Initial data fetch\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Set form values when data is loaded\n  useEffect(() => {\n    if (departmentByIdData?.data) {\n      const { data } = departmentByIdData;\n      setValue(\"companyId\", data?.companyId);\n      setValue(\"departmentName\", data?.name);\n      setValue(\"status\", data?.status);\n      setValue(\"email\", data?.email);\n      setValue(\"PDMobileCode\", data?.mobile?.code);\n      setValue(\"PDMobileNo\", data?.mobile?.number);\n    }\n  }, [departmentByIdData, setValue]);\n\n  // Submit handler\n  const onSubmit = useCallback((data) => {\n    const finalPayload = {\n      _id: departmentId,\n      name: data.departmentName,\n      status: data?.status,\n      email: data?.email,\n      companyId: data?.companyId,\n      mobile: {\n        code: data?.PDMobileCode,\n        number: data?.PDMobileNo\n      }\n    };\n\n    dispatch(updateDepartmentFunc(finalPayload)).then(({ error }) => {\n      if (!error) navigate(-1);\n    });\n  }, [departmentId, dispatch, navigate]);\n\n  // Status options\n  const statusOptions = useMemo(() => [\n    { value: true, label: 'Active' },\n    { value: false, label: 'In Active' }\n  ], []);\n\n  if (pageLoading) return <Loader />;\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form \n          autoComplete=\"off\" \n          className=\"mt-5\" \n          onSubmit={handleSubmit(onSubmit)}\n          noValidate\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company<span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"companyId\", {\n                    required: \"Company is required\",\n                  })}\n                  className={`${inputClassName} ${\n                    errors.companyId ? \"border-[1px]\" : \"border-gray-300\"\n                  }`}\n                >\n                  <option value=\"\">Select Company</option>\n                  {companyOptions}\n                </select>\n                {errors.companyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.companyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Department Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"departmentName\", {\n                  required: \"Department Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${\n                  errors.departmentName ? \"border-[1px]\" : \"border-gray-300\"\n                }`}\n                placeholder=\"Enter Department Name\"\n              />\n              {errors.departmentName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.departmentName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status</label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${\n                      errors.status ? \"border-[1px]\" : \"border-gray-300\"\n                    }`}\n                    options={statusOptions}\n                    placeholder=\"Select Status\"\n                  />\n                )}\n              />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Email</label>\n              <input\n                type=\"email\"\n                {...register(\"email\", {\n                  pattern: {\n                    value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                    message: \"Please enter a valid email address\",\n                  },\n                })}\n                className={`${inputClassName} ${\n                  errors.email ? \"border-[1px]\" : \"border-gray-300\"\n                }`}\n                placeholder=\"Enter Email\"\n              />\n              {errors.email && (\n                <p className=\"text-red-500 text-sm\">{errors.email.message}</p>\n              )}\n            </div>\n\n            <div className=\"flex gap-3\">\n              <div className=\"w-[100px] grid\">\n                <label className={`!text-[#5e6366] !text-sm !font-normal !font-[Poppins] !mb-0`}>\n                  code\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDMobileCode\"\n                  render={({ field }) => (\n                    <MemoizedCustomMobileCodePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n                {errors.PDMobileCode && (\n                  <p className={`${inputerrorClassNameAutoComplete}`}>\n                    {errors.PDMobileCode.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>Mobile No</label>\n                <input\n                  type=\"tel\" // Better for mobile number input\n                  {...register(\"PDMobileNo\", {\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={`${inputClassName} ${\n                    errors.PDMobileNo ? \"border-[1px]\" : \"border-gray-300\"\n                  }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    e.target.value = e.target.value.slice(0, 10);\n                  }}\n                />\n                {errors.PDMobileNo && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDMobileNo.message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={departmentLoading}\n              className={`${\n                departmentLoading ? 'bg-gray-400' : 'bg-header'\n              } text-white p-2 px-4 mt-3 rounded`}\n            >\n              {departmentLoading ? (\n                <div className=\"text-center flex justify-center items-center\">\n                  <Spin size=\"small\" />\n                </div>\n              ) : (\n                'Submit'\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default React.memo(EditDepartment);"],"names":["_jsx","className","children","Spin","size","MemoizedCustomMobileCodePicker","React","CustomMobileCodePicker","EditDepartment","departmentLoading","useSelector","state","department","loading","departmentByIdData","companyList","company","register","handleSubmit","setValue","control","formState","errors","useForm","mode","defaultValues","status","pageLoading","setPageLoading","dispatch","useDispatch","navigate","useNavigate","userCompanyId","userType","getUserIds","departmentIdEnc","useParams","departmentId","useMemo","decrypt","companyOptions","map","type","_jsxs","value","_id","fullName","userName","fetchData","useCallback","async","companySearch","text","sort","isPagination","reqData","getDepartmentById","error","console","useEffect","data","_data$mobile","_data$mobile2","companyId","name","email","mobile","code","number","onSubmit","finalPayload","departmentName","PDMobileCode","PDMobileNo","updateDepartmentFunc","then","_ref","statusOptions","label","Loader","GlobalLayout","autoComplete","noValidate","concat","inputLabelClassName","_objectSpread","required","inputClassName","message","placeholder","Controller","render","_ref2","field","Select","inputAntdSelectClassName","options","pattern","_ref3","inputerrorClassNameAutoComplete","minLength","maxLength","onInput","e","target","slice","disabled"],"sourceRoot":""}