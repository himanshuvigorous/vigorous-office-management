{"version":3,"file":"static/js/9183.2833a860.chunk.js","mappings":"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","sources":["pages/client/event/UpdateEvent.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { inputClassName, inputLabelClassName, domainName, inputAntdSelectClassName, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { getEventDetails, updateEventFunc } from \"../event/eventFeatures/_event_reducers\";\nimport moment from \"moment\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nfunction UpdateEvent() {\n\n  const { loading: eventLoading } = useSelector(\n    (state) => state.event\n  );\n\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { eventIdEnc } = useParams();\n  const eventId = decrypt(eventIdEnc);\n\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { eventDetails } = useSelector((state) => state.event);\n\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    let reqData = {\n      _id: eventId,\n    };\n    dispatch(getEventDetails(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (eventDetails) {\n      setValue(\"PDCompanyId\", eventDetails?.companyId);\n      setValue(\"PDBranchId\", eventDetails?.branchId);\n      setValue(\"title\", eventDetails?.title);\n      setValue(\"date\", dayjs(eventDetails?.date));\n      setValue(\"status\", eventDetails?.status ? 'true' : 'false');\n    }\n  }, [eventDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: eventId,\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      directorId: \"\",\n      title: data?.title,\n      status: data?.status === 'true' ? true : data?.status === 'false' ? false : '',\n      date: data?.date,\n      // ...data,\n    };\n    dispatch(updateEventFunc(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-3\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((type) => (\n                    <option key={type?._id} value={type?._id}>\n                      {type?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDBranchId\"\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.title\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.title.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"date\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">{errors.date.message}</p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n              >\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select> */}\n              <Controller\n                control={control}\n                name=\"status\"\n                rules={{ required: \"Status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n\n                    className={`${inputAntdSelectClassName} `}\n                  >\n                    <Select.Option value=\"\">Select status</Select.Option>\n                    <Select.Option value=\"true\">Active</Select.Option>\n                    <Select.Option value=\"false\">Inactive</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={eventLoading}\n              className={`${eventLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 mt-3 px-4 rounded`}\n            >\n              {eventLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default UpdateEvent;"],"names":["loading","eventLoading","useSelector","state","event","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","eventIdEnc","useParams","eventId","decrypt","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","branchList","branchListloading","branch","eventDetails","companyId","useWatch","name","defaultValue","branchId","useEffect","branchSearch","text","sort","status","isPagination","_id","companySearch","reqData","getEventDetails","title","dayjs","date","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","directorId","updateEventFunc","then","error","inputLabelClassName","Controller","rules","required","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","Loader","sortByPropertyAlphabetically","map","type","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab2","PDBranchId","inputClassName","placeholder","_ref3","CustomDatePicker","disabledDate","current","isBefore","moment","endOf","_ref4"],"sourceRoot":""}