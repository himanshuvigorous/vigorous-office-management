{"version":3,"file":"static/js/950.a6dd63d4.chunk.js","mappings":"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","sources":["pages/global/other/AssetTypeManagement/CreateAssetType.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\n\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\nimport { createAssetType } from \"./AssetTypeFeatures/_AssetType_reducers\";\n\n\nconst CreateAssetType = () => {\n  const { loading: AssetTypeloading } = useSelector(\n    (state) => state.AssetType\n  );\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const [isDurationActive, setIsDurationActive] = useState(false);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const isPaid = useWatch({\n    control,\n    name: \"isPaid\",\n    defaultValue: \"\",\n  });\n\n  // useEffect(() => {\n  //   dispatch(employeSearch());\n  // }, [dispatch]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"name\": data?.AssetTypeName, \n      \"quantity\": +data?.quantity,\n      \"amount\": +data?.amount,\n      \"openingBalance\": +data?.openingBalance\n    };\n    dispatch(createAssetType(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  \n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company Name <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                showSearch\n                filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                }\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyListLoading ? <Select.Option disabled>\n                  <ListLoader />\n                </Select.Option> : (companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                )))}\n              </select>\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch Name <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Branch\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n            {/* Leave Type Name */}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"AssetTypeName\", {\n                  required: \"Asset  Name  is required\",\n                })}\n                className={`${inputClassName} ${errors.AssetTypeName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Asset  Name\"\n              />\n              {errors.AssetTypeName && (\n                <p className=\"text-red-500 text-sm\">{errors.AssetTypeName.message}</p>\n              )}\n            </div>\n\n           \n        \n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>quantity<span className=\"text-red-600\">*</span></label>\n                <input\n                  type=\"number\"\n                  {...register(\"quantity\", {\n                    required: \"quantity is required\",\n                  })}\n                  className={`${inputClassName} ${errors.maxDays ? \"border-[1px] \" : \"border-gray-300\"}`}\n                  placeholder=\"Enter quantity\"\n                />\n                {errors.quantity && (\n                  <p className=\"text-red-500 text-sm\">{errors.quantity.message}</p>\n                )}\n              </div>\n     \n\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Amount<span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"number\"\n                {...register(\"amount\", {\n                  required: \"Amount is required\",\n                })}\n                className={`${inputClassName} ${errors.totalLeaves ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">{errors.amount.message}</p>\n              )}\n            </div> */}\n\n\n              <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Opening Balance </label>\n              <input\n                type=\"number\"\n                step=\"any\"\n                {...register(\"openingBalance\", {\n                 \n                })}\n                className={`${inputClassName} ${errors.totalLeaves ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Opening Balance\"\n              />\n              {errors.openingBalance && (\n                <p className=\"text-red-500 text-sm\">{errors.openingBalance.message}</p>\n              )}\n            </div>\n\n\n           \n\n          \n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={AssetTypeloading}\n              className={`${AssetTypeloading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n            >\n              {AssetTypeloading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateAssetType;\n"],"names":["CreateAssetType","loading","AssetTypeloading","useSelector","state","AssetType","register","handleSubmit","control","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","isDurationActive","setIsDurationActive","useState","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","branchId","PDBranchId","AssetTypeName","quantity","amount","openingBalance","createAssetType","then","error","inputLabelClassName","_objectSpread","required","inputClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","value","Select","Option","disabled","ListLoader","map","type","fullName","message","Controller","rules","render","_ref","field","inputAntdSelectClassName","placeholder","maxDays","step","totalLeaves","Loader"],"sourceRoot":""}