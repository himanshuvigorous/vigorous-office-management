{"version":3,"file":"static/js/1682.750a8eaf.chunk.js","mappings":"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","sources":["pages/global/other/AssetTypeManagement/EditAssetType.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputClassNameSearch,\n  inputDisabledClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\n\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\nimport { getAssetTypeDetails, updateAssetType } from \"./AssetTypeFeatures/_AssetType_reducers\";\n\n\nconst EditAssetType = () => {\n  const { loading: AssetTypeloading } = useSelector(\n    (state) => state.AssetType\n  );\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { AssetTypeIdEnc } = useParams();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const AssetTypeId = decrypt(AssetTypeIdEnc);\n  const { AssetTypeDetails } = useSelector((state) => state.AssetType);\n  const [isDurationActive, setIsDurationActive] = useState(false);\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  // useEffect(() => {\n  //   dispatch(employeSearch());\n  // }, []);\n  useEffect(() => {\n    let reqData = {\n      _id: AssetTypeId,\n    };\n    dispatch(getAssetTypeDetails(reqData));\n  }, []);\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const isPaid = useWatch({\n    control,\n    name: \"isPaid\",\n    defaultValue: \"\",\n  });\n  useEffect(() => {\n    if (AssetTypeDetails) {\n      setValue(\"PDCompanyId\", AssetTypeDetails?.companyId);\n      setValue(\"PDBranchId\", AssetTypeDetails?.branchId);\n      setValue(\"AssetTypeName\", AssetTypeDetails?.name);\n      setValue(\"amount\", AssetTypeDetails?.amount);\n      setValue(\"quantity\", AssetTypeDetails?.quantity);\n      setValue(\"openingBalance\", AssetTypeDetails?.openingBalance);\n    \n    }\n  }, [AssetTypeDetails]);\n\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      _id: AssetTypeId,\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n        name: data?.AssetTypeName,        \n        \"quantity\": +data?.quantity,\n        \"amount\": +data?.amount,\n        \"openingBalance\": +data?.openingBalance\n    };\n\n    dispatch(updateAssetType(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  const handleDurationChange = (e) => {\n    setIsDurationActive(e.target.value === \"true\");\n    setValue(\"maxDays\", \"\");\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                showSearch\n                filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                }\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyListLoading ? <Select.Option disabled>\n                  <ListLoader />\n                </Select.Option> : (companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                )))}\n              </select>\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Branch\"\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"AssetTypeName\", {\n                  required: \"Asset Name is required\",\n                })}\n                className={`${inputClassName} ${errors.AssetTypeName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Asset Name  Name\"\n              />\n              {errors.AssetTypeName && (\n                <p className=\"text-red-500 text-sm\">{errors.AssetTypeName.message}</p>\n              )}\n            </div>\n\n           \n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>quantity<span className=\"text-red-600\">*</span></label>\n                <input\n                  type=\"number\"\n                  disabled\n                  {...register(\"quantity\", {\n                    required: \"quantity is required\",\n                  })}\n                  className={`${inputDisabledClassName} ${errors.maxDays ? \"border-[1px] \" : \"border-gray-300\"}`}\n                  placeholder=\"Enter quantity\"\n                />\n                {errors.quantity && (\n                  <p className=\"text-red-500 text-sm\">{errors.quantity.message}</p>\n                )}\n              </div>\n     \n\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Amount<span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"number\"\n                {...register(\"amount\", {\n                  required: \"Amount is required\",\n                })}\n                disabled\n                className={`${inputDisabledClassName} ${errors.totalLeaves ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">{errors.amount.message}</p>\n              )}\n            </div> */}\n\n\n              <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Opening Balance </label>\n              <input\n                type=\"number\"\n                step=\"any\"\n                disabled\n                {...register(\"openingBalance\", {\n                \n                })}\n                className={`${inputDisabledClassName} ${errors.totalLeaves ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Opening Balance\"\n              />\n              {errors.openingBalance && (\n                <p className=\"text-red-500 text-sm\">{errors.openingBalance.message}</p>\n              )}\n            </div>\n\n\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={AssetTypeloading}\n              className={`${AssetTypeloading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n            >\n              {AssetTypeloading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditAssetType;\n"],"names":["EditAssetType","loading","AssetTypeloading","useSelector","state","AssetType","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","AssetTypeIdEnc","useParams","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","AssetTypeId","decrypt","AssetTypeDetails","isDurationActive","setIsDurationActive","useState","companyList","companyListLoading","company","branchList","branchListloading","branch","useEffect","reqData","_id","getAssetTypeDetails","CompanyId","useWatch","name","defaultValue","companyId","branchId","amount","quantity","openingBalance","userType","branchSearch","text","sort","status","isPagination","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","PDBranchId","AssetTypeName","updateAssetType","then","error","inputLabelClassName","_objectSpread","required","showSearch","filterOption","input","option","String","toLowerCase","includes","inputClassName","value","Select","Option","disabled","ListLoader","map","type","fullName","message","Controller","rules","render","_ref","field","inputAntdSelectClassName","placeholder","inputDisabledClassName","maxDays","step","totalLeaves","Loader"],"sourceRoot":""}