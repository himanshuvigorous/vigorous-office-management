{"version":3,"file":"static/js/5388.451eee70.chunk.js","mappings":"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","sources":["pages/taskManagement/taskType/UpdateTaskType.js","global_layouts/Loader/Loader.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../constents/global\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { getTaskTypeDetails, updateTaskType } from \"./taskFeatures/_task_reducers\";\nimport Loader from \"../../../global_layouts/Loader/Loader\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { getGstTypeListFunc, gstTypeSearch } from \"../../global/other/GstType/GstTypeFeatures/_gstType_reducers\";\nimport { Select, Spin } from \"antd\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\n\nfunction UpdateTaskType() {\n  const { loading: taskTypeloading } = useSelector((state) => state.taskType);\n  const { control, register, handleSubmit, setValue, formState: { errors } } = useForm();\n  const [pageLoading, setPageLoading] = useState(true);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { gstTypeList, loading: gstTypeListLoading } = useSelector(state => state.gstType)\n  const { taskTypeIdEnc } = useParams();\n  const taskTypeId = decrypt(taskTypeIdEnc);\n  const { taskTypeDetails } = useSelector((state) => state.taskType);\n\n  const { departmentListData, depListLoading } = useSelector((state) => state.department);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n\n        const reqData = {\n          _id: taskTypeId,\n        };\n        await dispatch(getTaskTypeDetails(reqData)).then((data) => {\n          setPageLoading(false);\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (taskTypeDetails) {\n      dispatch(deptSearch({ text: \"\", sort: true, status: true, isPagination: false, companyId: taskTypeDetails?.companyId })).then((data) => {\n        setValue(\"departmentId\", taskTypeDetails?.departmentId);\n      })\n    }\n  }, [taskTypeDetails])\n\n  useEffect(() => {\n    if (taskTypeDetails) {\n      const reqPayload = {\n        directorId: \"\",\n        companyId: taskTypeDetails?.companyId,\n        branchId: taskTypeDetails?.branchId,\n        \"text\": \"\",\n        \"sort\": true,\n        \"status\": \"\",\n        \"isPagination\": true,\n      }\n      dispatch(gstTypeSearch(reqPayload)).then((data) => {\n        if (!data.error) {\n          setValue(\"designationName\", taskTypeDetails?.name);\n          setValue(\"companyId\", taskTypeDetails?.companyId);\n          setValue(\"departmentId\", taskTypeDetails?.departmentId);\n          setValue(\"fees\", taskTypeDetails?.fees);\n          setValue(\"taskName\", taskTypeDetails?.name);\n          setValue(\"gstTypeId\", taskTypeDetails?.gstTypeId);\n          setValue(\"HSNCode\", taskTypeDetails?.HSNCode);\n          // setValue(\"status\", taskTypeDetails?.status);\n          setValue(\"status\", taskTypeDetails?.status ? \"true\" : \"false\");\n\n        }\n      })\n    }\n  }, [taskTypeDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: taskTypeId,\n      companyId: taskTypeDetails?.companyId,\n      directorId: '',\n      branchId: taskTypeDetails?.branchId,\n      \"departmentId\": data?.departmentId,\n      \"name\": data?.taskName,\n      \"fees\": data?.fees,\n      // status: data?.status,\n      status: data?.status === 'true' ? true : false,\n      \"gstTypeId\": data?.gstTypeId,\n      \"HSNCode\": data?.HSNCode,\n    };\n    dispatch(updateTaskType(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      {!pageLoading ? (\n        <div className=\"gap-4\">\n          <form autoComplete=\"off\" className=\"mt-0\" onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Department<span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"departmentId\", {\n                    required: \"Department is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.departmentId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Department\n                  </option>\n                  {departmentListData?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.name}\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  name=\"departmentId\"\n                  control={control}\n                  rules={{ required: \"department is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.departmentId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      placeholder=\"Select Department\"\n                    >\n                      <Select.Option value=\"\">Select Department</Select.Option>\n                      {depListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : (departmentListData?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.name}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.departmentId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.departmentId.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Task Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"taskName\", {\n                    required: \"Task Name is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.taskName\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Task Name\"\n                />\n                {errors.taskName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.taskName.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Gst Type<span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  onFocus={() => {\n                    const reqPayload = {\n                      directorId: \"\",\n                      companyId: taskTypeDetails?.companyId,\n                      branchId: taskTypeDetails?.branchId,\n                      \"text\": \"\",\n                      \"sort\": true,\n                      \"status\": \"\",\n                      \"isPagination\": true,\n                    }\n                    dispatch(gstTypeSearch(reqPayload))\n                  }}\n                  {...register(\"gstTypeId\", {\n                    required: \"GST Type is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.gstTypeId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Gst Type\n                  </option>\n\n\n                  {gstTypeListLoading ? <Select.Option disabled>\n                    <ListLoader />\n                  </Select.Option> : (gstTypeList?.map((element) => (\n                    <option value={element?._id}>\n                      {element?.percentage} %\n                    </option>\n                  )))}\n                </select>\n                {errors.gstTypeId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.gstTypeId.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  HSNCode <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"HSNCode\", {\n                    required: \"HSNCode is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.HSNCode\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter HSNCode\"\n                />\n                {errors.HSNCode && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.HSNCode.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Fees <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(\"fees\", {\n                    required: \"Fees is required\",\n                  })}\n                  className={`placeholder: ${inputClassName} ${errors.fees\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Fees\"\n                />\n                {errors.fees && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.fees.message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n                <Controller\n                  name=\"status\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      placeholder=\"Select Status\"\n                    >\n                      <Select.Option value=\"true\">Active</Select.Option>\n                      <Select.Option value=\"false\">In Active</Select.Option>\n                    </Select>\n                  )}\n                />\n                {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n              </div>\n            </div>\n            <div className=\"flex justify-end \">\n              <button\n                type=\"submit\"\n                disabled={taskTypeloading}\n                className={`${taskTypeloading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n              >\n                {taskTypeloading ? <div className='text-center flex justify-center items-center'>\n                  <Spin />\n                </div> : 'Submit'}\n              </button>\n            </div>\n          </form>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </GlobalLayout>\n  );\n}\n\nexport default UpdateTaskType;","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n"],"names":["loading","taskTypeloading","useSelector","state","taskType","control","register","handleSubmit","setValue","formState","errors","useForm","pageLoading","setPageLoading","useState","dispatch","useDispatch","navigate","useNavigate","gstTypeList","gstTypeListLoading","gstType","taskTypeIdEnc","useParams","taskTypeId","decrypt","taskTypeDetails","departmentListData","depListLoading","department","useEffect","async","reqData","_id","getTaskTypeDetails","then","data","error","console","fetchData","deptSearch","text","sort","status","isPagination","companyId","departmentId","reqPayload","directorId","branchId","gstTypeSearch","name","fees","gstTypeId","HSNCode","_jsx","GlobalLayout","children","Loader","className","_jsxs","autoComplete","onSubmit","finalPayload","taskName","updateTaskType","concat","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","placeholder","Option","value","disabled","ListLoader","map","type","message","inputClassName","onFocus","element","percentage","_ref2","Spin","size"],"sourceRoot":""}