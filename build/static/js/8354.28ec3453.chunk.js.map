{"version":3,"file":"static/js/8354.28ec3453.chunk.js","mappings":"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","sources":["pages/taskManagement/employeeAddTask/CreateEmployeeTask.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, useWatch, Controller } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { inputClassName, inputLabelClassName, domainName, inputLabelClassNameReactSelect, inputDisabledClassName, inputAntdSelectClassName, getDefaultFinacialYear } from \"../../../constents/global\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport ReactSelect from \"react-select\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\n\n\n\nimport { Radio, Select } from \"antd\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { orgTypeSearch } from \"../../organizationType/organizationTypeFeatures/_org_type_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { createTaskFunc } from \"../addTask/addTaskFeatures/_addTask_reducers\";\nimport { taskTypeSearch } from \"../taskType/taskFeatures/_task_reducers\";\n\nconst CreateEmployeeTask = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { register, control, handleSubmit, watch, setValue, getValues, formState: { errors } } = useForm({\n    defaultValues: {\n      employee: [],\n\n    },\n  });\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const { departmentListData } = useSelector((state) => state.department);\n  const { employeList } = useSelector((state) => state.employe);\n  const { clientList } = useSelector((state) => state.client);\n  const { clientGroupList } = useSelector((state) => state.clientGroup);\n  const [documents, setDocuments] = useState([]);\n  const { taskTypeList } = useSelector((state) => state.taskType);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { orgTypeList } = useSelector((state) => state.orgType);\n  const [isSelectAllChecked, setIsSelectAllChecked] = useState(false);\n  const [isSelectAllCheckedClient, setIsSelectAllCheckedClient] =\n    useState(false);\n  const [options, setOptions] = useState([]);\n  const [employeeSelectedOption, setEmployeeSelectedOption] = useState([]);\n\n\n\n  const handleSelectChange = (value) => {\n    setEmployeeSelectedOption(value);\n  };\n\n  const handleSelectAll = (field) => {\n    if (isSelectAllChecked) {\n      field.onChange([]);\n    } else {\n      const allEmployees = employeList?.map((employee) => ({\n        value: employee._id,\n        label: employee.fullName,\n      }));\n      field.onChange(allEmployees);\n    }\n    setIsSelectAllChecked(!isSelectAllChecked);\n  };\n  const handleSelectAllClient = (field) => {\n    if (isSelectAllCheckedClient) {\n      field.onChange([]);\n    } else {\n      const allEmployees = clientList?.map((employee) => ({\n        value: employee._id,\n        label: employee.fullName,\n      }));\n      field.onChange(allEmployees);\n    }\n    setIsSelectAllCheckedClient(!isSelectAllCheckedClient);\n  };\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: \"\",\n  });\n  const selctedClientName = useWatch({\n    control,\n    name: \"client\",\n    defaultValue: \"\",\n  });\n\n  const clientBranchOptions = selctedClientName?.length == 1 ? (clientList?.find(data => data?._id == selctedClientName?.[0]?.value)?.branchData || []) : []\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n\n  const financialYears = generateFinancialYears();\n\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sep\", \"Oct-Dec\"];\n\n  const daysInMonth = [\"Last Day\"].concat(\n    Array.from({ length: 31 }, (_, i) => `${i + 1} Day`)\n  );\n\n  const dropdownType = useWatch({\n    control,\n    name: \"isPeriod\",\n    defaultValue: \"\",\n  });\n  const [selectAllActive, setSelectAllActive] = useState(false);\n  const allOptionValues = options.map((option) => option.value);\n\n  const selectAllValue = \"__all__\"; // Custom value for the \"Select All\" option\n\n  const mergedOptions = [\n    {\n      label: \"Select All\",\n      value: selectAllValue,\n    },\n    ...options,\n  ];\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? companyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId]);\n\n  useEffect(() => {\n          setValue(\"financialYear\", getDefaultFinacialYear());\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\" ||\n      userInfoglobal?.userType === \"companyBranch\" ||\n      userInfoglobal?.userType === \"employee\"\n    ) {\n      dispatch(\n        deptSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? companyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n          branchId:\n            userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"companyDirector\"\n              ? watch(\"PDBranchId\")\n              : userInfoglobal?.userType === \"companyBranch\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.branchId,\n        })\n      );\n    }\n  }, [companyId, branchId]);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setDocuments((prev) => [...prev, res.payload.data]);\n      }\n    });\n  };\n  const handleRemoveFile = (index) => {\n    setDocuments((prev) => {\n      const updatedDocuments = prev.filter((_, i) => i !== index);\n      return updatedDocuments;\n    });\n  };\n\n  useEffect(() => {\n    if (watch(\"clientSelection\") === \"group\" && watch(\"groupName\"))\n      dispatch(\n        clientSearch({\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? watch(\"PDCompanyId\")\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n          branchId:\n            userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"companyDirector\"\n              ? watch(\"PDBranchId\")\n              : userInfoglobal?.userType === \"companyBranch\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.branchId,\n\n          directorId: \"\",\n          organizationId: \"\",\n          industryId: \"\",\n          groupId: watch(\"groupName\"),\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n  }, []);\n\n\n\n  const onSubmit = (data) => {\n\n\n    const finalPayload = {\n      companyId: userInfoglobal?.companyId,\n\n      branchId: userInfoglobal?.branchId,\n      departmentId: userInfoglobal?.departmentId,\n      // fileNumber: data?.fileNo,\n      financialYear: data?.financialYear,\n      groupId: data?.groupName,\n      taskTypeId: data?.PDtaskId,\n      priority: data?.PDTaskPriority,\n      clientId:\n        watch(\"clientSelection\") === \"group\"\n          ? clientList?.map((client) => client._id)\n          : data?.client && data?.client?.length > 0\n            ? data?.client?.map((client) => client.value)\n            : [],\n      employeIds: [userInfoglobal?._id],\n      isSelfAssigned:true,\n\n      taskName: taskTypeList?.find((task) => task?._id === data?.PDtaskId)\n        ?.name,\n      fee: taskTypeList?.find((task) => task?._id === data?.PDtaskId)?.fees,\n      remarks: data?.descriptions,\n      dueDate: data?.tenureDate,\n      documents: documents,\n      type: data?.isPeriod,\n      monthName: data?.monthName,\n      monthQuaters: data?.quarterName,\n      organisationId: data.organizationName,\n            clientBranch: clientBranchOptions?.find(el => el._id == data?.clientBranch)\n    };\n\n    dispatch(createTaskFunc(finalPayload)).then((output) => {\n      !output.error && navigate(-1);\n    });\n  };\n  const handleFocusClientGrp = () => {\n    dispatch(\n      clientGrpSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"admin\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    );\n  };\n\n\n\n  const handleFocus = () => {\n    dispatch(\n      employeSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          [\"admin\", \"company\", \"companyDirector\"].includes(userInfoglobal?.userType)\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        departmentId: watch(\"PDDepartmentId\")?.value,\n        directorId: \"\",\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        isBranch: true,\n        isDirector: false,\n      })\n    ).then((empResponse) => {\n      const list = empResponse?.payload?.data?.docs?.map((element) => (\n\n        {\n          label: (\n            <div className=\"flex gap-2 items-center\">\n              {element.fullName}\n              <div className=\"text-[10px] text-gray-500\">\n                {element.userType === \"companyDirector\"\n                  ? \"Director\"\n                  : element.userType === \"companyBranch\"\n                    ? \"Branch Head\"\n                    : \"\"}\n              </div>\n            </div>\n\n          ),\n\n          value: element._id,\n          searchText: element.fullName.toLowerCase(),\n        }));\n      setOptions(list);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <section>\n        <div className=\"\">\n          <div>\n            <form\n              autoComplete=\"off\"\n              className=\"\"\n              onSubmit={handleSubmit(onSubmit)}\n            >\n              <div className=\"gap-4 border-2 border-header  p-2 rounded-md my-2 shadow\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-4 md:my-2 px-3 md:mt-4\">\n                  <div className=\"md:col-span-2 col-span-1 pb-2 overflow-x-auto\">\n                    <Controller\n                      name=\"clientSelection\"\n                      control={control} // control from react-hook-form\n                      // rules={{ required: \"Client Selection Type is required\" }}\n                      render={({ field }) => (\n                        <Radio.Group\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setValue(\"client\", []);\n                          }}\n                          optionType=\"button\"\n                          buttonStyle=\"solid\"\n                          block\n                          defaultValue={\"client\"}\n                          className={`whitespace-nowrap  ${errors.clientSelection\n                            ? \"border-[1px] text-[10px] border-red-500\"\n                            : \"border-gray-300\"\n                            }`}\n                        >\n                          <Radio value=\"client\">Client Wise</Radio>\n                          <Radio disabled value=\"group\">Group Wise</Radio>\n                          <Radio disabled value=\"department\">Department Wise</Radio>\n                          <Radio disabled value=\"organization\">Organization Wise</Radio>\n                        </Radio.Group>\n                      )}\n                    />\n                    {errors.clientSelection && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.clientSelection.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {userInfoglobal?.userType === \"admin\" && (\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Company<span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        control={control}\n                        name=\"PDCompanyId\"\n                        rules={{ required: \"Company is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName}`}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">\n                              Select Company\n                            </Select.Option>\n                            {companyList?.map((type) => (\n                              <Select.Option key={type?._id} value={type?._id}>\n                                {type?.fullName}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.PDCompanyId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDCompanyId.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {(userInfoglobal?.userType === \"admin\" ||\n                    userInfoglobal?.userType === \"company\" ||\n                    userInfoglobal?.userType === \"companyDirector\") && (\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>\n                          Branch <span className=\"text-red-600\">*</span>\n                        </label>\n                        <Controller\n                          control={control}\n                          name=\"PDBranchId\"\n                          rules={{ required: \"Branch is required\" }}\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              defaultValue={\"\"}\n                              className={`${inputAntdSelectClassName}`}\n                              showSearch\n                              filterOption={(input, option) =>\n                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                              }\n                            >\n                              <Select.Option value=\"\">\n                                Select Branch\n                              </Select.Option>\n                              {branchList?.map((type) => (\n                                <Select.Option key={type?._id} value={type?._id}>\n                                  {type?.fullName}\n                                </Select.Option>\n                              ))}\n                            </Select>\n                          )}\n                        />\n                        {errors.PDBranchId && (\n                          <p className=\"text-red-500 text-sm\">\n                            {errors.PDBranchId.message}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  {watch(\"clientSelection\") === \"group\" && (\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Group Type <span className=\"text-red-600\">*</span>\n                      </label>\n                      <select\n                        {...register(\"groupName\", {\n                          required: \"Organization type is required\",\n                        })}\n                        className={` ${inputClassName} ${errors.groupName\n                          ? \"border-[1px] border-red-500\"\n                          : \"border-gray-300\"\n                          }`}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                        onFocus={() => handleFocusClientGrp()}\n                        onChange={(e) => {\n                          dispatch(\n                            clientSearch({\n                              companyId:\n                                userInfoglobal?.userType === \"admin\"\n                                  ? watch(\"PDCompanyId\")\n                                  : userInfoglobal?.userType === \"company\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.companyId,\n                              branchId:\n                                userInfoglobal?.userType === \"company\" ||\n                                  userInfoglobal?.userType === \"admin\" ||\n                                  userInfoglobal?.userType === \"companyDirector\"\n                                  ? watch(\"PDBranchId\")\n                                  : userInfoglobal?.userType === \"companyBranch\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.branchId,\n                              directorId: \"\",\n                              organizationId: \"\",\n                              industryId: \"\",\n                              groupId: e.target.value,\n                              text: \"\",\n                              sort: true,\n                              status: true,\n                              isPagination: false,\n                            })\n                          ).then((data) => {\n                            if (!data?.error) {\n                              setValue(\n                                \"client\",\n                                data?.payload?.data?.docs?.map((client) => {\n                                  return {\n                                    value: client._id,\n                                    label: client.fullName,\n                                  };\n                                })\n                              );\n                            } else {\n                              setValue(\"client\", []);\n                            }\n                          });\n                        }}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Group Type\n                        </option>\n                        {clientGroupList?.map((elment, index) => (\n                          <option value={elment?._id}>\n                            {elment?.fullName}({elment?.groupName})\n                          </option>\n                        ))}\n                      </select>\n\n                      {/* <Controller\n                      control={control}\n                      name=\"groupName\"\n                      rules={{ required: \"Group is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          value={field.value || \"\"}\n                          onFocus={() => handleFocusClientGrp()}\n                        onChange={(value) => {\n                          setValue(\"groupName\", value)\n                          dispatch(clientSearch({\n                            companyId:\n                              userInfoglobal?.userType === \"admin\"\n                                ? watch(\"PDCompanyId\")\n                                :\n                                userInfoglobal?.userType === \"company\"\n                                  ? userInfoglobal?._id\n                                  : userInfoglobal?.companyId,\n                            branchId:\n                              userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.branchId,\n\n                            \"directorId\": \"\",\n                            \"organizationId\": \"\",\n                            \"industryId\": \"\",\n                            groupId: value,\n                            \"text\": \"\",\n                            \"sort\": true,\n                            \"status\": true,\n                            \"isPagination\": false,\n                          })).then((data) => {\n                            if (!data?.error) {\n                              setValue('client', data?.payload?.data?.docs?.map((client) => {\n                                return ({\n                                  value: client._id,\n                                  label: client.fullName\n                                })\n                              }))\n                            } else {\n                              setValue('client', [])\n                            }\n                          })\n                        }}                        \n                          className={`${inputAntdSelectClassName} `}\n                        >\n                          <Select.Option value=\"\">Select Group Type</Select.Option>\n                          {clientGroupList?.map((elment, index) => (\n                          <Select.Option value={elment?._id}>{elment?.fullName}({elment?.groupName})</Select.Option>\n                        ))}\n                        </Select>\n                      )}\n                    /> */}\n                      {errors.groupName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.groupName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {watch(\"clientSelection\") === \"organization\" && (\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Organization Type{\" \"}\n                        <span className=\"text-red-600\">*</span>\n                      </label>\n                      <select\n                        {...register(\"organizationName\", {\n                          required: \"Organization type is required\",\n                        })}\n                        className={` ${inputClassName} ${errors.organizationName\n                          ? \"border-[1px] border-red-500\"\n                          : \"border-gray-300\"\n                          }`}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                        onFocus={() =>\n                          dispatch(\n                            orgTypeSearch({\n                              isPagination: false,\n                              text: \"\",\n                              sort: true,\n                              status: true,\n                            })\n                          )\n                        }\n                        onChange={(e) => {\n                          dispatch(\n                            clientSearch({\n                              companyId:\n                                userInfoglobal?.userType === \"admin\"\n                                  ? watch(\"PDCompanyId\")\n                                  : userInfoglobal?.userType === \"company\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.companyId,\n                              branchId:\n                                userInfoglobal?.userType === \"company\" ||\n                                  userInfoglobal?.userType === \"admin\" ||\n                                  userInfoglobal?.userType === \"companyDirector\"\n                                  ? watch(\"PDBranchId\")\n                                  : userInfoglobal?.userType === \"companyBranch\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.branchId,\n                              directorId: \"\",\n                              organizationId: e.target.value,\n                              industryId: \"\",\n                              groupId: \"\",\n                              text: \"\",\n                              sort: true,\n                              status: true,\n                              isPagination: false,\n                            })\n                          ).then((data) => {\n                            if (!data?.error) {\n                              setValue(\n                                \"client\",\n                                data?.payload?.data?.docs?.map((client) => {\n                                  return {\n                                    value: client._id,\n                                    label: client.fullName,\n                                  };\n                                })\n                              );\n                            } else {\n                              setValue(\"client\", []);\n                            }\n                          });\n                        }}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Organization Type\n                        </option>\n                        {orgTypeList?.map((elment, index) => (\n                          <option value={elment?._id}>{elment?.name}</option>\n                        ))}\n                      </select>\n                      {errors.organizationName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.organizationName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {/* <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Department <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"PDDepartmentId\"\n                      control={control}\n                      rules={{\n                        required: \"At least one department is required\",\n                      }}\n                      render={({ field }) => (\n                        <ReactSelect\n                          {...field}\n                          options={departmentListData?.map((department) => ({\n                            value: department?._id,\n                            label: department?.name,\n                          }))}\n                          classNamePrefix=\"react-select\"\n                          className={`${inputLabelClassNameReactSelect} ${errors.PDDepartmentId\n                            ? \"border-[1px] border-red-500\"\n                            : \"border-gray-300\"\n                            }`}\n                          placeholder=\"Select Departments\"\n                          onChange={(selectedOptions) => {\n                            field.onChange(selectedOptions);\n                            watch(\"clientSelection\") === \"department\" &&\n                              dispatch(\n                                clientSearch({\n                                  companyId:\n                                    userInfoglobal?.userType === \"admin\"\n                                      ? watch(\"PDCompanyId\")\n                                      : userInfoglobal?.userType === \"company\"\n                                        ? userInfoglobal?._id\n                                        : userInfoglobal?.companyId,\n                                  branchId:\n                                    userInfoglobal?.userType === \"company\" ||\n                                      userInfoglobal?.userType === \"admin\" ||\n                                      userInfoglobal?.userType ===\n                                      \"companyDirector\"\n                                      ? watch(\"PDBranchId\")\n                                      : userInfoglobal?.userType ===\n                                        \"companyBranch\"\n                                        ? userInfoglobal?._id\n                                        : userInfoglobal?.branchId,\n                                  directorId: \"\",\n                                  organizationId: \"\",\n                                  industryId: \"\",\n                                  groupId: \"\",\n                                  departmentId: selectedOptions.value,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                  isPagination: false,\n                                })\n                              ).then((data) => {\n                                if (!data?.error) {\n                                  setValue(\n                                    \"client\",\n                                    data?.payload?.data?.docs?.map((client) => {\n                                      return {\n                                        value: client._id,\n                                        label: client.fullName,\n                                      };\n                                    })\n                                  );\n                                } else {\n                                  setValue(\"client\", []);\n                                }\n                              });\n                          }}\n                          value={field.value}\n                        />\n                      )}\n                    />\n                    {errors.PDDepartmentId && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.PDDepartmentId.message}\n                      </p>\n                    )}\n                  </div> */}\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Client <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"client\"\n                      control={control}\n                      rules={{ required: \"At least one client is required\" }}\n                      render={({ field }) => (\n                        <ReactSelect\n                          {...field}\n                          isMulti\n                          onFocus={() => {\n                            dispatch(\n                              clientSearch({\n                                companyId: userInfoglobal?.companyId,\n                                branchId: userInfoglobal?.branchId,\n                                departmentId: userInfoglobal?.departmentId,\n                                groupId: \"\",\n                                directorId: \"\",\n                                organizationId: \"\",\n                                industryId: \"\",\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination: false,\n                              })\n                            );\n                          }}\n                          options={[\n                            { value: \"select_all\", label: \"Select All\" },\n                            ...(Array.isArray(clientList)\n                              ? clientList.map((client) => ({\n                                value: client._id,\n                                label: client.fullName,\n                              }))\n                              : []),\n                          ]}\n                          classNamePrefix=\"react-select\"\n                          className={`${inputLabelClassNameReactSelect} ${errors.client\n                            ? \"border-[1px] border-red-500\"\n                            : \"border-gray-300\"\n                            }`}\n                          placeholder=\"Select client...\"\n                          onChange={(selectedOptions) => {\n                            setValue(\"clientBranch\" , \"\")\n                            const isSelectAllSelected = selectedOptions.find(\n                              (option) => option.value === \"select_all\"\n                            );\n\n                            if (isSelectAllSelected) {\n                              handleSelectAllClient(field);\n                            } else {\n                              // Check if all employees are selected\n                              setIsSelectAllCheckedClient(\n                                selectedOptions.length === clientList.length\n                              );\n                              field.onChange(selectedOptions);\n                            }\n                          }}\n                          value={field.value || []}\n                          formatOptionLabel={(data, { context }) => {\n                            if (data.value === \"select_all\") {\n                              return (\n                                <div className=\"flex items-center\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={isSelectAllCheckedClient}\n                                    onChange={() =>\n                                      handleSelectAllClient(field)\n                                    }\n                                    style={{ marginRight: \"10px\" }}\n                                  />\n                                  <span>Select All</span>\n                                </div>\n                              );\n                            }\n                            return data.label;\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.client && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.client.message}\n                      </p>\n                    )}\n                  </div>\n {clientBranchOptions?.length > 0 && <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Client Branch \n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"clientBranch\"\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n\n                          className={inputAntdSelectClassName}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">\n                            {\" \"}\n                            Select Client Branch\n                          </Select.Option>\n                          {clientBranchOptions?.map((type) => (\n                            <Select.Option value={type?._id}>\n                              {type?.fullName}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.clientBranch && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.clientBranch.message}\n                      </p>\n                    )}\n                  </div>}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Task Name<span className=\"text-red-600\">*</span>\n                    </label>\n                    {/* <select\n                      onFocus={() => {\n                        dispatch(\n                          taskTypeSearch({\n                            companyId:\n                              userInfoglobal?.userType === \"admin\"\n                                ? watch(\"PDCompanyId\")\n                                :\n                                userInfoglobal?.userType === \"company\"\n                                  ? userInfoglobal?._id\n                                  : userInfoglobal?.companyId,\n                            branchId:\n                              userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.branchId,\n                            departmentId: watch('PDDepartmentId')?.value,\n                            \"directorId\": \"\",\n                            text: \"\",\n                            sort: true,\n                            status: true,\n                            isPagination: false,\n                          }))\n                      }}\n                      {...register(\"PDtaskId\", {\n                        required: \"Task Name is required\",\n                      })}\n                      className={` ${inputClassName} ${errors.PDtaskId\n                        ? \"border-[1px] border-red-500\"\n                        : \"border-gray-300\"\n                        }`}\n                    >\n                      <option className=\"\" value=\"\">\n                        Select Task Name\n                      </option>\n\n                      {taskTypeList?.map((element) => (\n                        <option value={element?._id}>{element?.name}</option>\n                      ))}\n                    </select> */}\n\n                    <Controller\n                      control={control}\n                      name=\"PDtaskId\"\n                      rules={{ required: \"Task Name is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n                          onFocus={() => {\n                            dispatch(\n                              taskTypeSearch({\n                                companyId: userInfoglobal?.companyId,\n                                branchId: userInfoglobal?.branchId,\n                                departmentId: userInfoglobal?.departmentId,\n                                directorId: \"\",\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination: false,\n                              })\n                            );\n                          }}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">\n                            {\" \"}\n                            Select Task Name\n                          </Select.Option>\n                          {taskTypeList?.map((type) => (\n                            <Select.Option value={type?._id}>\n                              {type?.name}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.PDtaskId && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDtaskId.message}\n                      </p>\n                    )}\n                  </div>\n                  {/* <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Fees</label>\n                    <input\n                      disabled\n                      type=\"text\"\n                      {...register(\"fees\")}\n                      value={\n                        taskTypeList?.find(\n                          (element) => element?._id === watch(\"PDtaskId\")\n                        )?.fees || \"\"\n                      }\n                      className={`${inputDisabledClassName} ${errors.fees\n                        ? \"border-[1px] border-red-500\"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Fees\"\n                    />\n                    {errors.fees && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.fees.message}\n                      </p>\n                    )}\n                  </div> */}\n\n                  {/* <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Assign To <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"employee\"\n                      control={control}\n                      rules={{ required: \"At least one employee is required\" }}\n                      render={({ field }) => {\n                        const handleChange = (selected) => {\n                          if (selected.includes(selectAllValue)) {\n                            // If \"Select All\" was selected\n                            if (selectAllActive) {\n                              // Unselect all\n                              field.onChange([]);\n                              setSelectAllActive(false);\n                            } else {\n                              // Select all actual options\n                              field.onChange(allOptionValues);\n                              setSelectAllActive(true);\n                            }\n                          } else {\n                            field.onChange(selected);\n                            setSelectAllActive(selected.length === allOptionValues.length);\n                          }\n                        };\n\n                        return (\n                          <Select\n                            mode=\"multiple\"\n                            placeholder=\"Assign To\"\n                            value={field.value || []}\n                            onChange={handleChange}\n                            onFocus={handleFocus}\n                            size=\"large\"\n                            style={{ width: \"100%\" }}\n                            options={mergedOptions}\n                            className=\"!min-h-[45px]\"\n                            showSearch\n                            filterOption={(input, option) =>\n                              option?.label?.toLowerCase()?.includes(input.toLowerCase())\n                            }\n                          />\n                        );\n                      }}\n                    />\n                    {errors.employee && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.employee.message}\n                      </p>\n                    )}\n                  </div> */}\n\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Due Date <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"tenureDate\"\n                      control={control}\n                      rules={{\n                        required: \" Due date  is required\",\n                      }}\n                      render={({ field }) => (\n                        <CustomDatePicker\n                          field={field}\n                          errors={errors}\n                          disabledDate={(current) => {\n                            return (\n                              current &&\n                              current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                            );\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.tenureDate && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.tenureDate.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Task Priority <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"PDTaskPriority\"\n                      rules={{ required: \"Task Priority is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          placeholder={'Select Task Priority'}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Task Priority</Select.Option>\n                          <Select.Option value=\"high\">High</Select.Option>\n                          <Select.Option value=\"medium\">Medium</Select.Option>\n                          <Select.Option value=\"low\">Normal</Select.Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.PDTaskPriority && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDTaskPriority.message}\n                      </p>\n                    )}\n                  </div>\n\n                </div>\n\n                <div\n                  className={`grid ${dropdownType === \"Yearly\"\n                    ? \"grid-cols-1 md:grid-cols-2\"\n                    : dropdownType\n                      ? \"grid-cols-1 md:grid-cols-3\"\n                      : \"grid-cols-1 md:grid-cols-2\"\n                    } md:gap-4 md:my-1 px-3 md:mt-4`}\n                >\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Financial Year <span className=\"text-red-600\">*</span>\n                    </label>\n                    {/* <select\n                      {...register(\"financialYear\", {\n                        required: \"Financial year is required\",\n                      })}\n                      className={`${inputClassName} ${errors.financialYear\n                        ? \"border-[1px] border-red-500\"\n                        : \"border-gray-300\"\n                        }`}\n                    >\n                      <option value=\"\">Select Financial Year</option>\n                      {financialYears.map((year, index) => (\n                        <option key={index} value={year}>\n                          {year}\n                        </option>\n                      ))}\n                    </select> */}\n\n                    <Controller\n                      control={control}\n                      name=\"financialYear\"\n                      rules={{ required: \"Financial year is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          // defaultValue={getDefaultFinacialYear()}\n                          placeholder={'Select Financial year'}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Financial year</Select.Option>\n                          {financialYears.map((year, index) => (\n                            <Select.Option key={index} value={year}>\n                              {year}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.financialYear && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.financialYear.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Type <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"isPeriod\"\n                      rules={{ required: \"Type is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Type</Select.Option>\n                          <Select.Option value=\"Quaterly\"> Quaterly</Select.Option>\n                          <Select.Option value=\"Monthly\">Monthly</Select.Option>\n                          <Select.Option value=\"Yearly\">Yearly</Select.Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.isPeriod && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.isPeriod.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {dropdownType === \"Quaterly\" && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Quarter <span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        control={control}\n                        name=\"quarterName\"\n                        rules={{ required: \"Reset Month is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName} `}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">\n                              Select Quarter\n                            </Select.Option>\n                            {quarter.map((qtr) => (\n                              <Select.Option key={qtr} value={qtr}>\n                                {qtr}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.quarterName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.quarterName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n\n                  {dropdownType === \"Monthly\" && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Month <span className=\"text-red-600\">*</span>\n                      </label>\n                      {/* <select\n                        {...register(\"monthName\", {\n                          required: \"Month is required\",\n                        })}\n                        className={`${inputClassName} ${errors.monthName ? \"border-[1px] border-red-500\" : \"border-gray-300\"}`}\n                      >\n                        <option value=\"\">Select Month</option>\n                        {months.map((month) => (\n                          <option key={month} value={month}>\n                            {month}\n                          </option>\n                        ))}\n                      </select> */}\n\n                      <Controller\n                        control={control}\n                        name=\"monthName\"\n                        rules={{ required: \"Month is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName} `}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">Select Month</Select.Option>\n                            {months.map((month) => (\n                              <Select.Option key={month} value={month}>\n                                {month}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.monthName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.monthName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-4 md:my-1 px-3 md:mt-4\">\n                  <div className=\"col-span-2\">\n                    <label className={`${inputLabelClassName}`}>\n                      Description <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"descriptions\", {\n                        required: \"descriptions is required\",\n                      })}\n                      className={`${inputClassName} ${errors.descriptions\n                        ? \"border-red-500\"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter descriptions \"\n                    />\n                    {errors.descriptions && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.descriptions.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"px-3\">\n                  <label className={`${inputLabelClassName}`}>\n                    Add Documents \n                  </label>\n                  <div className=\"space-y-4\">\n                    <input\n                      type=\"file\"\n                      onChange={handleFileChange}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                    />\n                    <label\n                      htmlFor=\"file-upload\"\n                      className=\"inline-flex justify-start items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white cursor-pointer\"\n                    >\n                      <FaRegFile className=\"mr-2\" />\n                      Add Documents\n                    </label>\n\n                    <div className=\"space-y-2\">\n                      {documents.map((file, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\"\n                        >\n                          <a\n                            href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                            className=\"flex items-center space-x-2\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <FaRegFile className=\"text-gray-500\" />\n                            <span className=\"text-sm text-gray-600\">\n                              {file}\n                            </span>\n                          </a>\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemoveFile(index)}\n                            className=\"text-red-500 hover:text-red-700\"\n                          >\n                            <FaTimes />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end col-span-2 mt-4\">\n                  <button\n                    type=\"submit\"\n                    className=\"bg-header text-white p-2 px-4 rounded\"\n                  >\n                    Submit\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateEmployeeTask;"],"names":["CreateEmployeeTask","_clientList$find","navigate","useNavigate","dispatch","useDispatch","register","control","handleSubmit","watch","setValue","getValues","formState","errors","useForm","defaultValues","employee","companyList","useSelector","state","company","branchList","branch","departmentListData","department","employeList","employe","clientList","client","clientGroupList","clientGroup","documents","setDocuments","useState","taskTypeList","taskType","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","orgTypeList","orgType","isSelectAllChecked","setIsSelectAllChecked","isSelectAllCheckedClient","setIsSelectAllCheckedClient","options","setOptions","employeeSelectedOption","setEmployeeSelectedOption","handleSelectAllClient","field","onChange","allEmployees","map","value","_id","label","fullName","companyId","useWatch","name","defaultValue","branchId","selctedClientName","clientBranchOptions","length","find","data","_selctedClientName$","branchData","financialYears","generateFinancialYears","year","push","months","quarter","dropdownType","Array","from","_","i","selectAllActive","setSelectAllActive","option","useEffect","userType","branchSearch","text","sort","status","isPagination","getDefaultFinacialYear","companySearch","deptSearch","clientSearch","directorId","organizationId","industryId","groupId","_jsx","GlobalLayout","children","className","autoComplete","onSubmit","_data$client","_data$client2","_taskTypeList$find","_taskTypeList$find2","finalPayload","departmentId","financialYear","groupName","taskTypeId","PDtaskId","priority","PDTaskPriority","clientId","employeIds","isSelfAssigned","taskName","task","fee","fees","remarks","descriptions","dueDate","tenureDate","type","isPeriod","monthName","monthQuaters","quarterName","organisationId","organizationName","clientBranch","el","createTaskFunc","then","output","error","_jsxs","Controller","render","_ref","Radio","_objectSpread","e","optionType","buttonStyle","block","clientSelection","disabled","message","inputLabelClassName","rules","required","_ref2","Select","inputAntdSelectClassName","showSearch","filterOption","input","String","toLowerCase","includes","Option","PDCompanyId","_ref3","PDBranchId","inputClassName","onFocus","clientGrpSearch","target","_data$payload","_data$payload$data","_data$payload$data$do","payload","docs","elment","index","orgTypeSearch","_data$payload2","_data$payload2$data","_data$payload2$data$d","_ref4","ReactSelect","isMulti","isArray","classNamePrefix","inputLabelClassNameReactSelect","placeholder","selectedOptions","formatOptionLabel","_ref5","context","checked","style","marginRight","_ref6","_ref7","taskTypeSearch","_ref8","CustomDatePicker","disabledDate","current","isBefore","dayjs","endOf","_ref9","_ref0","_ref1","_ref10","qtr","_ref11","month","reqData","filePath","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","prev","id","htmlFor","FaRegFile","file","href","process","rel","onClick","filter","handleRemoveFile","FaTimes"],"sourceRoot":""}