{"version":3,"file":"static/js/6890.a3c2ea31.chunk.js","mappings":"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","sources":["pages/global/RolesAccess/RolesPermission/UpdatePermission.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  dynamicSidebarSearch,\n  getsidebarById,\n} from \"../../../DyanmicSidebar/DyanmicSidebarFeatures/_dyanmicSidebar_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { directorSearch } from \"../../../Director/director/DirectorFeatures/_director_reducers\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { deptSearch } from \"../../../department/departmentFeatures/_department_reducers\";\nimport { designationSearch } from \"../../../designation/designationFeatures/_designation_reducers\";\nimport {\n  inputClassName,\n  inputLabelClassName,\n  domainName,\n  transformDataRole,\n  inputDisabledClassName,\n} from \"../../../../constents/global\";\nimport {\n  createRolePermission,\n  getDesignationDetails,\n  getPermissionsDetails,\n  updateRolesAndPermissions,\n} from \"./rolePermissiomnFeatures/_rolePermission_reducers\";\nimport getUserIds from \"../../../../constents/getUserIds\";\nimport { Button, Checkbox, Table } from \"antd\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nfunction UpdatePermission() {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    getValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [checkAll, setCheckAll] = useState(false);\n  const { permissionIdEnc } = useParams();\n  const permissionId = decrypt(permissionIdEnc);\n  const { companyList } = useSelector((state) => state.company);\n  const [permissionsState, setPermissionsState] = useState([]);\n  const [permissionsStateView, setPermissionsStateView] = useState([]);\n  const { sidebarListData } = useSelector((state) => state.dynamicSidebar);\n  const { sidebarViewData } = useSelector((state) => state.dynamicSidebar);\n  const { roleAccessDetails } = useSelector((state) => state.rolePermission);\n  const { loading } = useSelector((state) => state.rolePermission);\n\n\n  const {\n    userCompanyId,\n\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n\n    userType,\n  } = getUserIds();\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"branchId\",\n    defaultValue: userBranchId,\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"departmentId\",\n    defaultValue: userDepartmentId,\n  });\n  const designationName = useWatch({\n    control,\n    name: \"designationName\",\n\n  });\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  useEffect(() => {\n    dispatch(\n      dynamicSidebarSearch({\n        isPagination: false,\n      })\n    );\n    dispatch(\n      getPermissionsDetails({\n        _id: permissionId,\n      })\n    );\n  }, []);\n  useEffect(() => {\n    if (sidebarListData && roleAccessDetails) {\n      const allowedPermissions = roleAccessDetails?.permissions;\n\n      const updatedPermissions = sidebarListData?.map((sidebarItem) => {\n        const data = allowedPermissions?.find(\n          (perm) => perm?.pageId === sidebarItem?._id\n        );\n\n        return {\n          ...sidebarItem,\n          canCreate: data?.canCreate,\n          canRead: data?.canRead,\n          canUpdate: data?.canUpdate,\n          canDelete: data?.canDelete,\n        };\n      });\n\n      setPermissionsState(updatedPermissions);\n    }\n  }, [sidebarListData, roleAccessDetails]);\n\n  const handleCheckAll = (e) => {\n    setCheckAll(e.target.checked);\n  };\n  useEffect(() => {\n    if (checkAll) {\n      const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n        ...sidebarItem,\n        canCreate: true,\n        canRead: true,\n        canUpdate: true,\n        canDelete: true,\n      }));\n      setPermissionsState(updatedPermissions);\n    } else {\n      const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n        ...sidebarItem,\n        canCreate: false,\n        canRead: false,\n        canUpdate: false,\n        canDelete: false,\n      }));\n      setPermissionsState(updatedPermissions);\n    }\n  }, [checkAll]);\n\n  const onSubmit = (data) => {\n    const permission = permissionsState\n      ?.map((permissionData) => {\n        if (\n          permissionData?.canCreate ||\n          permissionData?.canRead ||\n          permissionData?.canUpdate ||\n          permissionData?.canDelete\n        ) {\n          return {\n            pageId: permissionData?._id,\n            canCreate: permissionData?.canCreate,\n            canRead: permissionData?.canRead,\n            canUpdate: permissionData?.canUpdate,\n            canDelete: permissionData?.canDelete,\n          };\n        }\n        return null;\n      })\n      .filter(Boolean);\n\n    const finalPayload = {\n      _id: roleAccessDetails?._id,\n      companyId: roleAccessDetails?.companyId,\n      directorId: roleAccessDetails?.directorId,\n      branchId: roleAccessDetails?.branchId,\n      departmentId: roleAccessDetails?.departmentId,\n      designationId: roleAccessDetails?.designationId,\n      designationName: designationName,\n      permissions: permission,\n\n    };\n    dispatch(updateRolesAndPermissions(finalPayload)).then((response) => {\n      if (!response.error) {\n        navigate(-1);\n        // getRolesPermissionList();\n        // closeModal();\n      }\n    });\n  };\n\n  const handleSelectCompany = useCallback(\n    (event) => {\n      const companyId = event.target.value;\n      setValue(\"companyId\", companyId);\n      const companyName = companyList?.docs?.find(\n        (company) => company._id === companyId\n      )?.name;\n      setValue(\"companyName\", companyName);\n      setValue(\"stateId\", \"\");\n      setValue(\"stateName\", \"\");\n      // Dispatch state search if needed\n      // dispatch(stateSearch({ companyId }));\n    },\n    [companyList, setValue]\n  );\n\n\n  useEffect(() => {\n    setValue('designationName', roleAccessDetails?.designationName)\n  }, [roleAccessDetails])\n\n  const handlePermissionToggle = (pageId, permissionType) => {\n    const parent = permissionsState?.find(\n      (item) => item._id === pageId\n    )?.parentPageId;\n    if (parent) {\n      setPermissionsState((prevState) =>\n        prevState.map((item) =>\n          item._id === parent\n            ? {\n              ...item,\n              canCreate: true,\n              canRead: true,\n              canUpdate: true,\n              canDelete: true,\n            }\n            : item\n        )\n      );\n    }\n    const firstparent = permissionsState?.find(\n      (item) => item._id === parent\n    )?.parentPageId;\n    if (firstparent) {\n      setPermissionsState((prevState) =>\n        prevState.map((item) =>\n          item._id === firstparent\n            ? {\n              ...item,\n              canCreate: true,\n              canRead: true,\n              canUpdate: true,\n              canDelete: true,\n            }\n            : item\n        )\n      );\n    }\n    setPermissionsState((prevState) =>\n      prevState.map((item) =>\n        item._id === pageId\n          ? { ...item, [permissionType]: !item[permissionType] }\n          : item\n      )\n    );\n  };\n  const handlePermissionToggleRow = (e, pageId) => {\n    const parent = permissionsState?.find(\n      (item) => item._id === pageId\n    )?.parentPageId;\n    if (parent) {\n      setPermissionsState((prevState) =>\n        prevState.map((item) =>\n          item._id === parent\n            ? {\n              ...item,\n              canCreate: true,\n              canRead: true,\n              canUpdate: true,\n              canDelete: true,\n            }\n            : item\n        )\n      );\n    }\n    const firstparent = permissionsState?.find(\n      (item) => item._id === parent\n    )?.parentPageId;\n    if (firstparent) {\n      setPermissionsState((prevState) =>\n        prevState.map((item) =>\n          item._id === firstparent\n            ? {\n              ...item,\n              canCreate: true,\n              canRead: true,\n              canUpdate: true,\n              canDelete: true,\n            }\n            : item\n        )\n      );\n    }\n    if (e.target.checked) {\n      setPermissionsState((prevState) =>\n        prevState.map((item) =>\n          item._id === pageId\n            ? {\n              ...item,\n              canCreate: true,\n              canRead: true,\n              canUpdate: true,\n              canDelete: true,\n            }\n            : item\n        )\n      );\n    } else {\n      setPermissionsState((prevState) =>\n        prevState.map((item) =>\n          item._id === pageId\n            ? {\n              ...item,\n              canCreate: false,\n              canRead: false,\n              canUpdate: false,\n              canDelete: false,\n            }\n            : item\n        )\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (checkAll) {\n      const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n        ...sidebarItem,\n        canCreate: true,\n        canRead: true,\n        canUpdate: true,\n        canDelete: true,\n      }));\n      setPermissionsState(updatedPermissions);\n    } else {\n      const updatedPermissions = sidebarListData?.map((sidebarItem) => ({\n        ...sidebarItem,\n        canCreate: false,\n        canRead: false,\n        canUpdate: false,\n        canDelete: false,\n      }));\n      setPermissionsState(updatedPermissions);\n    }\n  }, [checkAll]);\n\n  const getButtonClassName = (id, button) => {\n    const isActive =\n      button && permissionsState?.find((item) => item._id === id)\n        ? permissionsState?.find((item) => item._id === id)[button]\n        : false;\n    return `px-3 sm:px-4 py-2 rounded-md text-[9px] sm:text-sm text-nowrap font-medium transition-all duration-300 ${isActive\n        ? \"bg-header text-white border-header\"\n        : \"bg-gray-200 text-gray-700 border-gray-300 hover:border-header border-2 hover:text-header\"\n      }`;\n  };\n  useEffect(() => {\n    setPermissionsStateView(transformDataRole(sidebarViewData));\n  }, [sidebarViewData]);\n  const getPermission = (id, button) => {\n    return permissionsState?.find((item) => item._id === id)?.[button];\n  };\n  const columns = [\n    {\n      title: \"title\",\n      dataIndex: \"title\",\n      width: 300,\n      key: \"_id\",\n      render: (text, permission) => <div className=\"text-nowrap\">{text}</div>,\n    },\n    {\n      title: (\n        <div>\n          <Checkbox onClick={(e) => handleCheckAll(e)} />\n        </div>\n      ),\n      key: \"_id\",\n      width: 100,\n      render: (text, permission) => (\n        <div>\n          <Checkbox\n            onClick={(e) => handlePermissionToggleRow(e, permission._id)}\n            checked={\n              getPermission(permission._id, \"canRead\") &&\n              getPermission(permission._id, \"canCreate\") &&\n              getPermission(permission._id, \"canUpdate\") &&\n              getPermission(permission._id, \"canDelete\")\n            }\n          />\n        </div>\n      ),\n    },\n    {\n      title: <div>{\"Actions\"}</div>,\n      key: \"_id\",\n      render: (text, permission) => (\n        <div className=\"flex items-center flex-nowrap gap-2\">\n          {[\"canRead\", \"canCreate\", \"canUpdate\", \"canDelete\"].map((button) => (\n            <Button\n              className={getButtonClassName(permission._id, button)}\n              key={button}\n              type=\"button\"\n              onClick={(e) => handlePermissionToggle(permission._id, button)}\n              style={{ margin: \"0 5px\" }}\n            >\n              {button}\n            </Button>\n          ))}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <GlobalLayout>\n      <div className=\"\">\n\n        <div className=\"grid gap-2 lg:grid-cols-3 md:grid-cols-2\">\n          <input\n            className={`${inputDisabledClassName} `}\n            value={roleAccessDetails?.branchName}\n            readOnly\n          />\n          <input\n            {...register('designationName')}\n            className={inputClassName}\n          />\n\n        </div>\n\n\n        <Table\n          columns={columns}\n          pagination={false}\n          dataSource={permissionsStateView}\n          scroll={{\n            y: 90 * 5,\n            x: true,\n          }}\n          rowKey=\"_id\"\n        />\n\n        {/* <div className=\"pt-2 text-gray-700\">\n                    {permissionsState?.map((permission) => (\n                        <div\n                            key={permission._id}\n                            className=\"flex lg:justify-between lg:items-center lg:flex-row flex-col justify-center items-start gap-2 border-b p-2\"\n                        >\n                            <div>\n                                <span className=\"capitalize font-medium text-sm\">\n                                    {permission?.name}\n                                </span>\n                            </div>\n\n                            <div className=\"flex justify-between gap-1 w-full lg:w-auto\">\n                                {[\"canRead\", \"canCreate\", \"canUpdate\", \"canDelete\"].map(\n                                    (permissionType) => (\n                                        <div key={permissionType}>\n                                            <button\n                                                className={getButtonClassName(\n                                                    permission[permissionType]\n                                                )}\n                                                onClick={(e) =>\n                                                    handlePermissionToggle(\n                                                        e,\n                                                        permission._id,\n                                                        permissionType\n                                                    )\n                                                }\n                                            >\n                                                {permission[permissionType]\n                                                    ? `✔ ${permissionType.replace(\"can\", \"\")}`\n                                                    : permissionType.replace(\"can\", \"\")}\n                                            </button>\n                                        </div>\n                                    )\n                                )}\n                            </div>\n                        </div>\n                    ))}\n                </div> */}\n        <div className=\"flex justify-end my-2 mx-2\">\n          <button\n            type=\"button\"\n            onClick={handleSubmit(onSubmit)}\n            className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n          >\n            {loading ? <ListLoader /> : 'save'}\n          </button>\n        </div>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default UpdatePermission;\n"],"names":["register","handleSubmit","setValue","getValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","checkAll","setCheckAll","useState","permissionIdEnc","useParams","permissionId","decrypt","companyList","useSelector","state","company","permissionsState","setPermissionsState","permissionsStateView","setPermissionsStateView","sidebarListData","dynamicSidebar","sidebarViewData","roleAccessDetails","rolePermission","loading","userCompanyId","userBranchId","userEmployeId","userDepartmentId","userType","getUserIds","designationName","useWatch","name","defaultValue","JSON","parse","localStorage","getItem","concat","domainName","useEffect","dynamicSidebarSearch","isPagination","getPermissionsDetails","_id","allowedPermissions","permissions","updatedPermissions","map","sidebarItem","data","find","perm","pageId","_objectSpread","canCreate","canRead","canUpdate","canDelete","useCallback","event","_companyList$docs","_companyList$docs$fin","companyId","target","value","companyName","docs","getButtonClassName","id","button","isActive","item","transformDataRole","getPermission","_permissionsState$fin5","columns","title","dataIndex","width","key","render","text","permission","_jsx","className","children","Checkbox","onClick","e","checked","handleCheckAll","handlePermissionToggleRow","_permissionsState$fin3","_permissionsState$fin4","parent","parentPageId","prevState","firstparent","Button","type","handlePermissionToggle","permissionType","_permissionsState$fin","_permissionsState$fin2","style","margin","GlobalLayout","_jsxs","inputDisabledClassName","branchName","readOnly","inputClassName","Table","pagination","dataSource","scroll","y","x","rowKey","permissionData","filter","Boolean","finalPayload","directorId","branchId","departmentId","designationId","updateRolesAndPermissions","then","response","error","ListLoader"],"sourceRoot":""}