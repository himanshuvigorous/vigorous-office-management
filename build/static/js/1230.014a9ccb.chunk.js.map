{"version":3,"file":"static/js/1230.014a9ccb.chunk.js","mappings":"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","sources":["pages/hr/holidayCalanderManagement/CreateHolidayCalander.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputClassNameSearch,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport { useEffect } from \"react\";\nimport { createholidayCalander } from \"./holidayCalanderFeatures/_holiday_calander_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { Select } from \"antd\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nconst CreateHolidayCalander = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const { companyList,companyListLoading } = useSelector((state) => state.company);\n  const { branchList,branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  )\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId\n          :\n          userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.branchId,\n      name: data?.name,\n      date: dayjs(data?.date).format(\"YYYY-MM-DD\"),\n      type: data?.type,\n      description: data?.description,\n      status: true,\n    };\n\n    dispatch(createholidayCalander(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination:false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                name=\"PDCompanyId\"\n                control={control}\n                rules={{\n                  required: \"Company is required\",\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n\n                    placeholder=\"Select Company\"\n                    showSearch\n\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                     ( companyList\n                        ?.map((element) => (\n                          <Select.Option value={element?._id} > {element?.fullName} </Select.Option>\n                        )))\n                    }\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{\n                  required: \"Branch is required\",\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                     onChange={(value) => {\n                        setValue(\"type\", '')\n                        field.onChange(value);\n                      }}\n                    className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"} z-[99999]`}\n                    placeholder=\"Select Branch\"\n                    showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                    getPopupContainer={(trigger) => trigger.parentNode}\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                      (sortByPropertyAlphabetically(branchList,'fullName')\n                        ?.map((element) => (\n                          <Select.Option value={element?._id} > {element?.fullName} </Select.Option>\n                        )))\n                    }\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"\">\n              {/* Name Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"name\", {\n                  required: \"Name is required\",\n                })}\n                placeholder=\"Name\"\n                type=\"text\"\n                className={`${inputClassName} ${errors.name ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Date Picker */}\n              <label className={`${inputLabelClassName}`}>\n                Date <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <input\n                {...register(\"date\", {\n                  required: \"Date is required\",\n                })}\n                type=\"date\"\n                min={new Date().toISOString().split(\"T\")[0]}\n                className={`${inputClassName} ${errors.date ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n              /> */}\n\n              <Controller\n                name=\"date\"\n                control={control}\n                rules={{\n                  required: \"Date  is required\",\n                }}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current &&\n                        current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">{errors.date.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Type Select Field */}\n              <label className={`${inputLabelClassName}`}>\n                Type <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"type\", {\n                  required: \"Type is required\",\n                })}\n                className={`${inputClassName} ${errors.type ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n              >\n                <option value=\"\">Select Type</option>\n                <option value=\"Public\">Public</option>\n                <option value=\"Optional\">Optional</option>\n                <option value=\"Company\">Company</option>\n              </select> */}\n\n              <Controller\n                name=\"type\"\n                control={control}\n                rules={{\n                  required: \"Type  is required\",\n                }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n\n                    placeholder=\"Select Type\"\n                    showSearch\n                    filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n\n                  >\n                    <Select.Option value=\"\">Select Type</Select.Option>\n                    <Select.Option value=\"Public\">Public</Select.Option>\n\n                    <Select.Option value=\"Optional\">Optional</Select.Option>\n\n                    <Select.Option value=\"Company\">Company</Select.Option>\n\n                  </Select>\n                )}\n              />\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">{errors.type.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Description Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Description <span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                placeholder=\"Description\"\n                className={`${inputClassName} ${errors.description ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n              ></textarea>\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n\n\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateHolidayCalander;\n"],"names":["CreateHolidayCalander","register","handleSubmit","control","formState","errors","setValue","useForm","CompanyId","useWatch","name","defaultValue","BranchId","companyList","companyListLoading","useSelector","state","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","dispatch","useDispatch","navigate","useNavigate","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","branchId","date","dayjs","format","type","description","createholidayCalander","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","PDPlan","placeholder","showSearch","Option","value","disabled","ListLoader","map","element","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab","onChange","filterOption","input","option","String","toLowerCase","includes","getPopupContainer","trigger","parentNode","sortByPropertyAlphabetically","PDBranchId","inputClassName","_ref3","CustomDatePicker","disabledDate","current","isBefore","endOf","_ref4"],"sourceRoot":""}