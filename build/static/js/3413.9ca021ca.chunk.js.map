{"version":3,"file":"static/js/3413.9ca021ca.chunk.js","mappings":"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","sources":["pages/hr/onBoarding/CreateOnBoarding.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  domainName,\n  formButtonClassName,\n  getLocationDataByPincode,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputDisabledClassName,\n  inputLabelClassName,\n  inputLabelClassNameReactSelect,\n  inputerrorClassNameAutoComplete,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport getUserIds from \"../../../constents/getUserIds\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  countrySearch,\n  secCountrySearch,\n} from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport {\n  secStateSearch,\n  stateSearch,\n} from \"../../global/address/state/featureStates/_state_reducers\";\nimport {\n  citySearch,\n  secCitySearch,\n} from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport {\n  applicationSearch,\n  getApplicationDetails,\n} from \"../../applicationManagement/applicationFeatures/_application_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { designationSearch } from \"../../designation/designationFeatures/_designation_reducers\";\nimport { onBoardingCreate } from \"./onBoardingFeatures/_onBoarding_reducers\";\nimport { encrypt } from \"../../../config/Encryption\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport ReactSelect from \"react-select\";\nimport { leaveTypeSearch } from \"../../global/other/leavetypeManagment/LeaveTypeFeatures/_leave_type_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { AutoComplete, Input, Radio, Select, Upload } from \"antd\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport ImageUploader from \"../../../global_layouts/ImageUploader/ImageUploader\";\nimport UserDetails from \"../../dashboard/UserDetails\";\nimport dayjs from \"dayjs\";\nimport moment from \"moment\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { RolesPermissionSearch } from \"../../global/RolesAccess/RolesPermission/rolePermissiomnFeatures/_rolePermission_reducers\";\nimport { timeSlotSearch } from \"../../timeSlot/timeSlotsFeatures/_timeSlots_reducers\";\n\n\nconst CreateOnBoarding = () => {\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [userData, setUserData] = useState(\"\");\n  const [secondaryAddress, setSecoundarAddress] = useState();\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType,\n  } = getUserIds();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const [financialDateDiffrence, setFinancialDateDiffrence] = useState({\n    main: 0,\n    current: 0\n  });\n  const { timeSlotsListData } = useSelector(state => state.timeSlots)\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { countryListData, secCountryList } = useSelector((state) => state.country);\n  const { stateListData, secStateList } = useSelector((state) => state.states);\n  const { cityListData, secCityList } = useSelector((state) => state.city);\n  const { applicationList, loading: applicationLoading } = useSelector((state) => state.application);\n  const [sameAsCurrentAddress, setSameAsCurrentAddress] = useState(false);\n  const { designationList, loading: desLoading } = useSelector((state) => state.designation);\n  const { departmentListData, loading: depLoading } = useSelector((state) => state.department);\n  const { directorLists } = useSelector((state) => state.director);\n  const { leaveListData } = useSelector((state) => state.leaveType);\n  const [fileList, setFileList] = useState([\n\n  ]);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    getValues,\n    clearErrors,\n    setError,\n    formState: { errors },\n    watch,\n  } = useForm({\n    defaultValues: {\n      family: [\n        {\n          relation: \"\",\n          name: \"\",\n          age: \"\",\n          contactNumber: \"\",\n        },\n      ],\n      employmentDetails: [\n        {\n          organizationName: \"\",\n          designationName: \"\",\n          from: \"\",\n          to: \"\",\n          annualCTC: \"\",\n        },\n      ],\n      educationDetails: [\n        {\n          degree: \"\",\n          university: \"\",\n          from: \"\",\n          to: \"\",\n          isPercentage: false,\n          number: \"\",\n          specification: \"\",\n        },\n      ],\n      emergencyContact: [\n        {\n          name: \"\",\n          relationship: \"\",\n          email: \"\",\n          mobile: {\n            code: \"\",\n            number: \"\",\n          },\n        },\n      ],\n      assignLeaveDetails: [{\n\n      }]\n    },\n  });\n  const currentPackage = useWatch({ name: \"currentPackage\", control })\n  const IsPf = useWatch({\n    control,\n    name: \"isPF\",\n    defaultValue: \"\",\n  });\n  const isESIC = useWatch({\n    control,\n    name: \"isESIC\",\n    defaultValue: \"\",\n  });\n  const basicSalaryPercentage = useWatch({\n    control,\n    name: \"basicSalaryPercentage\",\n    defaultValue: \"\",\n  });\n  const currentSalary = useWatch({\n    control,\n    name: \"currentSalary\",\n    defaultValue: \"\",\n  });\n  const dateOfJoining = useWatch({\n    control,\n    name: \"dateOfJoining\",\n    defaultValue: \"\",\n  });\n  useEffect(() => {\n    if (basicSalaryPercentage, currentSalary) {\n      const basicSalaryCalc = Number(currentSalary) * Number(basicSalaryPercentage) / 100\n      setValue('calculatedBasicSalary', Number(basicSalaryCalc).toFixed(2))\n    }\n  }, [basicSalaryPercentage, currentSalary])\n  useEffect(() => {\n    if (currentPackage) {\n      // Calculate current salary and per day salary\n      const calculatedSalary = currentPackage / 12; // assuming 12 months in a year\n      const perDaySalary = calculatedSalary / 30; // assuming 30 days in a month\n      setValue(\"currentSalary\", calculatedSalary.toFixed(2));\n      setValue(\"perDaySalary\", perDaySalary.toFixed(2));\n    }\n  }, [currentPackage]);\n  const { employeList } = useSelector((state) => state.employe);\n  const dispatch = useDispatch();\n  const PrintState = useWatch({\n    control,\n    name: \"PDState\",\n    defaultValue: \"\",\n  });\n  const PrintCountry = useWatch({\n    control,\n    name: \"PDCountry\",\n    defaultValue: \"\",\n  });\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPinCode\",\n    defaultValue: \"\",\n  });\n  const profileType = useWatch({\n    control,\n    name: \"profileType\",\n    defaultValue: \"\",\n  });\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n  const directorId = useWatch({\n    control,\n    name: \"PDDirectorId\",\n    defaultValue: userDirectorId,\n  });\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: '',\n  });\n  const designationId = useWatch({\n    control,\n    name: \"PDDesignationId\",\n    defaultValue: '',\n  });\n  const employeId = useWatch({\n    control,\n    name: \"PDEmployeId\",\n    defaultValue: \"\",\n  });\n  const applicationId = useWatch({\n    control,\n    name: \"applicationId\",\n    defaultValue: \"\",\n  });\n  const isProbationPeriodActive = useWatch({\n    control,\n    name: \"isProbationPeriod\",\n    defaultValue: \"\",\n  });\n  const financStartDate = useWatch({\n    control,\n    name: \"financStartDate\",\n    defaultValue: \"\",\n  });\n  const financEndDate = useWatch({\n    control,\n    name: \"financEndDate\",\n    defaultValue: \"\",\n  });\n  const {\n    fields: assignLeaveDetails,\n    append: appendassignLeave,\n    remove: removeassignLeave,\n  } = useFieldArray({\n    control,\n    name: \"assignLeaveDetails\",\n  });\n  const { loading: onBoardingLaoding } = useSelector(\n    (state) => state.onBoarding\n  );\n  const { rolesPermissionList } = useSelector((state) => state.rolePermission);\n  const { applicationDetails } = useSelector((state) => state.application);\n  const [imageName, setImageName] = useState('');\n  const onChange = ({ fileList: newFileList }) => {\n    setFileList(newFileList);\n  };\n\n  useEffect(() => {\n    if (fileList.length > 0) {\n      setImageName(fileList[fileList.length - 1]?.url || fileList[fileList.length - 1]?.thumbUrl);\n    }\n  }, [fileList]);\n\n  const onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n\n  useEffect(() => {\n    if (companyId, branchId) {\n      dispatch(\n        leaveTypeSearch({\n          directorId: null,\n          companyId: companyId,\n          branchId: branchId,\n          employeId: \"\",\n          text: \"\",\n          sort: true,\n          status: \"\",\n          isPagination: false,\n          isPaid: true,\n        })\n      );\n    }\n    dispatch(RolesPermissionSearch({\n      directorId: null,\n      companyId: companyId,\n      branchId: branchId,\n      text: \"\",\n      sort: true,\n      status: \"\",\n      isPagination: false,\n    }))\n    dispatch(timeSlotSearch({\n      directorId: null,\n      companyId: companyId,\n      branchId: branchId,\n      text: \"\",\n      sort: true,\n      status: \"\",\n      isPagination: false,\n    }))\n\n  }, [companyId, branchId]);\n\n  useEffect(() => {\n\n    setValue(\"PDFullName\", '');\n    setValue(\"PDEmail\", '');\n    setValue(\"PDMobileCode\", '');\n    setValue(\"PDMobileNo\", '');\n    fetchApplicationListData();\n  }, [branchId]);\n\n  const fetchApplicationListData = () => {\n    let reqData = {\n      text: \"\",\n      status: \"Selected\",\n      offerLatterStatus: \"Accepted\",\n      sort: true,\n      isPagination: false,\n      employeId: \"\",\n      companyId: companyId,\n      branchId: branchId,\n      departmentId: \"\",\n      designationId: \"\",\n      jobId: \"\",\n    };\n    dispatch(applicationSearch(reqData));\n  };\n\n  useEffect(() => {\n    setUserData(applicationDetails);\n  }, [applicationDetails]);\n\n  useEffect(() => {\n    if (applicationId) {\n      dispatch(getApplicationDetails({ _id: applicationId }));\n    }\n  }, [applicationId]);\n\n\n\n  useEffect(() => {\n    if (userData) {\n      setValue(\"profileType\", \"Application-onBoarding\");\n      setValue(\"PDFullName\", userData?.fullName);\n      setValue(\"PDEmail\", userData?.email);\n      setValue(\"PdApplicationDepartment\", userData?.departmentName);\n      setValue(\"PdDesignationApplication\", userData?.designationName);\n      setValue(\"PDMobileCode\", userData?.mobile?.code);\n      setValue(\"PDMobileNo\", userData?.mobile?.number);\n      setValue(\"PDAddress\", userData?.address?.street);\n      setValue(\"PDPinCode\", userData?.address?.pinCode);\n      setValue(\"PDCountry\", userData?.address?.country);\n      setValue(\"PDState\", userData?.address?.state);\n      setValue(\"PDCity\", userData?.address?.city);\n      setValue(\"gender\", userData?.gender);\n      setValue(\"maritalStatus\", userData?.maritalStatus);\n      setValue(\"openingBalance\", Number(userData?.openingBalance));\n      setValue(\"dateOfBirth\", userData?.dateOfBirth ? dayjs(userData?.dateOfBirth) : null);\n    }\n\n\n\n  }, [userData]);\n\n  const onSubmit = (data) => {\n\n    if (step === 1) {\n\n      const leavePayload = data?.assignLeaveDetails?.map((item) => ({\n        \"_id\": item?._id,\n        \"leaveTypeId\": item?.leave,\n        \"totalLeaves\": Number(item?.totalLeave)\n      }));\n\n      const finalPayload = {\n\n        companyId: companyId,\n        directorId: \"\",\n        branchId: branchId,\n        // employeId: employeId,\n        pageRoleId: data?.sidebarRole,\n        applicationId:\n          profileType === \"Application-onBoarding\" ? data?.applicationId : null,\n        officeEmail: data?.PDOfficeEmail ? data?.PDOfficeEmail : null,\n        \"reporting_to\": data?.reportingEmployee,\n        departmentId: profileType === \"Application-onBoarding\" ? userData?.departmentId : data?.PDDepartmentId,\n        designationId: profileType === \"Application-onBoarding\" ? userData?.designationId : data?.PDDesignationId,\n        firstName: \"\",\n        lastName: \"\",\n        fullName: data?.PDFullName,\n        landlineNumber: data?.landlineNo,\n        seatNumber: +data?.seatNo,\n        shift: data?.shift,\n        workType: data?.workType,\n        profileImage: data?.ProfileImage,\n        email: data?.PDEmail,\n        openingBalance: Number(data?.openingBalance),\n        mobile: {\n          code: data?.PDMobileCode,\n          number: data?.PDMobileNo,\n        },\n        status: true,\n        isDeleted: false,\n        addresses: {\n          primary: {\n            street: data?.PDAddress,\n            city: data?.PDCity,\n            state: data?.PDState,\n            country: data?.PDCountry,\n            pinCode: data?.PDPinCode,\n          },\n          secondary: {\n            street: data?.PDSecAddress,\n            city: data?.PDSecCity,\n            state: data?.PDSecState,\n            country: data?.PDSecCountry,\n            pinCode: data?.PDSecPinCode,\n          },\n        },\n        generalInfo: {\n          dateOfJoining: dayjs(data?.dateOfJoining).format(\"YYYY-MM-DD\"),\n          isProbationPeriod: data?.isProbationPeriod == \"Yes\" ? true : false,\n          isProbationPeriodLeave: data?.isProbationPeriodLeave == \"Yes\" ? true : false,\n          probationPeriod: data?.isProbationPeriod ? data?.probationPeriod : \"\",\n          gender: data?.gender,\n          bloodGroup: data?.BloodGroup,\n          dateOfBirth: data?.dateOfBirth ? dayjs(data?.dateOfBirth).format(\"YYYY-MM-DD\") : '',\n          maritalStatus: data?.maritalStatus,\n          designationName: data?.designation,\n        },\n        salaryDetails: {\n          companyId: companyId,\n          directorId: \"\",\n          branchId: branchId,\n          currentPackage: Number(data?.currentPackage),\n\n          currentSalary: Number(data?.currentSalary),\n          perDaySalary: Number(data?.perDaySalary),\n          basicSalaryPercentage: Number(data?.basicSalaryPercentage),\n          basicSalary: Number(data?.calculatedBasicSalary),\n          isESIC: data?.isESIC === 'true' ? true : false,\n          esicNumber: (isESIC === 'true' || isESIC === true) ? data?.esicNumber : '',\n          esicType: (isESIC === 'true' || isESIC === true) ? data?.esicType : '',\n          esicAppliedOn: (isESIC === 'true' || isESIC === true) ? data?.esicAppliedOn : '',\n          esicInPercentage: (isESIC === 'true' || isESIC === true) ? +data?.esicInPercentage : '',\n          esicMaxUpTo: (isESIC === 'true' || isESIC === true) ? +data?.esicMaxUpTo : '',\n          isPF: data?.isPF === 'true' ? true : false,\n          uanNumber: data?.uanNumber,\n          pfType: (IsPf === 'true' || IsPf === true) ? data?.pfType : '',\n          pfAppliedOn: (IsPf === 'true' || IsPf === true) ? data?.pfAppliedOn : '',\n          pfInPercentage: (IsPf === 'true' || IsPf === true) ? +data?.pfInPercentage : '',\n          pfMaxUpTo: (IsPf === 'true' || IsPf === true) ? +data?.pfMaxUpTo : '',\n          \"lastIncrementDate\": dayjs(data?.salarystartDate),\n          \"nextIncrementDate\": dayjs(data?.salaryEndDate)\n        },\n        leaveDetails: {\n          companyId: companyId,\n          directorId: \"\",\n          branchId: branchId,\n          \"financStartDate\": dayjs(data?.financStartDate)?.format(\"YYYY-MM\"),\n          \"financEndDate\": dayjs(data?.financEndDate)?.format(\"YYYY-MM\"),\n          \"leavePolicy\": data?.leaveTypePolicy,\n          \"leaveData\": leavePayload\n        }\n      };\n\n      dispatch(onBoardingCreate(finalPayload)).then((output) => {\n        if (!output.error) {\n          navigate(\n            `/admin/onBoarding/edit/${encrypt(\n              output?.payload?.companyinfo?.data?._id\n            )}`\n          );\n        }\n      });\n    } else {\n      setStep((step) => step + 1);\n    }\n  };\n\n  useEffect(() => {\n    if (\n      PrintPincode &&\n      PrintPincode.length >= 4 &&\n      PrintPincode.length <= 6 &&\n      /^\\d{6}$/.test(PrintPincode)\n    ) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data?.city);\n            setValue(\"PDState\", data?.state);\n            setValue(\"PDCountry\", data?.country);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n\n  const handleAddressCheckbox = (checked) => {\n    setSameAsCurrentAddress(checked);\n  };\n\n  const navTabClick = (clickedStep) => {\n    if (clickedStep < step) {\n      setStep(clickedStep);\n    } else {\n      handleSubmit(onSubmit)();\n    }\n  };\n\n  const handleFocusCompany = () => {\n    if (!companyList?.length) {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  };\n  const handleDesignationChange = (event) => {\n    setValue(\"PDDesignationId\", event);\n    dispatch();\n  };\n\n  const handleCompanyChange = (event) => {\n    setValue(\"PDCompanyId\", event);\n    setValue(\"PDBranchId\", \"\");\n    setValue(\"PDDirectorId\", \"\");\n    dispatch(\n      directorSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: event,\n      })\n    );\n    dispatch(\n      branchSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: event,\n      })\n    );\n  };\n\n  const handleFocusDirector = () => {\n    if (!directorLists) {\n      dispatch(\n        directorSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId,\n        })\n      );\n    }\n  };\n\n  const handleBranchChange = (event) => {\n    setValue(\"PDBranchId\", event);\n    setValue(\"PDDepartmentId\", \"\");\n    dispatch(\n      deptSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: companyId,\n        branchId: event,\n      })\n    );\n  };\n\n  const handleFocusBranch = () => {\n    if (!branchList && userType === \"company\") {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId,\n        })\n      );\n    }\n  };\n\n  const handleDepartmentChange = (event) => {\n    setValue(\"PDDepartmentId\", event);\n    setValue(\"PDDesignationId\", \"\");\n    dispatch(\n      designationSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        departmentId: event,\n        companyId: companyId,\n      })\n    );\n  };\n\n  const handleFocusDepartment = () => {\n    dispatch(\n      deptSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: companyId,\n        branchId: branchId,\n      })\n    );\n  };\n\n  useEffect(() => {\n    if (sameAsCurrentAddress) {\n      const currentAddress = {\n        address: getValues(\"PDAddress\"),\n        country: getValues(\"PDCountry\"),\n        state: getValues(\"PDState\"),\n        city: getValues(\"PDCity\"),\n        pinCode: getValues(\"PDPinCode\"),\n      };\n      setValue(\"PDSecAddress\", currentAddress.address);\n      setValue(\"PDSecPinCode\", currentAddress.pinCode);\n      setValue(\"PDSecCountry\", currentAddress.country);\n      setValue(\"PDSecState\", currentAddress.state);\n      setValue(\"PDSecCity\", currentAddress.city);\n    } else {\n      setValue(\"PDSecAddress\", \"\");\n      setValue(\"PDSecCountry\", \"\");\n      setValue(\"PDSecState\", \"\");\n      setValue(\"PDSecCity\", \"\");\n      setValue(\"PDSecPinCode\", \"\");\n    }\n  }, [sameAsCurrentAddress]);\n\n  const handleSecCountryChange = (event) => {\n    setValue(\"PDSecCountry\", event.target.value);\n    setValue(\"PDSecState\", \"\");\n    dispatch(\n      secStateSearch({\n        isPagination: false,\n        text: event.target.value,\n        sort: true,\n        status: true,\n        countryId: event.target.value,\n      })\n    );\n  };\n\n  const handleSecFocusCountry = () => {\n    if (!secCountryList?.docs?.length) {\n      setValue(\"PDSecState\", \"\");\n      dispatch(\n        secCountrySearch({\n          isPagination: false,\n          text: \"\",\n          sort: true,\n          status: true,\n        })\n      );\n    }\n  };\n  const [employeeList, setEmployeeList] = useState([])\n\n  const reportingOption = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isManager: true,\n      isPagination: false,\n      departmentId: departmentId,\n      designationId: \"\",\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? companyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n          ? branchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n      isBranch: true\n\n    };\n\n    dispatch(employeSearch(reqPayload)).then((res) => {\n\n      const optionList = res?.payload?.data?.docs?.map(\n        (options) => {\n          return ({\n            value: options?._id,\n            label: (\n              <div className=\"flex gap-2 items-center\">\n                {options?.fullName}\n                <div className=\"text-[10px] text-gray-500\">\n                  {options?.userType === \"companyDirector\"\n                    ? \"Director\"\n                    : options?.userType === \"companyBranch\"\n                      ? \"Branch Head\"\n                      : options?.userType === 'employee' ? <div className=\"flex  gap-1   !p-0 !m-0 rounded-sm\">\n                        <div className=\"!p-0 !m-0\">{options?.departmentData?.name}</div>\n                        (<div className=\"!p-0 !m-0\">{options?.designationData?.name}</div>)\n                      </div> : ''}\n                </div>\n              </div>\n            ),\n          })\n        }\n      );\n      setEmployeeList(optionList)\n    })\n\n  }\n\n  const handleSecStateChange = (event) => {\n    setValue(\"PDSecState\", event.target.value);\n    setValue(\"PDSecCity\", \"\");\n    dispatch(\n      secCitySearch({\n        isPagination: false,\n        text: event.target.value,\n        sort: true,\n        status: true,\n        countryId: \"\",\n        stateId: event.target.value,\n      })\n    );\n  };\n  // useEffect(() => {\n\n  //   if (financStartDate && financEndDate) {\n  //     const dateObj1 = dayjs(financStartDate, \"MM/YYYY\")?.startOf('month')\n  //     const dateObj2 = dayjs(financEndDate, \"MM/YYYY\")?.endOf('month')\n  //     const today = dayjs();\n  //     const baseDate = dateOfJoining\n  //       ? (dayjs(dateOfJoining).date() <= 15\n  //         ? dayjs(dateOfJoining).startOf('month')\n  //         : dayjs(dateOfJoining).startOf('month').add(1, 'month'))\n  //       : (today.date() <= 15\n  //         ? today.startOf('month')\n  //         : today.startOf('month').add(1, 'month'));\n\n  //     const diffInMonths = dateObj2.diff(dateObj1, 'month') + 1;\n  //     const diffInCurrent = dateObj2.diff(baseDate, 'month') + 1;\n  //     setFinancialDateDiffrence({\n  //       main: diffInMonths,\n  //       current: diffInCurrent\n  //     })\n  //   } else {\n  //     setFinancialDateDiffrence({\n  //       main: 0,\n  //       current: 0\n  //     })\n  //   }\n  // }, [financStartDate, financEndDate, dateOfJoining])\n  useEffect(() => {\n    if (financStartDate && financEndDate) {\n      const dateObj1 = dayjs(financStartDate, \"MM/YYYY\")?.startOf('month');\n      const dateObj2 = dayjs(financEndDate, \"MM/YYYY\")?.endOf('month');\n      const today = dayjs();\n\n      let baseDate;\n\n      if (dateOfJoining) {\n        const doj = dayjs(dateOfJoining);\n        if (dateObj1.isBefore(doj, 'month')) {\n          baseDate = doj.date() <= 15\n            ? doj.startOf('month')\n            : doj.startOf('month').add(1, 'month');\n        } else {\n          baseDate = dateObj1.clone().startOf('month');\n        }\n      } else {\n        baseDate = today.date() <= 15\n          ? today.startOf('month')\n          : today.startOf('month').add(1, 'month');\n      }\n\n      const diffInMonths = dateObj2.diff(dateObj1, 'month') + 1;\n      const diffInCurrent = dateObj2.diff(baseDate, 'month') + 1;\n\n      setFinancialDateDiffrence({\n        main: diffInMonths,\n        current: diffInCurrent\n      });\n    } else {\n      setFinancialDateDiffrence({\n        main: 0,\n        current: 0\n      });\n    }\n  }, [financStartDate, financEndDate, dateOfJoining]);\n  useEffect(() => {\n    setValue('assignLeaveDetails', [{}])\n  }, [dateOfJoining, financEndDate, financStartDate])\n  const { Option } = Select;\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"grid grid-cols-12 gap-2\">\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"space-y-2  col-span-12 shadow-2xl rounded-xl\"\n        >\n          <div className=\"flex bg-header justify-start items-center rounded-t-lg gap-5 px-3 pt-2 overflow-x-auto overflow-y-hidden text-nowrap\">\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(1)}\n              className={`flex relative flex-col items-center  pb-2 ${step === 1 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 1 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold text-nowrap\">\n                Primary Details\n              </span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(2)}\n              className={`flex flex-col items-center relative pb-2 ${step === 2 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 2 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">General Details</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(8)}\n              className={`flex flex-col items-center relative pb-2 ${step === 8 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 8 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Assign Leave</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(9)}\n              className={`flex flex-col items-center relative pb-2 ${step === 9 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 9 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Salary</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(3)}\n              className={`flex flex-col items-center relative pb-2 ${step === 3 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 3 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Family Details </span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(4)}\n              className={`flex flex-col items-center relative pb-2 ${step === 4 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 4 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Emergency Contacts</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(5)}\n              className={`flex flex-col items-center relative pb-2 ${step === 5 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 5 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Educational Details</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(6)}\n              className={`flex flex-col items-center relative pb-2 ${step === 6 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 6 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Employment Details</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(7)}\n              className={`flex flex-col items-center relative pb-2 ${step === 7 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 7 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Social Media</span>\n            </button>\n\n\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(10)}\n              className={`flex flex-col items-center relative pb-2 ${step === 10 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 10 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Document</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(11)}\n              className={`flex flex-col items-center relative pb-2 ${step === 11 ? \"text-white ]\" : \"text-gray-200\"\n                } cursor-pointer`}\n            >\n              {step === 11 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">bank</span>\n            </button>\n\n\n\n          </div>\n          {step === 1 && (\n            <>\n              <div>\n                <Controller\n                  name=\"profileType\"\n                  control={control}\n                  render={({ field }) => (\n                    <Radio.Group\n                      {...field}\n                      onChange={(e) => {\n                        field.onChange(e);\n                      }}\n                      optionType=\"button\"\n                      buttonStyle=\"solid\"\n                      block\n                      defaultValue={\"Application-onBoarding\"}\n                      className={`  ${errors.clientSelection\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    >\n                      <Radio value=\"Application-onBoarding\">\n                        <span className=\"md:text-[14px] text-[12px]\"> Application onBoarding</span>\n                      </Radio>\n                      <Radio value=\"Direct-onBoarding\"><span className=\"md:text-[14px] text-[12px]\"> Direct OnBoarding </span></Radio>\n                    </Radio.Group>\n                  )}\n                />\n                <div className=\"flex w-full justify-center items-center p-2\">\n                  <Controller\n                    name=\"ProfileImage\"\n                    control={control}\n                    render={({ field }) => (\n                      <ImageUploader\n                        setValue={setValue}\n                        name=\"image\"\n                        field={field}\n                      />\n                    )}\n                  />\n\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                  {userType === \"admin\" && (\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Company <span className=\"text-red-600\">*</span>\n                      </label>\n\n\n                      <Controller\n                        name=\"PDCompanyId\"\n                        control={control}\n                        rules={{ required: \"Company is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName} ${errors.PDCompanyId ? '' : 'border-gray-300'}`}\n                            onChange={(value) => {\n                              field.onChange(value);\n                              handleCompanyChange(value); // Custom handler if needed\n                            }}\n                            onFocus={handleFocusCompany}\n                            placeholder=\"Select Company\"\n                          >\n                            <Option value=\"\">Select Company</Option>\n                            {companyListLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (companyList?.map((company) => (\n                              <Option key={company._id} value={company._id}>\n                                {company?.userName} ({company?.fullName})\n                              </Option>\n                            )))}\n                          </Select>\n                        )}\n                      />\n\n                      {errors.PDCompanyId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDCompanyId.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {(userType === \"admin\" || userType === \"company\" || userType === \"companyDirector\") && (\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Branch <span className=\"text-red-600\">*</span>\n                      </label>\n\n                      <Controller\n                        name=\"PDBranchId\"\n                        control={control}\n                        rules={{ required: \"Branch is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName} ${errors.PDBranchId ? '' : 'border-gray-300'}`}\n                            onChange={(value) => {\n                              setValue(\"employee\", '')\n                              setValue(\"reportingEmployee\", '')\n                              field.onChange(value);\n                              handleBranchChange(value); // Custom handler if needed\n                            }}\n                            onFocus={handleFocusBranch}\n                            placeholder=\"Select Branch\"\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Option value=\"\">Select Branch</Option>\n                            {branchListloading ? <Select.Option disabled><ListLoader /></Select.Option> : sortByPropertyAlphabetically(branchList, 'fullName')?.map((branch) => (\n                              <Option key={branch._id} value={branch._id}>\n                                {branch.userName} ({branch.fullName})\n                              </Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n\n                      {errors.PDBranchId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDBranchId.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {profileType !== \"Application-onBoarding\" &&\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Department <span className=\"text-red-600\">*</span>\n                      </label>\n\n                      <Controller\n                        name=\"PDDepartmentId\"\n                        control={control}\n                        rules={{ required: \"Department is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName} ${errors.PDDepartmentId ? '' : 'border-gray-300'}`}\n                            onChange={(value) => {\n                              field.onChange(value);\n                              handleDepartmentChange(value); // Custom handler if needed\n                            }}\n                            onFocus={handleFocusDepartment}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                            placeholder=\"Select Department\"\n                          >\n                            <Option value=\"\">Select Department</Option>\n                            {depLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (departmentListData?.map((element) => (\n                              <Option key={element?._id} value={element?._id}>\n                                {element?.name}\n                              </Option>\n                            )))}\n                          </Select>\n                        )}\n                      />\n\n                      {errors.PDDepartmentId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDDepartmentId.message}\n                        </p>\n                      )}\n                    </div>\n                  }\n                  {profileType !== \"Application-onBoarding\" &&\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Designation <span className=\"text-red-600\">*</span>\n                      </label>\n\n                      <Controller\n                        name=\"PDDesignationId\"\n                        control={control}\n                        rules={{ required: \"Designation is required\" }}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName} ${errors.PDDesignationId ? '' : 'border-gray-300'}`}\n                            showSearch\n                            filterOption={\n                              (input, option) =>\n                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                            placeholder=\"Select Designation\"\n                          >\n                            <Option value=\"\">Select Designation</Option>\n                            {desLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (designationList?.map((type) => (\n                              <Option key={type?._id} value={type?._id}>\n                                {type?.name}\n                              </Option>\n                            )))}\n                          </Select>\n                        )}\n                      />\n\n                      {errors.PDDesignationId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDDesignationId.message}\n                        </p>\n                      )}\n                    </div>}\n\n                  {profileType === \"Application-onBoarding\" && (\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Select Application <span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        name=\"applicationId\"\n                        control={control}\n                        rules={{ required: \"Application is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`${inputAntdSelectClassName} ${errors.applicationId ? '' : 'border-gray-300'}`}\n                            placeholder=\"Select Application\"\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Option value=\"\">Select Application</Option>\n                            {applicationLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (sortByPropertyAlphabetically(applicationList, 'fullName')?.map((type) => (\n                              <Option key={type?._id} value={type?._id}>\n                                {type?.fullName}\n                              </Option>\n                            )))}\n                          </Select>\n                        )}\n                      />\n\n                      {errors.applicationId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.applicationId.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Full Name <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDFullName\", {\n                        required: \"Full Name is required\",\n                      })}\n                      className={`placeholder: ${inputClassName} ${errors.PDFullName ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Full Name\"\n                    />\n                    {errors.PDFullName && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDFullName.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Email<span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDEmail\", {\n                        required: \"Email is required\",\n                        pattern: {\n                          value:\n                            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                          message: \"Please enter a valid email address\",\n                        },\n                      })}\n                      className={` ${inputClassName} ${errors.PDEmail ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Email\"\n                    />\n                    {errors.PDEmail && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDEmail.message}\n                      </p>\n                    )}\n                  </div>\n                  {profileType === \"Application-onBoarding\" && (<>\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Department <span className=\"text-red-600\">*</span>\n                      </label>\n                      <input\n                        type=\"text\"\n                        disabled={true}\n                        {...register(\"PdApplicationDepartment\", {\n                          required: \"Department is required\",\n                        })}\n                        className={`placeholder: ${inputDisabledClassName} ${errors.PdApplicationDepartment ? \"border-[1px] \" : \"border-gray-300\"\n                          }`}\n                        placeholder=\"Enter Department\"\n                      />\n                      {errors.PdApplicationDepartment && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PdApplicationDepartment.message}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Designation <span className=\"text-red-600\">*</span>\n                      </label>\n                      <input\n                        type=\"text\"\n                        disabled={true}\n                        {...register(\"PdDesignationApplication\", {\n                          required: \"Designation is required\",\n                        })}\n                        className={`placeholder: ${inputDisabledClassName} ${errors.PdDesignationApplication ? \"border-[1px] \" : \"border-gray-300\"\n                          }`}\n                        placeholder=\"Enter Designation\"\n                      />\n                      {errors.PdDesignationApplication && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PdDesignationApplication.message}\n                        </p>\n                      )}\n                    </div>\n                  </>)}\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Office Email\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDOfficeEmail\", {\n                        pattern: {\n                          value:\n                            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                          message: \"Please enter a valid email address\",\n                        },\n                      })}\n                      className={` ${inputClassName} ${errors.PDOfficeEmail\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Office Email\"\n                    />\n                    {errors.PDOfficeEmail && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDOfficeEmail.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Reporting Person\n                    </label>\n                    <Controller\n                      name=\"reportingEmployee\"\n                      control={control}\n                      render={({ field }) => (\n                        // <ReactSelect\n                        //   {...field}\n                        //   onFocus={() => {\n                        //     const reqPayload = {\n                        //       text: \"\",\n                        //       status: true,\n                        //       sort: true,\n                        //       isTL: \"\",\n                        //       isHR: \"\",\n                        //       isManager: true,\n                        //       isPagination: false,\n                        //       departmentId: \"\",\n                        //       designationId: \"\",\n                        //       companyId:\n                        //         userInfoglobal?.userType === \"admin\"\n                        //           ? companyId\n                        //           : userInfoglobal?.userType === \"company\"\n                        //             ? userInfoglobal?._id\n                        //             : userInfoglobal?.companyId,\n                        //       branchId:\n                        //         userInfoglobal?.userType === \"company\" ||\n                        //           userInfoglobal?.userType === \"admin\" ||\n                        //           userInfoglobal?.userType === \"companyDirector\"\n                        //           ? branchId\n                        //           : userInfoglobal?.userType === \"companyBranch\"\n                        //             ? userInfoglobal?._id\n                        //             : userInfoglobal?.branchId,\n                        //     };\n\n                        //     dispatch(employeSearch(reqPayload));\n                        //   }}\n                        //   options={sortByPropertyAlphabetically(employeList, 'fullName')?.map((employee) => ({\n                        //     value: employee?._id,\n                        //     label: employee?.fullName,\n                        //   }))}\n                        //   isClearable={true}\n                        //   classNamePrefix=\"react-select\"\n                        //   className={`${inputLabelClassNameReactSelect} ${errors.employee ? \"border-[1px] \" : \"border-gray-300\"\n                        //     }`}\n                        //   placeholder=\"Select Employee\"\n                        // />\n\n                        <Select\n\n                          style={{ width: '100%' }}\n                          className={`${inputAntdSelectClassName}`}\n                          value={field?.value}\n                          onChange={(value) => {\n\n                            field.onChange(value)\n                          }\n                          }\n                          allowClear\n                          onFocus={reportingOption}\n                          options={employeeList}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                          placeholder=\"Select Reporting Person\"\n                        />\n                      )}\n                    />\n                    {errors.employee && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.employee.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-3\">\n                    <div className=\"w-[150px]\">\n                      <label className={`${inputLabelClassName}`}>\n                        code<span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        control={control}\n                        name=\"PDMobileCode\"\n                        rules={{ required: \"code is required\" }}\n                        render={({ field }) => (\n                          <CustomMobileCodePicker\n                            field={field}\n                            errors={errors}\n                          />\n                        )}\n                      />\n\n                      {/* <select\n                      onFocus={() => {\n                        dispatch(\n                          countrySearch({\n                            isPagination: false,\n                            text: \"\",\n                            sort: true,\n                            status: true,\n                          })\n                        );\n                      }}\n                      {...register(\"PDMobileCode\", {\n                        required: \"MobileCode is required\",\n                      })}\n                      className={` ${inputClassName} ${errors.PDMobileCode\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                        }`}\n                    >\n                      <option className=\"\" value=\"\">\n                        Select Mobile Code\n                      </option>\n                      {countryListData?.docs?.map((type) => (\n                        <option value={type?.countryMobileNumberCode}>\n                          {type?.countryMobileNumberCode}\n                        </option>\n                      ))}\n                    </select> */}\n                      {errors[`PDMobileCode`] && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors[`PDMobileCode`].message}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Mobile No<span className=\"text-red-600\">*</span>\n                      </label>\n                      <input\n                        type=\"number\"\n                        {...register(`PDMobileNo`, {\n                          required: \"Mobile No is required\",\n                          minLength: {\n                            value: 10,\n                            message: \"Must be exactly 10 digits\",\n                          },\n                          maxLength: {\n                            value: 10,\n                            message: \"Must be exactly 10 digits\",\n                          },\n                        })}\n                        className={` ${inputClassName} ${errors[`PDMobileNo`]\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n                        placeholder=\"Enter Mobile No\"\n                        maxLength={10}\n                        onInput={(e) => {\n                          if (e.target.value.length > 10) {\n                            e.target.value = e.target.value.slice(0, 10);\n                          }\n                        }}\n                      />\n                      {errors[`PDMobileNo`] && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors[`PDMobileNo`].message}\n                        </p>\n                      )}\n                    </div>\n\n\n\n\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Landline No (EPBX)\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(`landlineNo`, {\n\n\n                      })}\n                      className={` ${inputClassName} ${errors[`landlineNo`]\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Landline No\"\n\n                    />\n                    {errors[`landlineNo`] && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors[`landlineNo`].message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Seat No\n                    </label>\n                    <input\n                      type=\"number\"\n                      {...register(`seatNo`, {\n\n\n                      })}\n                      className={` ${inputClassName} ${errors[`seatNo`]\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Seat No\"\n\n                    />\n                    {errors[`seatNo`] && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors[`seatNo`].message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"px-3 grid sm:grid-cols-2 grid-cols-1 gap-4 items-end mb-3\">\n                  <div>\n                    {/* Select Gender */}\n                    <label className={`${inputLabelClassName}`}>\n                      Gender <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"gender\"\n                      control={control}\n                      rules={{ required: \"Gender is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`mt-0 ${inputAntdSelectClassName} ${errors.gender ? '' : 'border-gray-300'}`}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                          placeholder=\"Select Gender\"\n                        >\n                          <Option value=\"\">Select Gender</Option>\n                          <Option value=\"Male\">Male</Option>\n                          <Option value=\"Female\">Female</Option>\n                          <Option value=\"Other\">Other</Option>\n                        </Select>\n                      )}\n                    />\n\n                    {errors.gender && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.gender.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    {/* Select Blood Group */}\n                    <label className={`${inputLabelClassName}`}>\n                      Blood Group\n                    </label>\n\n                    <Controller\n                      name=\"BloodGroup\"\n                      control={control}\n\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`mt-0 ${inputAntdSelectClassName} ${errors.BloodGroup ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select Blood Group\"\n                        >\n                          <Option value=\"\">Select Blood Group</Option>\n                          {[\"A+\", \"A-\", \"B+\", \"B-\", \"AB+\", \"AB-\", \"O+\", \"O-\"].map((bloodType) => (\n                            <Option key={bloodType} value={bloodType}>\n                              {bloodType}\n                            </Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n\n                    {errors.BloodGroup && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.BloodGroup.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    {/* Select Gender */}\n                    <label className={`${inputLabelClassName}`}>\n                      Sidebar Role <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"sidebarRole\"\n                      control={control}\n                      rules={{ required: \"Sidebar Role is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`mt-0 ${inputAntdSelectClassName} ${errors.sidebarRole ? '' : 'border-gray-300'}`}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                          placeholder=\"Select Sidebar Role\"\n                        >\n                          <Option value=\"\">Select Sidebar Role</Option>\n                          {rolesPermissionList && rolesPermissionList.length > 0 &&\n                            rolesPermissionList.map((data, index) => {\n                              return (\n                                <Option key={index} value={data?._id}>\n                                  {data?.designationName}\n                                </Option>\n                              );\n                            })\n                          }\n\n\n                        </Select>\n                      )}\n                    />\n\n                    {errors.sidebarRole && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.sidebarRole.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Date of Birth <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"dateOfBirth\"\n                      control={control}\n                      render={({ field }) => (\n                        <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                          return current && current.isAfter(moment().endOf('day'), 'day');\n                        }} />\n                      )}\n                    />\n                    {errors.dateOfBirth && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.dateOfBirth.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Marital Status <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"maritalStatus\"\n                      control={control}\n                      rules={{ required: \"Marital status is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`mt-0 ${inputAntdSelectClassName} ${errors.maritalStatus ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select Marital Status\"\n                        >\n                          <Option value=\"\">Select Marital Status</Option>\n                          <Option value=\"Single\">Single</Option>\n                          <Option value=\"Married\">Married</Option>\n                          <Option value=\"Divorced\">Divorced</Option>\n                        </Select>\n                      )}\n                    />\n\n                    {errors.maritalStatus && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.maritalStatus.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Opening Balance\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"any\"\n                      {...register(`openingBalance`, {\n\n\n                      })}\n                      className={` ${inputClassName} ${errors[`openingBalance`]\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Opening Balance\"\n\n                    />\n                    {errors[`openingBalance`] && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors[`openingBalance`].message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                  <div className=\"\">\n                    {/* Select probation */}\n                    <label className={`${inputLabelClassName}`}>\n                      Select probation <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"isProbationPeriod\"\n                      control={control}\n                      rules={{ required: \"probation is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName} ${errors.isProbationPeriod ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select probation\"\n                        >\n                          <Option value=\"\">Select probation</Option>\n                          <Option value={'Yes'}>Yes</Option>\n                          <Option value={'No'}>No</Option>\n                        </Select>\n                      )}\n                    />\n\n                    {errors.isProbationPeriod && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.isProbationPeriod.message}\n                      </p>\n                    )}\n                  </div>\n                  {(isProbationPeriodActive === \"Yes\" ||\n                    isProbationPeriodActive === true) && (\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>\n                          Is Leave Applicable<span className=\"text-red-600\">*</span>\n                        </label>\n                        <Controller\n                          name=\"isProbationPeriodLeave\"\n                          control={control}\n                          // rules={{ required: \"probation Paid is required\" }}\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              className={`${inputAntdSelectClassName} ${errors.isProbationPeriodLeave ? '' : 'border-gray-300'}`}\n                              placeholder=\">Select is Leave Applicable\"\n                            >\n                              <Option value=\"\">Select is Leave Applicable</Option>\n                              <Option value={'Yes'}>Yes</Option>\n                              <Option value={'No'}>No</Option>\n                            </Select>\n                          )}\n                        />\n                        {errors.isProbationPeriodLeave && (\n                          <p className=\"text-red-500 text-sm\">\n                            {errors.isProbationPeriodLeave.message}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  {(isProbationPeriodActive === \"Yes\" ||\n                    isProbationPeriodActive === true) && (\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>\n                          probation Period (days) <span className=\"text-red-600\">*</span>\n                        </label>\n                        <input\n                          type=\"number\"\n                          {...register(\"probationPeriod\", {\n                            required: \"probation Period is required\",\n                          })}\n                          className={`${inputClassName} ${errors.probationPeriod\n                            ? \"border-[1px] \"\n                            : \"border-gray-300\"\n                            }`}\n                          placeholder=\"Enter probation Period\"\n                        />\n                        {errors.probationPeriod && (\n                          <p className=\"text-red-500 text-sm\">\n                            {errors.probationPeriod.message}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Date of Joining <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"dateOfJoining\"\n                      control={control}\n                      render={({ field }) => (\n                        <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                          return profileType === \"Application-onBoarding\" && current && current.isBefore(moment().endOf('day'), 'day');\n                        }} />\n                      )}\n                    />\n\n                    {errors.dateOfJoining && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.dateOfJoining.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    {/* Select Shift */}\n                    <label className={`${inputLabelClassName}`}>\n                      Select Shift <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"shift\"\n                      control={control}\n                      rules={{ required: \"Shift is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName} ${errors.shift ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select Shift\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Option value=\"\">Select Shift</Option>\n                          {timeSlotsListData?.map((type) =>\n                            <Option key={type?._id} value={type?._id}>\n                              {type?.shiftName}\n                            </Option>\n                          )}\n                        </Select>\n                      )}\n                    />\n\n                    {errors.shift && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.shift.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"\">\n                    {/* Select Work Type */}\n                    <label className={`${inputLabelClassName}`}>\n                      Select Work Type <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"workType\"\n                      control={control}\n                      rules={{ required: \"Work Type is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName} ${errors.workType ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select Work Type\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Option value=\"\">Select Work Type</Option>\n                          {[\n                            { key: \"work_from_office\", value: \"Work From Office\" },\n                            { key: \"work_from_home\", value: \"Work From Home\" },\n                            { key: \"hybrid\", value: \"Hybrid\" },\n                            { key: \"remote\", value: \"Remote\" }\n                          ]?.map((type) => (\n                            <Option key={type.key} value={type.key}>\n                              {type.value}\n                            </Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n\n                    {errors.workType && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.workType.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"mt-3\">\n                  {/* Add the checkbox to copy address */}\n\n                  <div className=\"mt-3\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                      <div className=\"col-span-2\">\n                        <label className={`${inputLabelClassName}`}>\n                          Primary Address<span className=\"text-red-600\">*</span>\n                        </label>\n                        <input\n                          type=\"text\"\n                          {...register(\"PDAddress\", {\n                            required: \"Primary Address is required\",\n                          })}\n                          className={`${inputClassName} ${errors.PDAddress\n                            ? \"border-[1px] \"\n                            : \"border-gray-300\"\n                            }`}\n                          placeholder=\"Enter Primary Address\"\n                        />\n                        {errors.PDAddress && (\n                          <p className=\"text-red-500 text-sm\">\n                            {errors.PDAddress.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 px-3\">\n                      <div>\n                        <div className={`${inputLabelClassName}`}>\n                          Country <span className=\"text-red-600\">*</span>\n                        </div>\n                        <Controller\n                          control={control}\n                          name=\"PDCountry\"\n                          rules={{ required: \"Country is required\" }}\n                          render={({ field }) => (\n                            <AutoComplete\n                              className=\"w-full\"\n                              {...field}\n                              onChange={(value) => {\n                                // Directly handle country change by using setValue from React Hook Form\n                                field.onChange(value); // Update the value in the form control\n                              }}\n                              options={sortByPropertyAlphabetically(countryListData?.docs)?.map((type) => ({\n                                value: type?.name,\n                              }))}\n                            >\n                              <input\n                                placeholder=\"Enter Country\"\n                                onFocus={() => {\n                                  dispatch(\n                                    countrySearch({\n                                      isPagination: false,\n                                      text: \"\",\n                                      sort: true,\n                                      status: true,\n                                    })\n                                  );\n                                }}\n                                className={`${inputClassName} ${errors.PDCountry\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                              />\n                            </AutoComplete>\n                          )}\n                        />\n                        {errors.PDCountry && (\n                          <p className={`${inputerrorClassNameAutoComplete}`}>\n                            {errors.PDCountry.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <div className={`${inputLabelClassName}`}>\n                          State <span className=\"text-red-600\">*</span>\n                        </div>\n                        <Controller\n                          control={control}\n                          name=\"PDState\"\n                          rules={{ required: \"State is required\" }}\n                          render={({ field }) => (\n                            <AutoComplete\n\n                              className=\"w-full\"\n                              {...field}\n                              onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                              options={sortByPropertyAlphabetically(stateListData?.docs)?.map((type) => ({\n                                value: type?.name,\n                              }))}\n                            >\n                              <input\n                                placeholder=\"Enter State\"\n\n                                onFocus={() => {\n                                  dispatch(\n                                    stateSearch({\n                                      isPagination: false,\n                                      text: \"\",\n                                      countryName: PrintCountry,\n                                      sort: true,\n                                      status: true,\n                                    })\n                                  );\n                                }}\n                                className={`${inputClassName} ${errors.PDState\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                              />\n                            </AutoComplete>\n                          )}\n                        />\n                        {errors.PDState && (\n                          <p className={`${inputerrorClassNameAutoComplete}`}>\n                            {errors.PDState.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <div className={`${inputLabelClassName}`}>\n                          City <span className=\"text-red-600\">*</span>\n                        </div>\n                        <Controller\n                          control={control}\n                          name=\"PDCity\"\n                          rules={{ required: \"City is required\" }}\n                          render={({ field }) => (\n                            <AutoComplete\n                              className=\"w-full\"\n                              {...field}\n                              onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                              options={sortByPropertyAlphabetically(cityListData?.docs)?.map((type) => ({\n                                value: type?.name,\n                              }))}\n                            >\n                              <input\n                                onFocus={() => {\n                                  dispatch(\n                                    citySearch({\n                                      isPagination: false,\n                                      text: \"\",\n                                      sort: true,\n                                      status: true,\n                                      stateName: PrintState,\n                                    })\n                                  );\n                                }}\n                                placeholder=\"Enter City\"\n                                className={`${inputClassName} ${errors.PDCity\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                              />\n                            </AutoComplete>\n                          )}\n                        />\n                        {errors.PDCity && (\n                          <p className={`${inputerrorClassNameAutoComplete}`}>\n                            {errors.PDCity.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <label className={`${inputLabelClassName}`}>\n                          Pin Code <span className=\"text-red-600\">*</span>\n                        </label>\n                        <Controller\n                          control={control}\n                          name=\"PDPinCode\"\n                          rules={{ required: \"Pin Code is required\" }}\n                          render={({ field }) => (\n                            <input\n                              {...field}\n                              type=\"number\"\n                              placeholder=\"Enter Pin Code\"\n                              maxLength={6}\n                              onInput={(e) => {\n                                if (e.target.value.length > 6) {\n                                  e.target.value = e.target.value.slice(0, 6);\n                                }\n                              }}\n                              className={`${inputClassName} ${errors.PDPinCode\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                            />\n                          )}\n                        />\n                        {errors.PDPinCode && (\n                          <p className=\"text-red-500 text-sm\">\n                            {errors.PDPinCode.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <div className=\"mt-3\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                        <div className=\"col-span-2\">\n                          <label\n                            className={`${inputLabelClassName} flex justify-between items-center`}\n                          >\n                            <span>Secondary Address</span>\n                            <div className=\"flex items-center mt-2\">\n                              <input\n                                type=\"checkbox\"\n                                id=\"sameAsCurrentAddress\"\n                                onChange={(e) =>\n                                  handleAddressCheckbox(e.target.checked)\n                                }\n                                className=\"mr-2\"\n                              />\n                              <label\n                                htmlFor=\"sameAsCurrentAddress\"\n                                className={`${inputLabelClassName}`}\n                              >\n                                same as Current Address\n                              </label>\n                            </div>\n                          </label>\n                          <input\n                            type=\"text\"\n                            {...register(\"PDSecAddress\")}\n                            className={`${inputClassName} ${errors.PDSecAddress\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            placeholder=\"Enter Secondary Address\"\n                          />\n                          {errors.PDSecAddress && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDSecAddress.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 md:my-1 px-3\">\n                        {/* Secondary Address Fields (mirroring Primary Address) */}\n                        <div>\n                          <div className={`${inputLabelClassName}`}>Country</div>\n                          <Controller\n                            control={control}\n                            name=\"PDSecCountry\"\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                className=\"w-full\"\n                                options={sortByPropertyAlphabetically(secCountryList?.docs)?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter Country\"\n                                  onFocus={handleSecFocusCountry}\n                                  onChange={handleSecCountryChange}\n                                  className={`${inputClassName} ${errors.PDSecCountry\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDSecCountry && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDSecCountry.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div>\n                          <div className={`${inputLabelClassName}`}>State</div>\n                          <Controller\n                            control={control}\n                            name=\"PDSecState\"\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                className=\"w-full\"\n                                onChange={(value) => field.onChange(value)} // Directly handle state change using React Hook Form's field.onChange\n                                options={sortByPropertyAlphabetically(stateListData?.docs)?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter State\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      stateSearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        countryName: watch(`PDSecCountry`),\n                                        sort: true,\n                                        status: true,\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDState\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDSecState && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDSecState.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div>\n                          <div className={`${inputLabelClassName}`}>City</div>\n                          <Controller\n                            control={control}\n                            name=\"PDSecCity\"\n                            render={({ field }) => (\n                              <AutoComplete\n                                {...field}\n                                className=\"w-full\"\n                                onChange={(value) => field.onChange(value)} // Directly handle city change using React Hook Form's field.onChange\n                                options={sortByPropertyAlphabetically(cityListData?.docs)?.map((type) => ({\n                                  value: type?.name,\n                                }))}\n                              >\n                                <input\n                                  placeholder=\"Enter City\"\n                                  onFocus={() => {\n                                    dispatch(\n                                      citySearch({\n                                        isPagination: false,\n                                        text: \"\",\n                                        sort: true,\n                                        status: true,\n                                        stateName: watch(`PDSecState`),\n                                      })\n                                    );\n                                  }}\n                                  className={`${inputClassName} ${errors.PDCity\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                />\n                              </AutoComplete>\n                            )}\n                          />\n                          {errors.PDSecCity && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDSecCity.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div>\n                          <label className={`${inputLabelClassName}`}>\n                            Pin Code\n                          </label>\n                          <Controller\n                            control={control}\n                            name=\"PDSecPinCode\"\n                            render={({ field }) => (\n                              <input\n                                {...field}\n                                type=\"number\"\n                                placeholder=\"Enter Pin Code\"\n                                maxLength={6}\n                                onInput={(e) => {\n                                  if (e.target.value.length > 6) {\n                                    e.target.value = e.target.value.slice(0, 6);\n                                  }\n                                }}\n                                className={`${inputClassName} ${errors.PDSecPinCode\n                                  ? \"border-[1px] \"\n                                  : \"border-gray-300\"\n                                  }`}\n                              />\n                            )}\n                          />\n                          {errors.PDSecPinCode && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.PDSecPinCode.message}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-3\">\n\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Current Package (yearly) <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"number\"\n                      {...register(\"currentPackage\", {\n                        required: \"Current Package is required\",\n                      })}\n                      className={`${inputClassName} ${errors.currentPackage ? \"border-[1px] \" : \"\"\n                        }`}\n                      placeholder=\"Enter Current Package\"\n                    />\n                    {errors.currentPackage && (\n                      <p className=\"text-red-600 text-sm\">\n                        {errors.currentPackage?.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Last Increment Date  <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name={'salarystartDate'}\n                      control={control}\n                      rules={{ required: \"Last Increment Date is required\" }}\n                      render={({ field }) => (\n                        <CustomDatePicker format=\"DD/MM/YYYY\" picker=\"date\" field={field} errors={errors} />\n                      )}\n                    />\n\n                    {errors.salarystartDate && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.salarystartDate?.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Next Increment Date  <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name={'salaryEndDate'}\n                      control={control}\n                      rules={{ required: \"salaryEndDate is required\" }}\n                      render={({ field }) => (\n                        <CustomDatePicker format=\"DD/MM/YYYY\" picker=\"date\" field={field} errors={errors} />\n                      )}\n                    />\n\n                    {errors.salaryEndDate && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.salaryEndDate?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Current Salary */}\n                  {currentPackage > 0 &&\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Current Salary (monthly)\n                      </label>\n                      <input\n                        type=\"number\"\n                        {...register(\"currentSalary\", {\n\n                        })}\n                        className={`${inputDisabledClassName} ${errors.currentSalary ? \"border-[1px] \" : \"\"\n                          }`}\n                        placeholder=\"Current Salary\"\n                        disabled\n                      />\n                      {errors.currentSalary && (\n                        <p className=\"text-red-600 text-sm\">\n                          {errors.currentSalary?.message}\n                        </p>\n                      )}\n                    </div>\n                  }\n\n                  {currentPackage > 0 &&\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Per Day Salary\n                      </label>\n                      <input\n                        type=\"number\"\n                        {...register(\"perDaySalary\", {\n\n                        })}\n                        className={`${inputDisabledClassName} ${errors.perDaySalary ? \"border-[1px] \" : \"\"\n                          }`}\n                        placeholder=\"Per Day Salary\"\n                        disabled\n                      />\n                      {errors.perDaySalary && (\n                        <p className=\"text-red-600 text-sm\">\n                          {errors.perDaySalary?.message}\n                        </p>\n                      )}\n                    </div>}\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      basic salary percentage (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      max={100}\n                      {...register(\"basicSalaryPercentage\", {\n                        required: \"Percentage is required\",\n                        max: {\n                          value: 100,\n                          message: \"Percentage cannot be more than 100\",\n                        },\n                        min: {\n                          value: 0,\n                          message: \"Percentage cannot be less than 0\",\n                        }\n                      })}\n                      className={`${inputClassName} ${errors.basicSalaryPercentage ? \"border-[1px] border-red-600\" : \"\"\n                        }`}\n                      placeholder=\"basic salary percentage\"\n                    />\n                    {errors.basicSalaryPercentage && (\n                      <p className=\"text-red-600 text-sm\">\n                        {errors.basicSalaryPercentage?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Claculated Basic Salary\n                    </label>\n                    <input\n                      type=\"number\"\n                      disabled\n                      {...register(\"calculatedBasicSalary\", {\n\n                      })}\n                      className={`${inputDisabledClassName} ${errors.calculatedBasicSalary ? \"border-[1px] \" : \"\"\n                        }`}\n                      placeholder=\"Claculated Basic Salary\"\n\n                    />\n                    {errors.calculatedBasicSalary && (\n                      <p className=\"text-red-600 text-sm\">\n                        {errors.calculatedBasicSalary?.message}\n                      </p>\n                    )}\n                  </div>\n                  <div></div>\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Is ESIC <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"isESIC\"\n                      control={control}\n                      rules={{ required: \"isESIC is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`mt-0 ${inputAntdSelectClassName} ${errors.isESIC ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select Is Esic\"\n                        >\n                          <Option value={''}>Select isESIC</Option>\n                          <Option value={'true'}>YES</Option>\n                          <Option value={'false'}>NO</Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.isESIC && (\n                      <p className=\"text-red-600 text-sm\">{errors.isESIC?.message}</p>\n                    )}\n                  </div>\n                  {(isESIC === 'true' || isESIC === true) && <div>\n                    <label className={`${inputLabelClassName}`}>\n                      ESIC Number <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\" // Change to text to allow regex-based validation\n                      {...register(\"esicNumber\", {\n                        required: \"ESIC Number is required\",  // Field is required\n                        // pattern: {\n                        //   //value: /^\\d{17}$/, // Regex for exactly 17 digits\n                        //   message: \"ESIC Number must be a 17-digit number\", // Error message if pattern doesn't match\n                        // },\n                        // minLength: {\n                        //   value: 17,  // Ensures that it has at least 17 characters\n                        //   message: \"ESIC Number must be exactly 17 digits long\",  // Error message for min length\n                        // },\n                        // maxLength: {\n                        //   value: 17,  // Ensures that it doesn't exceed 17 characters\n                        //   message: \"ESIC Number must be exactly 17 digits long\",  // Error message for max length\n                        // },\n                      })}\n                      className={`${inputClassName} ${errors.esicNumber ? \"border-[1px] \" : \"\"\n                        }`}\n                      // maxLength={17}\n                      // onInput={(e) => {\n                      //   if (e.target.value.length > 17) {\n                      //     e.target.value = e.target.value.slice(0, 17);\n                      //   }\n                      // }}\n                      placeholder=\"Enter ESIC Number\"\n                    />\n                    {errors.esicNumber && (\n                      <p className=\"text-red-600 text-sm\">\n                        {errors.esicNumber?.message}\n                      </p>\n                    )}\n                  </div>}\n                  {(isESIC === 'true' || isESIC === true) && (\n                    <>\n                      <div>\n                        <label className={`${inputLabelClassName}`}>\n                          ESIC Calculated From <span className=\"text-red-600\">*</span>\n                        </label>\n                        <Controller\n                          name=\"esicType\"\n                          control={control}\n                          rules={{ required: \"ESIC Calculated From is required\" }}\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              className={`mt-0 ${inputAntdSelectClassName} ${errors.esicType ? '' : 'border-gray-300'}`}\n                              placeholder=\"Select ESIC Calculated From\"\n                            >\n                              <Option value=\"\">Select ESIC Calculated From</Option>\n                              <Option value=\"basicSalary\">Basic Salary</Option>\n                              <Option value=\"totalSalary\">Total Salary</Option>\n                            </Select>\n                          )}\n                        />\n\n                        {errors.esicType && (\n                          <p className=\"text-red-600 text-sm\">\n                            {errors.esicType?.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <label className={`${inputLabelClassName}`}>\n                          Esic Percentage\n                        </label>\n                        <input\n                          type=\"number\"\n                          step={0.01}\n                          {...register(\"esicInPercentage\", {\n\n                          })}\n                          className={`${inputClassName} ${errors.esicInPercentage ? \"border-[1px] \" : \"\"\n                            }`}\n                          placeholder=\"Esic Percentage\"\n\n                        />\n                        {errors.esicInPercentage && (\n                          <p className=\"text-red-600 text-sm\">\n                            {errors.esicInPercentage?.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <label className={`${inputLabelClassName}`}>\n                          Maximum Esic Amount\n                        </label>\n                        <input\n                          type=\"number\"\n                          step={0.01}\n                          {...register(\"esicMaxUpTo\", {\n\n                          })}\n                          className={`${inputClassName} ${errors.esicMaxUpTo ? \"border-[1px] \" : \"\"\n                            }`}\n                          placeholder=\"Maximum Esic Amount\"\n\n                        />\n                        {errors.esicMaxUpTo && (\n                          <p className=\"text-red-600 text-sm\">\n                            {errors.esicMaxUpTo?.message}\n                          </p>\n                        )}\n                      </div>\n                      <div>\n                        <label className={`${inputLabelClassName}`}>\n                          ESIC Applied On <span className=\"text-red-600\">*</span>\n                        </label>\n                        <Controller\n                          name=\"esicAppliedOn\"\n                          control={control}\n                          rules={{ required: \"ESIC Applied On is required\" }}\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              className={`mt-0 ${inputAntdSelectClassName} ${errors.esicAppliedOn ? '' : 'border-gray-300'}`}\n                              placeholder=\"Select ESIC Applied On\"\n                            >\n                              <Option value=\"\">Select ESIC Applied On</Option>\n                              <Option value=\"employee\">employee</Option>\n                              <Option value=\"employer\">employer</Option>\n                              <Option value=\"both\">both</Option>\n                            </Select>\n                          )}\n                        />\n\n                        {errors.esicAppliedOn && (\n                          <p className=\"text-red-600 text-sm\">\n                            {errors.esicAppliedOn?.message}\n                          </p>\n                        )}\n                      </div>\n                    </>\n                  )}\n\n\n                  {/* Is PF */}\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Is PF <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"isPF\"\n                      control={control}\n                      rules={{ required: \"Is PF is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`mt-0 ${inputAntdSelectClassName} ${errors.isPF ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select Is PF\"\n                        >\n                          <Option value={''}>Select isPF</Option>\n                          <Option value={'true'}>YES</Option>\n                          <Option value={'false'}>NO</Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.isPF && (\n                      <p className=\"text-red-600 text-sm\">{errors.isPF?.message}</p>\n                    )}\n                  </div>\n\n                  {/* UAN Number */}\n                  {(IsPf === \"true\" || IsPf === true) &&\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        UAN Number <span className=\"text-red-600\">*</span>\n                      </label>\n                      <input\n                        type=\"text\" // Change to text to prevent issues with leading zeros in the number\n                        {...register(\"uanNumber\", {\n                          required: \"UAN Number is required\", // Ensures UAN is provided\n                          pattern: {\n                            value: /^\\d{12}$/, // Regex for exactly 12 digits\n                            message: \"UAN Number must be a 12-digit number\", // Error message for invalid UAN number\n                          },\n                        })}\n                        className={`${inputClassName} ${errors.uanNumber ? \"border-[1px] \" : \"\"\n                          }`}\n                        placeholder=\"Enter UAN Number\"\n                        maxLength={12}\n                        onInput={(e) => {\n                          if (e.target.value.length > 12) {\n                            e.target.value = e.target.value.slice(0, 12);\n                          }\n                        }}\n                      />\n                      {errors.uanNumber && (\n                        <p className=\"text-red-600 text-sm\">\n                          {errors.uanNumber?.message} {/* Display error message */}\n                        </p>\n                      )}\n                    </div>}\n\n                  {/* PF Type */}\n                  {(IsPf === \"true\" || IsPf === true) && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        PF Type <span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        name=\"pfType\"\n                        control={control}\n                        rules={{ required: \"PF Type is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`mt-0 ${inputAntdSelectClassName} ${errors.isPF ? '' : 'border-gray-300'}`}\n                            placeholder=\"Select Is PF\"\n                          >\n                            <Option value=\"\">Select PF Calculated From</Option>\n                            <Option value=\"basicSalary\">Basic Salary</Option>\n                            <Option value=\"totalSalary\">Total Salary</Option>\n                          </Select>\n                        )}\n                      />\n\n                      {errors.pfType && (\n                        <p className=\"text-red-600 text-sm\">\n                          {errors.pfType?.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {(IsPf === \"true\" || IsPf === true) &&\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        PF Applied On <span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        name=\"pfAppliedOn\"\n                        control={control}\n                        rules={{ required: \"ESIC Applied On is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            className={`mt-0 ${inputAntdSelectClassName} ${errors.pfAppliedOn ? '' : 'border-gray-300'}`}\n                            placeholder=\"Select PF Applied On\"\n                          >\n                            <Option value=\"\">Select PF Applied On</Option>\n                            <Option value=\"employee\">employee</Option>\n                            <Option value=\"employer\">employer</Option>\n                            <Option value=\"both\">both</Option>\n                          </Select>\n                        )}\n                      />\n\n                      {errors.pfAppliedOn && (\n                        <p className=\"text-red-600 text-sm\">\n                          {errors.pfAppliedOn?.message}\n                        </p>\n                      )}\n                    </div>}\n                  {(IsPf === \"true\" || IsPf === true) && <div>\n                    <label className={`${inputLabelClassName}`}>\n                      PF Percentage\n                    </label>\n                    <input\n                      type=\"number\"\n                      step={0.01}\n                      {...register(\"pfInPercentage\", {\n                      })}\n                      className={`${inputClassName} ${errors.pfInPercentage ? \"border-[1px] \" : \"\"\n                        }`}\n                      placeholder=\"PF Percentage\"\n\n                    />\n                    {errors.pfInPercentage && (\n                      <p className=\"text-red-600 text-sm\">\n                        {errors.pfInPercentage?.message}\n                      </p>\n                    )}\n                  </div>}\n                  {(IsPf === \"true\" || IsPf === true) &&\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Maximum PF Amount\n                      </label>\n                      <input\n                        type=\"number\"\n                        step={0.01}\n                        {...register(\"pfMaxUpTo\", {\n\n                        })}\n                        className={`${inputClassName} ${errors.pfMaxUpTo ? \"border-[1px] \" : \"\"\n                          }`}\n                        placeholder=\"Maximum PF Amount\"\n\n                      />\n                      {errors.pfMaxUpTo && (\n                        <p className=\"text-red-600 text-sm\">\n                          {errors.pfMaxUpTo?.message}\n                        </p>\n                      )}\n                    </div>}\n\n                </div>\n\n              </div>\n              <div>\n                <div className=\"px-3 grid lg:grid-cols-3 grid-cols-1 gap-4 items-end mb-3\">\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      financial Start Date  <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name={'financStartDate'}\n                      control={control}\n                      rules={{ required: \"financStartDate is required\" }}\n                      render={({ field }) => (\n                        <CustomDatePicker format=\"MM/YYYY\" picker=\"month\" field={field} errors={errors} />\n                      )}\n                    />\n\n                    {errors.financStartDate && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.financStartDate?.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      financial End Date  <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name={'financEndDate'}\n                      control={control}\n                      rules={{ required: \"financEndDate is required\" }}\n                      render={({ field }) => (\n                        <CustomDatePicker format=\"MM/YYYY\" picker=\"month\" field={field} errors={errors} disabledDate={(current) => {\n                          const start = dayjs(watch('financStartDate'), \"MM/YYYY\");\n                          return start.isValid() && current.isBefore(start, 'month');\n                        }} />\n                      )}\n                    />\n\n                    {errors.financEndDate && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.financEndDate?.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n\n                    <label className={`${inputLabelClassName}`}>\n                      Select Leave Policy <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"leaveTypePolicy\"\n                      control={control}\n                      rules={{ required: \"Leave Policy is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={`${inputAntdSelectClassName} ${errors.leaveTypePolicy ? '' : 'border-gray-300'}`}\n                          placeholder=\"Select Leave Policy\"\n                        >\n                          <Option value=\"\">Select Leave Policy</Option>\n                          {[\n                            { key: \"carry_forward\", value: \"Carry Forward\" },\n                            { key: \"zero_out\", value: \"Zero Out\" },\n                            { key: \"paid_balance\", value: \"Paid Balance\" },\n                          ]?.map((type) => (\n                            <Option key={type.key} value={type.key}>\n                              {type.value}\n                            </Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n\n                    {errors.leaveTypePolicy && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.leaveTypePolicy.message}\n                      </p>\n                    )}\n                  </div>\n\n\n                </div>\n                {assignLeaveDetails.map((item, index) => (\n                  <div key={index} className=\" rounded-md my-2 \">\n                    <div key={item.id} className=\"\">\n                      <div className=\"flex justify-between items-center mb-4 bg-header rounded-t-md px-3\">\n                        <div className=\"py-2 text-white font-semibold\">\n                          Assign Leave{\" \"}\n                        </div>\n                        {(\n                          <div className=\"flex justify-end\">\n                            <button\n                              type=\"button\"\n                              onClick={() => {\n                                removeassignLeave(item, index)\n                              }}\n                              className=\"text-gray-300 hover:text-gray-200 flex items-center justify-center p-1 rounded-lg\"\n                            >\n                              <i className=\"fas fa-trash-alt\"></i>\n                            </button>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"px-3 grid sm:grid-cols-2 grid-cols-1 gap-4 items-end mb-3\">\n                        <div className=\"flex gap-3\">\n                          <div className=\"w-full\">\n                            <label className={`${inputLabelClassName}`}>\n                              Leave <span className=\"text-red-600\">*</span>\n                            </label>\n                            <Controller\n                              name={`assignLeaveDetails[${index}].leave`}\n                              control={control}\n                              rules={{ required: \"Leave is required\" }}\n                              render={({ field }) => (\n                                <Select\n                                  {...field}\n                                  className={`${inputAntdSelectClassName} ${errors.assignLeaveDetails?.[index]?.leave ? '' : 'border-gray-300'}`}\n                                  placeholder=\"Select Leave\"\n                                  value={field.value}\n                                  onChange={(value) => {\n                                    const totalLeaves = leaveListData?.find((leave) => leave?._id === value)?.totalLeaves\n                                    const availableLeave = (totalLeaves / financialDateDiffrence?.main) * financialDateDiffrence?.current\n                                    setValue(`assignLeaveDetails[${index}].totalLeave`, Math.ceil(availableLeave))\n                                    setValue(`assignLeaveDetails[${index}].maxValue`, Math.ceil(availableLeave))\n                                    clearErrors(`assignLeaveDetails[${index}].totalLeave`);\n                                    field.onChange(value);\n                                  }}\n                                >\n                                  <Option value=\"\">Select Leave</Option>\n                                  {leaveListData?.map((leaveOption) => (\n                                    <Option key={leaveOption._id} value={leaveOption._id}>\n                                      {leaveOption.name} ({leaveOption.totalLeaves})\n                                    </Option>\n                                  ))}\n                                </Select>\n                              )}\n                            />\n\n                            {errors.assignLeaveDetails?.[index]?.leave && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors.assignLeaveDetails[index].leave.message}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n\n                        <div className=\"w-full\">\n                          <label className={`${inputLabelClassName}`}>\n                            Total Leave <span className=\"text-red-600\">*</span>\n                          </label>\n\n                          <input\n                            type=\"number\"\n                            step=\"any\"\n                            {...register(`assignLeaveDetails[${index}].totalLeave`, {\n                              required: \"Total Leave is required\",\n                              valueAsNumber: true,\n                            })}\n                            max={+watch(`assignLeaveDetails[${index}].maxValue`)}\n                            className={`${inputClassName} ${errors.assignLeaveDetails?.[index]?.totalLeave\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            onInput={(e) => {\n                              const value = +e.target.value;\n                              const maxValue = +watch(`assignLeaveDetails[${index}].maxValue`);\n\n                              if (value > maxValue) {\n                                // Trigger error if value exceeds maxValue\n                                setError(`assignLeaveDetails[${index}].totalLeave`, {\n                                  type: 'manual',\n                                  message: `Total Leave cannot be more than ${maxValue}`,\n                                });\n                              } else {\n                                // Clear the error if value is valid\n                                clearErrors(`assignLeaveDetails[${index}].totalLeave`);\n                              }\n                            }}\n                          />\n\n                          {errors.assignLeaveDetails?.[index]?.totalLeave && (\n                            <p className=\"text-red-500 text-sm\">\n                              {errors.assignLeaveDetails[index].totalLeave.message}\n                            </p>\n                          )}\n                        </div>\n\n\n                      </div>\n                    </div>\n                  </div>\n                ))}\n\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    appendassignLeave({\n                      leave: \"\",\n                      totalLeave: 0,\n                    })\n                  }\n                  className={`${formButtonClassName} mx-3`}\n                >\n                  Add leave\n                </button>\n\n                <div className=\"flex justify-between px-3 pb-2\">\n                  <button type=\"submit\" className={`${formButtonClassName}`}>\n                    Submit\n                  </button>\n                </div>\n              </div>\n            </>\n\n          )}\n\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateOnBoarding;\n"],"names":["CreateOnBoarding","_errors$currentPackag","_errors$salarystartDa","_errors$salaryEndDate","_errors$currentSalary","_errors$perDaySalary","_errors$basicSalaryPe","_errors$calculatedBas","_errors$isESIC","_errors$esicNumber","_errors$esicType","_errors$esicInPercent","_errors$esicMaxUpTo","_errors$esicAppliedOn","_errors$isPF","_errors$uanNumber","_errors$pfType","_errors$pfAppliedOn","_errors$pfInPercentag","_errors$pfMaxUpTo","_errors$financStartDa","_errors$financEndDate","navigate","useNavigate","step","setStep","useState","userData","setUserData","secondaryAddress","setSecoundarAddress","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","financialDateDiffrence","setFinancialDateDiffrence","main","current","timeSlotsListData","useSelector","state","timeSlots","branchList","branchListloading","branch","companyList","companyListLoading","company","countryListData","secCountryList","country","stateListData","secStateList","states","cityListData","secCityList","city","applicationList","loading","applicationLoading","application","sameAsCurrentAddress","setSameAsCurrentAddress","designationList","desLoading","designation","departmentListData","depLoading","department","directorLists","director","leaveListData","leaveType","fileList","setFileList","register","handleSubmit","setValue","control","getValues","clearErrors","setError","formState","errors","watch","useForm","defaultValues","family","relation","name","age","contactNumber","employmentDetails","organizationName","designationName","from","to","annualCTC","educationDetails","degree","university","isPercentage","number","specification","emergencyContact","relationship","email","mobile","code","assignLeaveDetails","currentPackage","useWatch","IsPf","defaultValue","isESIC","basicSalaryPercentage","currentSalary","dateOfJoining","useEffect","basicSalaryCalc","Number","toFixed","calculatedSalary","perDaySalary","employeList","employe","dispatch","useDispatch","PrintState","PrintCountry","PrintPincode","profileType","companyId","branchId","departmentId","applicationId","isProbationPeriodActive","financStartDate","financEndDate","fields","append","appendassignLeave","remove","removeassignLeave","useFieldArray","onBoardingLaoding","onBoarding","rolesPermissionList","rolePermission","applicationDetails","imageName","setImageName","_fileList","_fileList2","length","url","thumbUrl","leaveTypeSearch","directorId","employeId","text","sort","status","isPagination","isPaid","RolesPermissionSearch","timeSlotSearch","fetchApplicationListData","reqData","offerLatterStatus","designationId","jobId","applicationSearch","getApplicationDetails","_id","_userData$mobile","_userData$mobile2","_userData$address","_userData$address2","_userData$address3","_userData$address4","_userData$address5","fullName","departmentName","address","street","pinCode","gender","maritalStatus","openingBalance","dateOfBirth","dayjs","onSubmit","data","_data$assignLeaveDeta","_dayjs","_dayjs2","leavePayload","map","item","leave","totalLeave","finalPayload","pageRoleId","sidebarRole","officeEmail","PDOfficeEmail","reportingEmployee","PDDepartmentId","PDDesignationId","firstName","lastName","PDFullName","landlineNumber","landlineNo","seatNumber","seatNo","shift","workType","profileImage","ProfileImage","PDEmail","PDMobileCode","PDMobileNo","isDeleted","addresses","primary","PDAddress","PDCity","PDState","PDCountry","PDPinCode","secondary","PDSecAddress","PDSecCity","PDSecState","PDSecCountry","PDSecPinCode","generalInfo","format","isProbationPeriod","isProbationPeriodLeave","probationPeriod","bloodGroup","BloodGroup","salaryDetails","basicSalary","calculatedBasicSalary","esicNumber","esicType","esicAppliedOn","esicInPercentage","esicMaxUpTo","isPF","uanNumber","pfType","pfAppliedOn","pfInPercentage","pfMaxUpTo","salarystartDate","salaryEndDate","leaveDetails","leaveTypePolicy","onBoardingCreate","then","output","_output$payload","_output$payload$compa","_output$payload$compa2","error","encrypt","payload","companyinfo","test","getLocationDataByPincode","catch","console","navTabClick","clickedStep","handleFocusCompany","companySearch","handleFocusBranch","branchSearch","handleFocusDepartment","deptSearch","currentAddress","handleSecCountryChange","event","target","value","secStateSearch","countryId","handleSecFocusCountry","_secCountryList$docs","docs","secCountrySearch","employeeList","setEmployeeList","reportingOption","reqPayload","isTL","isHR","isManager","isBranch","employeSearch","res","_res$payload","_res$payload$data","_res$payload$data$doc","optionList","options","_options$departmentDa","_options$designationD","label","_jsxs","className","children","_jsx","departmentData","designationData","_dayjs3","_dayjs4","dateObj1","startOf","dateObj2","endOf","today","baseDate","doj","isBefore","date","add","clone","diffInMonths","diff","diffInCurrent","Option","Select","GlobalLayout","type","onClick","_Fragment","Controller","render","_ref2","field","Radio","_objectSpread","onChange","e","optionType","buttonStyle","block","clientSelection","_ref3","ImageUploader","inputLabelClassName","rules","required","_ref4","inputAntdSelectClassName","PDCompanyId","directorSearch","onFocus","placeholder","disabled","ListLoader","userName","message","_ref5","_sortByPropertyAlphab","PDBranchId","showSearch","filterOption","input","option","String","toLowerCase","includes","sortByPropertyAlphabetically","_ref6","designationSearch","element","_ref7","_ref8","_sortByPropertyAlphab2","inputClassName","pattern","inputDisabledClassName","PdApplicationDepartment","PdDesignationApplication","_ref9","style","width","allowClear","employee","_ref0","CustomMobileCodePicker","minLength","maxLength","onInput","slice","_ref1","_ref10","bloodType","_ref11","index","_ref12","CustomDatePicker","disabledDate","isAfter","moment","_ref13","_ref14","_ref15","_ref16","_ref17","shiftName","_ref18","_ref19","key","_ref20","_sortByPropertyAlphab3","AutoComplete","countrySearch","inputerrorClassNameAutoComplete","_ref21","_sortByPropertyAlphab4","stateSearch","countryName","_ref22","_sortByPropertyAlphab5","citySearch","stateName","_ref23","id","handleAddressCheckbox","checked","htmlFor","_ref24","_sortByPropertyAlphab6","_ref25","_sortByPropertyAlphab7","_ref26","_sortByPropertyAlphab8","_ref27","_ref28","picker","_ref29","max","min","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","start","isValid","_ref38","_ref39","_errors$assignLeaveDe3","_errors$assignLeaveDe4","_errors$assignLeaveDe5","_errors$assignLeaveDe6","_errors$assignLeaveDe7","_errors$assignLeaveDe8","_ref40","_errors$assignLeaveDe","_errors$assignLeaveDe2","_leaveListData$find","availableLeave","find","totalLeaves","Math","ceil","leaveOption","valueAsNumber","maxValue","formButtonClassName"],"sourceRoot":""}