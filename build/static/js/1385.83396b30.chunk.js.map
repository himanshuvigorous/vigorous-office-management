{"version":3,"file":"static/js/1385.83396b30.chunk.js","mappings":"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","sources":["pages/global/other/termination/EditTermination.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputDisabledClassName,\n  inputLabelClassName,\n  inputLabelClassNameReactSelect,\n} from \"../../../../constents/global\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\n\nimport CustomDatePicker from \"../../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\nimport {\n  getTerminationDetails,\n  updateTerminationFunc,\n} from \"./terminationFeatures/termination_reducers\";\nimport getUserIds from \"../../../../constents/getUserIds\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\nimport { fileUploadFunc } from \"../fileManagement/FileManagementFeatures/_file_management_reducers\";\n\n\nconst EditTermination = () => {\n  const { loading: terminationLoading } = useSelector((state) => state.Termination);\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { terminationIdEnc } = useParams();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { userCompanyId, userBranchId, userType } = getUserIds();\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const terminationId = decrypt(terminationIdEnc);\n  const { TerminationDetails } = useSelector((state) => state.Termination);\n  const { employeList } = useSelector((state) => state.employe);\n  const [isPreview, setIsPreview] = useState(false);\n\n  const [formData, setFormData] = useState({\n    attachments: []\n  });\n\n\n\n  useEffect(() => {\n    dispatch(employeSearch());\n  }, []);\n\n\n\n  useEffect(() => {\n    let reqData = {\n      _id: terminationId,\n    };\n    dispatch(getTerminationDetails(reqData));\n  }, []);\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n  useEffect(() => {\n    if (companyId || userType === \"company\" || userType === \"companyDirector\") {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          companyId: companyId,\n        })\n      );\n    }\n  }, [companyId]);\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setFormData(prev => ({\n          ...prev,\n          attachments: [...prev?.attachments || [], res?.payload?.data]\n        }));\n      }\n    });\n  };\n\n  const handleRemoveFile = (index) => {\n    setFormData(prev => {\n      const updatedAttachments = prev?.attachments.filter((_, i) => i !== index);\n      return { ...prev, attachments: updatedAttachments };\n    });\n  };\n\n  useEffect(() => {\n    if (TerminationDetails) {\n\n      setValue(\"employee\", TerminationDetails?.employeName);\n      setValue(\"PDBranchId\", TerminationDetails?.branchId);\n      setValue(\"PDCompanyId\", TerminationDetails?.companyId);\n      setValue(\"title\", TerminationDetails?.title);\n      setValue(\"description\", TerminationDetails?.description);\n      setValue(\"applyDate\", dayjs(TerminationDetails?.applyDate));\n      setFormData({\n        attachments: TerminationDetails?.attachment\n      });\n    }\n  }, [TerminationDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: terminationId,\n      companyId: TerminationDetails.companyId,\n      directorId: \"\",\n      branchId: TerminationDetails?.branchId,\n      employeId: TerminationDetails?.employeId,\n      title: data?.title,\n      description: data?.description,\n      applyDate: dayjs(data?.applyDate).format(\"YYYY-MM-DD\"),\n      // completeDate: data?.completeDate,\n      noticePeriod: TerminationDetails?.noticePeriod,\n      type: \"termination\",\n      status: TerminationDetails?.status,\n      attachment: formData?.attachments,\n    };\n    dispatch(updateTerminationFunc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-2 md:px-1\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-3 my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  disabled\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} `}\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch <span className=\"text-red-600\">*</span>\n                  </label>\n                  {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n                  <Controller\n                    control={control}\n                    name=\"PDBranchId\"\n                    disabled\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        className={`${inputAntdSelectClassName} `}\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchList?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.PDBranchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDBranchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Employee Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                disabled\n                {...register(\"employee\")}\n                className={`placeholder: ${inputDisabledClassName} ${errors.employee\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Employee Name\"\n              />\n              {errors.employee && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.employee.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-3 my-2\">\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`${inputClassName} ${errors.title\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div> */}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Description <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                className={`${inputClassName} ${errors.description\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Description\"\n              />\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n                <div>\n              <label className={`${inputLabelClassName}`}>\n                Apply Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"applyDate\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.applyDate && (\n                <p className=\"text-red-500 text-sm\">Apply Date is required</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 gap-3 my-2\">\n\n        \n\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                Apply Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"applyDate\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current &&\n                        current.isBefore(moment().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n              {errors.applyDate && (\n                <p className=\"text-red-500 text-sm\">Apply Date is required</p>\n              )}\n            </div> */}\n\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                Complete Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"completeDate\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }} />\n                )}\n              />\n              {errors.completeDate && (\n                <p className=\"text-red-500 text-sm\">Complete Date is required</p>\n              )}\n            </div> */}\n\n            {/* <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"status\"\n                control={control}\n                rules={{ required: \"Status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors?.status ? \"border-[1px] \" : \"\"}`}\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value=\"Requested\">Requested</Select.Option>\n                    <Select.Option value=\"Approved\">Approved</Select.Option>\n                    <Select.Option value=\"Rejected\">Rejected</Select.Option>\n                    <Select.Option value=\"Completed\">Completed</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors?.status && (\n                <p className=\"text-red-600 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n          </div>\n\n          <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n              Documents \n            </label>\n            {!isPreview ? (\n              <div className=\"space-y-4\">\n                <input type=\"file\" onChange={handleFileChange} className=\"hidden\" id=\"file-upload\" />\n                <label htmlFor=\"file-upload\" className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-600 bg-white cursor-pointer\">\n                  <FaRegFile className=\"mr-2\" /> Add Documents\n                </label>\n\n                <div className=\"space-y-2\">\n                  {formData?.attachments?.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                      <a\n                        href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                        className=\"flex items-center space-x-2\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <FaRegFile className=\"text-gray-500\" />\n                        <span className=\"text-sm text-gray-600\">{file}</span>\n                      </a>\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveFile(index)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <FaTimes />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {/* Attachments preview logic */}\n              </div>\n            )}\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={terminationLoading}\n              className={`${terminationLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {terminationLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditTermination;\n"],"names":["EditTermination","_formData$attachments","loading","terminationLoading","useSelector","state","Termination","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","terminationIdEnc","useParams","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","userCompanyId","userBranchId","userType","getUserIds","companyList","company","branchList","branch","terminationId","decrypt","TerminationDetails","employeList","employe","isPreview","setIsPreview","useState","formData","setFormData","attachments","useEffect","employeSearch","reqData","_id","getTerminationDetails","companyId","useWatch","name","defaultValue","branchSearch","text","sort","status","companySearch","isPagination","employeName","branchId","title","description","dayjs","applyDate","attachment","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","directorId","employeId","format","noticePeriod","type","updateTerminationFunc","then","error","inputLabelClassName","Controller","disabled","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","Option","value","map","fullName","PDCompanyId","message","_ref2","PDBranchId","inputDisabledClassName","employee","placeholder","inputClassName","_ref3","CustomDatePicker","disabledDate","current","isBefore","moment","endOf","onChange","e","filePath","target","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","payload","prev","_res$payload2","id","htmlFor","FaRegFile","file","index","href","process","rel","onClick","updatedAttachments","filter","_","i","handleRemoveFile","FaTimes","Loader"],"sourceRoot":""}