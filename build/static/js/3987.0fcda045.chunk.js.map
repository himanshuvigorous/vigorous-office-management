{"version":3,"file":"static/js/3987.0fcda045.chunk.js","mappings":"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","sources":["pages/company/companyManagement/CreateCompany.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getLocationDataByPincode, inputAntdSelectClassName, inputClassName, inputerrorClassNameAutoComplete, inputLabelClassName } from \"../../../constents/global\";\nimport { FaCamera, FaUserAlt } from \"react-icons/fa\";\nimport { AiFillInstagram } from \"react-icons/ai\";\nimport { IoLogoFacebook } from \"react-icons/io\";\nimport { TbWorld } from \"react-icons/tb\";\nimport { FaSquareXTwitter } from \"react-icons/fa6\";\nimport { showNotification } from \"../../../global_layouts/CustomNotification/NotificationManager\";\nimport { companyCreate } from \"./companyFeatures/_company_reducers\";\nimport { useNavigate } from \"react-router-dom\";\nimport { planSearch } from \"../../global/other/Plan/PlanFeatures/_plan_reducers\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { stateSearch } from \"../../global/address/state/featureStates/_state_reducers\";\nimport { citySearch } from \"../../global/address/city/CityFeatures/_city_reducers\";\nimport { indusSearch } from \"../../global/other/Industry/IndustryFeature/_industry_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { orgTypeSearch } from \"../../organizationType/organizationTypeFeatures/_org_type_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport moment from \"moment\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\n\n\n\nconst CreateCompany = () => {\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [profileImage, setProfileImage] = useState(null);\n  const [profileImagePayload, setProfileImagePayload] = useState('');\n  const [isHovering, setIsHovering] = useState(false);\n  const { planListData, loading: planLoading } = useSelector((state) => state.plan);\n  const { countryListData } = useSelector((state) => state.country);\n  const { stateListData } = useSelector((state) => state.states);\n  const { cityListData } = useSelector((state) => state.city);\n  const { industryListData, indusSearchloading } = useSelector((state) => state.industry);\n  const { orgTypeList, orgSearchloading } = useSelector((state) => state.orgType);\n  const { loading: companyLoader } = useSelector((state) => state.company);\n\n  const { register, handleSubmit, setValue, control, formState: { errors } } = useForm();\n\n  const dispatch = useDispatch();\n  const PrintAddress = useWatch({\n    control,\n    name: \"PDAddress\",\n    defaultValue: \"\",\n  });\n  const PrintCity = useWatch({\n    control,\n    name: \"PDCity\",\n    defaultValue: \"\",\n  });\n  const PrintState = useWatch({\n    control,\n    name: \"PDState\",\n    defaultValue: \"\",\n  });\n  const PrintCountry = useWatch({\n    control,\n    name: \"PDCountry\",\n    defaultValue: \"\",\n  });\n  const PrintPincode = useWatch({\n    control,\n    name: \"PDPinCode\",\n    defaultValue: \"\",\n  });\n  const PrintMail = useWatch({\n    control,\n    name: \"PDEmail\",\n    defaultValue: \"\",\n  });\n  const PrintMobile = useWatch({\n    control,\n    name: \"PDMobileNo\",\n    defaultValue: \"\",\n  });\n  const PrintMobileCode = useWatch({\n    control,\n    name: \"PDmobileCode\",\n    defaultValue: \"\",\n  });\n  const PrintCompanyName = useWatch({\n    control,\n    name: \"PDCompanyName\",\n    defaultValue: \"\",\n  });\n  const PrintTagLine = useWatch({\n    control,\n    name: \"PDTagline\",\n    defaultValue: \"\",\n  });\n  const PrintWebsite = useWatch({\n    control,\n    name: \"SMWebsite\",\n    defaultValue: \"\",\n  });\n  const PrintFacebook = useWatch({\n    control,\n    name: \"SMFacebook\",\n    defaultValue: \"\",\n  });\n  const PrintTwitter = useWatch({\n    control,\n    name: \"SMTwitter\",\n    defaultValue: \"\",\n  });\n  const PrintInstagram = useWatch({\n    control,\n    name: \"SMInstagram\",\n    defaultValue: \"\",\n  });\n  const panNumber = useWatch({\n    control,\n    name: \"PDPanNumber\",\n    defaultValue: \"\",\n  });\n  const planType = useWatch({\n    control,\n    name: \"planType\",\n    defaultValue: \"\",\n  });\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    dispatch(\n      fileUploadFunc({\n        filePath: file,\n        isVideo: false,\n        isMultiple: false,\n      })\n    ).then((res) => {\n      setProfileImagePayload(res?.payload?.data);\n    });\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setProfileImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  useEffect(() => {\n    if (PrintPincode && PrintPincode.length >= 4 &&\n      PrintPincode.length <= 6) {\n      getLocationDataByPincode(PrintPincode)\n        .then((data) => {\n          if (data) {\n            setValue(\"PDCity\", data.city);\n            setValue(\"PDState\", data.state);\n            setValue(\"PDCountry\", data.country);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching data:\", error);\n        });\n    }\n  }, [PrintPincode]);\n\n\n\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      firstName: \"\",\n      lastName: \"\",\n      profileImage: profileImagePayload,\n      fullName: data?.PDCompanyName,\n      email: data?.PDEmail,\n      userType: \"company\",\n\n      planId: data?.PDPlan,\n      planType :data?.planType ,\n      startDate: data?.planStartDate ,\n      endDate : data?.planEndDate,\n      mobile: {\n        number: data?.PDMobileNo ?? \"\",\n        code: data?.PDmobileCode ?? \"\",\n      },\n      companyProfile: {\n        tagline: data?.PDTagline ?? \"\",\n        companyType: data?.PDOrganizationType ?? \"\",\n        industryType: data?.PDindustrytype,\n        penNumber: data?.PDPanNumber.toUpperCase(),\n        GSTNumber: data?.PDGstNumber,\n        secondaryEmail: \"\",\n        secondaryMobile: {\n          number: \"\",\n          code: \"\"\n        },\n      },\n      addresses: {\n        primary: {\n          street: data?.PDAddress ?? \"\",\n          city: data?.PDCity ?? \"\",\n          state: data?.PDState ?? \"\",\n          country: data?.PDCountry ?? \"\",\n          pinCode: data?.PDPinCode ?? \"\"\n        },\n        secondary: {\n          street: data?.PDSecondaryAddress ?? \"\",\n          city: data?.PDSecondaryCity ?? \"\",\n          state: data?.PDSecondaryState ?? \"\",\n          country: data?.PDSecondarycountry ?? \"\",\n          pinCode: data?.PDSecondaryPinCode ?? \"\"\n        }\n      }\n    };\n\n\n\n    dispatch(companyCreate(finalPayload)).then((output) => {\n      !output.error && navigate(`/admin/company`);\n    });\n  };\n\n  const navTabClick = (clickedStep) => {\n    if (clickedStep !== 1) {\n      showNotification({\n        message: \"First submit Primary Details\",\n        type: 'error',\n      });\n    }\n  };\n\n\n\n  const handleFocusIndustry = () => {\n    if (!industryListData?.length) {\n      dispatch(\n        indusSearch({\n          isPagination: false,\n          text: \"\",\n          sort: true,\n          status: true,\n        })\n      );\n    }\n  };\n\n  const handleFocusOrgType = () => {\n    if (!orgTypeList?.length) {\n      dispatch(orgTypeSearch({\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n      })\n      );\n    }\n  };\n\n  const handleFocusPlan = () => {\n    if (!planListData?.length) {\n      dispatch(planSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n      })\n      );\n    }\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"grid grid-cols-12 gap-2\">\n        <div className=\" md:col-span-3 col-span-12 w-full h-auto rounded-lg\">\n          <div className=\"shadow bg-white rounded-xl py-2\">\n            <div\n              className=\"relative w-[50px] h-[50px] mx-auto rounded-full border-2 border-slate-600 mt-3 flex items-center justify-center\"\n            >\n              <div\n                className=\"w-full h-full rounded-full overflow-hidden bg-gray-200 flex items-center justify-center\"\n                style={{\n                  backgroundImage: `url(${profileImage || \"\"})`,\n                  backgroundSize: \"cover\",\n                  backgroundPosition: \"center\",\n                }}\n              >\n                {!profileImage && (\n                  <FaUserAlt className=\"text-slate-500 w-[30px] h-[25px] cursor-pointer\" />\n                )}\n              </div>\n\n              <div className=\"absolute bottom-0 right-0 bg-white p-[2px] rounded-full\">\n                <FaCamera className=\"text-header w-[16px] h-[16px] \" />\n              </div>\n\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileChange}\n                className=\"absolute inset-0 opacity-0 cursor-pointer\"\n              />\n            </div>\n\n\n\n            <div className=\"text-base font-medium overflow-auto mx-2 text-center mt-2 text-header capitalize\">\n              {PrintCompanyName ? PrintCompanyName : \"Company Name\"}\n            </div>\n            <div className=\"text-xs font-normal text-center text-gray-600 capitalize\">\n              {PrintTagLine ? PrintTagLine : \"Tag Line\"}\n            </div>\n            <div className=\"border mx-2 px-2 my-2 py-3 rounded-lg \">\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>Address</label>\n                <div className={`mt-1 block w-full overflow-auto px-2 py-[9px] shadow-sm rounded-lg text-xs capitalize bg-[#f4f6f9] focus:outline-none cursor-default min-h-8`} >\n                  {PrintAddress && (<>{PrintAddress}, {\" \"}</>)}\n                  {PrintCity && (<>{PrintCity},{\" \"}</>)}\n                  {PrintState && (<>{PrintState},{\" \"}</>)}\n                  {PrintCountry && (<>{PrintCountry},{\" \"}</>)}\n                  {PrintPincode && (<>{PrintPincode}</>)}\n                </div>\n              </div>\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>Mail</label>\n                <div\n                  className={`mt-1 block w-full overflow-auto px-2 py-[9px] shadow-sm rounded-lg text-xs  bg-[#f4f6f9] focus:outline-none cursor-default min-h-8`}\n                >\n                  {PrintMail}\n                </div>\n              </div>\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Phone number</label>\n                <div className=\"flex gap-2\">\n                  <div\n                    className={`mt-1 block overflow-auto text-center  py-[9px] shadow-sm rounded-lg text-xs capitalize bg-[#f4f6f9] focus:outline-none cursor-default min-h-8 min-w-8`}\n                  >\n                    {PrintMobileCode ? PrintMobileCode : +91}\n                  </div>\n                  <div\n                    className={`mt-1 block overflow-auto w-full px-2 py-[9px] shadow-sm rounded-lg text-xs capitalize bg-[#f4f6f9] focus:outline-none cursor-default min-h-8`}\n                  >\n                    {PrintMobile}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex justify-center items-center text-[25px] text-header py-2 gap-1\">\n              <TbWorld\n                onClick={() => {\n                  if (PrintWebsite) {\n                    window.open(PrintWebsite, \"_blank\");\n                  }\n                }}\n              />\n              <AiFillInstagram\n                onClick={() => {\n                  if (PrintInstagram) {\n                    window.open(PrintInstagram, \"_blank\");\n                  }\n                }}\n              />\n              <IoLogoFacebook\n                onClick={() => {\n                  if (PrintFacebook) {\n                    window.open(PrintFacebook, \"_blank\");\n                  }\n                }}\n              />\n              <FaSquareXTwitter\n                onClick={() => {\n                  if (PrintTwitter) {\n                    window.open(PrintTwitter, \"_blank\");\n                  }\n                }}\n              />\n            </div>\n          </div>\n        </div>\n        <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)} className=\"space-y-2 md:col-span-9 col-span-12\">\n          <div className=\"flex bg-header justify-start items-center rounded-lg gap-5 px-3 pt-2 overflow-x-auto overflow-y-hidden text-nowrap\">\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(1)}\n              className={`flex relative flex-col items-center  pb-2 ${step === 1 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 1 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold text-nowrap\">\n                Primary Details\n              </span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(2)}\n              className={`flex flex-col items-center relative pb-2 ${step === 2 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 2 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Documents</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(3)}\n              className={`flex flex-col items-center relative pb-2 ${step === 3 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 3 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Bank Details</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(4)}\n              className={`flex flex-col items-center relative pb-2 ${step === 4 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 4 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Financial Details</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => navTabClick(5)}\n              className={`flex flex-col items-center relative pb-2 ${step === 5 ? \"text-white ]\" : \"text-gray-500\"\n                } cursor-pointer`}\n            >\n              {step === 5 && (\n                <div className=\"w-full h-3 bg-[#f4f6f9] absolute bottom-0 translate-y-1/2 rounded-2xl\"></div>\n              )}\n              <span className=\"text-sm font-semibold\">Social Media</span>\n            </button>\n          </div>\n          {step === 1 && (\n            <div>\n              <div className=\" \">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3\">\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Company Name <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDCompanyName\", {\n                        required: \"Company Name is required\",\n                      })}\n                      className={`placeholder: ${inputClassName} ${errors.PDCompanyName\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Company Name\"\n                    />\n                    {errors.PDCompanyName && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDCompanyName.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Tag Line</label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDTagline\")}\n                      className={`placeholder: ${inputClassName} ${errors.PDTagline ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Tag Line\"\n                    />\n                    {errors.PDTagline && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDTagline.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 md:gap-8 md:my-1 px-3\">\n                <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Plan Type <span className=\"text-red-600\">*</span></label>\n                    <Controller\n                      name=\"planType\"\n                      control={control}\n                      rules={{\n                        required: \"Plan Type is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          placeholder=\"Select Plan Type\"\n                        >\n                          <Select.Option value=\"\">Select Plan Type</Select.Option>\n                          <Select.Option value=\"demo\">Demo</Select.Option>\n                          <Select.Option value=\"live\">Live</Select.Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.PDPlan && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDPlan.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Plan <span className=\"text-red-600\">*</span></label>\n                    <Controller\n                      name=\"PDPlan\"\n                      control={control}\n                      rules={{\n                        required: \"Plan is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          onFocus={() => handleFocusPlan()}\n                          placeholder=\"Select Plan\"\n                          showSearch\n\n                        >\n                          <Select.Option value=\"\">Select Plan</Select.Option>\n                          {(planListData?.slice().sort((a, b) => a?.title.localeCompare(b?.title))?.map((element, index) => (\n                            <Select.Option key={index} value={element?._id}>\n                              {element?.title}\n                            </Select.Option>\n                          )))}\n                        </Select>\n                      )}\n                    />\n                    {errors.PDPlan && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDPlan.message}\n                      </p>\n                    )}\n                  </div>\n                  \n\n\n                  {planType == \"demo\" &&\n                    <>\n                      <div>\n                        <label className={`${inputLabelClassName}`}>Plan Start Date  <span className=\"text-red-600\"> *</span></label>\n                        <Controller\n                          name=\"planStartDate\"\n                          control={control}\n                          rules={{\n                            required: 'Plan Start date is required'\n                          }}\n                          render={({ field }) => (\n                            <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                                                    return current && current.isBefore(moment().endOf('day'), 'day');\n                                                  }}  />\n                          )}\n                        />\n                        {errors.planStartDate && <p className=\"text-red-500 text-sm\">Plan Start Date is required</p>}\n                      </div>\n\n                      <div>\n                        <label className={`${inputLabelClassName}`}>Plan End Date  <span className=\"text-red-600\"> *</span></label>\n                        <Controller\n                          name=\"planEndDate\"\n                          control={control}\n                          rules={{\n                            required: 'Plan End Date is required'\n                          }}\n                          render={({ field }) => (\n                            <CustomDatePicker field={field} errors={errors} />\n                          )}\n                        />\n                        {errors.planEndDate && <p className=\"text-red-500 text-sm\">Plan End Date is required</p>}\n                      </div>\n\n                    </>\n                  }\n\n\n\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Organization Type <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"PDOrganizationType\"\n                      control={control}\n                      rules={{\n                        required: \"Organization type is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDOrganizationType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          onFocus={() => handleFocusOrgType()}\n                          placeholder=\"Select Organization Type\"\n                          showSearch\n\n                        >\n                          <Select.Option value=\"\">Select Organization Type</Select.Option>\n                          {orgSearchloading ? <Select.Option disabled>\n                            <ListLoader />\n                          </Select.Option> : (orgTypeList?.slice().sort((a, b) => a.name.localeCompare(b.name))?.map((element, index) => (\n                            <Select.Option key={index} value={element?.name}>\n                              {element?.name}\n                            </Select.Option>\n                          )))}\n                        </Select>\n                      )}\n                    />\n\n                    {errors.PDOrganizationType && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDOrganizationType.message}\n                      </p>\n                    )}\n                  </div>\n\n\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Industry Type <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"PDindustrytype\"\n                      control={control}\n                      rules={{\n                        required: \"Industry Type is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDindustrytype ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          onFocus={() => handleFocusIndustry()}\n                          placeholder=\"Select Industry Type\"\n                          showSearch\n\n                        >\n                          <Select.Option value=\"\">Select Industry Type</Select.Option>\n                          {indusSearchloading ? <Select.Option disabled>\n                            <ListLoader />\n                          </Select.Option> : (industryListData?.slice().sort((a, b) => a.name.localeCompare(b.name))?.map((element, index) => (\n                            <Select.Option key={index} value={element?.name}>\n                              {element?.name}\n                            </Select.Option>\n                          )))}\n                        </Select>\n                      )}\n                    />\n\n                    {errors.PDindustrytype && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDindustrytype.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div className=\"col-span-2\">\n                    <label className={`${inputLabelClassName}`}>\n                      Primary Address<span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDAddress\", {\n                        required: \"Address  is required\",\n                      })}\n                      className={`${inputClassName} ${errors.PDAddress ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Address \"\n                    />\n                    {errors.PDAddress && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDAddress.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 md:gap-8 gap-3 md:my-1 px-3\">\n                  <div>\n                    <div className={`${inputLabelClassName}`}>\n                      Country <span className=\"text-red-600\">*</span>\n                    </div>\n                    <Controller\n                      control={control}\n                      name=\"PDCountry\"\n                      rules={{ required: \"Country is required\" }}\n                      render={({ field }) => (\n                        <AutoComplete\n                          className=\"w-full\"\n                          {...field}\n                          onChange={(value) => {\n                            field.onChange(value);\n                          }}\n                          options={countryListData?.docs?.map((type) => ({ value: type?.name }))}\n                          showSearch\n                          filterOption={(inputValue, option) =>\n                            option?.value?.toLowerCase().includes(inputValue.toLowerCase())\n                          }\n                        >\n                          <input\n                            placeholder=\"Enter Country\"\n\n                            onFocus={() => {\n                              dispatch(\n                                countrySearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                })\n                              );\n                            }}\n                            className={`${inputClassName} ${errors.PDCountry\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                        </AutoComplete>\n                      )}\n                    />\n                    {errors.PDCountry && (\n                      <p className={`${inputerrorClassNameAutoComplete}`}>\n                        {errors.PDCountry.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <div className={`${inputLabelClassName}`}>\n                      State <span className=\"text-red-600\">*</span>\n                    </div>\n                    <Controller\n                      control={control}\n                      name=\"PDState\"\n                      rules={{ required: \"State is required\" }}\n                      render={({ field }) => (\n                        <AutoComplete\n                          className=\"w-full\"\n                          {...field}\n                          onChange={(value) => field.onChange(value)}\n                          options={stateListData?.docs?.map((type) => ({\n                            value: type?.name,\n                          }))}\n                        >\n                          <input\n                            placeholder=\"Enter State\"\n                            onFocus={() => {\n                              dispatch(\n                                stateSearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  countryName: PrintCountry,\n                                  sort: true,\n                                  status: true,\n                                })\n                              );\n                            }}\n                            className={`${inputClassName} ${errors.PDState\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                        </AutoComplete>\n                      )}\n                    />\n                    {errors.PDState && (\n                      <p className={`${inputerrorClassNameAutoComplete}`}>\n                        {errors.PDState.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* City Field */}\n                  <div>\n                    <div className={`${inputLabelClassName}`}>\n                      City <span className=\"text-red-600\">*</span>\n                    </div>\n                    <Controller\n                      control={control}\n                      name=\"PDCity\"\n                      rules={{ required: \"City is required\" }}\n                      render={({ field }) => (\n                        <AutoComplete\n                          className=\"w-full\"\n                          {...field}\n                          onChange={(value) => field.onChange(value)}\n                          options={cityListData?.docs?.map((type) => ({\n                            value: type?.name,\n                          }))}\n                        >\n                          <input\n                            onFocus={() => {\n                              dispatch(\n                                citySearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                  \"stateName\": PrintState\n\n                                })\n                              );\n                            }}\n                            placeholder=\"Enter City\"\n                            className={`${inputClassName} ${errors.PDCity\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                          />\n                        </AutoComplete>\n                      )}\n                    />\n                    {errors.PDCity && (\n                      <p className={`${inputerrorClassNameAutoComplete}`}>\n                        {errors.PDCity.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Pin Code <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"PDPinCode\"\n                      rules={{ required: \"Pin Code is required\" }}\n                      render={({ field }) => (\n                        <input\n                          {...field}\n                          type=\"number\"\n                          placeholder=\"Enter Pin Code\"\n                          maxLength={6}\n                          onInput={(e) => {\n                            if (e.target.value.length > 6) {\n                              e.target.value = e.target.value.slice(0, 6);\n                            }\n                          }}\n                          className={`${inputClassName} ${errors.PDPinCode\n                            ? \"border-[1px] \"\n                            : \"border-gray-300\"\n                            }`}\n                        />\n                      )}\n                    />\n                    {errors.PDPinCode && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDPinCode.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Email <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDEmail\", {\n                        required: \"Email is required\",\n                        pattern: {\n                          value:\n                            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                          message: \"Please enter a valid email address\",\n                        },\n                      })}\n                      className={` ${inputClassName} ${errors.PDEmail ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Email\"\n                    />\n                    {errors.PDEmail && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDEmail.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"w-[150px]\">\n                      <label className={`${inputLabelClassName}`}>\n                        Code <span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        control={control}\n                        name=\"PDmobileCode\"\n                        rules={{ required: \"code is required\" }}\n                        render={({ field }) => (\n                          <CustomMobileCodePicker\n                            field={field}\n                            errors={errors}\n                          />\n                        )}\n                      />\n                      {errors.PDmobileCode && (\n                        <p className={`${inputerrorClassNameAutoComplete}`}>\n                          {errors.PDmobileCode.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Mobile No <span className=\"text-red-600\">*</span>\n                      </label>\n                      <input\n                        type=\"number\"\n                        {...register(`PDMobileNo`, {\n                          required: \"Mobile No is required\",\n                          minLength: {\n                            value: 10,\n                            message: \"Must be exactly 10 digits\",\n                          },\n                          maxLength: {\n                            value: 10,\n                            message: \"Must be exactly 10 digits\",\n                          },\n                        })}\n                        className={` ${inputClassName} ${errors[`PDMobileNo`]\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                          }`}\n                        placeholder=\"Enter Mobile No\"\n                        maxLength={10}\n                        onInput={(e) => {\n                          if (e.target.value.length > 10) {\n                            e.target.value = e.target.value.slice(0, 10);\n                          }\n                        }}\n                      />\n                      {errors[`PDMobileNo`] && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors[`PDMobileNo`].message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      GST Number\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDGstNumber\", {\n\n                        pattern: {\n                          value: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}[Z]{1}[0-9A-Z]{1}$/,\n                          message: \"Invalid GST Number format (29AAACH7409R1ZX)\",\n                        },\n\n                      })}\n                      className={` ${inputClassName} ${errors.PDGstNumber ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter GST Number\"\n                      maxLength={15}\n                    />\n                    {errors.PDGstNumber && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDGstNumber.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Pan Number <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"PDPanNumber\", {\n                        required: \"Pan Number is required\",\n                        pattern: {\n                          value: /^[A-Za-z]{5}[0-9]{4}[A-Za-z]{1}$/,\n                          message: \"Invalid PAN card format (ABCDE1234E)\",\n                        }\n                      })}\n                      className={` ${panNumber ? \"!uppercase\" : \"\"} ${inputClassName} ${errors.PDPanNumber ? \"border-[1px] \" : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter Pan Number\"\n                    />\n                    {errors.PDPanNumber && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDPanNumber.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex justify-end px-3 pb-2\">\n                <button\n                  type=\"submit\"\n                  disabled={companyLoader}\n                  className={`${companyLoader ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n                >\n                  {companyLoader ? <Loader /> : 'Submit'}\n                </button>\n              </div>\n\n            </div>\n          )}\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateCompany;\n"],"names":["CreateCompany","navigate","useNavigate","step","setStep","useState","profileImage","setProfileImage","profileImagePayload","setProfileImagePayload","isHovering","setIsHovering","planListData","loading","planLoading","useSelector","state","plan","countryListData","country","stateListData","states","cityListData","city","industryListData","indusSearchloading","industry","orgTypeList","orgSearchloading","orgType","companyLoader","company","register","handleSubmit","setValue","control","formState","errors","useForm","dispatch","useDispatch","PrintAddress","useWatch","name","defaultValue","PrintCity","PrintState","PrintCountry","PrintPincode","PrintMail","PrintMobile","PrintMobileCode","PrintCompanyName","PrintTagLine","PrintWebsite","PrintFacebook","PrintTwitter","PrintInstagram","panNumber","planType","useEffect","length","getLocationDataByPincode","then","data","catch","error","console","navTabClick","clickedStep","showNotification","message","type","_jsx","GlobalLayout","children","_jsxs","className","style","backgroundImage","concat","backgroundSize","backgroundPosition","FaUserAlt","FaCamera","accept","onChange","event","file","target","files","fileUploadFunc","filePath","isVideo","isMultiple","res","_res$payload","payload","reader","FileReader","onloadend","result","readAsDataURL","inputLabelClassName","_Fragment","TbWorld","onClick","window","open","AiFillInstagram","IoLogoFacebook","FaSquareXTwitter","autoComplete","onSubmit","_data$PDMobileNo","_data$PDmobileCode","_data$PDTagline","_data$PDOrganizationT","_data$PDAddress","_data$PDCity","_data$PDState","_data$PDCountry","_data$PDPinCode","_data$PDSecondaryAddr","_data$PDSecondaryCity","_data$PDSecondaryStat","_data$PDSecondarycoun","_data$PDSecondaryPinC","finalPayload","firstName","lastName","fullName","PDCompanyName","email","PDEmail","userType","planId","PDPlan","startDate","planStartDate","endDate","planEndDate","mobile","number","PDMobileNo","code","PDmobileCode","companyProfile","tagline","PDTagline","companyType","PDOrganizationType","industryType","PDindustrytype","penNumber","PDPanNumber","toUpperCase","GSTNumber","PDGstNumber","secondaryEmail","secondaryMobile","addresses","primary","street","PDAddress","PDCity","PDState","PDCountry","pinCode","PDPinCode","secondary","PDSecondaryAddress","PDSecondaryCity","PDSecondaryState","PDSecondarycountry","PDSecondaryPinCode","companyCreate","output","_objectSpread","required","inputClassName","placeholder","Controller","rules","render","_ref","field","Select","inputAntdSelectClassName","Option","value","_ref2","_planListData$slice$s","onFocus","planSearch","text","sort","status","isPagination","showSearch","slice","a","b","title","localeCompare","map","element","index","_id","_ref3","CustomDatePicker","disabledDate","current","isBefore","moment","endOf","_ref4","_ref5","_orgTypeList$slice$so","orgTypeSearch","disabled","ListLoader","_ref6","_industryListData$sli","indusSearch","_ref7","_countryListData$docs","AutoComplete","options","docs","filterOption","inputValue","option","_option$value","toLowerCase","includes","countrySearch","inputerrorClassNameAutoComplete","_ref8","_stateListData$docs","stateSearch","countryName","_ref9","_cityListData$docs","citySearch","_ref0","maxLength","onInput","e","pattern","_ref1","CustomMobileCodePicker","minLength","Loader"],"sourceRoot":""}