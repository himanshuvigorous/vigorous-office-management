{"version":3,"file":"static/js/6063.0e169c21.chunk.js","mappings":"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","sources":["pages/hr/RecruitmentProcess/JobPost/CreateJobPostList.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport {\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../../constents/global\";\nimport getUserIds from '../../../../constents/getUserIds';\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { createJobPost } from \"./JobPostFeatures/_job_post_reducers\";\nimport { deptSearch } from \"../../../department/departmentFeatures/_department_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { designationSearch } from \"../../../designation/designationFeatures/_designation_reducers\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../../Director/director/DirectorFeatures/_director_reducers\";\nimport ReactQuill from \"react-quill\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nconst CreateJobPostList = () => {\n  const { loading: jobPostLoading } = useSelector((state) => state.jobPost);\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [tags, setTags] = useState([]);\n  const [tagInput, setTagInput] = useState(\"\");\n  const {\n    userCompanyId,\n\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType\n  } = getUserIds();\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { designationList, loading: desLoading } = useSelector((state) => state.designation);\n  const { departmentListData, loading: depLoading } = useSelector((state) => state.department);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const [editorValue, setEditorValue] = useState(``);\n  const [immediateJoiner, setImmediateJoiner] = useState(false);\n\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"branchId\",\n    defaultValue: userBranchId,\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"departmentId\",\n    defaultValue: userDepartmentId,\n  });\n  const designationId = useWatch({\n    control,\n    name: \"designationId\",\n    defaultValue: userDesignationId,\n  });\n  const employeId = useWatch({\n    control,\n    name: \"employeId\",\n    defaultValue: userEmployeId,\n  });\n  const [descriptionWarning, setDescriptionWarning] = useState(false)\n  const [skillsWarning, setSkillWarning] = useState(false)\n  const formValidation = () => {\n\n    // if(!editorValue){\n    //   setDescriptionWarning(true)\n    //   return false\n    // }\n    if (tags.length === 0) {\n      setSkillWarning(true)\n      return false\n    }\n\n    if (!editorValue || editorValue === '<p><br></p>') {\n      setDescriptionWarning(true)\n      return false\n    }\n    return true;\n\n  }\n\n  const onSubmit = (data) => {\n\n\n\n    if (formValidation()) {\n\n\n      const finalPayload = {\n        employeId: employeId,\n        companyId: companyId,\n        directorId: '',\n        branchId: branchId,\n        departmentId: departmentId,\n        designationId: designationId,\n        title: data?.jobTitle,\n        location: data?.location,\n        description: editorValue,\n        requiredSkills: tags,\n        profileType: data?.profileType,\n        noOfVacancy: parseInt(data?.noOfVacancy),\n        employmentType: data?.employmentType,\n        salaryRange: {\n          min: parseInt(data?.minSalary),\n          max: parseInt(data?.maxSalary),\n          currency: 'INR',\n        },\n        experienceRange: {\n          min: parseInt(data?.minExp),\n          max: parseInt(data?.maxExp),\n        },\n        isImmediateJoiner: immediateJoiner,\n        status: data?.status,\n        // \"title\": \"Frontend Developer\",\n        // \"location\": \"San Francisco, CA\",\n        // \"description\": \"Build and optimize UI components.\",\n        // \"requiredSkills\": [\"HTML\", \"CSS\", \"JavaScript\", \"React\"],\n        // \"noOfVacancy\": 2,\n        // \"employmentType\": \"Full-Time\",\n        // \"salaryRange\": {\n        //   \"min\": 70000,\n        //   \"max\": 110000,\n        //   \"currency\": \"USD\"\n        // },\n        // \"experienceRange\": {\n        //   \"min\": 1,\n        //   \"max\": 3\n        // },\n        // \"status\": \"Open\",\n        // \"isImmediateJoiner\": false,\n        // \"rawData\": {\n        //   \"externalReferenceId\": \"JOB20250128\",\n        //   \"notes\": \"Candidates must be proficient in modern web development tools.\"\n        // },\n\n      };\n\n      dispatch(createJobPost(finalPayload)).then((data) => {\n        if (!data.error) navigate(-1);\n      });\n    }\n  };\n\n  const handleJoinerBox = (checked) => {\n    setImmediateJoiner(checked);\n  };\n\n\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(\n        companySearch({\n          userType: \"company\",\n          text: \"\",\n          status: true,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (branchId) {\n      dispatch(\n        deptSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId,\n          branchId: branchId,\n        })\n      );\n    }\n  }, [branchId]);\n\n  useEffect(() => {\n    if ((companyId && userType === \"company\" || companyId && userType === \"admin\")) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: companyId\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (companyId && userType === \"company\" || userType === \"admin\") {\n      dispatch(directorSearch({\n        text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n      })\n      );\n    }\n  }, [companyId]);\n\n  useEffect(() => {\n    if (departmentId) {\n      dispatch(\n        designationSearch({\n          departmentId: departmentId,\n          companyId: companyId,\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, [departmentId]);\n\n\n\n  const handleTagChange = (e) => {\n    setSkillWarning(false)\n\n    setTagInput(e.target.value);\n  };\n\n  const handleAddTag = (e) => {\n    if (e.key === \"Enter\" && tagInput.trim() !== \"\") {\n      e.preventDefault();\n      setTags((prevTags) => [...prevTags, tagInput.trim()]);\n      setTagInput(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove) => {\n    setTags((prevTags) => prevTags.filter((tag) => tag !== tagToRemove));\n  };\n  const handleEditorChange = (value) => {\n    setDescriptionWarning(false)\n    setEditorValue(value);\n  };\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\" >\n\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)} >\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\" >\n\n\n            < div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 \" >\n              {(userType === \"admin\") && (\n                <div className=\"\" >\n                  <label className={`${inputLabelClassName}`}>\n                    Company < span className=\"text-red-600\" >* </span>\n                  </label>\n                  <Controller\n                    name=\"companyId\"\n                    control={control}\n                    rules={{\n                      required: \"Company is required\",\n                    }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n\n                        placeholder=\"Select Company\"\n                        showSearch\n\n                      >\n                        <Select.Option value=\"\">Select Company</Select.Option>\n                        {companyListLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                          (companyList?.map((type) => (\n                            <Select.Option value={type?._id} >\n                              {type?.fullName}({type?.userName})\n                            </Select.Option>\n                          )))\n                        }\n                      </Select>\n                    )}\n                  />\n                  {/* < select\n                    {...register(\"companyId\", {\n                      required: \"Company is required\",\n                    })\n                    }\n                    className={` ${inputClassName} ${errors.companyId ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\" >\n                      Select Company\n                    </option>\n                    {\n                      companyList?.map((type) => (\n                        <option value={type?._id} >\n                          {type?.fullName}({type?.userName})\n                        </option>\n                      ))\n                    }\n                  </select> */}\n                  {\n                    errors.companyId && (\n                      <p className=\"text-red-500 text-sm\" >\n                        {errors.companyId.message}\n                      </p>\n                    )\n                  }\n                </div>\n              )}\n              {\n                (userType === \"admin\" || userType === \"company\" || userType === 'companyDirector') && (\n                  <div className=\"\" >\n                    <label className={`${inputLabelClassName}`}>\n                      Branch < span className=\"text-red-600\" >* </span>\n                    </label>\n                    <Controller\n                      name=\"branchId\"\n                      control={control}\n                      rules={{\n                        required: \"Branch is required\",\n                      }}\n\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          onChange={(value) => {\n                            setValue(\"designationId\", '')\n                            setValue(\"departmentId\", '')\n                            field.onChange(value);\n                          }}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          placeholder=\"Select Branch\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n\n                        >\n                          <Select.Option value=\"\">Select Branch</Select.Option>\n                          {branchListloading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                            (sortByPropertyAlphabetically(branchList, 'fullName')\n                              ?.filter((element) => element?.companyId === companyId)\n                              ?.map((element) => (\n                                <Select.Option value={element?._id} > {element?.fullName} </Select.Option>\n                              )))\n                          }\n                        </Select>\n                      )}\n                    />\n\n                    {\n                      errors.branchId && (\n                        <p className=\"text-red-500 text-sm\" >\n                          {errors.branchId.message}\n                        </p>\n                      )\n                    }\n                  </div>)}\n              <div className=\"\" >\n                <label className={`${inputLabelClassName}`}> Job Post Name <span className=\"text-red-600\" >* </span></label >\n                <input\n                  type=\"text\"\n                  {...register(\"jobTitle\", {\n                    required: \"Job Post Name is required\",\n                  })\n                  }\n                  className={` ${inputClassName} ${errors.jobTitle ? \"border-[1px] \" : \"border-gray-300\"\n                    } `\n                  }\n                  placeholder=\"Enter Job Post Name\"\n                />\n                {\n                  errors.jobTitle && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.jobTitle.message}\n                    </p>\n                  )\n                }\n              </div>\n            </div>\n\n            < div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 \" >\n              <div className=\"\" >\n                <label className={`${inputLabelClassName}`}>\n                  Department < span className=\"text-red-600\" >* </span>\n                </label>\n\n                <Controller\n                  name=\"departmentId\"\n                  control={control}\n                  rules={{\n                    required: \"Department is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      onChange={(value) => {\n                        setValue(\"designationId\", '')\n                        field.onChange(value);\n                      }}\n                      className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      placeholder=\"Select Department\"\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n\n                    >\n                      <Select.Option value=\"\">Select Department</Select.Option>\n                      {depLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        (sortByPropertyAlphabetically(departmentListData, 'name')\n                          ?.map((element) => (\n                            <Select.Option value={element?._id} > {element?.name} </Select.Option>\n                          )))\n                      }\n                    </Select>\n                  )}\n                />\n                {\n                  errors.departmentId && (\n                    <p className=\"text-red-500 text-sm\" >\n                      {errors.departmentId.message}\n                    </p>\n                  )\n                }\n              </div>\n\n              < div className=\"\" >\n                <label className={`${inputLabelClassName}`}> Designation < span className=\"text-red-600\" >* </span></label >\n\n\n                <Controller\n                  name=\"designationId\"\n                  control={control}\n                  rules={{\n                    required: \"Designation is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n\n                      placeholder=\"Select Designation\"\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n\n                    >\n                      <Select.Option value=\"\">Select Designation</Select.Option>\n                      {desLoading ? <Select.Option disabled><ListLoader /></Select.Option> :\n                        (designationList\n\n                          ?.map((element) => (\n                            <Select.Option value={element?._id} > {element?.name} </Select.Option>\n                          )))\n                      }\n                    </Select>\n                  )}\n                />\n\n                {\n                  errors.designationId && (\n                    <p className=\"text-red-500 text-sm\" >\n                      {errors.designationId.message}\n                    </p>\n                  )\n                }\n              </div>\n            </div>\n\n\n\n            < div className=\"grid grid-cols-1 md:grid-cols-3 md:gap-8 md:my-1 \" >\n\n              <div className=\"\" >\n                <label className={`${inputLabelClassName}`}> No.of Vacancy < span className=\"text-red-600\" >* </span></label >\n                <input\n                  type=\"number\"\n                  {...register(\"noOfVacancy\", {\n                    required: \"No of Vacancy is required\",\n                  })\n                  }\n                  className={` ${inputClassName} ${errors.noOfVacancy ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                  placeholder=\"Enter No of Vacancy\"\n                />\n                {\n                  errors.noOfVacancy && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.noOfVacancy.message}\n                    </p>\n                  )\n                }\n              </div>\n\n              {/* < div >\n                <label className={`${inputLabelClassName}`}>\n                  Status < span className=\"text-red-600\" >* </span>\n                </label>\n                < select\n                  {...register(\"status\", {\n                    required: \"Status is required\",\n                  })\n                  }\n                  className={` ${inputClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\" > Select Status </option>\n                  < option value=\"Open\" > Open </option>\n                  < option value=\"Closed\" > Closed </option>\n                  < option value=\"Draft\" > Draft </option>\n                </select>\n                {\n                  errors.status && (\n                    <p className=\"text-red-500 text-sm\" > {errors.status.message} </p>\n                  )\n                }\n              </div> */}\n\n              < div >\n                <label className={`${inputLabelClassName}`}>\n                  Employment Type < span className=\"text-red-600\" >* </span>\n                </label>\n                {/* < select\n                  {...register(\"employmentType\", {\n                    required: \"Sundays Off is required\",\n                  })\n                  }\n                  className={` ${inputClassName} ${errors.employmentType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\" > Select Employment Type </option>\n                  < option value=\"Full-Time\" > Full - Time </option>\n                  < option value=\"Part-Time\" > Part - Time </option>\n                  < option value=\"Contract\" > Contract </option>\n                  < option value=\"Internship\" > Internship </option>\n                </select> */}\n                <Controller\n                  name=\"employmentType\"\n                  control={control}\n                  rules={{\n                    required: \"Employment Type is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n\n                      placeholder=\"Select Employment Type\"\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n\n                    >\n                      <Select.Option value=\"\">Select Employment Type</Select.Option>\n\n\n                      <Select.Option value=\"Full-Time\" > Full - Time </Select.Option>\n                      <Select.Option value=\"Part-Time\" >Part - Time </Select.Option>\n                      <Select.Option value=\"Contract\" >Contract  </Select.Option>\n                      <Select.Option value=\"Internship\" >Internship </Select.Option>\n                    </Select>\n                  )}\n                />\n\n\n\n\n\n                {\n                  errors.employmentType && (\n                    <p className=\"text-red-500 text-sm\" > {errors.employmentType.message} </p>\n                  )\n                }\n              </div>\n\n              < div >\n                <label className={`${inputLabelClassName}`}>\n                  Profile Type < span className=\"text-red-600\" >* </span>\n                </label>\n\n                <Controller\n                  name=\"profileType\"\n                  control={control}\n                  rules={{\n                    required: \"profileType is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n\n                      placeholder=\"Select profileType\"\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n\n                    >\n                      <Select.Option value=\"\">Select profileType</Select.Option>\n\n                      <Select.Option value=\"Intern\" >Intern </Select.Option>\n                      <Select.Option value=\"Fresher\" > Fresher </Select.Option>\n\n                      <Select.Option value=\"Experience\" >Experience  </Select.Option>\n\n                    </Select>\n                  )}\n                />\n\n\n\n\n\n                {\n                  errors.profileType && (\n                    <p className=\"text-red-500 text-sm\" > {errors.profileType.message} </p>\n                  )\n                }\n              </div>\n            </div>\n\n            < div className=\"grid grid-cols-1 md:grid-cols-3 md:gap-8 md:my-1 \" >\n\n              <div className=\"\" >\n                <label className={`${inputLabelClassName}`}> Location < span className=\"text-red-600\" >* </span></label >\n                <input\n                  type=\"text\"\n                  {...register(\"location\", {\n                    required: \"Location is required\",\n                  })\n                  }\n                  className={` ${inputClassName} ${errors.location ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                  placeholder=\"Enter Location\"\n                />\n                {\n                  errors.location && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.location.message}\n                    </p>\n                  )\n                }\n              </div>\n\n              < div className=\"\" >\n                <label className={`${inputLabelClassName}`}>\n                  Min Salary (INR) < span className=\"text-red-600\" > * </span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"minSalary\", {\n                    required: \"Minimum salary is required\",\n                    pattern: {\n                      value: /^\\d+(\\.\\d+)?$/,\n                      message: \"Only numeric or decimal values are allowed\",\n                    },\n                  })}\n                  onInput={(e) => {\n                    e.target.value = e.target.value.replace(/[^0-9.]/g, \"\");\n                    if ((e.target.value.match(/\\./g) || []).length > 1) {\n                      e.target.value = e.target.value.slice(0, -1);\n                    }\n                  }}\n                  className={`placeholder: ${inputClassName} ${errors.minSalary ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter expected salary\"\n                />\n                {\n                  errors.minSalary && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.minSalary.message}\n                    </p>\n                  )\n                }\n              </div>\n\n              < div className=\"\" >\n                <label className={`${inputLabelClassName}`}>\n                  Max Salary (INR) < span className=\"text-red-600\" >* </span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"maxSalary\", {\n                    required: \"Maximum salary is required\",\n                    pattern: {\n                      value: /^\\d+(\\.\\d+)?$/,\n                      message: \"Only numeric or decimal values are allowed\",\n                    },\n                  })}\n                  onInput={(e) => {\n                    e.target.value = e.target.value.replace(/[^0-9.]/g, \"\");\n                    if ((e.target.value.match(/\\./g) || []).length > 1) {\n                      e.target.value = e.target.value.slice(0, -1);\n                    }\n                  }}\n                  className={`placeholder: ${inputClassName} ${errors.maxSalary ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Expected Salary\"\n                />\n                {\n                  errors.maxSalary && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.maxSalary.message}\n                    </p>\n                  )\n                }\n              </div>\n\n              {/* < div >\n                <label className={`${inputLabelClassName}`}>\n                  Currency < span className=\"text-red-600\" > * </span>\n                </label>\n             \n\n                <Controller\n                      name=\"currency\"\n                      control={control}\n                      rules={{\n                        required: \"currency  is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                \n                          placeholder=\"Select Currency\"\n                          showSearch\n\n                        >\n                          <Select.Option value=\"\">Select Currency</Select.Option>\n                       \n                       \n                            <Select.Option value=\"INR\" > INR  </Select.Option>\n                             <Select.Option value=\"USD\" > USD  </Select.Option>\n                           \n                        </Select>\n                      )}\n                    />\n                {\n                  errors.currency && (\n                    <p className=\"text-red-500 text-sm\" > {errors.currency.message} </p>\n                  )\n                }\n              </div> */}\n\n            </div>\n\n            < div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 \" >\n\n              < div className=\"\" >\n                <label className={`${inputLabelClassName}`}>\n                  Min (in Years)< span className=\"text-red-600\" > * </span>\n                </label>\n                < input\n                  type=\"number\"\n                  {...register(\"minExp\", {\n                    required: \"Min Range is required\",\n                  })\n                  }\n                  className={` ${inputClassName} ${errors.minExp ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                  placeholder=\"Enter Minimum Experience\"\n                />\n                {\n                  errors.minExp && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.minExp.message}\n                    </p>\n                  )\n                }\n              </div>\n\n              < div className=\"\" >\n                <label className={`${inputLabelClassName}`}>\n                  Max (in Years) < span className=\"text-red-600\" >* </span>\n                </label>\n                < input\n                  type=\"number\"\n                  {...register(\"maxExp\", {\n                    required: \"Max Range is required\",\n                  })\n                  }\n                  className={` ${inputClassName} ${errors.maxExp ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                  placeholder=\"Enter Maximum Experience\"\n                />\n                {\n                  errors.maxExp && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.maxExp.message}\n                    </p>\n                  )\n                }\n              </div>\n\n            </div>\n\n            < div >\n              <div>\n                <label className={`${inputLabelClassName}`}> Skills < span className=\"text-red-600\" >* </span></label >\n                <input\n                  type=\"text\"\n                  {...register(\"skills\",\n\n                  )}\n                  className={`${inputClassName} ${errors.skills ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Write Skills & Press Enter\"\n                  value={tagInput}\n                  onChange={handleTagChange}\n                  onKeyDown={handleAddTag}\n                />\n\n              </div>\n              < div className=\"flex flex-wrap gap-2 mt-2\" >\n                {\n                  tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-gray-200 text-gray-700 px-3 py-1 text-xs rounded-full flex items-center gap-2\"\n                    >\n                      {tag}\n                      < button\n                        type=\"button\"\n                        onClick={() => handleRemoveTag(tag)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        &times;\n                      </button>\n                    </span>\n                  ))}\n                {/* {\n                  errors.skills && (\n                    <p className=\"text-red-500 text-sm mt-1\" >\n                      {errors.skills.message}\n                    </p>\n                  )\n                } */}\n\n                {\n                  (tags.length === 0 && skillsWarning) && (\n                    <span className=\"text-[14px] text-red-600\">\n                      skills is required\n                    </span>\n                  )\n                }\n              </div>\n            </div>\n\n            < div className=\"\" >\n              <label className={`${inputLabelClassName}`}>\n                Job Description < span className=\"text-red-600\" >* </span>\n              </label>\n\n              <ReactQuill\n                value={editorValue}\n                onChange={handleEditorChange}\n                placeholder=\"Write the email body here\"\n                modules={{\n                  toolbar: [\n                    [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                    ['bold', 'italic', 'underline', 'strike'],\n                    [{ 'align': [] }],\n                    ['link', 'image', 'video'],\n                    ['blockquote', 'code-block'],\n                    ['clean']\n                  ],\n                }}\n                formats={['header', 'font', 'list', 'bold', 'italic', 'underline', 'link', 'align', 'clean']}\n              />\n              {\n                descriptionWarning && (\n                  <span className=\"text-red-600 text-[14px]\"> Job Description is required</span>\n                )\n              }\n\n\n            </div>\n\n            <div className=\"flex items-center mt-2 p-3\">\n              <input\n                type=\"checkbox\"\n                id=\"immediateJoiner\"\n                onChange={(e) => handleJoinerBox(e.target.checked)}\n                className=\"mr-2\"\n              />\n              <label htmlFor=\"immediateJoiner\" className={`${inputLabelClassName}`}>\n                isImmediateJoiner\n              </label>\n            </div>\n\n          </div>\n\n          <div className=\"flex justify-end mt-4\">\n            <button\n              type=\"submit\"\n              disabled={jobPostLoading}\n              className={`${jobPostLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {jobPostLoading ? <Loader /> : 'Submit'}\n            </button>\n\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateJobPostList;"],"names":["CreateJobPostList","loading","jobPostLoading","useSelector","state","jobPost","register","setValue","handleSubmit","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","tags","setTags","useState","tagInput","setTagInput","userCompanyId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","companyList","companyListLoading","company","designationList","desLoading","designation","departmentListData","depLoading","department","branchList","branchListloading","branch","editorValue","setEditorValue","immediateJoiner","setImmediateJoiner","companyId","useWatch","name","defaultValue","branchId","departmentId","designationId","employeId","descriptionWarning","setDescriptionWarning","skillsWarning","setSkillWarning","useEffect","companySearch","text","status","deptSearch","sort","isPagination","branchSearch","directorSearch","designationSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","length","finalPayload","directorId","title","jobTitle","location","description","requiredSkills","profileType","noOfVacancy","parseInt","employmentType","salaryRange","min","minSalary","max","maxSalary","currency","experienceRange","minExp","maxExp","isImmediateJoiner","createJobPost","then","error","concat","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","PDPlan","placeholder","showSearch","Option","value","disabled","ListLoader","map","type","_id","fullName","userName","message","_ref2","_sortByPropertyAlphab","_sortByPropertyAlphab2","onChange","filterOption","input","option","String","toLowerCase","includes","sortByPropertyAlphabetically","filter","element","inputClassName","_ref3","_sortByPropertyAlphab3","_ref4","_ref5","_ref6","pattern","onInput","e","target","replace","match","slice","skills","onKeyDown","key","trim","preventDefault","prevTags","tag","index","onClick","handleRemoveTag","tagToRemove","ReactQuill","modules","toolbar","formats","id","handleJoinerBox","checked","htmlFor","Loader"],"sourceRoot":""}