{"version":3,"file":"static/js/614.12a5ebd7.chunk.js","mappings":"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","sources":["pages/reportsManager/clientReports/client_groupstatement_report/ClientGroupStatementReport.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  convertIntoAmount,\n  convertMinutesToHoursAndMinutes,\n  domainName,\n  organizationTypes,\n  pazeSizeReport,\n  sortByPropertyAlphabetically,\n} from \"../../../../constents/global\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { Collapse, DatePicker, Descriptions, Modal, Select, Tooltip } from \"antd\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport CustomPagination from \"../../../../component/CustomPagination/CustomPagination\";\nimport { clientGroupStatementReportFunc } from \"../../../../redux/_reducers/_reports_reducers\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport CustomDatePicker from \"../../../../global_layouts/DatePicker/CustomDatePicker\";\nimport * as ExcelJS from \"exceljs\";\nimport Loader2 from \"../../../../global_layouts/Loader/Loader2\";\nimport { reportsServices } from \"../../../../redux/_services/_reports_services\";\nimport { MdKeyboardArrowDown } from \"react-icons/md\";\nimport { jsPDF } from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport {\n  CLIENT_TASK_STATUS_ARR,\n  PRIORITY,\n} from \"../../../../constents/ActionConstent\";\nimport { deptSearch } from \"../../../department/departmentFeatures/_department_reducers\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\nimport { clientSearch } from \"../../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { taskTypeSearch } from \"../../../taskManagement/taskType/taskFeatures/_task_reducers\";\nimport { clientGrpSearch } from \"../../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { FaEye } from \"react-icons/fa\";\nimport { orgTypeSearch } from \"../../../organizationType/organizationTypeFeatures/_org_type_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { indusSearch } from \"../../../global/other/Industry/IndustryFeature/_industry_reducers\";\nimport { useParams } from \"react-router-dom\";\n\nfunction ClientGroupStatementReport() {\n  const { RangePicker } = DatePicker;\n\n  const {\n    control,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm();\n\n  const { ledgerId } = useParams()\n\n  const [pageSize, setPageSize] = useState(10);\n\n  const dispatch = useDispatch();\n  const {\n    clientGroupStatementReportList,\n    clientGroupStatementReportFunc_loading,\n    clientGroupStatementCount,\n  } = useSelector((state) => state.reports);\n\n  const openingBalance = useMemo(() => {\n    if (\n      clientGroupStatementReportList?.allTransections &&\n      clientGroupStatementReportList.allTransections.length > 0\n    ) {\n      return clientGroupStatementReportList.allTransections[0].previousBalance;\n    }\n    return undefined;\n  }, [clientGroupStatementReportList]);\n\n\n\n\n  const { departmentListData, loading: depLoading } = useSelector(\n    (state) => state.department\n  );\n\n  const [departmentModalData, setDepartmentModalData] = useState({});\n\n  const { taskTypeList } = useSelector((state) => state.taskType);\n  const { clientGroupList } = useSelector((state) => state.clientGroup);\n  const { clientList } = useSelector((state) => state.client);\n  const { employeList } = useSelector((state) => state.employe);\n  const [searchText, setSearchText] = useState(\"\");\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { orgTypeList, orgSearchloading } = useSelector(\n    (state) => state.orgType\n  );\n  const [currentPage, setCurrentPage] = useState(1);\n  const [debouncedFilterText, setDebouncedFilterText] = useState(\"\");\n  const { branchList } = useSelector((state) => state.branch);\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n\n\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedFilterText(searchText);\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [searchText]);\n\n  const onPaginationChange = (page) => {\n    setCurrentPage(page);\n  };\n\n\n\n  const [formattedData, setFormattedData] = useState(0)\n\n  const formatDataFunction = (data) => {\n    let balance = Number(data?.openingBalance) || 0\n    let mapOutput = []\n\n    data?.allTransections?.forEach((element, index) => {\n\n      const output = {\n        key: '',\n        entryDate: element?.createdAt ? dayjs(element?.createdAt).format('DD-MM-YYYY') : '-',\n        valueDate: element?.createdAt ? dayjs(element?.createdAt).format('DD-MM-YYYY') : '-',\n        particulars: (element?.type == 'invoice' ? 'invoice Generated' : element?.naration) || \"-\",\n        refNo: (element?.typeOf == 'invoice' ? (element?.refNumber) : (element?.typeOf == 'receipt' ? `Receipt ${element?.refNumber}` : '')) || element?.refNumber,\n\n        clientName: element?.clientName,\n        debit: element?.debit_credit == 'debit' ? element?.amount : 0,\n        credit: element?.debit_credit == 'credit' ? element?.amount : 0,\n        balance: element?.currentBalance || 0,\n      }\n\n      mapOutput.push(output)\n    })\n\n\n    mapOutput?.push({\n      key: 'totalBalance',\n      entryDate: '',\n      valueDate: '',\n      particulars: 'Total Balance',\n      refNo: '',\n      clientName: '',\n      debit: data?.summary?.totalDebit,\n      credit: data?.summary?.totalCredit,\n      balance: data?.summary?.closingBalance,\n    })\n\n    return mapOutput;\n  }\n\n\n  useEffect(() => {\n    setFormattedData(formatDataFunction(clientGroupStatementReportList))\n  }, [clientGroupStatementReportList])\n\n\n\n\n\n\n  const time = useWatch({\n    control,\n    name: \"time\",\n    defaultValue: [],\n  });\n  const requestPayLoadReturn = (pagination = true) => {\n    return {\n      \"_id\": ledgerId,\n      startDate: time?.length > 0 ? dayjs(time[0]).format('YYYY-MM-DD') : '',\n      endDate: time?.length > 0 ? dayjs(time[1]).format('YYYY-MM-DD') : '',\n\n    };\n  };\n  useEffect(() => {\n    fetchClientServiceTaskReport(debouncedFilterText);\n  }, [currentPage, debouncedFilterText, pageSize]);\n  const handleEmployeeFocus = () => {\n    dispatch(\n      employeSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? CompanyId\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId: [\"admin\", \"company\", \"companyDirector\"].includes(\n          userInfoglobal?.userType\n        )\n          ? BranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n        departmentId: \"\",\n        directorId: \"\",\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        isBranch: true,\n        isDirector: false,\n      })\n    );\n  };\n\n  const fetchClientServiceTaskReport = () => {\n    dispatch(clientGroupStatementReportFunc(requestPayLoadReturn(true)));\n  };\n\n\n\n\n  useEffect(() => {\n    if (\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? CompanyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n    // setValue(\"startDate\", dayjs().subtract(1, \"month\"));\n    // setValue(\"endDate\", dayjs());\n  }, []);\n\n  const onChange = (e) => {\n    setSearchText(e);\n  };\n\n  const handleSubmit = async () => {\n    fetchClientServiceTaskReport();\n  };\n\n  const generateExcel = async () => {\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(\"ClientGroupStatement\");\n\n    // Columns matching your table\n    worksheet.columns = [\n      { header: \"S.No.\", key: \"sno\", width: 10 },\n      { header: \"Entry Date\", key: \"entryDate\", width: 20 },\n      { header: \"Value Date\", key: \"valueDate\", width: 20 },\n      { header: \"Particulars\", key: \"particulars\", width: 40 },\n      { header: \"Ref No.\", key: \"refNo\", width: 20 },\n      { header: \"Client Name\", key: \"clientName\", width: 25 },\n      { header: \"Debit\", key: \"debit\", width: 15 },\n      { header: \"Credit\", key: \"credit\", width: 15 },\n      { header: \"Balance\", key: \"balance\", width: 15 },\n    ];\n\n    // Header styling\n    const headerRow = worksheet.getRow(1);\n    headerRow.eachCell((cell) => {\n      cell.fill = {\n        type: \"pattern\",\n        pattern: \"solid\",\n        fgColor: { argb: \"FFB6D7A8\" },\n      };\n      cell.font = { bold: true };\n      cell.alignment = { vertical: \"middle\", horizontal: \"center\" };\n      cell.border = {\n        top: { style: \"thin\" },\n        left: { style: \"thin\" },\n        bottom: { style: \"thin\" },\n        right: { style: \"thin\" },\n      };\n    });\n\n    // API Call\n    const response = await reportsServices?.clientGroupStatementReportFunc?.(\n      requestPayLoadReturn(false)\n    );\n    const transactions = formatDataFunction(response?.data) || [];\n\n\n\n\n\n    transactions?.forEach((data, index) => {\n\n      worksheet.addRow({\n        sno: index + 1,\n        entryDate: data?.entryDate,\n        valueDate: data?.valueDate,\n        particulars: data?.particulars,\n        refNo: data?.refNo,\n        clientName: data?.clientName,\n        debit: data?.debit ? Number(data?.debit).toFixed(2) : 0,\n        credit: data?.credit ? Number(data?.credit).toFixed(2) : 0,\n        balance: data?.balance,\n      });\n    });\n\n    // Style body rows\n    worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {\n      if (rowNumber === 1) return; // Skip header\n\n      row.eachCell((cell) => {\n        cell.alignment = { vertical: \"middle\", horizontal: \"left\" };\n        cell.border = {\n          top: { style: \"thin\" },\n          left: { style: \"thin\" },\n          bottom: { style: \"thin\" },\n          right: { style: \"thin\" },\n        };\n      });\n    });\n\n    // Enable autofilter\n    worksheet.autoFilter = {\n      from: \"A1\",\n      to: \"H1\",\n    };\n\n    // Export\n    workbook.xlsx.writeBuffer().then((buffer) => {\n      const blob = new Blob([buffer], {\n        type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      });\n      const link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(blob);\n      link.download = \"ClientGroupStatement.xlsx\";\n      link.click();\n    });\n  };\n\n  const generatePDF = async () => {\n    const doc = new jsPDF({\n      orientation: \"landscape\",\n      unit: \"pt\",\n    });\n\n    doc.setFontSize(16);\n    doc.text(\"Client Group Statement Report\", 40, 30);\n\n    const headers = [\n      \"S.No.\",\n      \"Entry Date\",\n      \"Value Date\",\n      \"Particulars\",\n      \"Ref No.\",\n      \"Client Name\",\n      \"Debit\",\n      \"Credit\",\n      \"Balance\",\n    ];\n\n    const response = await reportsServices?.clientGroupStatementReportFunc(\n      requestPayLoadReturn(false)\n    );\n\n    const transactions = formatDataFunction(response?.data);\n    if (!transactions || transactions.length === 0) return;\n\n    let runningBalance = Number(openingBalance || 0);\n\n    // Initial Opening Balance Row\n\n\n    const body = formatDataFunction(response?.data)?.map((data, index) => {\n\n      return [\n        index + 1,\n        data?.entryDate,\n        data?.valueDate,\n        data?.particulars,\n        data?.refNo,\n        data?.clientName,\n        data?.debit ? Number(data?.debit).toFixed(2) : 0,\n        data?.credit ? Number(data?.credit).toFixed(2) : 0,\n        data?.balance || 0,\n      ];\n    });\n\n\n    autoTable(doc, {\n      startY: 50,\n      head: [headers],\n      body: body,\n      margin: { horizontal: 10 },\n      styles: {\n        cellPadding: 8,\n        fontSize: 10,\n        valign: \"middle\",\n        halign: \"left\",\n      },\n      headStyles: {\n        fillColor: [64, 64, 64],\n        textColor: [255, 255, 255],\n        fontStyle: \"bold\",\n      },\n      alternateRowStyles: {\n        fillColor: [245, 245, 245],\n      },\n    });\n\n    doc.save(\"Client_Group_Statement_Report.pdf\");\n  };\n\n\n  const items = [\n    {\n      key: \"1\",\n      label: <span className=\"text-white\">Advance Filters</span>,\n      children: (\n        <div className=\"bg-[#ececec] space-y-1 sm:flex justify-between items-center\">\n          <div className=\"sm:flex  grid grid-cols-1  gap-2 sm:flex-wrap text-[14px]\">\n            <div className=\"\">\n              <Controller\n                name=\"time\"\n                control={control}\n                render={({ field }) => (\n                  <RangePicker\n                    {...field}\n                    value={field.value}\n                    onChange={(value) => field.onChange(value)}\n                    format=\"YYYY-MM-DD\"\n                    // onOk={onOk}\n                    getPopupContainer={() => document.body} // important: avoids layout issues\n                    popupClassName=\"vertical-range-calendar\"\n                    className=\"custom-range-picker\"\n\n                  />\n                )}\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end items-center gap-2\">\n            <button\n              onClick={() => {\n                setValue('time', '')\n                handleSubmit();\n              }}\n              className=\"bg-header py-2 my-0.5 rounded-md flex px-10 justify-center items-center text-white\"\n            >\n              <span className=\"text-[12px]\">Reset</span>\n            </button>\n            <button\n              onClick={() => {\n                handleSubmit();\n              }}\n              className=\"bg-header  py-2 my-0.5 rounded-md flex px-10 justify-center items-center  text-white\"\n            >\n              <span className=\"text-[12px]\">Submit</span>\n            </button>\n          </div>\n        </div>\n      ),\n    },\n\n  ];\n\n  //     key: \"1\",\n  //     label: <span className=\"text-white\">Advance Filters</span>,\n  //     children: (\n  //       <div className=\"bg-[#ececec]\">\n  //         <div className=\"sm:flex  grid grid-cols-1  gap-2 sm:flex-wrap text-[14px]\">\n  //           {(userInfoglobal?.userType === \"admin\" ||\n  //             userInfoglobal?.userType === \"company\" ||\n  //             userInfoglobal?.userType === \"companyDirector\") && (\n  //             <div className=\"\">\n  //               <Controller\n  //                 name=\"PDBranchId\"\n  //                 control={control}\n  //                 render={({ field }) => (\n  //                   <Select\n  //                     {...field}\n  //                     className={`inputAntdSelectClassNameFilterReport `}\n  //                     placeholder=\"Select Branch\"\n  //                     showSearch\n  //                     filterOption={(input, option) =>\n  //                       String(option?.children)\n  //                         .toLowerCase()\n  //                         .includes(input.toLowerCase())\n  //                     }\n  //                   >\n  //                     <Select.Option value=\"\">Select Branch</Select.Option>\n  //                     {branchList?.map((element) => (\n  //                       <Select.Option value={element?._id}>\n  //                         {\" \"}\n  //                         {element?.fullName}{\" \"}\n  //                       </Select.Option>\n  //                     ))}\n  //                   </Select>\n  //                 )}\n  //               />\n  //               {errors.PDBranchId && (\n  //                 <p className=\"text-red-500 text-sm\">\n  //                   {errors.PDBranchId.message}\n  //                 </p>\n  //               )}\n  //             </div>\n  //           )}\n  //           <Controller\n  //             control={control}\n  //             name=\"PDOrganizationType\"\n  //             rules={{ required: \"Organization is required\" }}\n  //             render={({ field }) => (\n  //               <Select\n  //                 {...field}\n  //                 defaultValue={\"\"}\n  //                 className={`inputAntdSelectClassNameFilterReport `}\n  //                 showSearch\n  //                 onFocus={() => handleFocusOrgType()}\n  //                 filterOption={(input, option) =>\n  //                   String(option?.children)\n  //                     .toLowerCase()\n  //                     .includes(input.toLowerCase())\n  //                 }\n  //               >\n  //                 <Select.Option value=\"\">\n  //                   Select Organization Type\n  //                 </Select.Option>\n  //                 {orgSearchloading ? (\n  //                   <Select.Option disabled>\n  //                     <ListLoader />\n  //                   </Select.Option>\n  //                 ) : (\n  //                   orgTypeList?.map((type) => (\n  //                     <Select.Option key={type?._id} value={type?._id}>\n  //                       {type?.name}\n  //                     </Select.Option>\n  //                   ))\n  //                 )}\n  //               </Select>\n  //             )}\n  //           />\n\n  //           <Controller\n  //             control={control}\n  //             name=\"PDindustrytype\"\n  //             rules={{ required: \"Industry type is required\" }}\n  //             render={({ field }) => (\n  //               <Select\n  //                 {...field}\n  //                 defaultValue={\"\"}\n  //                 onFocus={() => {\n  //                   handleFocusIndustry();\n  //                 }}\n  //                 showSearch\n  //                 filterOption={(input, option) =>\n  //                   String(option?.children)\n  //                     .toLowerCase()\n  //                     .includes(input.toLowerCase())\n  //                 }\n  //                 className={`inputAntdSelectClassNameFilterReport `}\n  //               >\n  //                 <Select.Option value=\"\"> Select Industry Type</Select.Option>\n  //                 {indusSearchloading ? (\n  //                   <Select.Option disabled>\n  //                     <Loader />\n  //                   </Select.Option>\n  //                 ) : (\n  //                   industryListData?.map((type) => (\n  //                     <Select.Option key={type?._id} value={type?._id}>\n  //                       {type?.name}\n  //                     </Select.Option>\n  //                   ))\n  //                 )}\n  //               </Select>\n  //             )}\n  //           />\n\n  //           <div>\n  //             <Controller\n  //               name=\"status\"\n  //               control={control}\n  //               rules={{}}\n  //               render={({ field }) => (\n  //                 <Select\n  //                   {...field}\n  //                   className={`inputAntdSelectClassNameFilterReport `}\n  //                   placeholder=\"Select Status\"\n  //                   showSearch\n  //                   filterOption={(input, option) =>\n  //                     String(option?.children)\n  //                       .toLowerCase()\n  //                       .includes(input.toLowerCase())\n  //                   }\n  //                 >\n  //                   <Select.Option value=\"\">Select Status</Select.Option>\n  //                   {[\n  //                     { label: \"Active\", value: \"true\" },\n  //                     { label: \"InActive\", value: \"false\" },\n  //                   ]?.map((array) => {\n  //                     return (\n  //                       <Select.Option value={array?.value}>\n  //                         {array?.label}\n  //                       </Select.Option>\n  //                     );\n  //                   })}\n  //                 </Select>\n  //               )}\n  //             />\n  //           </div>\n\n  //           <Controller\n  //             name=\"department\"\n  //             control={control}\n  //             render={({ field }) => (\n  //               <Select\n  //                 {...field}\n  //                 className={`inputAntdSelectClassNameFilterReport`}\n  //                 showSearch\n  //                 filterOption={(input, option) =>\n  //                   String(option?.children)\n  //                     .toLowerCase()\n  //                     .includes(input.toLowerCase())\n  //                 }\n  //                 onFocus={() => {\n  //                   dispatch(\n  //                     deptSearch({\n  //                       text: \"\",\n  //                       sort: true,\n  //                       status: true,\n  //                       isPagination: false,\n  //                       companyId:\n  //                         userInfoglobal?.userType === \"admin\"\n  //                           ? CompanyId\n  //                           : userInfoglobal?.userType === \"company\"\n  //                           ? userInfoglobal?._id\n  //                           : userInfoglobal?.companyId,\n  //                       branchId: [\n  //                         \"admin\",\n  //                         \"company\",\n  //                         \"companyDirector\",\n  //                       ].includes(userInfoglobal?.userType)\n  //                         ? BranchId\n  //                         : userInfoglobal?.userType === \"companyBranch\"\n  //                         ? userInfoglobal?._id\n  //                         : userInfoglobal?.branchId,\n  //                     })\n  //                   );\n  //                 }}\n  //                 onChange={(value) => {\n  //                   field.onChange(value);\n  //                 }}\n  //                 placeholder=\"Select Department\"\n  //               >\n  //                 <Select.Option value=\"\">Select Department</Select.Option>\n  //                 {depLoading ? (\n  //                   <Select.Option disabled>\n  //                     <ListLoader />\n  //                   </Select.Option>\n  //                 ) : (\n  //                   sortByPropertyAlphabetically(departmentListData)?.map(\n  //                     (element) => (\n  //                       <Select.Option key={element?._id} value={element?._id}>\n  //                         {element?.name}\n  //                       </Select.Option>\n  //                     )\n  //                   )\n  //                 )}\n  //               </Select>\n  //             )}\n  //           />\n\n  //           <Controller\n  //             name=\"groupName\"\n  //             control={control}\n  //             render={({ field }) => (\n  //               <Select\n  //                 {...field}\n  //                 className=\"inputAntdSelectClassNameFilterReport\"\n  //                 options={[\n  //                   { label: \"Select Group Type\", value: \"\" },\n  //                   ...(Array.isArray(clientGroupList)\n  //                     ? clientGroupList.map((el) => ({\n  //                         label: `${el?.fullName} (${el?.groupName})`,\n  //                         value: el?._id,\n  //                       }))\n  //                     : []),\n  //                 ]}\n  //                 placeholder=\"Select Group Type\"\n  //                 onFocus={handleFocusClientGrp}\n  //                 classNamePrefix=\"react-select\"\n  //                 isSearchable\n  //                 onChange={(value) => {\n  //                   field.onChange(value);\n  //                 }}\n  //                 value={field?.value}\n  //               />\n  //             )}\n  //           />\n  //         </div>\n  //         <div className=\"flex justify-end items-center gap-2\">\n  //           <button\n  //             onClick={() => {\n  //               setValue(\"PDCompanyId\", \"\");\n  //               setValue(\"PDBranchId\", \"\");\n  //               setValue(\"status\", \"\");\n  //               setValue(\"PDOrganizationType\", \"\");\n  //               setValue(\"PDindustrytype\", \"\");\n  //               setValue(\"department\", \"\");\n  //               setValue(\"groupName\", \"\");\n\n  //               handleSubmit();\n  //             }}\n  //             className=\"bg-header py-2 my-0.5 rounded-md flex px-10 justify-center items-center text-white\"\n  //           >\n  //             <span className=\"text-[12px]\">Reset</span>\n  //           </button>\n  //           <button\n  //             onClick={() => {\n  //               handleSubmit();\n  //             }}\n  //             className=\"bg-header  py-2 my-0.5 rounded-md flex px-10 justify-center items-center  text-white\"\n  //           >\n  //             <span className=\"text-[12px]\">Submit</span>\n  //           </button>\n  //         </div>\n  //       </div>\n  //     ),\n  //   },\n  // ];\n\n  return (\n    <GlobalLayout onChange={onChange}>\n      <div className=\"bg-grey-100 w-full p-1\">\n        <div className=\"\">\n          <Collapse\n            className=\"custom-collapse\"\n            items={items}\n            defaultActiveKey={[1]}\n            expandIcon={({ isActive }) => (\n              <MdKeyboardArrowDown\n                size={20}\n                style={{\n                  color: \"white\",\n                  transform: isActive ? \"rotate(-90deg)\" : \"rotate(0deg)\",\n                  transition: \"transform 0.3s ease\",\n                }}\n              />\n            )}\n          ></Collapse>\n          <div className=\"space-y-1.5 flex justify-between items-center md:flex-row flex-col mt-2\">\n\n\n<Descriptions column={2} size=\"small\" bordered>\n  <Descriptions.Item label=\"Group Name\">\n    {clientGroupStatementReportList?.fullName || '-'}\n  </Descriptions.Item>\n  <Descriptions.Item label=\"Group ID\">\n    {clientGroupStatementReportList?.groupName || '-'}\n  </Descriptions.Item>\n</Descriptions>\n\n\n            <div className=\"flex justify-end items-center gap-2\">\n              <button\n                onClick={() => {\n                  generatePDF();\n                }}\n                className=\"bg-header  py-2 my-0.5 rounded-md flex px-10 justify-center items-center  text-white\"\n              >\n                <span className=\"text-[12px]\">Export PDF</span>\n              </button>\n              <button\n                onClick={() => {\n                  generateExcel();\n                }}\n                className=\"bg-header  py-2 my-0.5 rounded-md flex px-10 justify-center items-center  text-white\"\n              >\n                <span className=\"text-[12px]\">Export Excel</span>\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-[#ffffff]  w-full overflow-x-auto mt-1 rounded-xl\">\n          <table className=\"w-full max-w-full rounded-xl overflow-x-auto\">\n            <thead>\n              <tr className=\"border-b-[1px] border-[#DDDDDD] capitalize text-[12px] bg-header text-white font-[500] h-[40px]\">\n                <th className=\"border-none p-2 whitespace-nowrap  w-[5%]\">\n                  S.No.\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                  Entry  Date\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap \">\n                  Value  Date\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap \">particulars</th>\n                <th className=\"border-none p-2 whitespace-nowrap \">\tRef no.</th>\n                <th className=\"border-none p-2 whitespace-nowrap \">Client Name</th>\n\n                <th className=\"border-none p-2 whitespace-nowrap text-right\">\n                  Debit\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap ext-right\">\n                  Credit\n                </th>\n                <th className=\"border-none p-2 whitespace-nowrap text-right\">\n                  Balance\n                </th>\n                {/* <th className=\"border-none p-2 whitespace-nowrap \">\n                  Status\n                </th> */}\n              </tr>\n            </thead>\n            {clientGroupStatementReportFunc_loading ? (\n              <tr className=\"bg-white bg-opacity-5 \">\n                <td\n                  colSpan={15}\n                  className=\"px-6 py-2 whitespace-nowrap  font-[600] text-sm text-gray-500\"\n                >\n                  <Loader2 />\n                </td>\n              </tr>\n            ) : (\n              <tbody>\n\n                {formattedData &&\n                  formattedData?.length > 0 ? (\n                  formattedData?.map((element, index) => {\n\n\n                    return <tr\n                      className={`border-b-[1px] ${index % 2 === 0 ? \"bg-[#e9ecef]/80\" : \"bg-white\"\n                        } border-[#DDDDDD] text-[#374151] text-[14px]`}\n                    >\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                        {index + 1 + (currentPage - 1) * pageSize}\n                      </td>\n\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                        {element?.entryDate}\n                      </td>\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                        {element?.valueDate}\n                      </td>\n\n\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                        {element?.particulars || \"-\"}\n                      </td>\n\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                        {element?.refNo}\n                      </td>\n                      <td className=\"whitespace-nowrap  border-none p-2\">\n                        {element?.clientName || \"-\"}\n                      </td>\n\n                      <td className=\"whitespace-nowrap  border-none p-2 text-right\">\n                        {convertIntoAmount(element?.debit)}\n                      </td>\n                      <td className=\"whitespace-nowrap  border-none p-2 text-right\">\n                        {convertIntoAmount(element?.credit)}\n                      </td>\n                      <td className=\"tableData text-right\">\n                        {convertIntoAmount(element?.balance)}\n                      </td>\n                    </tr>\n                  })\n                ) : (\n                  <tr className=\"bg-white bg-opacity-5\">\n                    <td\n                      colSpan={15}\n                      className=\"px-6 py-2 whitespace-nowrap  font-[600] text-sm text-gray-500\"\n                    >\n                      Record Not Found\n                    </td>\n                  </tr>\n                )}\n\n\n              </tbody>\n            )}\n          </table>\n\n\n        </div>\n        {/* <CustomPagination\n          totalCount={clientGroupStatementCount}\n          pageSize={pageSize}\n          currentPage={currentPage}\n          onChange={onPaginationChange}\n        /> */}\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default ClientGroupStatementReport;\n"],"names":["RangePicker","DatePicker","control","formState","errors","setValue","watch","useForm","ledgerId","useParams","pageSize","setPageSize","useState","dispatch","useDispatch","clientGroupStatementReportList","clientGroupStatementReportFunc_loading","clientGroupStatementCount","useSelector","state","reports","openingBalance","useMemo","allTransections","length","previousBalance","departmentListData","loading","depLoading","department","departmentModalData","setDepartmentModalData","taskTypeList","taskType","clientGroupList","clientGroup","clientList","client","employeList","employe","searchText","setSearchText","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","orgTypeList","orgSearchloading","orgType","currentPage","setCurrentPage","debouncedFilterText","setDebouncedFilterText","branchList","branch","CompanyId","useWatch","name","defaultValue","useEffect","timer","setTimeout","clearTimeout","formattedData","setFormattedData","formatDataFunction","data","_data$allTransections","_data$summary","_data$summary2","_data$summary3","Number","mapOutput","forEach","element","index","output","key","entryDate","createdAt","dayjs","format","valueDate","particulars","type","naration","refNo","typeOf","refNumber","clientName","debit","debit_credit","amount","credit","balance","currentBalance","push","summary","totalDebit","totalCredit","closingBalance","time","requestPayLoadReturn","startDate","endDate","fetchClientServiceTaskReport","clientGroupStatementReportFunc","userType","branchSearch","text","sort","status","isPagination","companyId","_id","handleSubmit","async","items","label","_jsx","className","children","_jsxs","Controller","render","_ref","field","_objectSpread","value","onChange","getPopupContainer","document","body","popupClassName","onClick","GlobalLayout","e","Collapse","defaultActiveKey","expandIcon","_ref2","isActive","MdKeyboardArrowDown","size","style","color","transform","transition","Descriptions","column","bordered","Item","fullName","groupName","_formatDataFunction","doc","jsPDF","orientation","unit","setFontSize","response","reportsServices","transactions","map","toFixed","autoTable","startY","head","margin","horizontal","styles","cellPadding","fontSize","valign","halign","headStyles","fillColor","textColor","fontStyle","alternateRowStyles","save","generatePDF","_reportsServices$clie","workbook","ExcelJS","worksheet","addWorksheet","columns","header","width","getRow","eachCell","cell","fill","pattern","fgColor","argb","font","bold","alignment","vertical","border","top","left","bottom","right","call","addRow","sno","eachRow","includeEmpty","row","rowNumber","autoFilter","from","to","xlsx","writeBuffer","then","buffer","blob","Blob","link","createElement","href","URL","createObjectURL","download","click","generateExcel","colSpan","Loader2","convertIntoAmount"],"sourceRoot":""}