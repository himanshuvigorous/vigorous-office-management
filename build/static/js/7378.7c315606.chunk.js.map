{"version":3,"file":"static/js/7378.7c315606.chunk.js","mappings":"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","sources":["pages/hr/employeeSalary/Allowance/CreateAllowance.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { domainName, inputAntdSelectClassName, inputAntdSelectClassNameFilter, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { allowanceCreate } from \"./allowancefeature/_allowanceList_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\n\n\nconst CreateAllowance = () => {\n  const { loading: allowanceLoading } = useSelector(\n    (state) => state.allowance\n  );\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const isPercentage = useWatch({\n    control,\n    name: \"isPercentage\",\n    defaultValue: \"\",\n  });\n\n\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: \"\",\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      \"name\": data?.allowanceName,\n      \"description\": '',\n      \"isPercentage\": false,\n      \"amount\": 0\n\n    };\n \n    dispatch(allowanceCreate(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    // onFocus={() => {\n                    //   dispatch(\n                    //     companySearch({\n                    //       text: \"\",\n                    //       sort: true,\n                    //       status: true,\n                    //       isPagination: false,\n                    //     })\n                    //   );\n                    // }}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n\n              </select> */}\n\n              <Controller\n                control={control}\n                name=\"PDBranchId\"\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    // onFocus={() => {\n                    //   dispatch(\n                    //     companySearch({\n                    //       text: \"\",\n                    //       sort: true,\n                    //       status: true,\n                    //       isPagination: false,\n                    //     })\n                    //   );\n                    // }}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Name</label>\n              <input\n                type=\"text\"\n                {...register(\"allowanceName\", {\n                  required: \"Allowance  is required\",\n                })}\n                className={`${inputClassName} ${errors.allowanceName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Allowance  Name\"\n              />\n              {errors.allowanceName && (\n                <p className=\"text-red-500 text-sm\">{errors.allowanceName.message}</p>\n              )}\n            </div>\n\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Description </label>\n              <input\n                type=\"text\"\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                className={`${inputClassName} ${errors.description ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Description\"\n              />\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">{errors.description.message}</p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                isPercentage <span className=\"text-red-600\">*</span>\n              </label> */}\n            {/* <select\n                {...register(\"isPercentage\", {\n                  required: \"isPercentage is required\",\n                })}\n                className={`${inputClassName} ${errors.isPercentage ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select isPercentage</option>\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select> */}\n            {/* <Controller\n                                    name=\"isPercentage\"\n                                    control={control}\n                                    rules={{\n                                      required: \"isPercentage is required\",\n                                    }}\n                                    render={({ field }) => (\n                                      <Select\n                                        {...field}\n                                        className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                        getPopupContainer={(trigger) => trigger.parentNode}\n                                        placeholder=\"Select isPercentage\"\n                                        showSearch\n              \n                                      >\n                                        <Select.Option value=\"\">Select isPercentage</Select.Option>\n                                        <Select.Option value=\"true\">Active</Select.Option>\n                                        <Select.Option value=\"false\">Inactive</Select.Option>                          \n                                      </Select>\n                                    )}\n                                  />\n              {errors.isPercentage && (\n                <p className=\"text-red-500 text-sm\">{errors.isPercentage.message}</p>\n              )}\n            </div> */}\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>{(isPercentage === \"true\" || isPercentage === true) ? \"Amount %\" : \"Amount\"} </label>\n              <input\n                type=\"number\"\n                {...register(\"amount\", {\n                  required: \"amount is required\",\n                })}\n                className={`${inputClassName} ${errors.amount ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">{errors.amount.message}</p>\n              )}\n            </div> */}\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={allowanceLoading}\n              className={`${allowanceLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {allowanceLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateAllowance;\n"],"names":["CreateAllowance","loading","allowanceLoading","useSelector","state","allowance","register","handleSubmit","control","formState","errors","setValue","useForm","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","branchId","PDBranchId","allowanceName","allowanceCreate","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","message","_ref2","inputClassName","placeholder","Loader"],"sourceRoot":""}