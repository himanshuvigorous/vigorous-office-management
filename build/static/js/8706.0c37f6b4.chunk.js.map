{"version":3,"file":"static/js/8706.0c37f6b4.chunk.js","mappings":"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","sources":["pages/visitorManagement/visitorCategories/CreateVisitorCategories.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n//import { createDesignation } from \"./designationFeatures/_designation_reducers\";\n\nimport { domainName, inputClassName, inputClassNameSearch, inputLabelClassName } from \"../../../constents/global\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { createVisitorCat } from \"./visitorCategoryFeatures/_visitor_categories_reducers\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\n\nfunction CreateTaskType() {\n  const { register, handleSubmit,\n    setValue,\n    getValues,\n    unregister,\n    watch,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType\n  } = getUserIds();\n\n  const { companyList } = useSelector((state) => state.company);\n  const { departmentListData } = useSelector((state) => state.department);\n  const { gstTypeList } = useSelector(state => state.gstType)\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { branchList } = useSelector(\n    (state) => state.branch\n  );\n  const companyId = useWatch({\n    control,\n    name: \"companyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"branchId\",\n    defaultValue: userBranchId,\n  });\n\n  useEffect(() => {\n    if (userType === \"admin\") {\n      dispatch(companySearch({ text: \"\", sort: true, status: true, isPagination: false }));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (companyId || userType === \"company\" || userType === \"companyDirector\") {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          companyId: companyId,\n          isPagination:false,\n        })\n      );\n    }\n  }, [companyId])\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: companyId,\n      directorId: '',\n      branchId: branchId,\n      \"name\": data?.visitorCatName,\n    };\n\n    dispatch(createVisitorCat(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/visitor-category\");\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"companyId\", {\n                  required: \"Company is required\",\n                })}\n                className={` ${inputClassName} ${errors.companyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Company\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>\n                    {type?.fullName}({type?.userName})\n                  </option>\n                ))}\n              </select>\n\n              {errors.companyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.companyId.message}\n                </p>\n              )}\n            </div>}\n\n            {(userType === \"admin\" || userType === \"company\" || userType === \"companyDirector\") &&\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Branch<span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"branchId\", {\n                    required: \"Branch is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.branchId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Branch\n                  </option>\n                  {branchList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select>\n                {errors.branchId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.branchId.message}\n                  </p>\n                )}\n              </div>}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Visitor Category Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"visitorCatName\", {\n                  required: \"Visitor Category Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.visitorCatName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Visitor Category Name\"\n              />\n              {errors.designationName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.visitorCatName.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default CreateTaskType;\n"],"names":["register","handleSubmit","setValue","getValues","unregister","watch","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","companyList","useSelector","state","company","departmentListData","department","gstTypeList","gstType","navigate","useNavigate","dispatch","useDispatch","branchList","JSON","parse","localStorage","getItem","concat","domainName","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","companySearch","text","sort","status","isPagination","branchSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","directorId","visitorCatName","createVisitorCat","then","error","inputLabelClassName","_objectSpread","required","inputClassName","value","map","type","_id","fullName","userName","message","placeholder","designationName"],"sourceRoot":""}