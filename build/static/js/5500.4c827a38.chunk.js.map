{"version":3,"file":"static/js/5500.4c827a38.chunk.js","mappings":"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","sources":["pages/global/other/employeeDocument/UpdateEmployeeDocuments.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../../constents/global\";\nimport {\n  getEmployeeDocDetails,\n  updateEmployeeDoc,\n} from \"./EmployeeDocumentFeatures/_emp_document_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nconst UpdateEmployeeDocuments = () => {\n  const { loading: employeeDocumentLoading } = useSelector(\n    (state) => state.employeeDocument\n  );\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { empDocEnc } = useParams();\n  const empDocId = decrypt(empDocEnc);\n  const { employeeDocDetails } = useSelector((state) => state.employeeDocument);\n  useEffect(() => {\n    let reqData = {\n      _id: empDocId,\n    };\n    dispatch(getEmployeeDocDetails(reqData));\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (employeeDocDetails) {\n      setValue(\"employeeDocumentName\", employeeDocDetails?.name);\n      setValue(\"PDCompanyId\", employeeDocDetails?.companyId);\n      setValue(\"status\", employeeDocDetails?.status);\n      setValue(\"type\", employeeDocDetails?.type);\n    }\n  }, [employeeDocDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n\n      _id: empDocId,\n      companyId: employeeDocDetails?.companyId ?? \"\",\n      directorId: null,\n      name: data?.employeeDocumentName,\n      status: data?.status,\n      type: data?.type\n    };\n\n    dispatch(updateEmployeeDoc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company\n              </label>\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    placeholder={'select company'}\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option value={\" \"} disabled>\n                      <ListLoader />\n                    </Select.Option> : sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Type <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"type\"\n                control={control}\n                rules={{ required: \"Type is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.type ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Type\"\n                    showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                  >\n                    <Select.Option value=\"\">Select Type</Select.Option>\n                    <Select.Option value=\"Financial\">Financial</Select.Option>\n                    <Select.Option value=\"General\">General</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.type && <p className=\"text-red-500 text-sm\">{errors.type.message}</p>}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"employeeDocumentName\", {\n                  required: \"Employee document is required\",\n                })}\n                className={` ${inputClassName} ${errors.employeeDocumentName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Employee document Name\"\n              />\n              {errors.employeeDocumentName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.employeeDocumentName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Status\"\n                    showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                  >\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={employeeDocumentLoading}\n              className={`${employeeDocumentLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 mt-3 px-4 rounded`}\n            >\n              {employeeDocumentLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default UpdateEmployeeDocuments;\n"],"names":["UpdateEmployeeDocuments","loading","employeeDocumentLoading","useSelector","state","employeeDocument","register","handleSubmit","setValue","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","empDocEnc","useParams","empDocId","decrypt","employeeDocDetails","useEffect","reqData","_id","getEmployeeDocDetails","userType","companySearch","text","sort","status","isPagination","name","companyId","type","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_employeeDocDetails$c","finalPayload","directorId","employeeDocumentName","updateEmployeeDoc","then","error","inputLabelClassName","Controller","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","defaultValue","inputAntdSelectClassName","placeholder","Option","value","disabled","ListLoader","sortByPropertyAlphabetically","map","fullName","PDCompanyId","message","rules","required","_ref2","showSearch","filterOption","input","option","String","toLowerCase","includes","inputClassName","_ref3","Loader"],"sourceRoot":""}