{"version":3,"file":"static/js/4441.ec78e1f2.chunk.js","mappings":"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","sources":["pages/hr/attendance/ManualEmployeeAttendanceModal.js","pages/hr/attendance/AttendanceManagment.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Controller, useForm, useWatch } from 'react-hook-form';\nimport moment from 'moment';\nimport { employeSearch } from '../../employeManagement/employeFeatures/_employe_reducers';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, inputLabelClassNameReactSelect } from '../../../constents/global';\nimport { companySearch } from '../../company/companyManagement/companyFeatures/_company_reducers';\nimport { deptSearch } from '../../department/departmentFeatures/_department_reducers';\nimport { branchSearch } from '../../branch/branchManagement/branchFeatures/_branch_reducers';\nimport { attendancegCreate } from './AttendanceFeatures/_attendance_reducers';\nimport { useNavigate } from 'react-router-dom';\nimport { Modal, Select, TimePicker } from 'antd';\nimport Swal from 'sweetalert2';\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker.js\";\nimport dayjs from 'dayjs';\nimport Loader from '../../../global_layouts/Loader.js';\nimport { timeSlotSearch } from '../../timeSlot/timeSlotsFeatures/_timeSlots_reducers.js';\nimport { getOnBoardingDetails } from '../onBoarding/onBoardingFeatures/_onBoarding_reducers.js';\n\nconst ManualEmployeeAttendanceModal = ({ isOpen, onClose, fetchattendanceListData }) => {\n    const onBoardingId = JSON.parse(localStorage.getItem(`user_info_${domainName}`))?.onboardingId;\n  const { loading: attendanceLoading } =\n    useSelector((state) => state.attendance);\n  const Option = Select.Option;\n        const { timeSlotsListData } = useSelector(state => state.timeSlots)\n          const { onBoardingDetailsData } = useSelector((state) => state.onBoarding);\n  const { register, handleSubmit, control, setValue, reset, watch , formState: { errors } } = useForm({\n    defaultValues: {\n      employeeName: '',\n      date: '',\n      checkInTime: '',\n      checkOutTime: '',\n      reason: '',\n      errors: {},\n    }\n  });\n\nuseEffect(()=>{\n  fetchTimeSlotFunc()\n},[])\n\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const dispatch = useDispatch();\nconst parseToISOString = (date, timeStr) => {\n  if (!timeStr) return null;\n  const formattedDate = dayjs(date).format('YYYY-MM-DD');\n  const trimmedTime = timeStr.trim();\n  const hasAMPM = /AM|PM/i.test(trimmedTime);\n  const format = hasAMPM ? 'YYYY-MM-DD HH:mm A' : 'YYYY-MM-DD HH:mm';\n  const dateTimeString = `${formattedDate} ${trimmedTime}`;\n\n  const parsed = moment(dateTimeString, format, true); // strict parsing\n  if (!parsed.isValid()) {\n    return null;\n  }\n  return parsed.toISOString();\n};\n  const onFormSubmit = (data) => {\n    const reqData = {\n      employeId: userInfoglobal?.userType === \"employee\" ? userInfoglobal?._id : data?.employeeId,\n      companyId: userInfoglobal?.companyId,\n      branchId: userInfoglobal?.branchId,\n      directorId: userInfoglobal?.directorId,\n      attendanceDate: dayjs(data.checkInTime).format('YYYY-MM-DD'),\n     checkInTime: data?.checkInTime ? data?.checkInTime : null,\n    checkOutTime: data.checkOutTime ? data?.checkOutTime : null,\n      method: \"employeReq\",\n      reason: data.reason,\n      employeeName: userInfoglobal?.fullName,\n      shift: data.shift,\n    };\n\n    dispatch(attendancegCreate(reqData)).then((response) => {\n      if (!response.error) {\n \n        Swal.fire({\n          icon: 'success',\n          title: 'Success!',\n          text: 'Attendance record has been created successfully.',\n          confirmButtonText: 'OK',\n          customClass: {\n            confirmButton: 'bg-header text-white hover:bg-[#063156]',\n          },\n        });\n\n        // Call the function to fetch attendance data and close the modal\n        fetchattendanceListData();\n        onClose();\n      }\n      //  else {\n      //   // If there's an error, show an error alert (optional)\n      //   Swal.fire({\n      //     icon: 'error',\n      //     title: 'Error!',\n      //     text: 'There was an issue with the API call. Please try again.',\n      //     confirmButtonText: 'OK',\n      //     customClass: {\n      //       confirmButton: 'bg-[#FF0000] text-white hover:bg-[#d9534f]',\n      //     },\n      //   });\n      // }\n    });\n  };\n\nconst fetchTimeSlotFunc = ()=>{\n     dispatch(timeSlotSearch({\n          directorId: '',\n          companyId:  userInfoglobal?.companyId,\n          branchId:   userInfoglobal?.branchId,\n          text: \"\",\n          sort: true,\n          status: \"\",\n          isPagination: false,\n        })).then((data)=>{\n          if(!data?.error){\n            dispatch(getOnBoardingDetails({_id: onBoardingId})).then(response=>{\n              if(!response?.error){\n                setValue(\"employeeName\", response?.payload?.data?.employeeName);\n              }\n            })\n          }\n        })\n        setValue(\"shift\", onBoardingDetailsData?.shift)\n  }\n  if (!isOpen) return null;\n  return (\n\n    <Modal\n      visible={isOpen}\n      onCancel={() => {\n        onClose();\n        reset()\n      }}\n      footer={null}\n       className=\"antmodalclassName\"\n      title=\"Manual Attendence\"\n      width={600}\n      height={400}\n    >\n      <div>\n        <form autoComplete=\"off\" onSubmit={handleSubmit(onFormSubmit)} className=\"\">\n          <div className=\"grid grid-col-1 md:grid-cols-2 gap-4\">\n\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>Date < span className=\"text-red-600\" >* </span></label>\n              <Controller\n                name=\"date\"\n                control={control}\n                rules={{ required: \"Date is required\" }}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} disabledDate={(current) => {\n                    const today = moment();\n                    return current && (\n                      current.isAfter(today, 'day') ||\n                      !current.isSame(today, 'month')\n                    );\n                  }} />\n                )}\n              />\n              {errors.date && <p className=\"text-red-500 text-sm\">Date is required</p>}\n            </div> */}\n\n<div>\n              <label className={`${inputLabelClassName}`}>\n                Check-in Time <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"checkInTime\"\n                control={control}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY HH:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      const today = moment();\n                      return current && (\n                        current.isAfter(today, 'day') ||\n                        !current.isSame(today, 'month')\n                      );\n                    }}\n                  />\n                )}\n              />\n              {errors.checkInTime && (\n                <p className=\"text-red-500 text-sm\">Check-in time is required</p>\n              )}\n            </div>\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Check-out Time <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"checkOutTime\"\n                control={control}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <CustomDatePicker\n                  field={field}\n                  showTime={true}\n                  format=\"DD/MM/YYYY HH:mm\"\n                  errors={errors}\n                  disabledDate={(current) => {\n                    const selectedDate = watch('checkInTime'); // should be a dayjs object or parse it\n                    if (!selectedDate) return true; // Disable all if no date selected\n                \n                    const selected = dayjs(selectedDate).startOf('day');\n                    const oneExyytaDay = selected.add(1, 'day');\n                \n                    return (\n                      !current.isSame(selected, 'day') &&\n                      !current.isSame(oneExyytaDay, 'day')\n                    );\n                  }}\n                />\n                )}\n              />\n              {errors.checkOutTime && (\n                <p className=\"text-red-500 text-sm\">Check-out time is required</p>\n              )}\n            </div>\n            \n             <div className=\"\">\n                                {/* Select Shift */}\n                                <label className={`${inputLabelClassName}`}>\n                                  Select Shift <span className=\"text-red-600\">*</span>\n                                </label>\n                                <Controller\n                                  name=\"shift\"\n                                  control={control}\n                                  rules={{ required: \"Shift is required\" }}\n                                  render={({ field }) => (\n                                    <Select\n                                      {...field}\n                                      className={`${inputAntdSelectClassName} ${errors.shift ? '' : 'border-gray-300'}`}\n                                      placeholder=\"Select Shift\"\n                                      showSearch\n                                      getPopupContainer={() => document.body}\n                                      dropdownStyle={{ zIndex: 2000 }}\n                                      filterOption={(input, option) =>\n                                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                      }\n            \n                                    >\n                                      <Option value=\"\">Select Shift</Option>\n                                      {timeSlotsListData?.map((type) => \n                                        <Option key={type?._id} value={type?._id}>\n                                          {type?.shiftName}\n                                        </Option>\n                                      )}\n                                    </Select>\n                                  )}\n                                />\n            \n                                {errors.shift && (\n                                  <p className=\"text-red-500 text-sm\">\n                                    {errors.shift.message}\n                                  </p>\n                                )}\n                              </div>\n\n            <div>\n              <label className={`${inputLabelClassName}`}>Reason < span className=\"text-red-600\" >* </span></label>\n              <input\n                type=\"text\"\n                {...register('reason', { required: true })}\n                className={`${inputClassName} ${errors.reason ? \"border-[1px] \" : \"border-gray-300\"}`}\n                rows=\"3\"\n              />\n              {errors.reason && <p className=\"text-red-500 text-sm\">Reason is required</p>}\n            </div>\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>Day Status</label>\n              <select\n                {...register(\"status\", { required: \"Day Status is required\" })}\n                className={`${inputClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select DayStatus</option>\n                {[\"firstHalf\" , \"secondHalf\" , \"fullDay\" , \"present\" , \"leave\" , \"absent\"].map((type) => (\n                  <option key={type} value={type}>\n                    {type}\n                  </option>\n                ))}\n              </select>\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div> */}\n          </div>\n\n          <div className=\"flex justify-end space-x-2 mt-4\">\n            <button\n              type=\"submit\"\n              disabled={attendanceLoading}\n              className={`${attendanceLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {attendanceLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n    //   </div>\n    // </div>\n\n  );\n};\n\nexport default ManualEmployeeAttendanceModal;\n","import React, { useEffect, useState } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaPlus } from \"react-icons/fa6\";\nimport {\n  FaAngleUp,\n  FaAngleDown,\n} from \"react-icons/fa\";\nimport CustomPagination from \"../../../component/CustomPagination/CustomPagination\";\nimport moment from \"moment/moment\";\nimport { convertMinutesToHoursAndMinutes, domainName, handleSortLogic, inputAntdSelectClassNameFilter } from \"../../../constents/global\";\nimport { getattendanceListForEmployee, } from \"./AttendanceFeatures/_attendance_reducers\";\nimport dayjs from \"dayjs\";\nimport { Select, Tooltip } from \"antd\";\nimport ManualEmployeeAttendanceModal from \"./ManualEmployeeAttendanceModal\";\nimport usePermissions from \"../../../config/usePermissions\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nfunction AttendanceManagment() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const { attendanceListForEmployee, totalattendancegCountForEmployee, loading } =\n    useSelector((state) => state.attendance);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const [currentPage, setCurrentPage] = useState(1);\n  const [filterText, setFilterText] = useState(\"\");\n  const [debouncedFilterText, setDebouncedFilterText] = useState(filterText);\n  const [isManualModalOpen, setIsManualModalOpen] = useState(false);\n  const { control, setValue, formState: { errors }, } = useForm();\n\n  const startDate = useWatch({\n    control,\n    name: \"startDate\",\n    defaultValue: \"\",\n  });\n\n\n  const endDate = useWatch({\n    control,\n    name: \"endDate\",\n    defaultValue: \"\",\n  });\n    const status = useWatch({\n    control,\n    name: \"status\",\n    defaultValue: [\"present\"],\n  });\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedFilterText(filterText);\n    }, 500);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [filterText]);\n\n\n  const onPaginationChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const pageSize = 30;\n\n  const [searchText, setSearchText] = useState(\"\");\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"employee\" && userInfoglobal?._id) {\n\n      fetchattendanceListData(debouncedFilterText);\n    }\n  }, [currentPage, debouncedFilterText, searchText, status, startDate, endDate]);\n  const fetchattendanceListData = () => {\n    let reqData = {\n      currentPage: currentPage,\n      pageSize: pageSize,\n      reqPayload: {\n        shift: \"\",\n        workType: \"\",\n        text: searchText,\n        status: '',\n        isPresentDay: status ? status : '',\n        sort: true,\n        startDate: startDate ? dayjs(startDate)?.format(\"YYYY-MM-DD\") : null,\n        endDate: endDate ? dayjs(endDate)?.format(\"YYYY-MM-DD\") : null,\n        isPagination: true,\n        companyId:\n          userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n        employeId:\n          userInfoglobal?.userType === \"employee\" ? userInfoglobal?._id : null,\n      },\n    };\n    dispatch(getattendanceListForEmployee(reqData));\n  };\n\n\n  const { canCreate, canRead, canUpdate, canDelete } = usePermissions();\n  const [sortedList, setSortedList] = useState([]);\n\n  useEffect(() => {\n\n    if (attendanceListForEmployee) {\n      handleSort();\n    }\n  }, [attendanceListForEmployee]);\n\n  const handleSort = (key, order) => {\n    const sortedList = handleSortLogic(key, order, attendanceListForEmployee);\n    setSortedList(sortedList);\n  };\n  const onChange = (e) => {\n\n    setSearchText(e);\n  };\n\n\n  if (userInfoglobal?.userType !== \"employee\") {\n    return (\n      <GlobalLayout>\n        <div className=\"bg-red-100 text-red-800 p-4 rounded-md mt-2\">\n          <p className=\"text-center font-semibold\">\n            You are not an employee. This page is viewable for employees only.\n          </p>\n        </div>\n      </GlobalLayout>\n    );\n  }\n\n\n  return (\n    <GlobalLayout onChange={onChange}>\n      <div className=\"bg-grey-100 w-full p-1 mt-3\">\n        <div className=\"\">\n          <div className=\"xl:flex justify-between items-center md:space-y-0 space-y-1.5 py-1\">\n            <div className=\"sm:flex justify-start items-center sm:space-x-2 space-x-0 sm:space-y-0 space-y-1.5\">\n\n              <div>\n                <Controller\n                  name=\"startDate\"\n                  control={control}\n                  render={({ field }) => (\n                    <CustomDatePicker\n                      report={true}\n                      defaultValue={dayjs().subtract(1, 'month')}\n                      size={\"middle\"} field={field} errors={errors} />\n                  )}\n                />\n              </div>\n              <Controller\n                name=\"status\"\n                control={control}\n                rules={{}}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                     mode=\"multiple\"\n                    className={` inputAntdMultiSelectClassNameFilterReport ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                    placeholder=\"Select Status\"\n                    defaultValue={'present'}\n                    showSearch\n                  >\n                    <Select.Option value=\"\">Select Status</Select.Option>\n\n                    <Select.Option value=\"present\"> Present </Select.Option>\n                    <Select.Option value=\"firstHalf\">\n                      {\" \"}\n                      First Half{\" \"}\n                    </Select.Option>\n                    <Select.Option value=\"secondHalf\">\n                      {\" \"}\n                      Second Half{\" \"}\n                    </Select.Option>\n                    <Select.Option value=\"leave\">\n                      {\" \"}\n                      Leave{\" \"}\n                    </Select.Option>\n                    <Select.Option value=\"absent\">\n                      {\" \"}\n                      Absent{\" \"}\n                    </Select.Option>\n                    <Select.Option value=\"off\">\n                      {\" \"}\n                      OFF{\" \"}\n                    </Select.Option>\n                    <Select.Option value=\"holiday\">\n                      {\" \"}\n                      holiday{\" \"}\n                    </Select.Option>\n                  </Select>\n                )}\n              />\n\n\n              <div>\n                <Controller\n                  name=\"endDate\"\n                  control={control}\n                  render={({ field }) => (\n                    <CustomDatePicker report={true}\n                      defaultValue={dayjs()}\n                      size={\"middle\"} field={field} errors={errors} />\n                  )}\n                />\n              </div>\n            </div>\n            {/* <div className=\"flex justify-end items-center gap-2\">\n              <button\n                onClick={() => {\n                  setValue(\"PDBranchId\", \"\");\n                  setValue(\"PdCompanyId\", \"\");\n                  setValue(\"status\", \"\");\n                  setValue(\"isVerified\", \"\");\n                  setValue(\"startDate\", dayjs());\n                  setValue(\"endDate\", dayjs());\n                }}\n                className=\"bg-header py-[5px] rounded-md flex px-5 justify-center items-center  text-white\"\n              >\n                <span className=\"text-[12px]\">Reset</span>\n              </button>\n              {canCreate && <Tooltip placement=\"topLeft\"  title=\"Add Manual Attendence\">\n                <button\n                  onClick={() => setIsManualModalOpen(true)}\n                  className=\"bg-header px-2 py-1.5 rounded-md flex justify-center items-center space-x-2 text-white\"\n                >\n                  <FaPlus />\n                  <span className=\"text-[12px]\">Manual Attendance</span>\n                </button>\n              </Tooltip>}\n            </div> */}\n\n          </div>\n          <div className=\"flex justify-end items-center gap-2\">\n              <button\n                onClick={() => {\n                  setValue(\"PDBranchId\", \"\");\n                  setValue(\"PdCompanyId\", \"\");\n                  setValue(\"status\", ['present']);\n                  setValue(\"isVerified\", \"\");\n                  setValue(\"startDate\", dayjs());\n                  setValue(\"endDate\", dayjs());\n                }}\n                className=\"bg-header py-[5px] rounded-md flex px-5 justify-center items-center  text-white\"\n              >\n                <span className=\"text-[12px]\">Reset</span>\n              </button>\n              {canCreate && <Tooltip placement=\"topLeft\"  title=\"Add Manual Attendence\">\n                <button\n                  onClick={() => setIsManualModalOpen(true)}\n                  className=\"bg-header px-2 py-1.5 rounded-md flex justify-center items-center space-x-2 text-white\"\n                >\n                  <FaPlus />\n                  <span className=\"text-[12px]\">Manual Attendance</span>\n                </button>\n              </Tooltip>}\n            </div>\n        </div>\n        <div className=\"bg-[#ffffff]  w-full overflow-x-auto mt-1 rounded-xl\">\n          {canRead && <table className=\"w-full max-w-full rounded-xl overflow-x-auto\">\n            <thead>\n              <tr className=\"border-b-[1px] border-[#DDDDDD] capitalize bg-header text-white font-[500] h-[40px]\">\n                <th className=\"tableHead w-[5%]\">\n                  S.No.\n                </th>\n                <th className=\"tableHead \">\n                  <div className=\"flex justify-start items-center gap-1\">\n                    Attendance Date\n                    <div className=\"flex flex-col -space-y-1.5 cursor-pointer\">\n                      <FaAngleUp\n                        onClick={() => handleSort(\"attendanceDate\", \"asc\")}\n                      />\n                      <FaAngleDown\n                        onClick={() => handleSort(\"attendanceDate\", \"desc\")}\n                      />\n                    </div>\n                  </div>\n                </th>\n\n                <th className=\"tableHead\">\n                  <div className=\"flex gap-1\">\n                    Check-In Time\n\n                    <div className=\"flex flex-col -space-y-1.5 cursor-pointer\">\n                      <FaAngleUp\n                        onClick={() => handleSort(\"checkInTime\", \"asc\")}\n                      />\n                      <FaAngleDown\n                        onClick={() => handleSort(\"checkInTime\", \"desc\")}\n                      />\n                    </div>\n                  </div>\n\n                </th>\n                <th className=\"tableHead\">\n                  <div className=\"flex gap-1\">\n                    Check-Out Time\n\n                    <div className=\"flex flex-col -space-y-1.5 cursor-pointer\">\n                      <FaAngleUp\n                        onClick={() => handleSort(\"checkOutTime\", \"asc\")}\n                      />\n                      <FaAngleDown\n                        onClick={() => handleSort(\"checkOutTime\", \"desc\")}\n                      />\n                    </div>\n                  </div>\n                </th>\n                <th className=\"tableHead\">\n                  <div className=\"flex gap-1\">\n                    Worked Hours (HH:MM)\n                  </div>\n                </th>\n                <th className=\"tableHead\">\n                  Pending Hours (HH:MM)\n                </th>\n                <th className=\"tableHead\">\n                  Overtime Hours (HH:MM)\n                </th>\n                <th className=\"tableHead\">Is WFH</th>\n                <th className=\"tableHead\">Status</th>\n                <th className=\"tableHead\">Is Verified</th>\n              </tr>\n            </thead>\n            {loading ? (\n              <tr className=\"bg-white bg-opacity-5 \">\n                <td\n                  colSpan={10}\n                  className=\"px-6 py-2 whitespace-nowrap text-center font-[600] text-sm text-gray-500\"\n                >\n                  <ListLoader />\n                </td>\n              </tr>\n            ) : <tbody>\n              {sortedList && sortedList?.length > 0 ? (\n                sortedList?.map((element, index) => (\n                  <tr\n                    className={`border-b-[1px] ${index % 2 === 0 ? \"bg-[#e9ecef]/80\" : \"bg-white\"\n                      } border-[#DDDDDD] text-[#374151]`}\n                  >\n                    <td className=\"tableData\">\n                      {index + 1 + (currentPage - 1) * pageSize}\n                    </td>\n\n                    <td className=\"tableData\">\n                      {moment(element.attendanceDate).format(\"DD-MM-YYYY\")}\n                    </td>\n                    <td className=\"tableData\">\n                      {element.checkInTime\n                        ? dayjs(element.checkInTime).format('DD-MM-YYYY hh:mm A')\n                        : \"-\"}\n                    </td>\n                    <td className=\"tableData\">\n                      {element.checkOutTime\n                        ? dayjs(element.checkOutTime).format('DD-MM-YYYY hh:mm A')\n                        : \"-\"}\n                    </td>\n\n                    <td className=\"tableData\">\n                      {convertMinutesToHoursAndMinutes(element.workedHRS)}\n                    </td>\n\n                    <td className=\"tableData\">\n                      {convertMinutesToHoursAndMinutes(element.pendingHRS)}\n                    </td>\n\n                    <td className=\"tableData\">\n                      {convertMinutesToHoursAndMinutes(element.overtimeHRS)}\n                    </td>\n\n                    <td className=\"tableData\">{element.isWFHapplied ? \"Yes\" : \"No\"}</td>\n\n\n                    <td className=\"tableData\">\n                      <span\n                        className={\n                          (() => {\n                            switch (element.isPresentDay) {\n                              case \"present\":\n                                return \"bg-[#E0FFBE] border-green-500\"; // Green for present\n                              case \"absent\":\n                                return \"bg-red-200 border-red-500\"; // Red for absent\n                              case \"leave\":\n                                return \"bg-yellow-300 border-yellow-500\"; // Yellow for leave\n                              case \"off\":\n                                return \"bg-gray-300 border-gray-500\"; // Gray for off\n                              case \"holiday\":\n                                return \"bg-blue-200 border-blue-500\"; // Blue for holiday\n                              case \"firstHalf\":\n                                return \"bg-orange-200 border-orange-500\"; // Orange for first half\n                              case \"secondHalf\":\n                                return \"bg-purple-200 border-purple-500\"; // Purple for second half\n                              default:\n                                return \"bg-white border-gray-400\"; // Default case for undefined states\n                            }\n                          })() +\n                          \" border-[1px] px-2 py-1.5 rounded-lg text-black text-[12px] capitalize\"\n                        }\n                      >\n                        {element.isPresentDay}\n                      </span>\n                    </td>\n                    <td className=\"tableData\">{element.status ? \"Yes\" : 'No'}</td>\n                  </tr>\n                ))\n              ) : (\n                <tr className=\"bg-white bg-opacity-5\">\n                  <td\n                    colSpan={15}\n                    className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\"\n                  >\n                    Record Not Found\n                  </td>\n                </tr>\n              )}\n            </tbody>}\n          </table>}\n        </div>\n        <CustomPagination\n          totalCount={totalattendancegCountForEmployee}\n          pageSize={pageSize}\n          currentPage={currentPage}\n          onChange={onPaginationChange}\n        />\n        {isManualModalOpen && (\n          <ManualEmployeeAttendanceModal\n            isOpen={true}\n            onClose={() => setIsManualModalOpen(false)}\n\n            fetchattendanceListData={fetchattendanceListData}\n          />\n        )}\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default AttendanceManagment;\n"],"names":["_ref","_JSON$parse","isOpen","onClose","fetchattendanceListData","onBoardingId","JSON","parse","localStorage","getItem","concat","domainName","onboardingId","loading","attendanceLoading","useSelector","state","attendance","Option","Select","timeSlotsListData","timeSlots","onBoardingDetailsData","onBoarding","register","handleSubmit","control","setValue","reset","watch","formState","errors","useForm","defaultValues","employeeName","date","checkInTime","checkOutTime","reason","useEffect","fetchTimeSlotFunc","userInfoglobal","dispatch","useDispatch","timeSlotSearch","directorId","companyId","branchId","text","sort","status","isPagination","then","data","error","getOnBoardingDetails","_id","response","_response$payload","_response$payload$dat","payload","shift","_jsx","Modal","visible","onCancel","footer","className","title","width","height","children","_jsxs","autoComplete","onSubmit","reqData","employeId","userType","employeeId","attendanceDate","dayjs","format","method","fullName","attendancegCreate","Swal","icon","confirmButtonText","customClass","confirmButton","inputLabelClassName","Controller","name","rules","required","render","_ref2","field","CustomDatePicker","showTime","disabledDate","current","today","moment","isAfter","isSame","_ref3","selectedDate","selected","startOf","oneExyytaDay","add","_ref4","_objectSpread","inputAntdSelectClassName","placeholder","showSearch","getPopupContainer","document","body","dropdownStyle","zIndex","filterOption","input","option","String","toLowerCase","includes","value","map","type","shiftName","message","inputClassName","rows","disabled","Loader","useNavigate","attendanceListForEmployee","totalattendancegCountForEmployee","currentPage","setCurrentPage","useState","filterText","setFilterText","debouncedFilterText","setDebouncedFilterText","isManualModalOpen","setIsManualModalOpen","startDate","useWatch","defaultValue","endDate","timer","setTimeout","clearTimeout","searchText","setSearchText","_dayjs","_dayjs2","pageSize","reqPayload","workType","isPresentDay","getattendanceListForEmployee","canCreate","canRead","canUpdate","canDelete","usePermissions","sortedList","setSortedList","handleSort","key","order","handleSortLogic","GlobalLayout","onChange","e","report","subtract","size","mode","PDPlan","onClick","Tooltip","placement","FaPlus","FaAngleUp","FaAngleDown","colSpan","ListLoader","length","element","index","convertMinutesToHoursAndMinutes","workedHRS","pendingHRS","overtimeHRS","isWFHapplied","CustomPagination","totalCount","page","ManualEmployeeAttendanceModal"],"sourceRoot":""}