{"version":3,"file":"static/js/4825.08922403.chunk.js","mappings":"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","sources":["pages/global/other/companyPage/CreateCompanyPage.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n// import { createTaskFunc } from \"../../redux/_reducers/_task_reducers\";\n// import { createCountryFunc } from \"./CountryFeatures/_country_reducers\";\nimport {\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { companyPageCreate } from \"./CompanyPageFeatures/_companyPage_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ReactQuill from \"react-quill\";\nimport { useState } from \"react\";\nimport { Select } from \"antd\";\nimport { Option } from \"antd/es/mentions\";\n\nfunction CreateCompanyPage() {\n  const { loading: pageLoading } = useSelector((state) => state.page);\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const [editorValue, setEditorValue] = useState(``);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const onSubmit = (data) => {\n    const finalPayload = {\n      title: data.title,\n      content: editorValue,\n      \"metaData\": {\n        \"title\": data?.metatitle,\n        \"description\": data?.metadescription,\n        \"keywords\": data?.metakeywords\n          .split(\",\") // Split the string by commas\n          .map((keyword) => keyword.trim())\n      },\n      status: data?.status === \"true\" ? true : false,\n      type: data?.type,\n    };\n \n    dispatch(companyPageCreate(finalPayload)).then((data) => {\n      !data.error && navigate(-1);\n    });\n  };\n\n  const handleEditorChange = (value) => {\n    setEditorValue(value);\n  };\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {/* Title Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", { required: \"Title is required\" })}\n                className={`${errors.title ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n                placeholder=\"Enter Page Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n\n            {/* Content Field */}\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                Content <span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n                {...register(\"content\", { required: \"Content is required\" })}\n                className={`${errors.content ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n                placeholder=\"Enter Page Content\"\n              />\n              {errors.content && (\n                <p className=\"text-red-500 text-sm\">{errors.content.message}</p>\n              )}\n            </div> */}\n          </div>\n\n          <div className=\"mt-2 col-span-2\">\n            <label className={`${inputLabelClassName}`}>\n              Content <span className=\"text-red-600\">*</span>\n            </label>\n            <ReactQuill\n              value={editorValue}\n              onChange={handleEditorChange}\n              placeholder=\"Write Your page view here\"\n              modules={{\n                toolbar: [\n                  [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n                  [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                  ['bold', 'italic', 'underline', 'strike'],\n                  [{ 'align': [] }],\n                  ['link', 'image', 'video'],\n                  ['blockquote', 'code-block'],\n                  ['clean']\n                ],\n              }}\n              formats={['header', 'font', 'list', 'bold', 'italic', 'underline', 'link', 'align', 'clean']}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n\n            <div>\n              <label className={`${inputLabelClassName}`}>Meta Title</label>\n              <input\n                type=\"text\"\n                {...register(\"metatitle\", {\n                  required: \"Meta Title is required\",\n                })}\n                className={`${errors.metatitle ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n                placeholder=\"Enter Meta Title\"\n              />\n              {errors.metatitle && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.metatitle.message}\n                </p>\n              )}\n            </div>\n            {/* Meta Description Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Meta Description\n              </label>\n              <textarea\n                {...register(\"metadescription\", {\n                  required: \"Meta Description is required\",\n                })}\n                className={`${errors.metadescription ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n                placeholder=\"Enter Meta Description\"\n              />\n              {errors.metadescription && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.metadescription.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n\n            {/* Meta Keywords Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Meta Keywords</label>\n              <input\n                type=\"text\"\n                {...register(\"metakeywords\", {\n                  required: \"Meta Keywords is required\",\n                })}\n                className={`${errors.metakeywords ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n                placeholder=\"Enter Meta Keywords (comma separated)\"\n              />\n              {errors.metakeywords && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.metakeywords.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Type <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"type\"\n                control={control}\n                rules={{ required: \"Type is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`mt-0 ${inputAntdSelectClassName} ${errors.type ? '' : 'border-gray-300'}`}\n                    placeholder=\"Select Type\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Option value=\"\">Select Type</Option>\n                    <Option value=\"lendingPage\">Lending Page</Option>\n                    <Option value=\"page\">page</Option>\n                  </Select>\n                )}\n              />\n\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.type.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {/* Status Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"status\"\n                control={control}\n                rules={{ required: \"Status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`mt-0 ${inputAntdSelectClassName} ${errors.status ? '' : 'border-gray-300'}`}\n                    placeholder=\"Select Status\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Status</Select.Option>\n                    <Select.Option value={\"true\"}>Active</Select.Option>\n                    <Select.Option value={\"false\"}>Inactive</Select.Option>\n                  </Select>\n                )}\n              />\n\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.status.message}\n                </p>\n              )}\n            </div>\n\n          </div>\n\n\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={pageLoading}\n              className={`${pageLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {pageLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default CreateCompanyPage;\n"],"names":["loading","pageLoading","useSelector","state","page","register","control","handleSubmit","formState","errors","useForm","editorValue","setEditorValue","useState","dispatch","useDispatch","navigate","useNavigate","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","title","content","metatitle","metadescription","metakeywords","split","map","keyword","trim","status","type","companyPageCreate","then","error","concat","inputLabelClassName","_objectSpread","required","inputClassName","placeholder","message","ReactQuill","value","onChange","modules","toolbar","formats","Controller","name","rules","render","_ref","field","Select","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","_ref2","disabled","Loader"],"sourceRoot":""}