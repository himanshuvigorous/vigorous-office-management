{"version":3,"file":"static/js/9514.f45470f4.chunk.js","mappings":"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","sources":["pages/financeManagement/reciept/CreateReceipt.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { customDayjs, domainName, getDefaultFinacialYear, inputAntdSelectClassName, inputClassName, inputDisabledClassName, inputLabelClassName, inputLabelClassNameReactSelect, optionLabelForBankSlect, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { branchSearch, getBranchDetails } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport ReactSelect from \"react-select\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { createreceipt } from \"./receiptFeature/_receipt_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { officeAddressSearch } from \"../../global/other/officeAddressManagement/officeAddressFeature/_office_address_reducers\";\nimport { Select } from \"antd\";\nimport { invoiceSearch, } from \"../invoice/invoiceFeature/_invoice_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { MdDelete } from \"react-icons/md\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { showNotification } from \"../../../global_layouts/CustomNotification/NotificationManager\";\n\n\nconst CreateReceipt = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n    getValues\n  } = useForm({\n    defaultValues: {\n      heads: [{ headType: \"invoice\" ,financialYear:getDefaultFinacialYear()}],\n    },\n  });\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const groupName = useWatch({\n    control,\n    name: \"groupName\",\n    defaultValue: \"\",\n  });\n\n  const grandTotal = useWatch({\n    control,\n    name:'grandTotal',\n    defaultValue:''\n  })\n\n  const { loading: receiptLoading } = useSelector(\n    (state) => state.receipt\n  );\n\n\n  const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n\n  const { branchDetailsData } = useSelector((state) => state.branch);\n  const { employeList } = useSelector((state) => state.employe);\n    const { clientList, loading: clientLoading } = useSelector((state) => state.client);\n  const { clientGroupList, groupSearchLoading } = useSelector((state) => state.clientGroup);\n  const { invoiceListData, loading: invoiceLoading } = useSelector((state) => state.invoice);\n  const { departmentListData, loading: departmentLoading } = useSelector((state) => state.department);\n    const { officeAddressListData, loading: officeAddressLoading } = useSelector((state) => state.officeAddress);\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"heads\",\n  });\n  const onSubmit = (data) => {\n    const clientHeads = data?.heads\n      ?.filter((item) => item?.headType === \"invoice\")\n      ?.map((item) => ({\n        headType: \"invoice\",\n        invoiceId: item?.invoiceId,\n        subHeadId: null,\n        description: item?.description,\n        amount: +item?.amount,\n        financialYear: \"-\",\n        type: \"\",\n        monthName: \"\",\n        monthQuaters: \"\",\n      }));\n    const invoiceHeads = data?.heads\n      ?.filter((item) => item?.headType === \"client\")\n      ?.map((item) => ({\n        headType: item?.headType,\n        invoiceId: null,\n        subHeadId: item?.subHeadId,\n        description: item?.description,\n        amount: +item?.amount,\n        financialYear: item?.financialYear,\n        type: item?.type,\n        monthName: item?.monthName,\n        monthQuaters: item?.monthQuaters,\n      }));\n\n    const finalPayload = {\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? data?.PDCompanyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      directorId:\n        userInfoglobal?.userType === \"companyDirector\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.directorId,\n      branchId:\n        userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\" ||\n          userInfoglobal?.userType === \"company\"\n          ? data?.PDBranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n      receiptLayoutId: data?.invoiceLayout,\n      clientId: data?.client,\n      groupId: data?.groupName,\n      employeId: (grandTotal > 0) ? (data?.type === \"cash\" ? data?.employeeId?.value : ''):'',\n      bankAccId:grandTotal > 0 ? ( data?.type !== \"cash\" ? data?.bankId : '') : '',\n      naration: data?.naration,\n      advancedAvailableId: \"\",\n      heads: [...clientHeads, ...invoiceHeads],\n      date: customDayjs(data?.date),\n      subTotalAmount: data?.totalAmount,\n      isTDS: data?.isTDS ? data?.isTDS : false,\n      TDSAmount: data?.isTDS?  +data?.tds : 0,\n      isDiscount: data?.isDiscountApplicable,\n      discountAmount: data?.isDiscountApplicable ?  +data?.discount : 0,\n      advancedAvailable: data?.maxAdvance,\n      isAdvanced: data?.isAdvance ? data?.isAdvance : false,\n      advancedAdjust: +data?.advance,\n      totalAmount: data?.totalBeforeGrand,\n      grandTotalAmount: data?.grandTotal,\n      paymentmode: grandTotal > 0 ? (data?.type) :'',\n      chequeNumber:grandTotal > 0 ? (data?.type === \"cheque\" ? data?.chequeNo : '') :'',\n      transectionNumber: grandTotal > 0 ?(data?.type === \"bank\" ? data?.transactionNo :''):''\n    };\n    dispatch(createreceipt(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n  const handleAdvanceChange = (e) => {\n    if (!maxAdvance) {\n      showNotification({\n        message: 'No advance available',\n        type: 'success',\n      });\n      setValue('isAdvance', false);\n    } else {\n      setValue('isAdvance', e.target.checked);\n    }\n  };\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? CompanyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId]);\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  const handleNumberInput = (fieldName, maxValue = null) => (e) => {\n    let value = parseFloat(e.target.value) || 0;\n    if (value < 0) {\n      value = 0;\n    }\n    if (maxValue !== null && value > maxValue) {\n      value = maxValue;\n    }\n    setValue(fieldName, value, { shouldValidate: true });\n  };\n\n  const handleFocusClientGrp = () => {\n    dispatch(\n      clientGrpSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"admin\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    );\n  };\n  useEffect(() => {\n    if (\n      BranchId ||\n      (userInfoglobal?.userType !== \"company\" &&\n        userInfoglobal?.userType !== \"companyDirector\" &&\n        userInfoglobal?.userType !== \"admin\")\n    ) {\n      dispatch(\n        getBranchDetails({\n          _id:\n            userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\" ||\n              userInfoglobal?.userType === \"admin\"\n              ? BranchId\n              : userInfoglobal?.userType === \"companyBranch\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.branchId,\n        })\n      );\n    }\n  }, [BranchId]);\n  useEffect(() => {\n    if (\n      (CompanyId || userInfoglobal?.userType !== \"admin\") &&\n      (BranchId ||\n        userInfoglobal?.userType !== \"companBranch\" ||\n        userInfoglobal?.userType === \"employee\")\n    ) {\n      fetchEmployeListData();\n    }\n  }, [CompanyId, BranchId]);\n\n  const fetchEmployeListData = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isPagination: false,\n      departmentId: \"\",\n      designationId: \"\",\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n          ? BranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n    };\n    dispatch(employeSearch(reqPayload));\n  };\n\n\n  const getinvoicerequest = () => {\n    const data = {\n      directorId: \"\",\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n          ? BranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n      clientId: watch(\"client\"),\n      text: \"\",\n      sort: true,\n      status: \"PendingPayment\",\n      isPagination: true,\n    };\n    dispatch(invoiceSearch(data));\n  };\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n  const financialYears = generateFinancialYears();\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sept\", \"Oct-Dec\"];\n\n  const totalAmount = watch(\"totalAmount\") || 0;\n  const discount = watch(\"discount\") || 0;\n  const tds = watch(\"tds\") || 0;\n  const advance = watch(\"advance\") || 0;\n  const isDiscountApplicable = watch(\"isDiscountApplicable\");\n  const isTDS = watch(\"isTDS\");\n  const isAdvance = watch(\"isAdvance\");\n  const maxAdvance = watch(\"maxAdvance\") || 0;\n\n  useEffect(() => {\n    // Calculate the grand total when values change\n    let calculatedTotal = totalAmount;\n\n    // Apply discount if applicable\n    if (isDiscountApplicable) {\n      calculatedTotal -= discount;\n    }\n\n    // Apply TDS if applicable\n    if (isTDS) {\n      calculatedTotal -= tds;\n    }\n\n    setValue(\"totalBeforeGrand\", calculatedTotal);\n    // Apply advance if applicable, ensuring it's not higher than maxAdvance\n    if (isAdvance) {\n      calculatedTotal -= advance;\n    }\n\n    // Set the grand total\n    setValue(\"grandTotal\", calculatedTotal);\n  }, [\n    totalAmount,\n    discount,\n    tds,\n    advance,\n    isDiscountApplicable,\n    isTDS,\n    isAdvance,\n    maxAdvance,\n    setValue,\n  ]);\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-2 md:px-1\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <ListLoader />\n                      </Select.Option> : (sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Branch <span className=\"text-red-600\">*</span>\n                  </label>\n                  {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n                  \n                  <Controller\n                    control={control}\n                    name=\"PDBranchId\"\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        defaultValue={\"\"}\n                        className={`${inputAntdSelectClassName} `}\n                        showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))}\n                      </Select>\n                    )}\n                  />\n                  {errors.PDBranchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDBranchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Group Type <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"groupName\"\n                rules={{ required: \"Group Name is required\" }}\n                render={({ field }) => (\n                  <Select\n                    // {...register(\"groupName\", {\n                    //   required: \"Organization type is required\",\n                    // })}\n                    {...field}\n                    defaultValue={\"\"}\n\n                     showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                    className={` ${inputAntdSelectClassName} ${errors.groupName\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                      }`}\n                    onFocus={() => handleFocusClientGrp()}\n                    onChange={(value) => {\n                      setValue(\n                        \"maxAdvance\",\n                        clientGroupList?.find((client) => client?._id === value)\n                          ?.advancedBalance\n                      );\n\n                      dispatch(\n                        clientSearch({\n                          companyId:\n                            userInfoglobal?.userType === \"admin\"\n                              ? watch(\"PDCompanyId\")\n                              : userInfoglobal?.userType === \"company\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.companyId,\n                          branchId:\n                            userInfoglobal?.userType === \"company\" ||\n                              userInfoglobal?.userType === \"admin\" ||\n                              userInfoglobal?.userType === \"companyDirector\"\n                              ? watch(\"PDBranchId\")\n                              : userInfoglobal?.userType === \"companyBranch\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.branchId,\n\n\n                          directorId: \"\",\n                          organizationId: \"\",\n                          industryId: \"\",\n                          groupId: value,\n                          text: \"\",\n                          sort: true,\n                          status: true,\n                          isPagination: false,\n                        })\n                      );\n                      // .then((data) => {\n                      //   if (!data?.error) {\n                      //     setValue('client', data?.payload?.data?.docs?.map((client) => {\n                      //       return ({\n                      //         value: client._id,\n                      //         label: client.fullName\n                      //       })\n                      //     }))\n                      //   }\n                      // })\n                      field?.onChange(value);\n                    }}\n                  >\n                    <Select.Option className=\"text-xs\" value=\"\">\n                      Select Group Type\n                    </Select.Option>\n                    {groupSearchLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (sortByPropertyAlphabetically(clientGroupList, 'fullName')?.map((elment, index) => (\n                      <Select.Option value={elment?._id}>\n                        {elment?.fullName}({elment?.groupName})\n                      </Select.Option>\n                    )))}\n                  </Select>\n                  // <Select\n                  //   {...field}\n                  //   defaultValue={\"\"}\n                  //   className={`${inputAntdSelectClassName} `}\n                  // >\n                  //   <Select.Option value=\"\">Select Branch</Select.Option>\n                  //   {branchList?.map((type) => (\n                  //     <Select.Option key={type?._id} value={type?._id}>\n                  //       {type?.fullName}\n                  //     </Select.Option>\n                  //   ))}\n                  // </Select>\n                )}\n              />\n              {/* <select\n                {...register(\"groupName\", {\n                  required: \"Organization type is required\",\n                })}\n                className={` ${inputClassName} ${errors.groupName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                onFocus={() => handleFocusClientGrp()}\n                onChange={(e) => {\n                  setValue(\"maxAdvance\", clientGroupList?.find((client) => client?._id === e.target.value)?.advancedBalance)\n\n                  dispatch(clientSearch({\n                    companyId:\n                      userInfoglobal?.userType === \"admin\"\n                        ? watch(\"PDCompanyId\")\n                        :\n                        userInfoglobal?.userType === \"company\"\n                          ? userInfoglobal?._id\n                          : userInfoglobal?.companyId,\n                    branchId:\n                      userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                        ? userInfoglobal?._id\n                        : userInfoglobal?.branchId,\n\n                    \"directorId\": \"\",\n                    \"organizationId\": \"\",\n                    \"industryId\": \"\",\n                    groupId: e.target.value,\n                    \"text\": \"\",\n                    \"sort\": true,\n                    \"status\": true,\n                    \"isPagination\": false,\n                  }))\n                  // .then((data) => {\n                  //   if (!data?.error) {\n                  //     setValue('client', data?.payload?.data?.docs?.map((client) => {\n                  //       return ({\n                  //         value: client._id,\n                  //         label: client.fullName\n                  //       })\n                  //     }))\n                  //   }\n                  // })\n                }}\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Group Type\n                </option>\n                {clientGroupList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}({elment?.groupName})</option>\n                ))}\n              </select> */}\n              {errors.groupName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.groupName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Client <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"client\"\n                rules={{ required: \"client is required\" }}\n\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                     showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                  >\n                    <Select.Option value=\"\">Select client</Select.Option>\n                    {clientLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> :\n                      (sortByPropertyAlphabetically(clientList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                  </Select>\n                )}\n              />\n              {/* <select\n                {...register(\"client\", {\n                  required: \"Client is required\",\n                })}\n                className={` ${inputClassName} ${errors.client\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Client\n                </option>\n                {clientList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}</option>\n                ))}\n              </select> */}\n              {errors.client && (\n                <p className=\"text-red-500 text-sm\">{errors.client.message}</p>\n              )}\n            </div>\n            <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Firm Layout Name<span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"invoiceLayout\"\n                rules={{ required: \"Layout Name is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                     showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                    className={` ${inputAntdSelectClassName} ${errors.invoiceLayout\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                      }`}\n                    onFocus={() => {\n                      dispatch(\n                        officeAddressSearch({\n                          companyId:\n                            userInfoglobal?.userType === \"admin\"\n                              ? watch(\"PDCompanyId\")\n                              : userInfoglobal?.userType === \"company\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.companyId,\n                          branchId:\n                            userInfoglobal?.userType === \"company\" ||\n                              userInfoglobal?.userType === \"admin\" ||\n                              userInfoglobal?.userType === \"companyDirector\"\n                              ? watch(\"PDBranchId\")\n                              : userInfoglobal?.userType === \"companyBranch\"\n                                ? userInfoglobal?._id\n                                : userInfoglobal?.branchId,\n                          directorId: \"\",\n                          text: \"\",\n                          sort: true,\n                          status: true,\n                          type: \"invoice\",\n                          isPagination: false,\n                          bankAccountId: \"\",\n                          isGSTEnabled: \"\",\n                        })\n                      );\n                    }}\n                  >\n                    <Select.Option className=\"\" value=\"\">\n                      Select Layout\n                    </Select.Option>\n\n                    {officeAddressLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (sortByPropertyAlphabetically(officeAddressListData, 'firmName')?.map((element) => (\n                      <Select.Option value={element?._id}>\n                        {element?.firmName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                  // <Select\n                  //   {...field}\n                  //   defaultValue={\"\"}\n                  //   className={`${inputAntdSelectClassName} `}\n                  // >\n                  //   <Select.Option value=\"\">Select Branch</Select.Option>\n                  //   {branchList?.map((type) => (\n                  //     <Select.Option key={type?._id} value={type?._id}>\n                  //       {type?.fullName}\n                  //     </Select.Option>\n                  //   ))}\n                  // </Select>\n                )}\n              />\n              {/* <select\n                {...register(\"invoiceLayout\", {\n                  required: \"Task Name is required\",\n                })}\n                className={` ${inputClassName} ${errors.invoiceLayout ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                onFocus={() => {\n                  dispatch(\n                    officeAddressSearch({\n                      companyId:\n                        userInfoglobal?.userType === \"admin\"\n                          ? watch(\"PDCompanyId\")\n                          : userInfoglobal?.userType === \"company\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.companyId,\n                      branchId:\n                        userInfoglobal?.userType === \"company\" ||\n                          userInfoglobal?.userType === \"admin\" ||\n                          userInfoglobal?.userType === \"companyDirector\"\n                          ? watch(\"PDBranchId\")\n                          : userInfoglobal?.userType === \"companyBranch\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.branchId,\n                      directorId: \"\",\n                      text: \"\",\n                      sort: true,\n                      status: true,\n                      type: \"receipt\",\n                      isPagination: false,\n                      bankAccountId: \"\",\n                      isGSTEnabled: \"\",\n                    })\n                  );\n                }}\n              >\n                <option className=\"\" value=\"\">\n                  Select Layout\n                </option>\n\n                {officeAddressListData?.map((element) => (\n                  <option value={element?._id}>{element?.firmName}</option>\n                ))}\n              </select> */}\n              {errors.invoiceLayout && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.invoiceLayout.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div>\n            {fields.map((item, index) => (\n              <div\n                key={item.id}\n                className=\"border border-gray-300 rounded-md my-2\"\n              >\n                <div className=\"flex justify-end bg-header rounded-t-md p-4\">\n                  <button\n                    className=\"text-white\"\n                    size={20}\n                    type=\"button\"\n                    onClick={() => remove(index)}\n                  >\n                    <MdDelete />\n                  </button>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Head Type\n                    </label>\n                    {/* <select\n                      {...register(`heads[${index}].headType`, { required: \"Head type is required\" })}\n                      defaultValue={item.headType}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.headType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      onChange={(e) => {\n\n                        setValue(`heads[${index}].headType`, e.target.value)\n                        setValue(`heads[${index}].amount`, 0)\n                        setValue(`heads[${index}].subHeadId`, \"\")\n                        setValue(`heads[${index}].invoiceId`, \"\")\n\n                      }}\n                    >\n                      <option value=\"invoice\">Invoice</option>\n                      <option value=\"client\">Client</option>\n                    </select> */}\n\n                    <Controller\n                      control={control}\n                      name={`heads[${index}].headType`}\n                      rules={{ required: \"Head type is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n                           showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                          className={` ${inputAntdSelectClassName} ${errors?.heads?.[index]?.headType\n                            ? \"border-[1px] \"\n                            : \"border-gray-300\"\n                            }`}\n                          onChange={(value) => {\n                            \n                            setValue(`heads[${index}].headType`, value);\n                            setValue(`heads[${index}].amount`, 0);\n                            setValue(`heads[${index}].subHeadId`, \"\");\n                            setValue(`heads[${index}].invoiceId`, \"\");\n                          }}\n                        >\n                          <Select.Option value=\"invoice\">Invoice</Select.Option>\n                          <Select.Option value=\"client\">Client Expense</Select.Option>\n                        </Select>\n                      )}\n                    />\n\n                    {errors?.heads?.[index]?.headType && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors?.heads?.[index]?.headType?.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {watch(`heads[${index}].headType`) === \"client\" && (\n                    <>\n                      <div>\n                        <label className={`${inputLabelClassName}`}>\n                          Department\n                        </label>\n                        {/* <select\n                          onFocus={() => {\n                            dispatch(\n                              deptSearch({\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                companyId:\n                                  userInfoglobal?.userType === \"admin\"\n                                    ? CompanyId\n                                    : userInfoglobal?.userType === \"company\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.companyId,\n                                branchId:\n                                  userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.branchId,\n\n                              })\n                            );\n                          }}\n                          {...register(`heads[${index}].subHeadId`, { required: \"Sub Head ID is required\" })}\n                          defaultValue={item.subHeadId}\n                          className={` ${inputClassName} ${errors?.heads?.[index]?.subHeadId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        >\n                          <option className=\"text-xs\" value=\"\">\n                            Select Sub Head\n                          </option>\n                          {departmentListData?.map((elment, index) => (\n                            <option value={elment?._id}>{elment?.name}</option>\n                          ))}\n                        </select> */}\n                        <Controller\n                          control={control}\n                          name={`heads[${index}].subHeadId`}\n\n                          rules={{ required: \"Department is required\" }}\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              defaultValue={\"\"}\n                               showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                              className={` ${inputAntdSelectClassName} ${errors?.heads?.[index]?.subHeadId\n                                ? \"border-[1px] \"\n                                : \"border-gray-300\"\n                                }`}\n                              onFocus={() => {\n                                dispatch(\n                                  deptSearch({\n                                    text: \"\",\n                                    sort: true,\n                                    status: true,\n                                    isPagination: false,\n                                    companyId:\n                                      userInfoglobal?.userType === \"admin\"\n                                        ? CompanyId\n                                        : userInfoglobal?.userType === \"company\"\n                                          ? userInfoglobal?._id\n                                          : userInfoglobal?.companyId,\n                                    branchId:\n                                      userInfoglobal?.userType === \"company\" ||\n                                        userInfoglobal?.userType === \"admin\" ||\n                                        userInfoglobal?.userType ===\n                                        \"companyDirector\"\n                                        ? watch(\"PDBranchId\")\n                                        : userInfoglobal?.userType ===\n                                          \"companyBranch\"\n                                          ? userInfoglobal?._id\n                                          : userInfoglobal?.branchId,\n                                  })\n                                );\n                              }}\n                            >\n                              <Select.Option className=\"\" value=\"\">\n                                Select Department\n                              </Select.Option>\n                              {departmentLoading ? <Select.Option disabled>\n                                <ListLoader />\n                              </Select.Option> : (sortByPropertyAlphabetically(departmentListData)?.map((elment, index) => (\n                                <Select.Option value={elment?._id}>\n                                  {elment?.name}\n                                </Select.Option>\n                              )))}{\" \"}\n                            </Select>\n                          )}\n                        />\n                        {errors?.heads?.[index]?.subHeadId && (\n                          <p className=\"text-red-500 text-sm\">\n                            {errors?.heads?.[index]?.subHeadId?.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"col-span-2 my-2\">\n                        <div\n                          className={`grid ${watch(`heads[${index}].type`) === \"Yearly\"\n                            ? \"grid-cols-1 md:grid-cols-2\"\n                            : watch(`heads[${index}].type`)\n                              ? \"grid-cols-1 md:grid-cols-3\"\n                              : \"grid-cols-1 md:grid-cols-2\"\n                            } space-x-4`}\n                        >\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Financial Year{\" \"}\n                              <span className=\"text-red-600\">*</span>\n                            </label>\n                            {/* <select\n                              {...register(`heads[${index}].financialYear`, {\n                                required: \"Financial year is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.financialYear ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Financial Year</option>\n                              {financialYears.map((year, index) => (\n                                <option key={index} value={year}>\n                                  {year}\n                                </option>\n                              ))}\n                            </select> */}\n\n                            <Controller\n                              control={control}\n                              name={`heads[${index}].financialYear`}\n                              rules={{ required: \"Financial year is required\" }}\n                              render={({ field }) => (\n                                <Select\n                                  {...field}\n                                  // defaultValue={getDefaultFinacialYear()}\n                                  \n                                   showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                                  className={`${inputAntdSelectClassName} ${errors?.heads?.[index]?.financialYear\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                >\n                                  <Select.Option value=\"\">\n                                    Select Financial Year\n                                  </Select.Option>\n\n                                  {financialYears.map((year, index) => (\n                                    <Select.Option key={index} value={year}>\n                                      {year}\n                                    </Select.Option>\n                                  ))}\n                                </Select>\n                              )}\n                            />\n\n                            {errors?.heads?.[index]?.financialYear && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors?.heads?.[index]?.financialYear.message}\n                              </p>\n                            )}\n                          </div>\n\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Type <span className=\"text-red-600\">*</span>\n                            </label>\n                            {/* <select\n                              {...register(`heads[${index}].type`, {\n                                required: \"Type is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.type ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Type</option>\n                              <option value=\"Quaterly\">Quaterly</option>\n                              <option value=\"Monthly\">Monthly</option>\n                              <option value=\"Yearly\">Yearly</option>\n                            </select> */}\n                            <Controller\n                              control={control}\n                              name={`heads[${index}].type`}\n                              rules={{ required: \"Type is required\" }}\n                              render={({ field }) => (\n                                <Select\n                                  {...field}\n                                  defaultValue={\"\"}\n                                   showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                                  className={`${inputAntdSelectClassName} ${errors?.heads?.[index]?.financialYear\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                    }`}\n                                >\n                                  <Select.Option value=\"\">\n                                    Select Type\n                                  </Select.Option>\n                                  <Select.Option value=\"Quaterly\">\n                                    Quaterly\n                                  </Select.Option>\n                                  <Select.Option value=\"Monthly\">\n                                    Monthly\n                                  </Select.Option>\n                                  <Select.Option value=\"Yearly\">\n                                    Yearly\n                                  </Select.Option>\n                                </Select>\n                              )}\n                            />\n                            {errors?.heads?.[index]?.type && (\n                              <p className=\"text-red-500 text-sm\">\n                                {errors?.heads?.[index]?.type.message}\n                              </p>\n                            )}\n                          </div>\n\n                          {watch(`heads[${index}].type`) === \"Quaterly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Quarter <span className=\"text-red-600\">*</span>\n                              </label>\n                              {/* <select\n                                {...register(`heads[${index}].monthQuaters`, {\n                                  required: \"Reset Month is required\",\n                                })}\n                                className={`${inputClassName} ${errors?.heads?.[index]?.monthQuaters ? \"border-[1px] \" : \"border-gray-300\"}`}\n                              >\n                                <option value=\"\">Select Quarter</option>\n                                {quarter.map((qtr) => (\n                                  <option key={qtr} value={qtr}>\n                                    {qtr}\n                                  </option>\n                                ))}\n                              </select> */}\n\n                              <Controller\n                                control={control}\n                                name={`heads[${index}].monthQuaters`}\n                                rules={{ required: \"Quarter Month is required\" }}\n                                render={({ field }) => (\n                                  <Select\n                                    {...field}\n                                    defaultValue={\"\"}\n                                     showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                                    className={`${inputAntdSelectClassName} ${errors?.heads?.[index]?.monthQuaters ? \"border-[1px] \" : \"border-gray-300\"}`}\n                                  >\n                                    <Select.Option value=\"\">\n                                      Select Quarter\n                                    </Select.Option>\n                                    {quarter.map((qtr) => (\n                                      <Select.Option key={qtr} value={qtr}>\n                                        {qtr}\n                                      </Select.Option>\n                                    ))}\n                                  </Select>\n                                )}\n                              />\n\n                              {errors?.heads?.[index]?.monthQuaters && (\n                                <p className=\"text-red-500 text-sm\">\n                                  {errors?.heads?.[index]?.monthQuaters.message}\n                                </p>\n                              )}\n                            </div>\n                          )}\n\n                          {watch(`heads[${index}].type`) === \"Monthly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Month <span className=\"text-red-600\">*</span>\n                              </label>\n                              <Controller\n                                control={control}\n                                name={`heads[${index}].monthName`}\n                                rules={{ required: \" Month is required\" }}\n                                render={({ field }) => (\n                                  <Select\n                                    {...field}\n                                    defaultValue={\"\"}\n                                     showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                                    className={`${inputAntdSelectClassName} ${errors?.heads?.[index]?.monthName\n                                      ? \"border-[1px] \"\n                                      : \"border-gray-300\"\n                                      }`}\n                                  >\n                                    <Select.Option value=\"\">Select Month</Select.Option>\n                                    {months.map((month) => (\n                                      <Select.Option key={month} value={month}>\n                                        {month}\n                                      </Select.Option>\n                                    ))}\n                                  </Select>\n                                )}\n                              />\n                              {/* <select\n                                {...register(`heads[${index}].monthName`, {\n                                  required: \"Month is required\",\n                                })}\n                                className={`${inputClassName} ${\n                                  errors?.heads?.[index]?.monthName\n                                    ? \"border-[1px] \"\n                                    : \"border-gray-300\"\n                                }`}\n                              >\n                                <option value=\"\">Select Month</option>\n                                {months.map((month) => (\n                                  <option key={month} value={month}>\n                                    {month}\n                                  </option>\n                                ))}\n                              </select> */}\n                              {errors?.heads?.[index]?.monthName && (\n                                <p className=\"text-red-500 text-sm\">\n                                  {errors?.heads?.[index]?.monthName.message}\n                                </p>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                  {watch(`heads[${index}].headType`) === \"invoice\" && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Invoice ID\n                      </label>\n                      {/* <select\n                        {...register(`heads[${index}].invoiceId`, { required: \"Invoice ID is required\" })}\n                        onFocus={() => {\n                          getinvoicerequest()\n                        }}\n                        onChange={(e) => {  \n                          if (watch(`heads[${index}].headType`) === \"invoice\") {\n                            setValue(`heads[${index}].amount`, invoiceListData?.find(elment => elment?._id === e.target.value)?.grandTotal)\n                            const total = fields.reduce((sum, field, i) => {\n                              return sum + (parseFloat(watch(`heads[${i}].amount`)) || 0);\n                            }, 0);\n                            setValue('totalAmount', total)\n                          }\n                        }}\n                        className={` ${inputClassName} ${errors?.heads?.[index]?.invoiceId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Client\n                        </option>\n                        {invoiceListData?.map((elment, index) => (\n                          <option value={elment?._id}>{elment?.clientName}({elment?.invoiceNumber})</option>\n                        ))}\n                      </select> */}\n\n                      <Controller\n                        control={control}\n                        name={`heads[${index}].invoiceId`}\n                        rules={{ required: \" Invoice Id is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                             showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                            className={` ${inputAntdSelectClassName} ${errors?.heads?.[index]?.invoiceId\n                              ? \"border-[1px] \"\n                              : \"border-gray-300\"\n                              }`}\n                            onChange={(value) => {\n                              if (\n                                watch(`heads[${index}].headType`) === \"invoice\"\n                              ) {\n                             \n\n                                setValue(\n                                  `heads[${index}].amount`,\n                                  invoiceListData?.find(\n                                    (elment) => elment?._id === value\n                                  )?.grandTotal\n                                );\n                                const total = fields.reduce((sum, field, i) => {\n                                  return (\n                                    sum +\n                                    (parseFloat(watch(`heads[${i}].amount`)) ||\n                                      0)\n                                  );\n                                }, 0);\n                                setValue(\"totalAmount\", total);\n                              }\n                              field.onChange(value)\n                            }\n\n                            }\n                            onFocus={() => {\n                              getinvoicerequest();\n                            }}\n                          >\n                            <Select.Option className=\"\" value=\"\">\n                              Select Invoice\n                            </Select.Option>\n\n                            {invoiceLoading ? <Select.Option disabled>\n                              <ListLoader />\n                            </Select.Option> : (sortByPropertyAlphabetically(invoiceListData, 'invoiceNumber')?.map((elment, index) => (\n                              <Select.Option value={elment?._id}>{elment?.clientName}({elment?.invoiceNumber})</Select.Option>\n                            )))}\n                          </Select>\n                        )}\n                      />\n                      {errors?.heads?.[index]?.invoiceId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors?.heads?.[index]?.invoiceId?.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Description\n                    </label>\n                    <input\n                      {...register(`heads[${index}].description`, {\n                        required: \"Description is required\",\n                      })}\n                      defaultValue={item.description}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.description\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                    />\n                    {errors?.heads?.[index]?.description && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors?.heads?.[index]?.description?.message}\n                      </p>\n                    )}\n                  </div>\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Amount</label>\n                    <input\n                      type=\"number\"\n                       step=\"0.01\"\n                      disabled={watch(`heads[${index}].headType`) === \"invoice\"}\n                      {...register(`heads[${index}].amount`, {\n                        required: \"Amount is required\",\n                      })}\n                      onChange={(e) => {\n                        const updatedAmount = parseFloat(e.target.value) || 0;\n                        setValue(`heads[${index}].amount`, updatedAmount);\n\n                        const total = fields.reduce((sum, field, i) => {\n                          return (\n                            sum + (parseFloat(watch(`heads[${i}].amount`)) || 0)\n                          );\n                        }, 0);\n                        setValue(\"totalAmount\", total);\n                      }}\n                      className={` ${watch(`heads[${index}].headType`) === \"invoice\"\n                        ? inputDisabledClassName\n                        : inputClassName\n                        } ${errors?.heads?.[index]?.amount\n                          ? \"border-[1px] \"\n                          : \"border-gray-300\"\n                        }`}\n                    />\n                    {errors?.heads?.[index]?.amount && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors?.heads?.[index]?.amount?.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => append({ headType: \"invoice\",financialYear:getDefaultFinacialYear() })}\n            className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n          >\n            Add more\n          </button>\n          <div className=\"mt-1\">\n            <label className={`${inputLabelClassName} flex items-center`}>\n              <input type=\"checkbox\" {...register(\"isDiscountApplicable\")} />\n              <span className={`mx-2 text-[15px]`}>Is Discount</span>\n            </label>\n            <label className={`${inputLabelClassName} flex items-center`}>\n              <input type=\"checkbox\" {...register(\"isTDS\")} />\n              <span className={`mx-2 text-[15px]`}>Is TDS</span>\n            </label>\n            <label className={`${inputLabelClassName} flex items-center`}>\n              <input\n                type=\"checkbox\"\n                onChange={handleAdvanceChange}\n                checked={watch('isAdvance') || false}\n              />\n              <span className=\"mx-2 text-[15px]\">Is Advance</span>\n            </label>\n          </div>\n          <div className=\"w-full flex flex-row items-end justify-end\">\n            {/* <div className=\"\">\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Sub Total Amount\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"totalAmount\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"totalAmount\"\n                  disabled\n                />\n                {errors.designationName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.amount.message}\n                  </p>\n                )}\n              </div>\n              {watch(\"isDiscountApplicable\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>Discount</label>\n                  <input\n                    type=\"number\"\n                    {...register(\"discount\", {})}\n                    className={`${inputClassName}`}\n                    placeholder=\"Discount\"\n                  />\n                </div>\n              )}\n              {watch(\"isTDS\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>TDS</label>\n                  <input\n                    type=\"number\"\n                    {...register(\"tds\", {})}\n                    className={`${inputClassName}`}\n                    placeholder=\"TDS\"\n                  />\n                </div>\n              )}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Total Amount</label>\n                <input\n                  type=\"text\"\n                  {...register(\"totalBeforeGrand\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"total\"\n                  disabled\n                  // value={totalAmount - discount}\n                />\n              </div>\n              {watch(\"isAdvance\") && (\n                <>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Advance</label>\n                    <input\n                      type=\"number\"\n                      {...register(\"advance\", {\n                        maxLength: watch(\"maxAdvance\")\n                          ? watch(\"maxAdvance\")\n                          : null,\n                      })}\n                      max={watch(\"maxAdvance\") ? watch(\"maxAdvance\") : null}\n                      className={`${inputClassName}`}\n                      placeholder=\"Advance\"\n                    />\n                  </div>\n                  <div className=\"text-red-800 \">\n                    {\" \"}\n                    {watch(\"maxAdvance\") &&\n                      \"max available : \" + watch(\"maxAdvance\")}\n                  </div>\n                </>\n              )}\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>Grand Total</label>\n                <input\n                  type=\"text\"\n                  {...register(\"grandTotal\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"grandTotal\"\n                  disabled\n                  // value={totalAmount - discount}\n                />\n              </div>\n            </div> */}\n            <div>\n              <div className=\"mb-4\">\n                <label className={inputLabelClassName}>Sub Total Amount</label>\n                <Controller\n                  name=\"totalAmount\"\n                  control={control}\n                  rules={{\n                    required: \"Sub Total Amount is required\",\n                   \n                  }}\n                  render={({ field }) => (\n                    <input\n                      {...field}\n                      type=\"number\"\n                      step=\"0.01\"\n                     \n                      className={inputClassName}\n                      placeholder=\"Sub Total Amount\"\n                      onChange={(e) => {\n                        const value = parseFloat(e.target.value) || 0;\n                        field.onChange(value <= 0 ? 0.01 : value);\n                      }}\n                    />\n                  )}\n                />\n                {errors.totalAmount && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.totalAmount.message}</p>\n                )}\n              </div>\n\n              {watch(\"isDiscountApplicable\") && (\n                <div className=\"mb-4\">\n                  <label className={inputLabelClassName}>Discount</label>\n                  <Controller\n                    name=\"discount\"\n                    control={control}\n                    rules={{\n                      validate: (value) => {\n                        const total = parseFloat(getValues(\"totalAmount\")) || 0;\n                        const numValue = parseFloat(value) || 0;\n                        if (numValue < 0) return \"Discount cannot be negative\";\n                        if (numValue > total) return `Discount cannot exceed ${total}`;\n                        return true;\n                      }\n                    }}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        max={getValues(\"totalAmount\")}\n                        className={inputClassName}\n                        placeholder=\"Discount\"\n                        onChange={handleNumberInput(\"discount\", getValues(\"totalAmount\"))}\n                      />\n                    )}\n                  />\n                  {errors.discount && (\n                    <p className=\"text-red-500 text-sm mt-1\">{errors.discount.message}</p>\n                  )}\n                </div>\n              )}\n\n              {watch(\"isTDS\") && (\n                <div className=\"mb-4\">\n                  <label className={inputLabelClassName}>TDS</label>\n                  <Controller\n                    name=\"tds\"\n                    control={control}\n                    rules={{\n                      validate: (value) => {\n                        const total = parseFloat(getValues(\"totalAmount\")) || 0;\n                        const discount = parseFloat(getValues(\"discount\")) || 0;\n                        const remaining = total - discount;\n                        const numValue = parseFloat(value) || 0;\n\n                        if (numValue < 0) return \"TDS cannot be negative\";\n                        if (numValue > remaining) return `TDS cannot exceed ${remaining}`;\n                        return true;\n                      }\n                    }}\n                    render={({ field }) => (\n                      <input\n                        {...field}\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        max={getValues(\"totalAmount\") - (getValues(\"discount\") || 0)}\n                        className={inputClassName}\n                        placeholder=\"TDS\"\n                        onChange={handleNumberInput(\"tds\", getValues(\"totalAmount\") - (getValues(\"discount\") || 0))}\n                      />\n                    )}\n                  />\n                  {errors.tds && (\n                    <p className=\"text-red-500 text-sm mt-1\">{errors.tds.message}</p>\n                  )}\n                </div>\n              )}\n\n              <div className=\"mb-4\">\n                <label className={inputLabelClassName}>Total Amount</label>\n                <input\n                  type=\"number\"\n                   step=\"0.01\"\n                  {...register(\"totalBeforeGrand\")}\n                  className={inputClassName}\n                  placeholder=\"Total before grand\"\n                  disabled\n                />\n              </div>\n\n              {watch(\"isAdvance\") && (\n                <>\n                  <div className=\"mb-4\">\n                    <label className={inputLabelClassName}>Advance</label>\n                    <Controller\n                      name=\"advance\"\n                      control={control}\n                      rules={{\n                        validate: (value) => {\n                          const total = parseFloat(getValues(\"totalAmount\")) || 0;\n                          const discount = parseFloat(getValues(\"discount\")) || 0;\n                          const tds = parseFloat(getValues(\"tds\")) || 0;\n                          const remaining = total - discount - tds;\n                          const numValue = parseFloat(value) || 0;\n\n                          if (remaining <= 0) return \"No amount available for advance\";\n                          if (numValue < 0) return \"Advance cannot be negative\";\n                          if (numValue > remaining) return `Advance cannot exceed ${remaining}`;\n                          if (watch(\"maxAdvance\") && numValue > parseFloat(watch(\"maxAdvance\"))) {\n                            return `Advance cannot exceed available ${watch(\"maxAdvance\")}`;\n                          }\n                          return true;\n                        }\n                      }}\n                      render={({ field }) => (\n                        <input\n                          {...field}\n                          type=\"number\"\n                          step=\"0.01\"\n                          min=\"0\"\n                          max={Math.min(\n                            getValues(\"totalAmount\") - (getValues(\"discount\") || 0) - (getValues(\"tds\") || 0),\n                            watch(\"maxAdvance\") || Infinity\n                          )}\n                          className={inputClassName}\n                          placeholder=\"Advance\"\n                          onChange={handleNumberInput(\n                            \"advance\",\n                            Math.min(\n                              getValues(\"totalAmount\") - (getValues(\"discount\") || 0) - (getValues(\"tds\") || 0),\n                              watch(\"maxAdvance\") || Infinity\n                            )\n                          )}\n                        />\n                      )}\n                    />\n                    {errors.advance && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.advance.message}</p>\n                    )}\n                  </div>\n                  {watch(\"maxAdvance\") && (\n                    <div className=\"text-red-800 mb-4\">\n                      Max available: {watch(\"maxAdvance\")}\n                    </div>\n                  )}\n                </>\n              )}\n\n              <div className=\"mb-4\">\n                <label className={inputLabelClassName}>Grand Total</label>\n                <input\n                  type=\"number\"\n                   step=\"0.01\"\n                  {...register(\"grandTotal\")}\n                  className={inputClassName}\n                  placeholder=\"Grand Total\"\n                  disabled\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 md:gap-8 md:my-1 px-3 md:mt-4\">\n            {watch(\"grandTotal\") > 0 && (\n              <div className=\"\">\n                <div className=\" flex items-center gap-4\">\n                  <label className={`${inputLabelClassName}`}>\n                    <input\n                      type=\"radio\"\n                      value=\"cash\"\n                      {...register(\"type\", {\n                        required: \"Type is required\",\n                      })}\n                      \n                      className=\"mr-2\"\n                    />\n                    Cash\n                  </label>\n                  {/* <label className={`${inputLabelClassName}`}>\n                    <input\n                      type=\"radio\"\n                      value=\"cheque\"\n                      {...register(\"type\", {\n                        required: \"Type is required\",\n                      })}\n                      className=\"mr-2\"\n                    />\n                    Cheque\n                  </label> */}\n                  <label className={`${inputLabelClassName}`}>\n                    <input\n                      type=\"radio\"\n                      value=\"bank\"\n                      {...register(\"type\", {\n                        required: \"Type is required\",\n                      })}\n                      className=\"mr-2\"\n                    />\n                    Bank\n                  </label>\n                </div>\n\n                {errors.type && (\n                  <p className=\"text-red-500 text-sm\">{errors.type.message}</p>\n                )}\n              </div>\n            )}\n\n            {watch(\"grandTotal\") > 0 && watch(\"type\") !== \"cash\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Sender Bank<span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                                  control={control}\n                                  name=\"bankId\"\n                                  rules={{ required: \"bankId is required\" }}\n                                  render={({ field }) => (\n                                    <Select\n                                      {...field}\n                                      defaultValue={\"\"}\n                                      className={`${inputAntdSelectClassName} `}\n                                      showSearch\n                                      filterOption={(input, option) =>\n                                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                      }\n                                      // onFocus={() => {\n                                      //   dispatch(getBranchDetails({\n                                      //     _id: paymentDetails?.branchId\n                                      //   }))\n                                      // }}\n                                    >\n                                      <Select.Option value=\"\">Select Bank</Select.Option>\n                                      {\n                                        branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                                        branchDetailsData.data.bankData.map((type) => (\n                                          <Select.Option key={type._id} value={type._id}>\n                                            {optionLabelForBankSlect(type)}\n                                          </Select.Option>\n                                        ))\n                                      }         </Select>\n                                  )}\n                                />\n                {/* <select\n                  {...register(\"bankId\")}\n                  className={`${inputClassName}  ${errors.bankId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    } `}\n                // onFocus={handleFocusCompany}\n                >\n                  <option value=\"\">select bank</option>\n                  {branchDetailsData?.data?.bankData &&\n                    branchDetailsData?.data?.bankData.length > 0 &&\n                    branchDetailsData.data.bankData.map((type) => (\n                      <option key={type._id} value={type._id}>\n                        {`${type.bankName} (${type.branchName})`}\n                      </option>\n                    ))}\n                </select> */}\n                {errors.bankId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.bankId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cash\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>Employee</label>\n                <Controller\n                  name=\"employeeId\"\n                  control={control}\n                  rules={{ required: \"Employee is required\" }}\n                  render={({ field }) => (\n                    <ReactSelect\n                      {...field}\n                      options={employeList?.map((employee) => ({\n                        value: employee?._id,\n                        label: employee?.fullName,\n                      }))}\n                      classNamePrefix=\"react-select\"\n                      className={`${inputLabelClassNameReactSelect} ${errors.employeeId\n                        ? \"border-[1px] \"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Select Employee\"\n                    />\n                  )}\n                />\n                {errors.employeeId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.employeeId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cheque\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Cheque No\n                  <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"chequeNo\", {\n                    required: \"chequeNo is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.chequeNo\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Cheque no\"\n                />\n                {errors.chequeNo && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.chequeNo.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"bank\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Transaction No\n                  <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"transactionNo\", {\n                    required: \"transaction No is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.transactionNo\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Transaction no\"\n                />\n                {errors.transactionNo && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.transactionNo.message}\n                  </p>\n                )}\n              </div>\n            )}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration<span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n                })}\n                className={` ${inputClassName} ${errors.naration\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Date<span className=\"text-red-600\">*</span>\n              </label>\n              {/* <input\n                type=\"date\"\n                {...register(\"date\", {\n                  required: \"Date is required\",\n                })}\n                className={` ${inputClassName} ${errors.date ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Date\"\n              /> */}\n              <Controller\n                name=\"date\"\n                control={control}\n                rules={{\n                  required: \"Date  is required\",\n                }}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                  // disabledDate={(current) => {\n                  //   return (\n                  //     current &&\n                  //     current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                  //   );\n                  // }}\n                  />\n                )}\n              />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">{errors.date.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end my-4\">\n            <button\n              type=\"submit\"\n              disabled={receiptLoading}\n              className={`${receiptLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {receiptLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateReceipt;\n\n\n\n\n\n\n"],"names":["CreateReceipt","register","handleSubmit","control","watch","formState","errors","setValue","getValues","useForm","defaultValues","heads","headType","financialYear","getDefaultFinacialYear","dispatch","useDispatch","navigate","useNavigate","companyList","companyListLoading","useSelector","state","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","CompanyId","useWatch","name","defaultValue","grandTotal","loading","receiptLoading","receipt","BranchId","branchDetailsData","employeList","employe","clientList","clientLoading","client","clientGroupList","groupSearchLoading","clientGroup","invoiceListData","invoiceLoading","invoice","departmentListData","departmentLoading","department","officeAddressListData","officeAddressLoading","officeAddress","fields","append","remove","useFieldArray","useEffect","userType","branchSearch","text","sort","status","isPagination","companyId","_id","companySearch","handleNumberInput","fieldName","maxValue","arguments","length","undefined","e","value","parseFloat","target","shouldValidate","getBranchDetails","branchId","fetchEmployeListData","reqPayload","isTL","isHR","departmentId","designationId","employeSearch","financialYears","generateFinancialYears","year","push","months","quarter","totalAmount","discount","tds","advance","isDiscountApplicable","isTDS","isAdvance","maxAdvance","calculatedTotal","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$heads","_data$heads$filter","_data$heads2","_data$heads2$filter","_data$employeeId","clientHeads","filter","item","map","invoiceId","subHeadId","description","amount","type","monthName","monthQuaters","invoiceHeads","finalPayload","PDCompanyId","directorId","PDBranchId","receiptLayoutId","invoiceLayout","clientId","groupId","groupName","employeId","employeeId","bankAccId","bankId","naration","advancedAvailableId","date","customDayjs","subTotalAmount","TDSAmount","isDiscount","discountAmount","advancedAvailable","isAdvanced","advancedAdjust","totalBeforeGrand","grandTotalAmount","paymentmode","chequeNumber","chequeNo","transectionNumber","transactionNo","createreceipt","then","error","inputLabelClassName","Controller","rules","required","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","inputAntdSelectClassName","Option","disabled","ListLoader","sortByPropertyAlphabetically","fullName","message","_ref2","_sortByPropertyAlphab2","showSearch","filterOption","input","option","String","toLowerCase","includes","_ref3","_sortByPropertyAlphab3","onFocus","clientGrpSearch","onChange","_clientGroupList$find","find","advancedBalance","clientSearch","organizationId","industryId","elment","index","_ref4","_sortByPropertyAlphab4","_ref5","_sortByPropertyAlphab5","officeAddressSearch","bankAccountId","isGSTEnabled","element","firmName","_errors$heads2","_errors$heads2$index","_errors$heads3","_errors$heads3$index","_errors$heads3$index$","_errors$heads5","_errors$heads5$index","_errors$heads6","_errors$heads6$index","_errors$heads6$index$","_errors$heads8","_errors$heads8$index","_errors$heads9","_errors$heads9$index","_errors$heads1","_errors$heads1$index","_errors$heads10","_errors$heads10$index","_errors$heads12","_errors$heads12$index","_errors$heads13","_errors$heads13$index","_errors$heads15","_errors$heads15$index","_errors$heads16","_errors$heads16$index","_errors$heads18","_errors$heads18$index","_errors$heads19","_errors$heads19$index","_errors$heads19$index2","_errors$heads20","_errors$heads20$index","_errors$heads21","_errors$heads21$index","_errors$heads22","_errors$heads22$index","_errors$heads22$index2","_errors$heads23","_errors$heads23$index","_errors$heads24","_errors$heads24$index","_errors$heads25","_errors$heads25$index","_errors$heads25$index2","size","onClick","MdDelete","_ref6","_errors$heads","_errors$heads$index","_Fragment","_ref7","_errors$heads4","_errors$heads4$index","_sortByPropertyAlphab6","deptSearch","_ref8","_errors$heads7","_errors$heads7$index","_ref9","_errors$heads0","_errors$heads0$index","_ref0","_errors$heads11","_errors$heads11$index","qtr","_ref1","_errors$heads14","_errors$heads14$index","month","_ref10","_errors$heads17","_errors$heads17$index","_sortByPropertyAlphab7","_invoiceListData$find","total","reduce","sum","i","getinvoicerequest","invoiceSearch","clientName","invoiceNumber","inputClassName","step","updatedAmount","inputDisabledClassName","id","checked","showNotification","_ref11","placeholder","validate","numValue","_ref12","min","max","remaining","_ref13","_ref14","Math","Infinity","_ref15","_branchDetailsData$da","_branchDetailsData$da2","bankData","optionLabelForBankSlect","_ref16","ReactSelect","options","employee","label","classNamePrefix","inputLabelClassNameReactSelect","_ref17","CustomDatePicker","Loader"],"sourceRoot":""}