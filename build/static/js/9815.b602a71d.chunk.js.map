{"version":3,"file":"static/js/9815.b602a71d.chunk.js","mappings":"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","sources":["pages/client/clientNews/UpdateClientNews.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { inputClassName, inputLabelClassName, domainName, inputAntdSelectClassName, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { getClientNewsDetails, updateClientNews } from \"../clientNews/clientNewsFeatures/_client_news_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nfunction UpdateClientNews() {\n  const { loading: clientNewsLoading } = useSelector(state => state.clientNews);\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { clientnewsIdEnc } = useParams();\n  const clientnewsId = decrypt(clientnewsIdEnc);\n\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { clientNewsDetails } = useSelector((state) => state.clientNews);\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    let reqData = {\n      _id: clientnewsId,\n    };\n    dispatch(getClientNewsDetails(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (clientNewsDetails) {\n      setValue(\"PDCompanyId\", clientNewsDetails?.companyId);\n      setValue(\"PDBranchId\", clientNewsDetails?.branchId);\n      setValue(\"title\", clientNewsDetails?.title);\n      setValue(\"status\", clientNewsDetails?.status ? \"true\" : \"false\");\n    }\n  }, [clientNewsDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: clientnewsId,\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      \"directorId\": \"\",\n      title: data?.title,\n      status: data?.status === \"true\" ? true : false,\n    };\n    dispatch(updateClientNews(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-3\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n\n                      className={`${inputAntdSelectClassName} `}\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(companyList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((type) => (\n                    <option key={type?._id} value={type?._id}>\n                      {type?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDBranchId\"\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.title\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.title.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n              >\n                <option value={'true'}>Active</option>\n                <option value={'false'}>Inactive</option>\n              </select> */}\n              <Controller\n                control={control}\n                name=\"status\"\n                rules={{ required: \"Status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n\n                    className={`${inputAntdSelectClassName} `}\n                  >\n                    <Select.Option value=\"\">Select Status</Select.Option>\n                    <Select.Option value=\"true\">Active</Select.Option>\n                    <Select.Option value=\"false\">Inactive</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={clientNewsLoading}\n              className={`${clientNewsLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n            >\n              {clientNewsLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default UpdateClientNews;"],"names":["loading","clientNewsLoading","useSelector","state","clientNews","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","clientnewsIdEnc","useParams","clientnewsId","decrypt","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","branchList","branchListloading","branch","clientNewsDetails","companyId","useWatch","name","defaultValue","branchId","useEffect","branchSearch","text","sort","status","isPagination","_id","companySearch","reqData","getClientNewsDetails","title","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","updateClientNews","then","error","inputLabelClassName","Controller","rules","required","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","inputAntdSelectClassName","Option","value","disabled","Loader","sortByPropertyAlphabetically","map","type","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab2","showSearch","filterOption","input","option","String","toLowerCase","includes","PDBranchId","inputClassName","placeholder","_ref3"],"sourceRoot":""}