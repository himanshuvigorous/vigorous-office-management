{"version":3,"file":"static/js/4106.9e985626.chunk.js","mappings":"iSA6LA,QAhLA,WACE,MAAM,aAAEA,IAAiBC,EAAAA,EAAAA,KACnBC,GAAYC,EAAAA,EAAAA,IAAQH,IAClBI,QAASC,IAAmBC,EAAAA,EAAAA,IAAaC,IAAK,CAEpDH,QAASG,EAAMC,eAAeJ,UAAW,MAGrC,SACJK,EAAQ,aACRC,EAAY,QACZC,EAAO,SACPC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,MAEEC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAkBVC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAC9BC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,mBAC1CG,EAAmBC,IAAwBJ,EAAAA,EAAAA,UAAS,IAe3D,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,UACXF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,QAAOD,UACpBE,EAAAA,EAAAA,MAAA,QACEC,aAAa,MACbF,UAAU,eACVG,SAAUvB,EAvCAwB,IAChB,MAAMC,EAAe,CACnBC,aAAclC,QAAamC,EAC3BC,KAAU,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMK,MACZC,KAAU,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMO,UACZC,KAAU,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,KACZC,QAAQ,GAGV3B,GAAS4B,EAAAA,EAAAA,IAAqBT,IAAeU,KAAMX,IAC5CA,EAAKY,OACR5B,GAAU,OA4ByBW,SAAA,EAEjCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gDAA+CD,SAAA,EAE5DE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAiB,OAAKC,EAAAA,IAAsBnB,SAAA,CAAC,UAAMF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UACjFF,EAAAA,EAAAA,KAAA,SAAAsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,QACDzC,EAAS,QAAS,CACpB0C,SAAU,uBACV,IACFrB,UAAS,GAAAiB,OAAKK,EAAAA,GAAc,KAAAL,OAAIjC,EAAOyB,MACnC,gBACA,kBAAiB,KAErBc,YAAY,iBAEbvC,EAAOyB,QACNZ,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAEf,EAAOyB,MAAMe,cAKtDvB,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EAEEF,EAAAA,EAAAA,KAAC4B,EAAAA,GAAU,CACTjB,KAAK,OACL3B,QAASA,EACT6C,MAAO,CAAEL,SAAU,oBACnBM,OAAQC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAChB3B,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAA/B,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOG,UAAWkB,EAAAA,GAAoBnB,SAAC,UACvCE,EAAAA,EAAAA,MAAC8B,EAAAA,GAAMZ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDU,GAAK,IACTG,YAAU,EACVC,SAAWC,GAAUL,EAAMI,SAASC,GACpCC,aAAcA,CAACC,EAAOC,IACpBC,OAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQtC,UAAUwC,cAAcC,SAASJ,EAAMG,eAExDvC,UAAS,GAAAiB,OAAKwB,EAAAA,GAAwB,KAAAxB,OAAIjC,EAAO4B,KAAO,eAAiB,mBAAoBb,SAAA,EAE7FF,EAAAA,EAAAA,KAACkC,EAAAA,EAAOW,OAAM,CAACR,MAAM,GAAEnC,SAAC,gBACvB4C,EAAAA,EAASC,IAAI,CAACC,EAAMC,KACnBjD,EAAAA,EAAAA,KAACkC,EAAAA,EAAOW,OAAM,CAAaR,MAAOW,EAAKjC,KAAKb,SACzC8C,EAAKE,aADYD,QAKvB9D,EAAO4B,OAAQf,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAEf,EAAO4B,KAAKY,gBAItExC,EAAO4B,OACNf,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAEf,EAAO4B,KAAKY,cAKnDpD,IAAa6B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,mBAAkBD,SAAA,EAC9CE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAiB,OAAKC,EAAAA,IAAsBnB,SAAA,CAAC,SAAKF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAChFE,EAAAA,EAAAA,MAAA,OACED,UAAS,GAAAiB,OAAKK,EAAAA,GAAc,sCAC5B0B,QAjFSC,KACrB1D,GAAWD,IAgFyBS,SAAA,EAExBF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,8BAA6BD,UAC1CF,EAAAA,EAAAA,KAAA,QACEG,UAAU,gBACVkD,wBAAyB,CAAEC,OAAQ1D,QAGvCI,EAAAA,EAAAA,KAAA,OAAKG,UAAU,wBAAuBD,SACnCT,EAAS,SAAM,cAKnBA,IACCO,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gIAA+HD,SAC3IqD,EAAAA,EAASR,IAAI,CAAClC,EAAMoC,KACnBjD,EAAAA,EAAAA,KAAA,OAEEG,UAAU,yDACVgD,QAASA,KAjGJK,IAAC1C,EAAW2C,EAAX3C,EAkGaD,EAAKC,UAlGP2C,EAkGkB5C,EAAK4C,MAjG1D5D,EAAgB4D,GAChB1D,EAAqBe,GACrBpB,GAAU,GAGVT,EAAS,YAAa6B,IA8FJuC,wBAAyB,CAAEC,OAAQzC,EAAK4C,QALnCR,OAYbjD,EAAAA,EAAAA,KAAC4B,EAAAA,GAAU,CACTjB,KAAK,YACL3B,QAASA,EACT0E,aAAc5D,EACdgC,OAAQ6B,IAAA,IAAC,MAAE3B,GAAO2B,EAAA,OAChB3D,EAAAA,EAAAA,KAAA,SAAAsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWU,GAAK,IAAET,KAAK,SAASc,MAAOvC,eAM/CE,EAAAA,EAAAA,KAAA,OAAKG,UAAU,wBAAuBD,UACpCF,EAAAA,EAAAA,KAAA,UACEuB,KAAK,SACLqC,SAAUlF,EACVyB,UAAS,GAAAiB,OAAK1C,EAAiB,cAAgB,YAAW,gCAA+BwB,SAExFxB,GAAiBsB,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,IAAM,mBAO7C,C","sources":["pages/DyanmicSidebar/CreateDynamicSidebar.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../constents/global\";\nimport { dynamicSidebarCreate } from \"./DyanmicSidebarFeatures/_dyanmicSidebar_reducers\";\nimport { decrypt } from \"../../config/Encryption\";\nimport { slugData } from \"./sidebarjson\";\nimport { useState } from \"react\";\nimport { iconData } from \"./dynamicSidebarIcon\";\nimport Loader from \"../../global_layouts/Loader\";\nimport { Select } from \"antd\";\n\nfunction CreateDynamicSidebar() {\n  const { SidebarIdEnc } = useParams();\n  const sidebarId = decrypt(SidebarIdEnc);\n  const { loading: sideBarLoading } = useSelector((state) => ({\n\n    loading: state.dynamicSidebar.loading || false,\n  }));\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue, // Use setValue from useForm hook here\n    formState: { errors },\n  } = useForm();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      parentPageId: sidebarId || undefined,\n      name: data?.title,\n      icon: data?.iconClass,\n      slug: data?.slug,\n      status: true,\n    };\n\n    dispatch(dynamicSidebarCreate(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  };\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIcon, setSelectedIcon] = useState(\"Select an icon\");\n  const [selectedIconClass, setSelectedIconClass] = useState(\"\");\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleIconSelect = (iconClass, label) => {\n    setSelectedIcon(label);\n    setSelectedIconClass(iconClass);\n    setIsOpen(false);\n\n    // Correctly set the value in the form using setValue from useForm hook\n    setValue(\"iconClass\", iconClass); // This updates the form state\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-5 md:px-1\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {/* Title Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Title <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`${inputClassName} ${errors.title\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n\n\n            <div>\n             \n              <Controller\n                name=\"slug\"\n                control={control}\n                rules={{ required: \"Slug is required\" }}\n                render={({ field }) => (\n                  <>\n                    <label className={inputLabelClassName}>Slug</label>\n                    <Select\n                      {...field}\n                      showSearch\n                      onChange={(value) => field.onChange(value)}\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                      className={`${inputAntdSelectClassName} ${errors.slug ? \"border-[1px]\" : \"border-gray-300\"}`}\n                    >\n                      <Select.Option value=\"\">Select Slug</Select.Option>\n                      {slugData.map((item, index) => (\n                        <Select.Option key={index} value={item.slug}>\n                          {item.sidebarName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                    {errors.slug && <p className=\"text-red-500 text-sm\">{errors.slug.message}</p>}\n                  </>\n                )}\n              />\n              {errors.slug && (\n                <p className=\"text-red-500 text-sm\">{errors.slug.message}</p>\n              )}\n            </div>\n\n\n            {!sidebarId && <div className=\"relative w-full \">\n              <label className={`${inputLabelClassName}`}>Icon <span className=\"text-red-600\">*</span></label>\n              <div\n                className={`${inputClassName} flex justify-between items-center`}\n                onClick={toggleDropdown}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <span\n                    className=\"text-gray-700\"\n                    dangerouslySetInnerHTML={{ __html: selectedIcon }}\n                  />\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  {isOpen ? \"▲\" : \"▼\"}\n                </div>\n              </div>\n\n              {/* Dropdown options */}\n              {isOpen && (\n                <div className=\"flex flex-wrap absolute left-0 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10 max-h-60 overflow-y-auto\">\n                  {iconData.map((icon, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center p-3 cursor-pointer hover:bg-gray-100\"\n                      onClick={() => {\n                        handleIconSelect(icon.iconClass, icon.label);\n                      }}\n                      dangerouslySetInnerHTML={{ __html: icon.label }}\n                    />\n                  ))}\n                </div>\n              )}\n\n              {/* Hidden form control for selected icon */}\n              <Controller\n                name=\"iconClass\"\n                control={control}\n                defaultValue={selectedIconClass}\n                render={({ field }) => (\n                  <input {...field} type=\"hidden\" value={selectedIconClass} />\n                )}\n              />\n            </div>}\n          </div>\n\n          <div className=\"flex justify-end mt-4\">\n            <button\n              type=\"submit\"\n              disabled={sideBarLoading}\n              className={`${sideBarLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {sideBarLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default CreateDynamicSidebar;\n"],"names":["SidebarIdEnc","useParams","sidebarId","decrypt","loading","sideBarLoading","useSelector","state","dynamicSidebar","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","isOpen","setIsOpen","useState","selectedIcon","setSelectedIcon","selectedIconClass","setSelectedIconClass","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","parentPageId","undefined","name","title","icon","iconClass","slug","status","dynamicSidebarCreate","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","Controller","rules","render","_ref","field","_Fragment","Select","showSearch","onChange","value","filterOption","input","option","String","toLowerCase","includes","inputAntdSelectClassName","Option","slugData","map","item","index","sidebarName","onClick","toggleDropdown","dangerouslySetInnerHTML","__html","iconData","handleIconSelect","label","defaultValue","_ref2","disabled","Loader"],"sourceRoot":""}