{"version":3,"file":"static/js/7116.992cc377.chunk.js","mappings":"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","sources":["pages/global/other/bankAccounts/EditBankAccount.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\n\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { fileUploadFunc } from \"../fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { getbankAccountDetails, updatebankAccount } from \"./bankAccountFeature/_bank_account_reducers\";\nimport Swal from \"sweetalert2\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\nimport { Select } from \"antd\";\n\n\nconst EditBankAccount = () => {\n  const { loading: bankLoading } = useSelector(\n    (state) => state.bankAccount\n  );\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    watch,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { bankAccountIdEnc } = useParams();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const bankAccountId = decrypt(bankAccountIdEnc);\n  const ifscPattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n  const { bankAccountDetails } = useSelector(\n    (state) => state.bankAccount\n  );\n\n  useEffect(() => {\n    let reqData = {\n      _id: bankAccountId,\n    };\n    dispatch(getbankAccountDetails(reqData));\n  }, []);\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n\n  const handleBankFileChange = (file) => {\n    if (!file) return;\n    const isPdf = file?.type === 'application/pdf';\n    const filePreviewUrl = URL?.createObjectURL(file); // Generate preview URL for non-PDF files\n\n    // Show SweetAlert confirmation before uploading\n    Swal.fire({\n      title: 'Preview your file',\n      html: `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center;\">\n                <p style=\"margin-bottom: 20px;\">Do you want to upload this file?</p>\n                ${isPdf\n          ? `<p style=\"font-size: 16px; color: #074173;\">${file?.name}</p>`\n          : `<img src=\"${filePreviewUrl}\" alt=\"File Preview\" style=\"max-width: 100%; max-height: 300px; width: auto; height: auto;\">`\n        }\n                <br>\n            </div>\n        `,\n      showCancelButton: true,\n      confirmButtonText: 'Confirm!',\n      cancelButtonText: 'Cancel',\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Proceed with file upload only if the user confirms\n        dispatch(\n          fileUploadFunc({\n            filePath: file,\n            isVideo: false,\n            isMultiple: false,\n          })\n        ).then((data) => {\n          if (!data.error) {\n            setValue('fileUplaod', data?.payload?.data);\n\n            // Show success message after upload\n            Swal.fire({\n              icon: 'success',\n              title: 'Uploaded!',\n              text: 'Your file has been successfully uploaded.',\n              timer: 2000,\n              showConfirmButton: false\n            });\n          }\n        });\n      } else {\n\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (bankAccountDetails) {\n      setValue(\"holderName\", bankAccountDetails?.bankholderName);\n      setValue(\"accountNumber\", bankAccountDetails?.accountNumber);\n      setValue(\"ifscCode\", bankAccountDetails?.ifscCode);\n      setValue(\"bankName\", bankAccountDetails?.bankName);\n      setValue(\"branchName\", bankAccountDetails?.branchName);\n      setValue(\"accountType\", bankAccountDetails?.accountType);\n      setValue(\"fileUplaod\", bankAccountDetails?.filePath[0]);\n      setValue(\"fileUpload\", bankAccountDetails?.filePath[0]);\n      setValue(\"PDBranchId\", bankAccountDetails?.branchId);\n      setValue(\"status\", bankAccountDetails?.status ? \"true\" : \"false\");\n    }\n  }, [bankAccountDetails])\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: bankAccountId,\n      companyId: bankAccountDetails?.companyId,\n      directorId: bankAccountDetails?.directorId,\n      branchId: bankAccountDetails?.branchId,\n      \"bankholderName\": data?.holderName,\n      \"bankName\": data?.bankName,\n      \"accountNumber\": data?.accountNumber,\n      \"ifscCode\": data?.ifscCode,\n      \"accountType\": data?.accountType,\n      \"branchName\": data?.branchName,\n      status: data?.status === 'true' ? true : false,\n      \"filePath\": [\n        data?.fileUplaod\n      ]\n    };\n\n    dispatch(updatebankAccount(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"mt-2\">\n\n        <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-4 gap-2\">\n\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Branch\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Bank Holder Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Bank Holder Name\"\n                name=\"holderName\"\n                {...register(\"holderName\", {\n                  required: \" Bank Holder Name is required\",\n                })}\n              />\n              {errors.holderName && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.holderName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Bank Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Bank  Name\"\n                name=\"bankName\"\n                {...register(\"bankName\", {\n                  required: \" Bank  Name is required\",\n                })}\n              />\n              {errors.bankName && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.bankName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Branch  Name\"\n                name=\"branchName\"\n                {...register(\"branchName\", {\n                  required: \" Branch  Name is required\",\n                })}\n              />\n              {errors.branchName && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.branchName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Account Number <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter Account  Number\"\n                name=\"accountNumber\"\n                type=\"number\"\n                {...register(\"accountNumber\", {\n                  required: \" Account Number is required\",\n                  minLength: {\n                    value: 6,\n                    message: \"Account number must be at least 6 characters long\"\n                  },\n                  maxLength: {\n                    value: 18,\n                    message: \"Account number must not exceed 18 characters\"\n                  },\n                })}\n              />\n              {errors.accountNumber && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.accountNumber.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                IFSC Code <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                className={`${inputClassName}`}\n                placeholder=\"Enter IFSC Code\"\n                name=\"ifscCode\"\n                {...register(\"ifscCode\", {\n                  required: \"IFSC Code is required\",\n                  pattern: {\n                    value: ifscPattern,\n                    message: \"Invalid IFSC code. Example: SBIN0001234\",\n                  }\n                })}\n              />\n              {errors.ifscCode && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.ifscCode.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Account Type <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n\n                className={`${inputClassName} `}\n                showSearch\n                filterOption={(input, option) =>\n                  String(option?.children).toLowerCase().includes(input.toLowerCase())\n                }\n                {...register(\"accountType\", {\n                  required: \" Account Type is required\",\n                })}\n              >\n                <option value=\"\">Select Account Type</option>\n                <option className=\"\" value=\"saving\">\n                  Saving\n                </option>\n                <option className=\"\" value=\"current\">\n                  Current\n                </option>\n                <option className=\"\" value=\"Salary\">\n                  Salary\n                </option>\n                <option className=\"\" value=\"Joint\">\n                  Joint\n                </option>\n              </select>\n              {errors.accountType && (\n                <p className=\"text-red-600 text-sm mt-1\">\n                  {errors.accountType.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Status\"\n                  >\n                    <Select.Option value=\"true\">Active</Select.Option>\n                    <Select.Option value=\"false\">In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n\n            <div className=\"flex items-center gap-2 \">\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Upload <span className=\"text-red-600\">*</span>\n                </label>\n\n                <Controller\n                  name=\"fileUpload\"\n                  control={control}\n                  rules={{ required: \"File upload is required\" }}\n                  render={({ field }) => (\n                    <>\n                      <input\n                        type=\"file\"\n                        id=\"file-upload\"\n                        className=\"hidden\"\n                        onChange={(e) => {\n                          field.onChange(e); // Pass the file to React Hook Form\n                          handleBankFileChange(e?.target?.files[0]); // Custom file handling function\n                        }}\n                      />\n                      <br />\n                      <label\n                        htmlFor=\"file-upload\"\n                        className=\"bg-header text-white mt-2 py-1.5 px-3 text-nowrap text-sm rounded cursor-pointer\"\n                      >\n                        Upload\n                      </label>\n                      {errors.fileUpload && (\n                        <p className=\"text-red-600 text-sm mt-1\">{errors.fileUpload.message}</p>\n                      )}\n                    </>\n                  )}\n                />\n              </div>\n\n              {/* Check if file is valid and then render the image */}\n              {watch('fileUplaod') ? (\n                <img\n                  src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${watch('fileUplaod')}`}\n                  alt=\"Uploaded\"\n                  className=\"w-20 h-20 shadow rounded-sm\"\n                />\n              ) : null}\n            </div>\n\n          </div>\n\n          <div className=\"flex justify-end items-center\">\n            <button\n              type=\"submit\"\n              disabled={bankLoading}\n              className={`${bankLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 mt-4 ml-4 px-4 rounded`}\n            >\n              {bankLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditBankAccount;\n"],"names":["EditBankAccount","loading","bankLoading","useSelector","state","bankAccount","register","handleSubmit","control","setValue","watch","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","bankAccountIdEnc","useParams","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","bankAccountId","decrypt","companyList","companyListLoading","company","branchList","branchListloading","branch","bankAccountDetails","useEffect","reqData","_id","getbankAccountDetails","useWatch","name","defaultValue","bankholderName","accountNumber","ifscCode","bankName","branchName","accountType","filePath","branchId","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","companyId","directorId","holderName","fileUplaod","updatebankAccount","then","error","userType","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","ListLoader","map","type","fullName","PDCompanyId","message","_ref2","PDBranchId","placeholder","inputClassName","minLength","maxLength","pattern","_ref3","_ref4","_Fragment","id","onChange","e","_e$target","file","_URL","isPdf","filePreviewUrl","URL","createObjectURL","Swal","title","html","showCancelButton","confirmButtonText","cancelButtonText","result","isConfirmed","fileUploadFunc","isVideo","isMultiple","_data$payload","payload","icon","text","timer","showConfirmButton","handleBankFileChange","target","files","htmlFor","fileUpload","src","process","alt","Loader"],"sourceRoot":""}