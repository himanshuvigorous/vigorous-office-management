{"version":3,"file":"static/js/68.8f8bb43e.chunk.js","mappings":"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","sources":["pages/hr/attendance/UpdateAttendance.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useForm, useWatch } from 'react-hook-form';\nimport moment from 'moment';\nimport { employeSearch } from '../../employeManagement/employeFeatures/_employe_reducers';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { domainName, inputClassName, inputLabelClassName } from '../../../constents/global';\nimport { companySearch } from '../../company/companyManagement/companyFeatures/_company_reducers';\nimport { deptSearch } from '../../department/departmentFeatures/_department_reducers';\nimport { branchSearch } from '../../branch/branchManagement/branchFeatures/_branch_reducers';\nimport { designationSearch } from '../../designation/designationFeatures/_designation_reducers';\nimport { attendancegCreate } from './AttendanceFeatures/_attendance_reducers';\nimport Swal from 'sweetalert2';\nimport GlobalLayout from '../../../global_layouts/GlobalLayout/GlobalLayout';\nimport { useNavigate } from 'react-router-dom';\n\nconst UpdateAttendance = () => {\n  const { register, handleSubmit,  control,setValue, formState: { errors } } = useForm({\n    defaultValues: {\n      employeeName: '',\n      date: moment().format('YYYY-MM-DD'),\n      checkInTime: '',\n      checkOutTime: '',\n      reason: '',\n      errors: {},\n    }\n  });\n  const navigate = useNavigate();\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n\n  const departmentId = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: \"\",\n  });\n  const designationId = useWatch({\n    control,\n    name: \"PDDesignationId\",\n    defaultValue: \"\",\n  });\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const dispatch = useDispatch();\n  const { branchList } = useSelector(\n    (state) => state.branch\n  );\n  const { companyList } = useSelector((state) => state.company);\n  const { designationList } = useSelector((state) => state.designation);\n  const { departmentListData } = useSelector((state) => state.department);\n  const { employeList } = useSelector(\n    (state) => state.employe\n  );\n  const onFormSubmit = (data) => {\n    const reqData = {\n      employeId: data.employee,\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId ,\n      attendanceDate: data.date,\n      checkInTime: data.checkOutTime ?  new Date(new Date(data.date).setHours(...data.checkInTime.split(':').map(Number), 0, 0)).toISOString(): null,\n      checkOutTime:  data.checkOutTime ?  new Date(new Date(data.date).setHours(...data.checkOutTime.split(':').map(Number), 0, 0)).toISOString(): null,\n      shift: data.shift,\n      workType: data?.workType,\n      method: \"hr_portal\",\n      reason: data.reason,\n      employeeName: data.employeeName\n    };\n\n    dispatch(attendancegCreate(reqData)).then((response) => {\n      if(!response.error){\n        navigate('/admin/all-employee-attendance')\n      }\n    });\n\n  };\n\nuseEffect(()=>{\nif(userInfoglobal?.userType === \"admin\" ){\n  dispatch(companySearch({text: \"\", sort: true, status: true, isPagination: false}))\n}\n},[])\n\nuseEffect(()=>{\n  if( userInfoglobal?.userType !== \"admin\" || companyId ){\n    setValue(\"PDDepartmentId\", \"\");\n    setValue(\"PDDesignationId\", \"\");\n    setValue(\"PDBranchId\", \"\");\n    dispatch(deptSearch({\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      text: \"\", sort: true, status: true, isPagination: false}))\n    dispatch(branchSearch({\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      text: \"\", sort: true, status: true, isPagination: false}))\n  }\n},[companyId])\n\nuseEffect(()=>{\nif(departmentId){\n  dispatch(designationSearch({departmentId: departmentId, \"text\": \"\", \"sort\": true, \"status\": true, \"isPagination\": false}))\n}\n},[departmentId])\n\n\nuseEffect(()=>{\nif((companyId || userInfoglobal?.userType !== \"admin\") && (branchId || userInfoglobal?.userType !== \"companBranch\"  || userInfoglobal?.userType === \"employee\") && departmentId && designationId){\n  fetchEmployeListData()\n}\n},[companyId , branchId , departmentId , designationId])\n\n  const fetchEmployeListData = () => {\n    const reqPayload = {\n      text: \"\",\n      status: true,\n      sort: true,\n      isTL: \"\",\n      isHR: \"\",\n      isPagination: false,\n      departmentId: departmentId,\n      designationId: designationId,\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n    };\n\n    dispatch(employeSearch(reqPayload));\n  };\n\n\n\n  return (\n <GlobalLayout>\n     <div className=\"\">\n     <form autoComplete=\"off\" onSubmit={handleSubmit(onFormSubmit)} className=\"grid grid-col-1 md:grid-cols-2 gap-4\">\n          {userInfoglobal?.userType === \"admin\" && (\n            <div>\n              <label className={`${inputLabelClassName}`}>Company</label>\n              <select\n                {...register(\"PDCompanyId\", { required: \"Company is required\" })}\n                className={`${inputClassName} ${errors.PDCompanyId ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select Company</option>\n                {companyList?.map((type) => (\n                  <option key={type?._id} value={type?._id}>\n                    {type?.fullName}\n                  </option>\n                ))}\n              </select>\n              {errors.PDCompanyId && <p className=\"text-red-500 text-sm\">{errors.PDCompanyId.message}</p>}\n            </div>\n          )}\n          \n          {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n            <div>\n              <label className={`${inputLabelClassName}`}>Branch</label>\n              <select\n                {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                className={`${inputClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select Branch</option>\n                {branchList?.map((type) => (\n                  <option key={type?._id} value={type?._id}>\n                    {type?.fullName}\n                  </option>\n                ))}\n              </select>\n              {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n            </div>\n          )}\n\n          <div>\n            <label className={`${inputLabelClassName}`}>Department<span className=\"text-red-600\">*</span></label>\n            <select\n              {...register(\"PDDepartmentId\", { required: \"Department is required\" })}\n              className={`${inputClassName} ${errors.PDDepartmentId ? \"border-[1px] \" : \"border-gray-300\"}`}\n            >\n              <option value=\"\">Select Department</option>\n              {departmentListData?.map((element) => (\n                <option key={element?._id} value={element?._id}>\n                  {element?.name}\n                </option>\n              ))}\n            </select>\n            {errors.PDDepartmentId && <p className=\"text-red-500 text-sm\">{errors.PDDepartmentId.message}</p>}\n          </div>\n\n    \n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Designation</label>\n              <select\n                {...register(\"PDDesignationId\", { required: \"Designation is required\" })}\n                className={`${inputClassName} ${errors.PDDesignationId ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select Designation</option>\n                {designationList?.map((type) => (\n                  <option key={type?._id} value={type?._id}>\n                    {type?.name}\n                  </option>\n                ))}\n              </select>\n              {errors.PDDesignationId && <p className=\"text-red-500 text-sm\">{errors.PDDesignationId.message}</p>}\n            </div>\n      \n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Employee</label>\n              <select\n                {...register(\"employee\")}\n                className={`${inputClassName} ${errors.employee ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select Employee</option>\n                {employeList?.map((type) => (\n                  <option key={type?._id} value={type?._id}>\n                    {type?.fullName}\n                  </option>\n                ))}\n              </select>\n              {errors.employee && <p className=\"text-red-500 text-sm\">{errors.employee.message}</p>}\n            </div>\n            <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Select Shift{\" \"}\n                  </label>\n                  <select\n                    {...register(\"shift\", {\n                      required: \"Shift is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.shift\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Shift\n                    </option>\n                    {['regular', 'night', 'morning']?.map((type) => (\n                      <option value={type}>{type}</option>\n                    ))}\n                  </select>\n                  {errors.shift && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.shift.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>\n                    Select Work Type\n                  </label>\n                  <select\n                    {...register(\"workType\", {\n                      required: \"Work Type is required\",\n                    })}\n                    className={` ${inputClassName} ${errors.workType\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                      }`}\n                  >\n                    <option className=\"\" value=\"\">\n                      Select Work Type\n                    </option>\n                    {['work_from_office', 'work_from_home', 'hybrid', 'remote']?.map((type) => (\n                      <option value={type}>{type}</option>\n                    ))}\n                  </select>\n                  {errors.workType && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.workType.message}\n                    </p>\n                  )}\n                </div>\n\n          <div>\n            <label className={`${inputLabelClassName}`}>Date</label>\n            <input\n              type=\"date\"\n              {...register('date', { required: true })}\n              className={`${inputClassName} ${errors.date ? \"border-[1px] \" : \"border-gray-300\"}`}\n            />\n          </div>\n\n          <div>\n            <label className={`${inputLabelClassName}`}>Check-in Time</label>\n            <input\n              type=\"time\"\n              {...register('checkInTime', { required: true })}\n              className={`${inputClassName} ${errors.checkInTime ? \"border-[1px] \" : \"border-gray-300\"}`}\n            />\n          </div>\n\n          <div>\n            <label className={`${inputLabelClassName}`}>Check-out Time</label>\n            <input\n              type=\"time\"\n              {...register('checkOutTime', { required: true })}\n              className={`${inputClassName} ${errors.checkOutTime ? \"border-[1px] \" : \"border-gray-300\"}`}\n            />\n          </div>\n\n          <div>\n            <label className={`${inputLabelClassName}`}>Reason</label>\n            <textarea\n              {...register('reason', { required: true })}\n              className={`${inputClassName} ${errors.reason ? \"border-[1px] \" : \"border-gray-300\"}`}\n              rows=\"3\"\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-2 mt-4\">\n           \n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 text-sm font-medium text-white bg-header rounded-md hover:bg-[#063156]\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n    </div>\n </GlobalLayout>\n  );\n};\n\nexport default UpdateAttendance;\n"],"names":["UpdateAttendance","_ref","_ref2","register","handleSubmit","control","setValue","formState","errors","useForm","defaultValues","employeeName","date","moment","format","checkInTime","checkOutTime","reason","navigate","useNavigate","branchId","useWatch","name","defaultValue","companyId","departmentId","designationId","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","dispatch","useDispatch","branchList","useSelector","state","branch","companyList","company","designationList","designation","departmentListData","department","employeList","employe","useEffect","userType","companySearch","text","sort","status","isPagination","deptSearch","_id","branchSearch","designationSearch","fetchEmployeListData","reqPayload","isTL","isHR","employeSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","reqData","employeId","employee","directorId","attendanceDate","Date","setHours","split","map","Number","toISOString","shift","workType","method","attendancegCreate","then","response","error","inputLabelClassName","_objectSpread","required","inputClassName","PDCompanyId","value","type","fullName","message","PDBranchId","PDDepartmentId","element","PDDesignationId","rows"],"sourceRoot":""}