{"version":3,"file":"static/js/1182.a202c75f.chunk.js","mappings":"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","sources":["pages/hr/EventCalanderManagement/EditEventCalander.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../constents/global\";\nimport { useEffect } from \"react\";\nimport {\n  updateEventCalander,\n  geteventCalanderDetails,\n} from \"./EventCalanderFeatures/_event_calander_reducers\";\nimport { decrypt } from \"../../../config/Encryption\";\n\nimport getUserIds from \"../../../constents/getUserIds\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nconst EditEventCalander = () => {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      attendees: [{ name: \"\", email: \"\", status: \"\" }], // default empty attendee\n      startTime: \"\",\n      endTime: \"\",\n      isAllDay: \"\",\n      recurrence: {\n        frequency: \"\",\n        interval: 1,\n        endDate: \"\",\n      },\n    },\n  });\n  const { userCompanyId, userType } = getUserIds();\n  const { eventCalanderEnc } = useParams();\n  const eventCalander = decrypt(eventCalanderEnc);\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"attendees\",\n  });\n  const { companyList } = useSelector((state) => state.company);\n  const { directorLists } = useSelector((state) => state.director);\n  const { branchList } = useSelector((state) => state.branch);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { eventCalanderDetails ,loading:eventCalanderLoading } = useSelector(\n    (state) => state.eventCalander\n  );\n\n \n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  useEffect(() => {\n    if (eventCalanderDetails) {\n  \n      setValue(\"PDCompanyId\", eventCalanderDetails?.PDCompanyId);\n      setValue(\"title\", eventCalanderDetails?.title);\n      setValue(\"attendees\", eventCalanderDetails?.attendees);\n      setValue(\n        \"startTime\",\n        dayjs(eventCalanderDetails?.startDate)\n      );\n      setValue(\"location\", eventCalanderDetails?.location);\n      setValue(\n        \"endTime\",\n        dayjs(eventCalanderDetails?.endDate)\n      );\n     \n      setValue(\"description\", eventCalanderDetails?.description);\n      setValue(\"status\", eventCalanderDetails?.status === true ? 'true' : \"false\");\n    \n      \n     \n      eventCalanderDetails.attendees?.forEach((attendee, index) => {\n        setValue(`attendees[${index}].email`, attendee?.email || \"\");\n        setValue(`attendees[${index}].name`, attendee?.name || \"\");\n        setValue(`attendees[${index}].status`, attendee?.status || \"Pending\");\n      });\n    }\n\n  }, [eventCalanderDetails, setValue]);\n\n  useEffect(() => {\n    if (eventCalander) {\n      dispatch(geteventCalanderDetails({ _id: eventCalander }));\n    }\n  }, []);\n  const status = useWatch({\n    control,\n    name:'status',\n    defaultValue:''\n  })\n\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      _id: eventCalander,\n      branchId: eventCalanderDetails.branchId,\n      companyId: companyId,\n      directorID: \"\",\n\n      // branchId: JSON.parse(localStorage.getItem(`user_info_${domainName}`)).branchId,\n      ...data,\n\n      title: data.title,\n      description: data.description,\n      location: data.location,\n      startDate: dayjs(data.startTime),\n      endDate: dayjs(data.endTime),\n      attendees: data.attendees,\n      status: data?.status === \"true\" ? true : false,\n    };\n\n    dispatch(updateEventCalander(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  const handleCompanyChange = (event) => {\n    setValue(\"PDCompanyId\", event.target.value);\n    setValue(\"PDBranchId\", \"\");\n    setValue(\"PDDirectorId\", \"\");\n    dispatch(\n      directorSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: event.target.value,\n      })\n    );\n    dispatch(\n      branchSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: event.target.value,\n      })\n    );\n  };\n\n  const handleFocusCompany = () => {\n    if (!companyList?.length) {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  };\n\n  const handleFocusDirector = () => {\n    if (!directorLists?.length) {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  };\n\n  const handleBranchChange = (event) => {\n    setValue(\"PDBranchId\", event.target.value);\n    setValue(\"PDDepartmentId\", \"\");\n    dispatch(\n      deptSearch({\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        companyId: companyId,\n        branchId: event.target.value,\n      })\n    );\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:my-2\">\n            {/* {userType === \"admin\" && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"Company is required\",\n                  })}\n                  className={`${inputClassName}  ${errors.PDCompanyId ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                  onChange={handleCompanyChange}\n                  onFocus={handleFocusCompany}\n                >\n                  <option value=\"\">Select Company</option>\n                  {companyList?.map((company) => (\n                    <option key={company._id} value={company._id}>\n                      {company?.userName}({company?.fullName})\n                    </option>\n                  ))}\n                </select>\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userType === \"admin\" || userType === \"company\" || userType === \"companyDirector\") && (\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName}  ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                  onChange={handleBranchChange}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((branch) => (\n                    <option key={branch._id} value={branch._id}>\n                      {branch.userName}({branch.fullName})\n                    </option>\n                  ))}\n                </select>\n                {errors.PDBranchId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDBranchId.message}\n                  </p>\n                )}\n              </div>\n            )} */}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"title\", { required: \"Title is required\" })}\n                type=\"text\"\n                className={`${inputClassName} ${\n                  errors.title ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Description <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.description ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Location <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"location\", { required: \"Location is required\" })}\n                type=\"text\"\n                className={`${inputClassName} ${\n                  errors.location ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n              {errors.location && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.location.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Start Time <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <input\n                {...register(\"startTime\", {\n                  required: \"Start time is required\",\n                })}\n                type=\"datetime-local\"\n                className={`${inputClassName} ${\n                  errors.startTime ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              /> */}\n\n<Controller\n               name=\"startTime\"\n               control={control}\n                showTime={true} \n                rules={{\n                  required: \"Start Time  is required\",\n                }}\n                format = \"DD/MM/YYYY hh:mm\"\n               render={({ field }) => (\n                 <CustomDatePicker\n                   field={field}\n                   showTime={true} \n                   format = \"DD/MM/YYYY hh:mm\"\n                   errors={errors}\n                   disabledDate={(current) => {\n                     return (\n                       current &&\n                       current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                     );\n                   }}\n                 />\n               )}\n             />\n          \n              {errors.startTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.startTime.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                End Time <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <input\n                {...register(\"endTime\", { required: \"End time is required\" })}\n                type=\"datetime-local\"\n                className={`${inputClassName} ${\n                  errors.endTime ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              /> */}\n               <Controller\n               name=\"endTime\"\n               control={control}\n                showTime={true} \n                rules={{\n                  required: \"End Time  is required\",\n                }}\n                format = \"DD/MM/YYYY hh:mm\"\n               render={({ field }) => (\n                 <CustomDatePicker\n                   field={field}\n                   showTime={true} \n                   format = \"DD/MM/YYYY hh:mm\"\n                   errors={errors}\n                   disabledDate={(current) => {\n                     return (\n                       current &&\n                       current?.isBefore(dayjs().endOf(\"day\"), \"day\")\n                     );\n                   }}\n                 />\n               )}\n             />\n              {errors.endTime && (\n                <p className=\"text-red-500 text-sm\">{errors.endTime.message}</p>\n              )}\n            </div>\n\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                All Day Event <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"isAllDay\", {\n                  required: \"Please select whether it is an all-day event\",\n                })}\n                className={`${inputClassName} ${\n                  errors.isAllDay ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              >\n                <option value=\"\">Select all Day</option>\n                <option value=\"true\">Active</option>\n                <option value=\"false\">InActive</option>\n              </select>\n              {errors.isAllDay && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.isAllDay.message}\n                </p>\n              )}\n            </div> */}\n{/* \n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Recurrence Frequency <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"recurrence.frequency\")}\n                className={`${inputClassName} ${\n                  errors.recurrence?.frequency\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                }`}\n              >\n                <option value=\"\">Select Recurrence</option>\n                <option value=\"weekly\">Weekly</option>\n                <option value=\"monthly\">Monthly</option>\n                <option value=\"yearly\">Yearly</option>\n              </select>\n              {errors.recurrence?.frequency && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.recurrence.frequency.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n             \n              <label className={`${inputLabelClassName}`}>\n                Recurrence Interval <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"recurrence.interval\", {\n                  required: \"Recurrence interval is required\",\n                })}\n                type=\"number\"\n                className={`${inputClassName} ${\n                  errors.recurrence?.interval\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                }`}\n              />\n              {errors.recurrence?.interval && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.recurrence.interval.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              Recurrence End Date Input Field\n              <label className={`${inputLabelClassName}`}>\n                Recurrence End Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"recurrence.endDate\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isAfter(moment().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n              {errors.recurrence?.endDate && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.recurrence.endDate.message}\n                </p>\n              )}\n            </div> */}\n                <div className=\"\">\n              {/* Is Recurring Select Field */}\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n  \n              <Controller\n                      name=\"status\"\n                      control={control}\n                      rules={{\n                        required: \"status  is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                \n                          placeholder=\"Select status\"\n                          showSearch\n\n                        >\n                          <Select.Option value=\"\">Select status</Select.Option>\n                          <Select.Option value=\"true\">Active</Select.Option>                             \n                            <Select.Option value=\"false\">InActive</Select.Option>\n                           \n                        </Select>\n                      )}\n                    />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.status.message}\n                </p>\n              )}\n            </div>\n\n            \n          </div>\n      \n          {/* Attendees Input Fields */}\n\n          {fields.map((item, index) => (\n            <div className=\"md:col-span-3 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n              {/* Attendee Name Input Field */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Attendee Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  {...register(`attendees[${index}].name`, {\n                    required: \"Attendee name is required\",\n                  })}\n                  placeholder=\"Attendee Name\"\n                  type=\"text\"\n                  className={`${inputClassName} ${\n                    errors.attendees?.[index]?.name\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                  }`}\n                />\n                {errors.attendees?.[index]?.name && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.attendees[index].name.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Attendee Email Input Field */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Attendee Email <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  {...register(`attendees[${index}].email`, {\n                    required: \"Attendee email is required\",\n                  })}\n                  placeholder=\"Attendee Email\"\n                  type=\"email\"\n                  className={`${inputClassName} ${\n                    errors.attendees?.[index]?.email\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                  }`}\n                />\n                {errors.attendees?.[index]?.email && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.attendees[index].email.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Attendee Status Input Field */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Attendee Status\n                </label>\n                {/* <select\n                  {...register(`attendees[${index}].status`)}\n                  className={`${inputClassName} ${\n                    errors.attendees?.[index]?.status\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                  }`}\n                >\n                  <option value=\"\">select Status</option>\n                  <option value=\"accepted\">Accepted</option>\n            \n                  <option value=\"declined\">Declined</option>\n                </select> */}\n\n                <Controller\n                      name={`attendees[${index}].status`}\n                      control={control}\n                      rules={{\n                        required: \"status  is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"}`}\n                \n                          placeholder=\"Select status\"\n                          showSearch\n\n                        >\n                          <Select.Option value=\"\">Select status</Select.Option>\n                          <Select.Option value=\"accepted\">Accepted</Select.Option>                             \n                            <Select.Option value=\"declined\">Declined</Select.Option>\n                           \n                        </Select>\n                      )}\n                    />\n                {errors.attendees?.[index]?.status && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.attendees[index].status.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Delete Button for Attendee */}\n              <div className=\"flex md:justify-center justify-end items-end\">\n                <button\n                  type=\"button\"\n                  onClick={() => remove(index)}\n                  className=\"text-gray-600 hover:text-gray-800 flex items-center justify-center border-2 border-gray-500 p-1 rounded-lg\"\n                >\n                  <i className=\"fas fa-trash-alt flex items-center justify-center w-[25px] h-[25px]\"></i>\n                </button>\n              </div>\n            </div>\n          ))}\n\n          {/* Add Attendee Button */}\n          <div className=\"mt-4\">\n            <button\n              type=\"button\"\n              onClick={() =>\n                append({ name: \"\", email: \"\", status: \"accepted\" })\n              }\n              className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n            >\n              Add More\n            </button>\n          </div>\n\n          <div className=\"flex justify-end mt-4\">\n                      <button\n                        type=\"submit\"\n                        disabled={eventCalanderLoading}\n                        className={`${eventCalanderLoading ? 'bg-gray-400': 'bg-header' } text-white p-2 px-4 rounded`}\n                      >\n                      {eventCalanderLoading ? <Loader /> : 'Submit'}\n                      </button>\n          \n                    </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditEventCalander;\n"],"names":["EditEventCalander","register","handleSubmit","setValue","control","formState","errors","useForm","defaultValues","attendees","name","email","status","startTime","endTime","isAllDay","recurrence","frequency","interval","endDate","userCompanyId","userType","getUserIds","eventCalanderEnc","useParams","eventCalander","decrypt","fields","append","remove","useFieldArray","companyList","useSelector","state","company","directorLists","director","branchList","branch","dispatch","useDispatch","navigate","useNavigate","eventCalanderDetails","loading","eventCalanderLoading","companyId","useWatch","defaultValue","useEffect","_eventCalanderDetails","PDCompanyId","title","dayjs","startDate","location","description","forEach","attendee","index","concat","geteventCalanderDetails","_id","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","_objectSpread","branchId","directorID","updateEventCalander","then","error","inputLabelClassName","required","type","inputClassName","message","Controller","showTime","rules","format","render","_ref","field","CustomDatePicker","disabledDate","current","isBefore","endOf","_ref2","_ref3","Select","inputAntdSelectClassName","PDPlan","placeholder","showSearch","Option","value","map","item","_errors$attendees","_errors$attendees$ind","_errors$attendees2","_errors$attendees2$in","_errors$attendees3","_errors$attendees3$in","_errors$attendees4","_errors$attendees4$in","_errors$attendees5","_errors$attendees5$in","_ref4","onClick","disabled","Loader"],"sourceRoot":""}