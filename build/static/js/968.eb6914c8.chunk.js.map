{"version":3,"file":"static/js/968.eb6914c8.chunk.js","mappings":"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","sources":["pages/client/clientGroup/CreateClientGroup.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { AutoComplete, Input, Select } from \"antd\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { createClientGroup } from \"../clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nfunction CreateClientGroup() {\n  const { loading: clientGroupLoading } = useSelector(state => state.clientGroup)\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { companyList } = useSelector((state) => state.company);\n  const { countryListData, companyListLoading } = useSelector((state) => state.country);\n  const { branchList, branchListloading } = useSelector((state) => state.branch);\n\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  useEffect(() => {\n    setValue(\"PDMobileCode\", \"+91\");\n  }, [countryListData]);\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (companyId && userType === \"company\" || userType === \"admin\") {\n      dispatch(\n        directorSearch({\n          text: \"\", sort: true, status: true, isPagination: false, companyId: companyId,\n        })\n      );\n    }\n  }, [companyId]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n      \"directorId\": \"\",\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      fullName: data?.fullName,\n      email: data?.email,\n      openingBalance:+data?.openingBalance,\n      userType: \"clientGroup\",\n      // password: data?.password,\n      mobile: {\n        code: data?.code,\n        number: data?.number,\n      },\n    };\n    dispatch(createClientGroup(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"\"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Comapany\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                        <Loader />\n                      </Select.Option> : (companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDBranchId\", { required: \"Branch is required\" })}\n                  className={`${inputClassName} ${errors.PDBranchId ? \"\" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">Select Branch</option>\n                  {branchList?.map((type) => (\n                    <option key={type?._id} value={type?._id}>\n                      {type?.fullName}\n                    </option>\n                  ))}\n                </select> */}\n                <Controller\n                  control={control}\n                  name=\"PDBranchId\"\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? (<Select.Option disabled>\n                        <Loader />\n                      </Select.Option>) :\n                        (sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"fullName\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.fullName\n                  ? \"\"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.fullName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.fullName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Email <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"email\", {\n                  required: \"Email is required\",\n                  pattern: {\n                    value:\n                      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                    message: \"Please enter a valid email address\",\n                  },\n                })}\n                className={` ${inputClassName} ${errors.email ? \"\" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Email\"\n              />\n              {errors.email && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.email.message}\n                </p>\n              )}\n            </div>\n            {/* <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Password <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"password\"\n                {...register(\"password\", {\n                  required: \"Password is required\",\n                })}\n                className={` ${inputClassName} ${errors.password ? \"\" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Password\"\n              />\n              {errors.password && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.password.message}\n                </p>\n              )}\n            </div> */}\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  Code <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"code\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker\n                      field={field}\n                      errors={errors}\n                    />\n                  )}\n                />\n\n                {/* <select\n                            {...register(\"code\", {\n                              required: \"MobileCode is required\",\n                            })}\n                            onFocus={() => {\n                              dispatch(\n                                countrySearch({\n                                  isPagination: false,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                })\n                              );\n                            }}\n                            className={` ${inputClassName} ${\n                              errors.code\n                                ? \"\"\n                                : \"border-gray-300\"\n                            }`}\n                          >\n                            <option className=\"\" value=\"\">\n                              Select Mobile Code\n                            </option>\n                            {countryListData?.docs?.map((type) => (\n                              <option value={type?.countryMobileNumberCode}>\n                                {type?.countryMobileNumberCode}\n                              </option>\n                            ))}\n                          </select> */}\n                {errors[`code`] && (\n                  <p className=\"text-red-500 text-sm mt-3\">\n                    {errors[`code`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`number`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`number`]\n                    ? \"\"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`number`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`number`].message}\n                  </p>\n                )}\n              </div>\n\n             \n            </div>\n               <div className=\"\">\n                                  <label className={`${inputLabelClassName}`}>\n                                    Opening Balance\n                                  </label>\n                                  <input\n                                    type=\"number\"\n                                    step=\"any\"\n                                    {...register(\"openingBalance\", {\n                                     \n              \n                                   \n                                    })}\n                                    className={` ${inputClassName} ${errors.openingBalance\n                                      ? \"border-[1px] \"\n                                      : \"border-gray-300\"\n                                      } `}\n                                    placeholder=\"Enter Opening Balance \"\n                                   \n                                  />\n                                  {errors.openingBalance && (\n                                    <p className=\"text-red-500 text-sm\">\n                                      {errors.openingBalance.message}\n                                    </p>\n                                  )}\n                                </div>\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={clientGroupLoading}\n              className={`${clientGroupLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {clientGroupLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateClientGroup\n"],"names":["loading","clientGroupLoading","useSelector","state","clientGroup","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","company","countryListData","companyListLoading","country","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","companySearch","text","sort","status","isPagination","branchSearch","_id","directorSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","fullName","email","openingBalance","mobile","code","number","createClientGroup","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","value","disabled","Loader","map","type","PDCompanyId","message","_ref2","_sortByPropertyAlphab","sortByPropertyAlphabetically","PDBranchId","inputClassName","placeholder","pattern","_ref3","CustomMobileCodePicker","minLength","maxLength","onInput","e","target","length","slice","step"],"sourceRoot":""}