{"version":3,"file":"static/js/7679.014bba7a.chunk.js","mappings":"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","sources":["pages/PreSalesManagement/LeadsManagementCategory/EditLeadsManagementCategory.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../constents/global\";\nimport { useEffect } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport { createLeadCategoryFunc, getLeadCategoryById, updateLeadCategoryFunc } from \"./LeadCategoryFeatures/_LeadCategory_reducers\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport { Select } from \"antd\";\n\n\nfunction EditLeadsManagementCategory() {\n  const { loading: leadCategoryLoading , LeadCategoryByIdData } = useSelector(state => state.leadCategory)\n      const { leadCategoryIdEnc } = useParams();\n      const leadCategoryId = decrypt(leadCategoryIdEnc);\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  useEffect(() => {\n    let reqData = {\n      _id: leadCategoryId,\n    };\n    dispatch(getLeadCategoryById(reqData));\n  }, []);\n \n  useEffect(() => {\n    if (LeadCategoryByIdData) {\n      setValue(\"Category\", LeadCategoryByIdData?.name);\n      setValue(\"status\", LeadCategoryByIdData?.status?'true':'false');\n    }\n  }, [LeadCategoryByIdData]);\n\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: leadCategoryId , \n      companyId:  LeadCategoryByIdData?.companyId,\n      directorId:LeadCategoryByIdData?.directorId,\n      branchId: LeadCategoryByIdData?.branchId,\n   \"leadCategoryId\":  LeadCategoryByIdData?.leadCategoryId  || null,\n    \"name\": data?.Category,\n    \"status\": data?.status=='true' ? true : false\n\n    };\n\n    dispatch(updateLeadCategoryFunc(finalPayload)).then((data) => {\n    if(!data?.error){\n        navigate(-1)\n    }\n    });\n  }\n \n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">      \n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Category</label>\n              <input\n                type=\"text\"\n                {...register(\"Category\", {\n                  required: \"Category is required\",\n                })}\n                className={` ${inputClassName} ${errors.Category ? \"border-[1px] \" : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Category\"\n            \n              />\n              {errors.Category && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.Category.message}\n                </p>\n              )}\n            </div>\n\n       \n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">      \n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Status</label>\n                  <Controller\n                name=\"status\"\n                control={control}\n                rules={{ required: \"Status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n\n                    className={` ${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                    placeholder=\"Select Status\"\n                    getPopupContainer={(trigger) => trigger.parentNode}\n                  >\n                    <Select.Option value=\"true\">Active</Select.Option>\n                    <Select.Option value=\"false\">Inactive</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.status.message}\n                </p>\n              )}\n            </div>\n\n       \n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={leadCategoryLoading}\n              className={`${leadCategoryLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 mt-3 px-4 rounded`}\n            >\n              {leadCategoryLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n\n        </form>\n\n\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default EditLeadsManagementCategory\n"],"names":["loading","leadCategoryLoading","LeadCategoryByIdData","useSelector","state","leadCategory","leadCategoryIdEnc","useParams","leadCategoryId","decrypt","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","JSON","parse","localStorage","getItem","concat","domainName","useEffect","reqData","_id","getLeadCategoryById","name","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","companyId","directorId","branchId","Category","updateLeadCategoryFunc","then","error","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","Controller","rules","render","_ref","field","Select","inputAntdSelectClassName","getPopupContainer","trigger","parentNode","Option","value","disabled","Loader"],"sourceRoot":""}