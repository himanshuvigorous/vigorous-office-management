{"version":3,"file":"static/js/9778.199fb55d.chunk.js","mappings":"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","sources":["pages/hr/EventCalanderManagement/CreateEventCalander.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport { useEffect } from \"react\";\nimport { createeventCalander } from \"./EventCalanderFeatures/_event_calander_reducers\";\nimport getUserIds from \"../../../constents/getUserIds\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport { Select } from \"antd\";\nimport dayjs from \"dayjs\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nconst CreateEventCalander = () => {\n  const { loading: eventCalanderLoading } = useSelector(\n    (state) => state.eventCalander\n  );\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      attendees: [{ name: \"\", email: \"\", status: \"\" }], // default empty attendee\n      startTime: \"\",\n      endTime: \"\",\n      isAllDay: false,\n      recurrence: {\n        frequency: \"\",\n        interval: 1,\n        endDate: \"\",\n      },\n    },\n  });\n\n  const { userCompanyId, userType } = getUserIds();\n  const {\n    fields: attendees,\n    append,\n    remove,\n  } = useFieldArray({\n    control,\n    name: \"attendees\",\n  });\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const BranchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const { companyList, companyListLoading } = useSelector(\n    (state) => state.company\n  );\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const onSubmit = (data, index) => {\n    // {\n    //   \"companyId\": \"67ac965282bb2dd40d7c8bf1\",\n    //   \"directorId\": \"\",\n    //   \"branchId\": \"67ac9e22e7941bc50cdbeeaf\",\n    //   \"title\": \"Project 1122\",\n    //   \"description\": \"Initial meeting to discuss project goals and deliverables.\",\n    //   \"location\": \"Conference Room 1\",\n    //   \"startDate\": \"2025-03-12T00:00:00Z\",\n    //   \"endDate\": \"2025-03-19T00:00:00Z\",\n    //   \"attendees\": [\n    //     {\n    //       \"name\": \"John Doe\",\n    //       \"email\": \"john.doe@example.com\",\n    //       \"status\": \"accepted\"\n    //     },\n    //     {\n    //       \"name\": \"Jane Smith\",\n    //       \"email\": \"jane.smith@example.com\",\n    //       \"status\": \"tentative\"\n    //     }\n    //   ]\n    // }\n\n    const finalPayload = {\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId\n          : userInfoglobal?.userType === \"company\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n        userInfoglobal?.userType === \"admin\" ||\n        userInfoglobal?.userType === \"companyDirector\"\n          ? BranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.branchId,\n      title: data.title,\n      description: data.title,\n      location: data.location,\n      startDate: dayjs(data.startTime),\n      endDate: dayjs(data.endTime),\n\n      attendees: data.attendees,\n    };\n\n    dispatch(createeventCalander(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? CompanyId\n              : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId]);\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-2 md:px-1\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Comapany\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n                <Controller\n                  name=\"PDCompanyId\"\n                  control={control}\n                  rules={{\n                    required: \"Company is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName} ${\n                        errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                      placeholder=\"Select Company\"\n                      showSearch\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? (\n                        <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option>\n                      ) : (\n                        companyList?.map((element) => (\n                          <Select.Option value={element?._id}>\n                            {\" \"}\n                            {element?.fullName}{\" \"}\n                          </Select.Option>\n                        ))\n                      )}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                {...register(\"PDBranchId\", {\n                  required: \"Branch is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDBranchId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Branch\n                </option>\n                {branchList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n\n                <Controller\n                  name=\"PDBranchId\"\n                  control={control}\n                  rules={{\n                    required: \"Branch is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName} ${\n                        errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"\n                      } z-[99999]`}\n                      placeholder=\"Select Branch\"\n                      showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                      getPopupContainer={(trigger) => trigger.parentNode}\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ? (\n                        <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option>\n                      ) : (\n                        sortByPropertyAlphabetically(branchList,'fullName')?.map((element) => (\n                          <Select.Option value={element?._id}>\n                            {\" \"}\n                            {element?.fullName}{\" \"}\n                          </Select.Option>\n                        ))\n                      )}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDBranchId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            <div className=\"\">\n              {/* Title Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Title <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                placeholder=\"Title\"\n                {...register(\"title\", { required: \"Title is required\" })}\n                type=\"text\"\n                className={`${inputClassName} ${\n                  errors.title ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Description Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Description <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                placeholder=\"Description\"\n                {...register(\"description\", {\n                  required: \"Description is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.description ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n\n              {errors.description && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Location Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Location <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                placeholder=\"Location\"\n                {...register(\"location\", { required: \"Location is required\" })}\n                type=\"text\"\n                className={`${inputClassName} ${\n                  errors.location ? \"border-[1px] \" : \"border-gray-300\"\n                }`}\n              />\n              {errors.location && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.location.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* Start Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                Start Time <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <input\n                {...register(\"startTime\", { required: \"Start time is required\" })}\n                type=\"datetime-local\"\n                min={new Date().toISOString().slice(0, 16)}\n                className={`${inputClassName} ${errors.startTime ? \"border-[1px] \" : \"border-gray-300\"}`}\n              /> */}\n\n              <Controller\n                name=\"startTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"Start Time  is required\",\n                }}\n             \n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY hh:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.startTime && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.startTime.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              {/* End Time Input Field */}\n              <label className={`${inputLabelClassName}`}>\n                End Time <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <input\n                min={new Date().toISOString().slice(0, 16)}\n                {...register(\"endTime\", { required: \"End time is required\" })}\n                type=\"datetime-local\"\n                className={`${inputClassName} ${errors.endTime ? \"border-[1px] \" : \"border-gray-300\"}`}\n              /> */}\n              <Controller\n                name=\"endTime\"\n                control={control}\n                showTime={true}\n                rules={{\n                  required: \"End Time  is required\",\n                }}\n                format=\"DD/MM/YYYY hh:mm\"\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    showTime={true}\n                    format=\"DD/MM/YYYY hh:mm\"\n                    errors={errors}\n                    disabledDate={(current) => {\n                      return (\n                        current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                      );\n                    }}\n                  />\n                )}\n              />\n\n              {errors.endTime && (\n                <p className=\"text-red-500 text-sm\">{errors.endTime.message}</p>\n              )}\n            </div>\n            {/* \n            <div className=\"\">\n             \n              <label className={`${inputLabelClassName}`}>\n                All Day Event <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"isAllDay\", { required: \"Please select whether it is an all-day event\" })}\n                className={`${inputClassName} ${errors.isAllDay ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select all Day</option>\n                <option value=\"true\">Active</option>\n                <option value=\"false\">InActive</option>\n              </select>\n              {errors.isAllDay && <p className=\"text-red-500 text-sm\">{errors.isAllDay.message}</p>}\n            </div> */}\n            {/* \n            <div className=\"\">\n          \n              <label className={`${inputLabelClassName}`}>\n                Recurrence Frequency <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"recurrence.frequency\",{\n                  required:'recurrence frequency is required'\n                })}\n                className={`${inputClassName} ${errors.recurrence?.frequency ? \"border-[1px] \" : \"border-gray-300\"}`}\n              >\n                <option value=\"\">Select Recurrence</option>\n                <option value=\"weekly\">Weekly</option>\n                <option value=\"monthly\">Monthly</option>\n                <option value=\"yearly\">Yearly</option>\n              </select>\n              {errors.recurrence?.frequency && (\n                <p className=\"text-red-500 text-sm\">{errors.recurrence.frequency.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n         \n              <label className={`${inputLabelClassName}`}>\n                Recurrence Interval <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                {...register(\"recurrence.interval\", { required: \"Recurrence interval is required\" })}\n                type=\"number\"\n                className={`${inputClassName} ${errors.recurrence?.interval ? \"border-[1px] \" : \"border-gray-300\"}`}\n              />\n              {errors.recurrence?.interval && (\n                <p className=\"text-red-500 text-sm\">{errors.recurrence.interval.message}</p>\n              )}\n            </div>\n\n            <div className=\"\">\n       \n              <label className={`${inputLabelClassName}`}>\n                Recurrence End Date <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                    name=\"recurrence.endDate\"\n                    control={control}\n                    render={({ field }) => (\n                      <CustomDatePicker  field={field} errors={errors}  disabledDate={(current) => {\n                        return current && current.isBefore(moment().endOf('day'), 'day');\n                      }} /> \n                    )}\n                  />\n              {errors.recurrence?.endDate && (\n                <p className=\"text-red-500 text-sm\">{errors.recurrence.endDate.message}</p>\n              )}\n            </div> */}\n          </div>\n\n          {/* Attendees Input Fields */}\n\n          {attendees?.map((item, index) => (\n            <div className=\"md:col-span-3 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n              {/* Attendee Name Input Field */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Attendee Name <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  {...register(`attendees[${index}].name`, {\n                    required: \"Attendee name is required\",\n                  })}\n                  type=\"text\"\n                  placeholder=\"Attendee Name\"\n                  className={`${inputClassName} ${\n                    errors.attendees?.[index]?.name\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                  }`}\n                />\n                {errors.attendees?.[index]?.name && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.attendees[index].name.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Attendee Email Input Field */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Attendee Email <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  {...register(`attendees[${index}].email`, {\n                    required: \"Attendee email is required\",\n                  })}\n                  type=\"email\"\n                  className={`${inputClassName} ${\n                    errors.attendees?.[index]?.email\n                      ? \"border-[1px] \"\n                      : \"border-gray-300\"\n                  }`}\n                  placeholder=\"Attendee Email\"\n                />\n                {errors.attendees?.[index]?.email && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.attendees[index].email.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Attendee Status Input Field */}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Attendee Status\n                </label>\n                {/* <select\n                  {...register(`attendees[${index}].status`)}\n                  className={`${inputClassName} ${errors.attendees?.[index]?.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                >\n                  <option value=\"\">select Status</option>\n                  <option value=\"accepted\">Accepted</option>\n                \n                  <option value=\"declined\">Declined</option>\n                </select> */}\n\n                <Controller\n                  name={`attendees[${index}].status`}\n                  control={control}\n                  rules={{\n                    required: \"status  is required\",\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={` ${inputAntdSelectClassName} ${\n                        errors.PDPlan ? \"border-[1px] \" : \"border-gray-300\"\n                      }`}\n                      placeholder=\"Select status\"\n                      showSearch\n                    >\n                      <Select.Option value=\"\">Select status</Select.Option>\n                      <Select.Option value=\"accepted\">Accepted</Select.Option>\n                      <Select.Option value=\"declined\">Declined</Select.Option>\n                    </Select>\n                  )}\n                />\n\n                {errors.attendees?.[index]?.status && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.attendees[index].status.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Delete Button for Attendee */}\n              <div className=\"flex md:justify-center justify-end items-end\">\n                <button\n                  type=\"button\"\n                  onClick={() => remove(index)}\n                  className=\"text-gray-600 hover:text-gray-800 flex items-center justify-center border-2 border-gray-500 p-1 rounded-lg\"\n                >\n                  <i className=\"fas fa-trash-alt flex items-center justify-center w-[25px] h-[25px]\"></i>\n                </button>\n              </div>\n            </div>\n          ))}\n\n          {/* Add Attendee Button */}\n          <div className=\"mt-4\">\n            <button\n              type=\"button\"\n              onClick={() =>\n                append({ name: \"\", email: \"\", status: \"accepted\" })\n              }\n              className=\"bg-header text-white py-1.5 px-3 text-nowrap text-sm rounded \"\n            >\n              Add More\n            </button>\n          </div>\n\n          <div className=\"flex justify-end mt-4\">\n            <button\n              type=\"submit\"\n              disabled={eventCalanderLoading}\n              className={`${\n                eventCalanderLoading ? \"bg-gray-400\" : \"bg-header\"\n              } text-white p-2 px-4 rounded`}\n            >\n              {eventCalanderLoading ? <Loader /> : \"Submit\"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateEventCalander;\n"],"names":["CreateEventCalander","loading","eventCalanderLoading","useSelector","state","eventCalander","register","handleSubmit","control","setValue","formState","errors","useForm","defaultValues","attendees","name","email","status","startTime","endTime","isAllDay","recurrence","frequency","interval","endDate","userCompanyId","userType","getUserIds","fields","append","remove","useFieldArray","dispatch","useDispatch","navigate","useNavigate","CompanyId","useWatch","defaultValue","BranchId","companyList","companyListLoading","company","branchList","branchListloading","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","useEffect","branchSearch","text","sort","isPagination","companyId","_id","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","index","finalPayload","branchId","title","description","location","startDate","dayjs","createeventCalander","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","PDPlan","placeholder","showSearch","Option","value","disabled","ListLoader","map","element","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab","filterOption","input","option","String","toLowerCase","includes","getPopupContainer","trigger","parentNode","sortByPropertyAlphabetically","PDBranchId","type","inputClassName","showTime","_ref3","CustomDatePicker","format","disabledDate","current","isBefore","endOf","_ref4","item","_errors$attendees","_errors$attendees$ind","_errors$attendees2","_errors$attendees2$in","_errors$attendees3","_errors$attendees3$in","_errors$attendees4","_errors$attendees4$in","_errors$attendees5","_errors$attendees5$in","_ref5","onClick","Loader"],"sourceRoot":""}