{"version":3,"file":"static/js/4162.382f6750.chunk.js","mappings":"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","sources":["pages/taskManagement/addTask/CreateTask.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, useWatch, Controller } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { inputClassName, inputLabelClassName, domainName, inputLabelClassNameReactSelect, inputDisabledClassName, inputAntdSelectClassName, getDefaultFinacialYear, customDayjs } from \"../../../constents/global\";\nimport { useNavigate } from \"react-router-dom\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport ReactSelect from \"react-select\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\nimport { branchSearch } from \"../../../pages/branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../pages/company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../../../pages/department/departmentFeatures/_department_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { employeSearch } from \"../../../pages/employeManagement/employeFeatures/_employe_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { taskTypeSearch } from \"../taskType/taskFeatures/_task_reducers\";\nimport { createTaskFunc } from \"./addTaskFeatures/_addTask_reducers\";\nimport { orgTypeSearch } from \"../../organizationType/organizationTypeFeatures/_org_type_reducers\";\nimport { Radio, Select } from \"antd\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\n\nconst CreateTask = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { register, control, handleSubmit, watch, setValue, getValues, formState: { errors } } = useForm({\n    defaultValues: {\n      employee: [],\n\n    },\n  });\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const { departmentListData } = useSelector((state) => state.department);\n  const { employeList } = useSelector((state) => state.employe);\n  const { clientList } = useSelector((state) => state.client);\n  const { clientGroupList } = useSelector((state) => state.clientGroup);\n  const [documents, setDocuments] = useState([]);\n  const { taskTypeList } = useSelector((state) => state.taskType);\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { orgTypeList } = useSelector((state) => state.orgType);\n  const [isSelectAllChecked, setIsSelectAllChecked] = useState(false);\n  const [isSelectAllCheckedClient, setIsSelectAllCheckedClient] =\n    useState(false);\n  const [options, setOptions] = useState([]);\n  const [employeeSelectedOption, setEmployeeSelectedOption] = useState([]);\n\n\n  const handleSelectChange = (value) => {\n\n    setEmployeeSelectedOption(value);\n  };\n\n  const handleSelectAll = (field) => {\n    if (isSelectAllChecked) {\n      field.onChange([]);\n    } else {\n      const allEmployees = employeList?.map((employee) => ({\n        value: employee._id,\n        label: employee.fullName,\n      }));\n      field.onChange(allEmployees);\n    }\n    setIsSelectAllChecked(!isSelectAllChecked);\n  };\n  const handleSelectAllClient = (field) => {\n    if (isSelectAllCheckedClient) {\n      field.onChange([]);\n    } else {\n      const allEmployees = clientList?.map((employee) => ({\n        value: employee._id,\n        label: employee.fullName,\n      }));\n      field.onChange(allEmployees);\n    }\n    setIsSelectAllCheckedClient(!isSelectAllCheckedClient);\n  };\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: \"\",\n  });\n  const departmentId = useWatch({\n    control,\n    name: \"PDDepartmentId\",\n    defaultValue: \"\",\n  });\n  const selctedClientName = useWatch({\n    control,\n    name: \"client\",\n    defaultValue: \"\",\n  });\n\n  const clientBranchOptions = selctedClientName?.length == 1 ? (clientList?.find(data => data?._id == selctedClientName?.[0]?.value)?.branchData || []) : []\n\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n\n  const financialYears = generateFinancialYears();\n\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sep\", \"Oct-Dec\"];\n\n  const daysInMonth = [\"Last Day\"].concat(\n    Array.from({ length: 31 }, (_, i) => `${i + 1} Day`)\n  );\n\n  const dropdownType = useWatch({\n    control,\n    name: \"isPeriod\",\n    defaultValue: \"\",\n  });\n  const [selectAllActive, setSelectAllActive] = useState(false);\n  const allOptionValues = options.map((option) => option.value);\n\n  const selectAllValue = \"__all__\"; // Custom value for the \"Select All\" option\n\n  const mergedOptions = [\n    {\n      label: \"Select All\",\n      value: selectAllValue,\n    },\n    ...options,\n  ];\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? companyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId]);\n\n  useEffect(() => {\n    setValue(\"financialYear\", getDefaultFinacialYear());\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\" ||\n      userInfoglobal?.userType === \"companyBranch\" ||\n      userInfoglobal?.userType === \"employee\"\n    ) {\n      dispatch(\n        deptSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? companyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n          branchId:\n            userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"companyDirector\"\n              ? watch(\"PDBranchId\")\n              : userInfoglobal?.userType === \"companyBranch\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.branchId,\n        })\n      );\n    }\n  }, [companyId, branchId]);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setDocuments((prev) => [...prev, res.payload.data]);\n      }\n    });\n  };\n  const handleRemoveFile = (index) => {\n    setDocuments((prev) => {\n      const updatedDocuments = prev.filter((_, i) => i !== index);\n      return updatedDocuments;\n    });\n  };\n\n  useEffect(() => {\n    if (watch(\"clientSelection\") === \"group\" && watch(\"groupName\"))\n      dispatch(\n        clientSearch({\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? watch(\"PDCompanyId\")\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n          branchId:\n            userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"companyDirector\"\n              ? watch(\"PDBranchId\")\n              : userInfoglobal?.userType === \"companyBranch\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.branchId,\n\n          directorId: \"\",\n          organizationId: \"\",\n          industryId: \"\",\n          groupId: watch(\"groupName\"),\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n  }, []);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? data?.PDCompanyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n          ? data?.PDBranchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n      directorId: \"\",\n      departmentId: data?.PDDepartmentId ? data?.PDDepartmentId?.value : \"\",\n      // fileNumber: data?.fileNo,\n      financialYear: data?.financialYear,\n      groupId: data?.groupName,\n      taskTypeId: data?.PDtaskId,\n      priority: data?.PDTaskPriority,\n      clientId:\n        watch(\"clientSelection\") === \"group\"\n          ? clientList?.map((client) => client._id)\n          : data?.client && data?.client?.length > 0\n            ? data?.client?.map((client) => client.value)\n            : [],\n      employeIds: data?.employee,\n\n      taskName: taskTypeList?.find((task) => task?._id === data?.PDtaskId)\n        ?.name,\n      fee: taskTypeList?.find((task) => task?._id === data?.PDtaskId)?.fees,\n      remarks: data?.descriptions,\n      dueDate: customDayjs(data?.tenureDate),\n      documents: documents,\n      type: data?.isPeriod,\n      monthName: data?.monthName,\n      monthQuaters: data?.quarterName,\n      organisationId: data.organizationName,\n      clientBranch: clientBranchOptions?.find(el => el._id == data?.clientBranch),\n    };\n    // console.log(finalPayload)\n    dispatch(createTaskFunc(finalPayload)).then((output) => {\n      !output.error && navigate(-1);\n    });\n  };\n\n\n  const handleFocusClientGrp = () => {\n    dispatch(\n      clientGrpSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"admin\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        isPagination: false,\n        text: \"\",\n        sort: true,\n        status: true,\n        groupId: \"\",\n      })\n    );\n  };\n\n\n\n  const handleFocus = () => {\n    dispatch(\n      employeSearch({\n        companyId:\n          userInfoglobal?.userType === \"admin\"\n            ? watch(\"PDCompanyId\")\n            : userInfoglobal?.userType === \"company\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.companyId,\n        branchId:\n          [\"admin\", \"company\", \"companyDirector\"].includes(userInfoglobal?.userType)\n            ? watch(\"PDBranchId\")\n            : userInfoglobal?.userType === \"companyBranch\"\n              ? userInfoglobal?._id\n              : userInfoglobal?.branchId,\n        departmentId: watch(\"PDDepartmentId\")?.value,\n        directorId: \"\",\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        isBranch: true,\n        isDirector: false,\n      })\n    ).then((empResponse) => {\n      const list = empResponse?.payload?.data?.docs?.map((element) => (\n\n        {\n          label: (\n            <div className=\"flex gap-2 items-center\">\n              {element.fullName}\n              <div className=\"text-[10px] text-gray-500\">\n                {element.userType === \"companyDirector\"\n                  ? \"Director\"\n                  : element.userType === \"companyBranch\"\n                    ? \"Branch Head\"\n                    : \"\"}\n              </div>\n            </div>\n\n          ),\n\n          value: element._id,\n          searchText: element.fullName.toLowerCase(),\n        }));\n      setOptions(list);\n    });\n  };\n\n\n  return (\n    <GlobalLayout>\n      <section>\n        <div className=\"\">\n          <div>\n            <form\n              autoComplete=\"off\"\n              className=\"\"\n              onSubmit={handleSubmit(onSubmit)}\n            >\n              <div\n                className=\"gap-4 border-2 border-header  p-2 rounded-md my-2 shadow\n              \n              \"\n              >\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-4 md:my-2 px-3 md:mt-4\">\n                  <div className=\"md:col-span-2 col-span-1 pb-2 overflow-x-auto\">\n                    <Controller\n                      name=\"clientSelection\"\n                      control={control} // control from react-hook-form\n                      // rules={{ required: \"Client Selection Type is required\" }}\n                      render={({ field }) => (\n                        <Radio.Group\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setValue(\"client\", []);\n                          }}\n                          optionType=\"button\"\n                          buttonStyle=\"solid\"\n                          block\n                          defaultValue={\"client\"}\n                          className={`whitespace-nowrap  ${errors.clientSelection\n                            ? \"border-[1px] text-[10px] border-red-500\"\n                            : \"border-gray-300\"\n                            }`}\n                        >\n                          <Radio value=\"client\">Client Wise</Radio>\n                          <Radio value=\"group\">Group Wise</Radio>\n                          <Radio value=\"department\">Department Wise</Radio>\n                          <Radio value=\"organization\">Organization Wise</Radio>\n                        </Radio.Group>\n                      )}\n                    />\n                    {errors.clientSelection && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.clientSelection.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {userInfoglobal?.userType === \"admin\" && (\n                    <div className=\"\">\n                      <label className={`${inputLabelClassName}`}>\n                        Company<span className=\"text-red-600\">*</span>\n                      </label>\n\n                      <Controller\n                        control={control}\n                        name=\"PDCompanyId\"\n                        rules={{ required: \"Company is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName} `}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">\n                              Select Company\n                            </Select.Option>\n                            {companyList?.map((type) => (\n                              <Select.Option key={type?._id} value={type?._id}>\n                                {type?.fullName}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.PDCompanyId && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.PDCompanyId.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {(userInfoglobal?.userType === \"admin\" ||\n                    userInfoglobal?.userType === \"company\" ||\n                    userInfoglobal?.userType === \"companyDirector\") && (\n                      <div className=\"\">\n                        <label className={`${inputLabelClassName}`}>\n                          Branch <span className=\"text-red-600\">*</span>\n                        </label>\n                        <Controller\n                          control={control}\n                          name=\"PDBranchId\"\n                          rules={{ required: \"Branch is required\" }}\n                          render={({ field }) => (\n                            <Select\n                              {...field}\n                              defaultValue={\"\"}\n                              className={`${inputAntdSelectClassName} `}\n                              showSearch\n                              filterOption={(input, option) =>\n                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                              }\n                            >\n                              <Select.Option value=\"\">\n                                Select Branch\n                              </Select.Option>\n                              {branchList?.map((type) => (\n                                <Select.Option key={type?._id} value={type?._id}>\n                                  {type?.fullName}\n                                </Select.Option>\n                              ))}\n                            </Select>\n                          )}\n                        />\n                        {errors.PDBranchId && (\n                          <p className=\"text-red-500 text-sm\">\n                            {errors.PDBranchId.message}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  {watch(\"clientSelection\") === \"group\" && (\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Group Type <span className=\"text-red-600\">*</span>\n                      </label>\n                      <select\n                        {...register(\"groupName\", {\n                          required: \"Organization type is required\",\n                        })}\n                        className={` ${inputClassName} ${errors.groupName\n                          ? \"border-[1px] border-red-500\"\n                          : \"border-gray-300\"\n                          }`}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                        onFocus={() => handleFocusClientGrp()}\n                        onChange={(e) => {\n                          dispatch(\n                            clientSearch({\n                              companyId:\n                                userInfoglobal?.userType === \"admin\"\n                                  ? watch(\"PDCompanyId\")\n                                  : userInfoglobal?.userType === \"company\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.companyId,\n                              branchId:\n                                userInfoglobal?.userType === \"company\" ||\n                                  userInfoglobal?.userType === \"admin\" ||\n                                  userInfoglobal?.userType === \"companyDirector\"\n                                  ? watch(\"PDBranchId\")\n                                  : userInfoglobal?.userType === \"companyBranch\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.branchId,\n\n                              directorId: \"\",\n                              organizationId: \"\",\n                              industryId: \"\",\n                              groupId: e.target.value,\n                              text: \"\",\n                              sort: true,\n                              status: true,\n                              isPagination: false,\n                            })\n                          ).then((data) => {\n                            if (!data?.error) {\n                              setValue(\n                                \"client\",\n                                data?.payload?.data?.docs?.map((client) => {\n                                  return {\n                                    value: client._id,\n                                    label: client.fullName,\n                                  };\n                                })\n                              );\n                            } else {\n                              setValue(\"client\", []);\n                            }\n                          });\n                        }}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Group Type\n                        </option>\n                        {clientGroupList?.map((elment, index) => (\n                          <option value={elment?._id}>\n                            {elment?.fullName}({elment?.groupName})\n                          </option>\n                        ))}\n                      </select>\n\n\n                      {errors.groupName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.groupName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  {watch(\"clientSelection\") === \"organization\" && (\n                    <div className=\"w-full\">\n                      <label className={`${inputLabelClassName}`}>\n                        Organization Type{\" \"}\n                        <span className=\"text-red-600\">*</span>\n                      </label>\n                      <select\n                        {...register(\"organizationName\", {\n                          required: \"Organization type is required\",\n                        })}\n                        className={` ${inputClassName} ${errors.organizationName\n                          ? \"border-[1px] border-red-500\"\n                          : \"border-gray-300\"\n                          }`}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                        onFocus={() =>\n                          dispatch(\n                            orgTypeSearch({\n                              isPagination: false,\n                              text: \"\",\n                              sort: true,\n                              status: true,\n                            })\n                          )\n                        }\n                        onChange={(e) => {\n                          dispatch(\n                            clientSearch({\n                              companyId:\n                                userInfoglobal?.userType === \"admin\"\n                                  ? watch(\"PDCompanyId\")\n                                  : userInfoglobal?.userType === \"company\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.companyId,\n                              branchId:\n                                userInfoglobal?.userType === \"company\" ||\n                                  userInfoglobal?.userType === \"admin\" ||\n                                  userInfoglobal?.userType === \"companyDirector\"\n                                  ? watch(\"PDBranchId\")\n                                  : userInfoglobal?.userType === \"companyBranch\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.branchId,\n\n                              directorId: \"\",\n                              organizationId: e.target.value,\n                              industryId: \"\",\n                              groupId: \"\",\n                              text: \"\",\n                              sort: true,\n                              status: true,\n                              isPagination: false,\n                            })\n                          ).then((data) => {\n                            if (!data?.error) {\n                              setValue(\n                                \"client\",\n                                data?.payload?.data?.docs?.map((client) => {\n                                  return {\n                                    value: client._id,\n                                    label: client.fullName,\n                                  };\n                                })\n                              );\n                            } else {\n                              setValue(\"client\", []);\n                            }\n                          });\n                        }}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Organization Type\n                        </option>\n                        {orgTypeList?.map((elment, index) => (\n                          <option value={elment?._id}>{elment?.name}</option>\n                        ))}\n                      </select>\n                      {errors.organizationName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.organizationName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Department <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"PDDepartmentId\"\n                      control={control}\n                      rules={{\n                        required: \"At least one department is required\",\n                      }}\n\n\n                      render={({ field }) => (\n                        <ReactSelect\n                          {...field}\n\n                          options={departmentListData?.map((department) => ({\n                            value: department?._id,\n                            label: department?.name,\n                          }))}\n                          classNamePrefix=\"react-select\"\n                          className={`${inputLabelClassNameReactSelect} ${errors.PDDepartmentId\n                            ? \"border-[1px] border-red-500\"\n                            : \"border-gray-300\"\n                            }`}\n                          placeholder=\"Select Departments\"\n                          onChange={(selectedOptions) => {\n                            field.onChange(selectedOptions);\n                            watch(\"clientSelection\") === \"department\" &&\n                              dispatch(\n                                clientSearch({\n                                  companyId:\n                                    userInfoglobal?.userType === \"admin\"\n                                      ? watch(\"PDCompanyId\")\n                                      : userInfoglobal?.userType === \"company\"\n                                        ? userInfoglobal?._id\n                                        : userInfoglobal?.companyId,\n                                  branchId:\n                                    userInfoglobal?.userType === \"company\" ||\n                                      userInfoglobal?.userType === \"admin\" ||\n                                      userInfoglobal?.userType ===\n                                      \"companyDirector\"\n                                      ? watch(\"PDBranchId\")\n                                      : userInfoglobal?.userType ===\n                                        \"companyBranch\"\n                                        ? userInfoglobal?._id\n                                        : userInfoglobal?.branchId,\n                                  directorId: \"\",\n                                  organizationId: \"\",\n                                  industryId: \"\",\n                                  groupId: \"\",\n                                  departmentId: selectedOptions.value,\n                                  text: \"\",\n                                  sort: true,\n                                  status: true,\n                                  isPagination: false,\n                                })\n                              ).then((data) => {\n                                if (!data?.error) {\n                                  setValue(\n                                    \"client\",\n                                    data?.payload?.data?.docs?.map((client) => {\n                                      return {\n                                        value: client._id,\n                                        label: client.fullName,\n                                      };\n                                    })\n                                  );\n                                } else {\n                                  setValue(\"client\", []);\n                                }\n                              });\n                          }}\n                          value={field.value}\n                        />\n                      )}\n                    />\n                    {errors.PDDepartmentId && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.PDDepartmentId.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Client <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"client\"\n                      control={control}\n                      rules={{ required: \"At least one client is required\" }}\n                      render={({ field }) => (\n                        <ReactSelect\n                          {...field}\n                          isMulti\n                          onFocus={() => {\n                            if (!departmentId?.value) {\n                              return\n                            }\n                            dispatch(\n                              clientSearch({\n                                companyId:\n                                  userInfoglobal?.userType === \"admin\"\n                                    ? watch(\"PDCompanyId\")\n                                    : userInfoglobal?.userType === \"company\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.companyId,\n                                branchId:\n                                  userInfoglobal?.userType === \"company\" ||\n                                    userInfoglobal?.userType === \"admin\" ||\n                                    userInfoglobal?.userType === \"companyDirector\"\n                                    ? watch(\"PDBranchId\")\n                                    : userInfoglobal?.userType ===\n                                      \"companyBranch\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.branchId,\n                                groupId: \"\",\n                                directorId: \"\",\n                                organizationId: \"\",\n                                industryId: \"\",\n                                departmentId: departmentId?.value,\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination: false,\n                              })\n                            );\n                          }}\n                          options={[\n                            { value: \"select_all\", label: \"Select All\" },\n                            ...(Array.isArray(clientList)\n                              ? clientList.map((client) => ({\n                                value: client._id,\n                                label: client.fullName,\n                              }))\n                              : []),\n                          ]}\n                          classNamePrefix=\"react-select\"\n                          className={`${inputLabelClassNameReactSelect} ${errors.client\n                            ? \"border-[1px] border-red-500\"\n                            : \"border-gray-300\"\n                            }`}\n                          showSearch\n                          // filterOption={(input, option) =>\n                          //   String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          // }\n                          placeholder=\"Select client...\"\n                          onChange={(selectedOptions) => {\n                            setValue('clientBranch', '')\n                            const isSelectAllSelected = selectedOptions.find(\n                              (option) => option.value === \"select_all\"\n                            );\n\n                            if (isSelectAllSelected) {\n                              handleSelectAllClient(field);\n                            } else {\n                              // Check if all employees are selected\n                              setIsSelectAllCheckedClient(\n                                selectedOptions.length === clientList.length\n                              );\n                              field.onChange(selectedOptions);\n                            }\n                          }}\n                          value={field.value || []}\n                          formatOptionLabel={(data, { context }) => {\n                            if (data.value === \"select_all\") {\n                              return (\n                                <div className=\"flex items-center\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={isSelectAllCheckedClient}\n                                    onChange={() =>\n                                      handleSelectAllClient(field)\n                                    }\n                                    style={{ marginRight: \"10px\" }}\n                                  />\n                                  <span>Select All</span>\n                                </div>\n                              );\n                            }\n                            return data.label;\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.client && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.client.message}\n                      </p>\n                    )}\n                  </div>\n                  {clientBranchOptions?.length > 0 && <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Client Branch \n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"clientBranch\"\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n\n                          className={inputAntdSelectClassName}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">\n                            {\" \"}\n                            Select Client Branch\n                          </Select.Option>\n                          {clientBranchOptions?.map((type) => (\n                            <Select.Option value={type?._id}>\n                              {type?.fullName}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.clientBranch && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.clientBranch.message}\n                      </p>\n                    )}\n                  </div>}\n\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>\n                      Task Name<span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"PDtaskId\"\n                      rules={{ required: \"Task Name is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n                          onFocus={() => {\n                            dispatch(\n                              taskTypeSearch({\n                                companyId:\n                                  userInfoglobal?.userType === \"admin\"\n                                    ? watch(\"PDCompanyId\")\n                                    : userInfoglobal?.userType === \"company\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.companyId,\n                                branchId:\n                                  userInfoglobal?.userType === \"company\" ||\n                                    userInfoglobal?.userType === \"admin\" ||\n                                    userInfoglobal?.userType === \"companyDirector\"\n                                    ? watch(\"PDBranchId\")\n                                    : userInfoglobal?.userType ===\n                                      \"companyBranch\"\n                                      ? userInfoglobal?._id\n                                      : userInfoglobal?.branchId,\n                                departmentId: watch(\"PDDepartmentId\")?.value,\n                                directorId: \"\",\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination: false,\n                              })\n                            );\n                          }}\n                          className={inputAntdSelectClassName}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">\n                            {\" \"}\n                            Select Task Name\n                          </Select.Option>\n                          {taskTypeList?.map((type) => (\n                            <Select.Option value={type?._id}>\n                              {type?.name}\n                            </Select.Option>\n                          ))}\n                        </Select>\n                      )}\n                    />\n                    {errors.PDtaskId && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDtaskId.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Fees</label>\n                    <input\n                      disabled\n                      type=\"text\"\n                      {...register(\"fees\")}\n                      value={\n                        taskTypeList?.find(\n                          (element) => element?._id === watch(\"PDtaskId\")\n                        )?.fees || \"\"\n                      }\n                      className={`${inputDisabledClassName} ${errors.fees\n                        ? \"border-[1px] border-red-500\"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Fees\"\n                    />\n                    {errors.fees && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.fees.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Assign To <span className=\"text-red-600\">*</span>\n                    </label>\n\n                    <Controller\n                      name=\"employee\"\n                      control={control}\n                      rules={{ required: \"At least one employee is required\" }}\n                      render={({ field }) => {\n                        const handleChange = (selected) => {\n                          if (selected.includes(selectAllValue)) {\n                            // If \"Select All\" was selected\n                            if (selectAllActive) {\n                              // Unselect all\n                              field.onChange([]);\n                              setSelectAllActive(false);\n                            } else {\n                              // Select all actual options\n                              field.onChange(allOptionValues);\n                              setSelectAllActive(true);\n                            }\n                          } else {\n                            field.onChange(selected);\n                            setSelectAllActive(selected.length === allOptionValues.length);\n                          }\n                        };\n\n                        return (\n                          <Select\n                            mode=\"multiple\"\n                            placeholder=\"Assign To\"\n                            value={field.value || []}\n                            onChange={handleChange}\n                            onFocus={handleFocus}\n                            size=\"large\"\n                            style={{ width: \"100%\" }}\n                            options={mergedOptions}\n                            className={inputAntdSelectClassName}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          />\n                        );\n                      }}\n                    />\n                    {errors.employee && (\n                      <p className=\"text-red-500 text-sm mt-1\">\n                        {errors.employee.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Due Date <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      name=\"tenureDate\"\n                      control={control}\n                      rules={{\n                        required: \" Due date  is required\",\n                      }}\n                      render={({ field }) => (\n                        <CustomDatePicker\n                          field={field}\n                          errors={errors}\n                          disabledDate={(current) => {\n                            return (\n                              current &&\n                              current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                            );\n                          }}\n                        />\n                      )}\n                    />\n                    {errors.tenureDate && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.tenureDate.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"w-full\">\n                    <label className={`${inputLabelClassName}`}>\n                      Task Priority <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"PDTaskPriority\"\n                      rules={{ required: \"Task Priority is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          placeholder={'Select Task Priority'}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Task Priority</Select.Option>\n                          <Select.Option value=\"high\">High</Select.Option>\n                          <Select.Option value=\"medium\">Medium</Select.Option>\n                          <Select.Option value=\"low\">Normal</Select.Option>\n\n                        </Select>\n                      )}\n                    />\n                    {errors.PDTaskPriority && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.PDTaskPriority.message}\n                      </p>\n                    )}\n                  </div>\n\n                </div>\n\n                <div\n                  className={`grid ${dropdownType === \"Yearly\"\n                    ? \"grid-cols-1 md:grid-cols-2\"\n                    : dropdownType\n                      ? \"grid-cols-1 md:grid-cols-3\"\n                      : \"grid-cols-1 md:grid-cols-2\"\n                    } md:gap-4 md:my-1 px-3 md:mt-4`}\n                >\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Financial Year <span className=\"text-red-600\">*</span>\n                    </label>\n                    {/* <select\n                      {...register(\"financialYear\", {\n                        required: \"Financial year is required\",\n                      })}\n                      className={`${inputClassName} ${errors.financialYear\n                        ? \"border-[1px] border-red-500\"\n                        : \"border-gray-300\"\n                        }`}\n                    >\n                      <option value=\"\">Select Financial Year</option>\n                      {financialYears.map((year, index) => (\n                        <option key={index} value={year}>\n                          {year}\n                        </option>\n                      ))}\n                    </select> */}\n\n                    <Controller\n                      control={control}\n                      name=\"financialYear\"\n                      rules={{ required: \"Financial year is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          placeholder={'Select Financial year'}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Financial year</Select.Option>\n                          {financialYears.map((year, index) => (\n                            <Select.Option key={index} value={year}>\n                              {year}\n                            </Select.Option>\n                          ))}\n\n                        </Select>\n                      )}\n                    />\n                    {errors.financialYear && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.financialYear.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className={`${inputLabelClassName}`}>\n                      Type <span className=\"text-red-600\">*</span>\n                    </label>\n                    <Controller\n                      control={control}\n                      name=\"isPeriod\"\n                      rules={{ required: \"Type is required\" }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          defaultValue={\"\"}\n                          className={`${inputAntdSelectClassName} `}\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                        >\n                          <Select.Option value=\"\">Select Type</Select.Option>\n                          <Select.Option value=\"Quaterly\"> Quaterly</Select.Option>\n                          <Select.Option value=\"Monthly\">Monthly</Select.Option>\n                          <Select.Option value=\"Yearly\">Yearly</Select.Option>\n                        </Select>\n                      )}\n                    />\n                    {errors.isPeriod && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.isPeriod.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {dropdownType === \"Quaterly\" && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Quarter <span className=\"text-red-600\">*</span>\n                      </label>\n                      <Controller\n                        control={control}\n                        name=\"quarterName\"\n                        rules={{ required: \"Reset Month is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName} `}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">\n                              Select Quarter\n                            </Select.Option>\n                            {quarter.map((qtr) => (\n                              <Select.Option key={qtr} value={qtr}>\n                                {qtr}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.quarterName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.quarterName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n\n                  {dropdownType === \"Monthly\" && (\n                    <div>\n                      <label className={`${inputLabelClassName}`}>\n                        Month <span className=\"text-red-600\">*</span>\n                      </label>\n                      {/* <select\n                        {...register(\"monthName\", {\n                          required: \"Month is required\",\n                        })}\n                        className={`${inputClassName} ${errors.monthName ? \"border-[1px] border-red-500\" : \"border-gray-300\"}`}\n                      >\n                        <option value=\"\">Select Month</option>\n                        {months.map((month) => (\n                          <option key={month} value={month}>\n                            {month}\n                          </option>\n                        ))}\n                      </select> */}\n\n                      <Controller\n                        control={control}\n                        name=\"monthName\"\n                        rules={{ required: \"Month is required\" }}\n                        render={({ field }) => (\n                          <Select\n                            {...field}\n                            defaultValue={\"\"}\n                            className={`${inputAntdSelectClassName} `}\n                            showSearch\n                            filterOption={(input, option) =>\n                              String(option?.children).toLowerCase().includes(input.toLowerCase())\n                            }\n                          >\n                            <Select.Option value=\"\">Select Month</Select.Option>\n                            {months.map((month) => (\n                              <Select.Option key={month} value={month}>\n                                {month}\n                              </Select.Option>\n                            ))}\n                          </Select>\n                        )}\n                      />\n                      {errors.monthName && (\n                        <p className=\"text-red-500 text-sm\">\n                          {errors.monthName.message}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-4 md:my-1 px-3 md:mt-4\">\n                  <div className=\"col-span-2\">\n                    <label className={`${inputLabelClassName}`}>\n                      Description <span className=\"text-red-600\">*</span>\n                    </label>\n                    <input\n                      type=\"text\"\n                      {...register(\"descriptions\", {\n                        required: \"descriptions is required\",\n                      })}\n                      className={`${inputClassName} ${errors.descriptions\n                        ? \"border-red-500\"\n                        : \"border-gray-300\"\n                        }`}\n                      placeholder=\"Enter descriptions \"\n                    />\n                    {errors.descriptions && (\n                      <p className=\"text-red-500 text-sm\">\n                        {errors.descriptions.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"px-3\">\n                  <label className={`${inputLabelClassName}`}>\n                    Add Documents\n                  </label>\n                  <div className=\"space-y-4\">\n                    <input\n                      type=\"file\"\n                      onChange={handleFileChange}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                    />\n                    <label\n                      htmlFor=\"file-upload\"\n                      className=\"inline-flex justify-start items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white cursor-pointer\"\n                    >\n                      <FaRegFile className=\"mr-2\" />\n                      Add Documents\n                    </label>\n\n                    <div className=\"space-y-2\">\n                      {documents.map((file, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\"\n                        >\n                          <a\n                            href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                            className=\"flex items-center space-x-2\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            <FaRegFile className=\"text-gray-500\" />\n                            <span className=\"text-sm text-gray-600\">\n                              {file}\n                            </span>\n                          </a>\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemoveFile(index)}\n                            className=\"text-red-500 hover:text-red-700\"\n                          >\n                            <FaTimes />\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end col-span-2 mt-4\">\n                  <button\n                    type=\"submit\"\n                    className=\"bg-header text-white p-2 px-4 rounded\"\n                  >\n                    Submit\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateTask;"],"names":["CreateTask","_clientList$find","_taskTypeList$find3","navigate","useNavigate","dispatch","useDispatch","register","control","handleSubmit","watch","setValue","getValues","formState","errors","useForm","defaultValues","employee","companyList","useSelector","state","company","branchList","branch","departmentListData","department","employeList","employe","clientList","client","clientGroupList","clientGroup","documents","setDocuments","useState","taskTypeList","taskType","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","orgTypeList","orgType","isSelectAllChecked","setIsSelectAllChecked","isSelectAllCheckedClient","setIsSelectAllCheckedClient","options","setOptions","employeeSelectedOption","setEmployeeSelectedOption","handleSelectAllClient","field","onChange","allEmployees","map","value","_id","label","fullName","companyId","useWatch","name","defaultValue","branchId","departmentId","selctedClientName","clientBranchOptions","length","find","data","_selctedClientName$","branchData","financialYears","generateFinancialYears","year","push","months","quarter","dropdownType","Array","from","_","i","selectAllActive","setSelectAllActive","allOptionValues","option","selectAllValue","mergedOptions","useEffect","userType","branchSearch","text","sort","status","isPagination","getDefaultFinacialYear","companySearch","deptSearch","clientSearch","directorId","organizationId","industryId","groupId","handleFocus","_watch","employeSearch","includes","isBranch","isDirector","then","empResponse","_empResponse$payload","_empResponse$payload$","_empResponse$payload$2","list","payload","docs","element","_jsxs","className","children","_jsx","searchText","toLowerCase","GlobalLayout","autoComplete","onSubmit","_data$PDDepartmentId","_data$client","_data$client2","_taskTypeList$find","_taskTypeList$find2","finalPayload","PDCompanyId","PDBranchId","PDDepartmentId","financialYear","groupName","taskTypeId","PDtaskId","priority","PDTaskPriority","clientId","employeIds","taskName","task","fee","fees","remarks","descriptions","dueDate","customDayjs","tenureDate","type","isPeriod","monthName","monthQuaters","quarterName","organisationId","organizationName","clientBranch","el","createTaskFunc","output","error","Controller","render","_ref","Radio","_objectSpread","e","optionType","buttonStyle","block","clientSelection","message","inputLabelClassName","rules","required","_ref2","Select","inputAntdSelectClassName","showSearch","filterOption","input","String","Option","_ref3","inputClassName","onFocus","clientGrpSearch","target","_data$payload","_data$payload$data","_data$payload$data$do","elment","index","orgTypeSearch","_data$payload2","_data$payload2$data","_data$payload2$data$d","_ref4","ReactSelect","classNamePrefix","inputLabelClassNameReactSelect","placeholder","selectedOptions","_data$payload3","_data$payload3$data","_data$payload3$data$d","_ref5","isMulti","isArray","formatOptionLabel","_ref6","context","checked","style","marginRight","_ref7","_ref8","_watch2","taskTypeSearch","disabled","inputDisabledClassName","_ref9","mode","selected","size","width","_ref0","CustomDatePicker","disabledDate","current","isBefore","dayjs","endOf","_ref1","_ref10","_ref11","_ref12","qtr","_ref13","month","reqData","filePath","files","isVideo","isMultiple","fileUploadFunc","res","_res$payload","prev","id","htmlFor","FaRegFile","file","href","process","rel","onClick","filter","handleRemoveFile","FaTimes"],"sourceRoot":""}