{"version":3,"file":"static/js/9214.3a00c26c.chunk.js","mappings":"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","sources":["pages/financeManagement/clientExpence/EditClientExpence.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { domainName, getDefaultFinacialYear, inputClassName, inputDisabledClassName, inputLabelClassName, inputLabelClassNameReactSelect } from \"../../../constents/global\";\nimport { branchSearch, getBranchDetails } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport ReactSelect from \"react-select\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { expenseTypeSearch } from \"../../global/other/ExpenseHead/expenseTypeFeature/_expenseType_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { createclientExpence, getclientExpenceDetails, updateclientExpence } from \"./clientExpenceFeature/_clientExpence_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { officeAddressSearch } from \"../../global/other/officeAddressManagement/officeAddressFeature/_office_address_reducers\";\nimport { Select } from \"antd\";\nimport { getinvoiceList, invoiceSearch } from \"../invoice/invoiceFeature/_invoice_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { MdDelete } from \"react-icons/md\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport moment from \"moment\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\n\n\nconst EditClientExpence = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    defaultValues: {\n\n    }\n  });\n  const { clientExpenceDetails } = useSelector((state) => state.clientExpence);\n  const { clientExpenceIdEnc } = useParams()\n  const clientExpenceId = decrypt(clientExpenceIdEnc)\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { clientList } = useSelector((state) => state.client);\n  const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n  const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n  const { officeAddressListData } = useSelector((state) => state.officeAddress);\n  const { branchDetailsData } = useSelector((state) => state.branch);\n  const { employeList } = useSelector(\n    (state) => state.employe\n  );\n  const { clientGroupList } = useSelector(state => state.clientGroup);\n  const { invoiceListData } = useSelector(\n    (state) => state.invoice\n  );\n  const { expenseTypeList } = useSelector(\n    (state) => state.expenceHead\n  );\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"heads\",\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      if (clientExpenceId) {\n        setValue(\"heads\", []);\n\n        try {\n          // Fetch clientExpence details\n          const mainData = await dispatch(getclientExpenceDetails({ _id: clientExpenceId }));\n\n          if (!mainData.error && mainData?.payload?.data) {\n            const data = mainData?.payload?.data;\n            setValue(\"naration\", data.naration);\n            setValue(\"date\", moment(data.date));\n            setValue(\"chequeNo\", data.chequeNo);\n            setValue(\"transactionNo\", data.transactionNo);\n            setValue(\"type\", data.paymentMode);\n\n            const groupData = await dispatch(\n              clientGrpSearch({\n                companyId: data.companyId,\n                branchId: data.branchId,\n                isPagination: false,\n                text: \"\",\n                sort: true,\n                status: true,\n                groupId: \"\",\n              })\n            );\n            if (!groupData?.error) {\n              setValue(\"groupName\", data.clientGroupId);\n            }\n\n            // Fetch client ID\n            const clientData = await dispatch(\n              clientSearch({\n                companyId: data.companyId,\n                branchId: data.branchId,\n                groupId: data.groupId,\n                isPagination: false,\n                sort: true,\n                status: true,\n              })\n            );\n            if (!clientData?.error) {\n              setValue(\"client\", data.clientId);\n            }\n\n\n            // Fetch bank details if payment is not cash\n            if (data.paymentmode !== \"cash\") {\n              const branchData = await dispatch(getBranchDetails({ _id: data.branchId }));\n              if (!branchData?.error) {\n                setValue(\"bankId\", data.bankAccId);\n              }\n            }\n\n            // Fetch employee if payment mode is cash\n            if (data.paymentMode === \"cash\") {\n              const employeeData = await dispatch(\n                employeSearch({\n                  text: \"\",\n                  status: true,\n                  sort: true,\n                  isPagination: false,\n                  companyId: data.companyId,\n                  branchId: data.branchId,\n                })\n              );\n              const selectedEmployee = employeeData?.payload?.data?.docs?.find(\n                (employee) => employee?._id === data.employeId\n              );\n              if (!employeeData?.error) {\n                setValue(\"employeeId\", { value: selectedEmployee?._id, label: selectedEmployee?.fullName });\n              }\n            }\n\n\n\n            // Fetch department data\n            const deptData = await dispatch(\n              expenseTypeSearch({\n                text: \"\",\n                sort: true,\n                status: true,\n                isPagination: false,\n                companyId: data.companyId,\n                branchId: data.branchId,\n              })\n            );\n            if (!deptData?.error) {\n              const heads = data?.heads\n                ?.filter((item) => item?.headType === \"head\")\n                ?.map((item) => ({\n                  headType: \"head\",\n\n                  subHeadId: item?.headId,\n                  amount: +item?.amount,\n                  financialYear: item?.financialYear,\n                  type: item?.type,\n                  monthName: item?.monthName,\n                  monthQuaters: item?.monthQuaters,\n                  description: item?.description\n                }));\n              const others = data?.heads\n                ?.filter((item) => item?.headType === \"other\")\n                ?.map((item) => ({\n                  headType: \"other\",\n\n                  subHeadId: '',\n                  amount: +item?.amount,\n                  financialYear: '',\n                  type: '',\n                  monthName: '',\n                  monthQuaters: '',\n                  description: item?.description\n                }));\n              if (heads) {\n                append(heads);\n              }\n              if (others) {\n                append(others);\n              }\n\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching data\", error);\n        }\n      }\n    };\n\n    fetchData();\n  }, [clientExpenceId]);\n\n\n\n\n\n  const onSubmit = (data) => {\n\n    const clientHeads = data?.heads?.filter((item) => item?.headType === \"other\")?.map((item) => ({\n      \"headType\": item?.headType,\n      \"description\": item?.description,\n      \"amount\": + item?.amount,\n    }))\n    const invoiceHeads = data?.heads?.filter((item) => item?.headType === \"head\")?.map((item) => ({\n      \"headType\": item?.headType,\n      \"headId\": item?.subHeadId,\n      \"description\": item?.description,\n      \"amount\": + item?.amount,\n      \"financialYear\": item?.financialYear,\n      \"type\": item?.type,\n      \"monthName\": item?.monthName,\n      \"monthQuaters\": item?.monthQuaters\n    }))\n    const finalPayload = {\n      _id: clientExpenceId,\n      companyId: clientExpenceDetails?.companyId,\n      directorId: clientExpenceDetails?.directorId,\n      branchId: clientExpenceDetails?.branchId,\n      \"expenseType\": \"client_expense\",\n      \"clientGroupId\": data?.groupName,\n      \"clientId\": data?.client,\n      \"employeId\": data?.type === 'cash' ? data?.employeeId?.value : null,\n      \"bankAccId\": data?.type !== 'cash' ? data?.bankId : null,\n      \"paymentMode\": data?.type,\n      \"totalAmount\": data?.grandTotal,\n      \"chequeNo\": data?.type === 'cheque' ? data?.chequeNo : null,\n      \"date\": data?.date,\n      \"naration\": data?.naration,\n      \"heads\": [...clientHeads, ...invoiceHeads],\n      \"transactionNo\": data?.type === 'bank' ? data?.transactionNo : null,\n    }\n    dispatch(updateclientExpence(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/clientExpence\");\n    });\n\n  };\n\n\n\n  const getinvoicerequest = () => {\n    const data = {\n      directorId: \"\",\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId :\n          userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.branchId,\n      clientId: watch(\"client\"),\n      \"text\": \"\",\n      \"sort\": true,\n      \"status\": \"Paid\",\n      \"isPagination\": true,\n    };\n    dispatch(invoiceSearch(data));\n  };\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n  const financialYears = generateFinancialYears();\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\",\n    \"June\", \"July\", \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sept\", \"Oct-Dec\"];\n\n  const selectedHeads = useWatch({ control, name: \"heads\" })\n  useEffect(() => {\n    const totalAmount = selectedHeads?.reduce((total, task) => {\n      return total + Number(task.amount || 0);\n    }, 0)\n    setValue(\"grandTotal\", totalAmount);\n  }, [selectedHeads, setValue]);\n\n\n\n\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Group Type <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"groupName\", {\n                  required: \"Organization type is required\",\n                })}\n                className={` ${inputClassName} ${errors.groupName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                onFocus={() => {\n                  dispatch(\n                    clientGrpSearch({\n                      companyId: clientExpenceDetails?.companyId,\n                      branchId: clientExpenceDetails?.branchId,\n                      isPagination: false,\n                      text: \"\",\n                      sort: true,\n                      status: true,\n                      groupId: \"\",\n                    })\n                  )\n                }}\n                onChange={(e) => {\n                  setValue(\"maxAdvance\", clientGroupList?.find((client) => client?._id === e.target.value)?.advancedBalance)\n                }}\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Group Type\n                </option>\n                {clientGroupList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}({elment?.groupName})</option>\n                ))}\n              </select>\n              {errors.groupName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.groupName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Client <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"client\", {\n                  required: \"Client is required\",\n                })}\n                onFocus={() => {\n                  dispatch(clientSearch({\n                    companyId: clientExpenceDetails?.companyId,\n                    branchId: clientExpenceDetails?.branchId,\n                    \"directorId\": \"\",\n                    \"organizationId\": \"\",\n                    \"industryId\": \"\",\n                    groupId: watch(\"groupName\"),\n                    \"text\": \"\",\n                    \"sort\": true,\n                    \"status\": true,\n                    \"isPagination\": false,\n                  }))\n                }}\n                className={` ${inputClassName} ${errors.client\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Client\n                </option>\n                {clientList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}</option>\n                ))}\n              </select>\n              {errors.client && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.client.message}\n                </p>\n              )}\n            </div>\n\n          </div>\n\n          <div >\n            {fields.map((item, index) => (\n              <div key={item.id} className=\"border border-gray-300 rounded-md my-2\" >\n                <div className=\"flex justify-end bg-header rounded-t-md p-2\">\n                  <button className=\"text-white\" size={20} type=\"button\" onClick={() => remove(index)}>\n                    <MdDelete />\n                  </button>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Head Type</label>\n                    <select\n                      {...register(`heads[${index}].headType`, { required: \"Head type is required\" })}\n                      defaultValue={'head'}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.headType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      onChange={(e) => {\n\n                        setValue(`heads[${index}].headType`, e.target.value)\n                        setValue(`heads[${index}].amount`, 0)\n                        setValue(`heads[${index}].subHeadId`, \"\")\n                        setValue(`heads[${index}].invoiceId`, \"\")\n\n                      }}\n                    >\n                      <option value=\"head\">Head</option>\n                      <option value=\"other\">Other</option>\n                    </select>\n                    {errors?.heads?.[index]?.headType && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.headType?.message}</p>\n                    )}\n                  </div>\n\n                  {watch(`heads[${index}].headType`) === \"head\" && (\n                    < >\n                      <div>\n                        <label className={`${inputLabelClassName}`}>Expence Head</label>\n                        <select\n                          onFocus={() => {\n                            dispatch(\n                              expenseTypeSearch({\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination: false,\n                                companyId: userInfoglobal?.userType === \"admin\"\n                                  ? CompanyId\n                                  : userInfoglobal?.userType === \"company\"\n                                    ? userInfoglobal?._id\n                                    : userInfoglobal?.companyId,\n                                branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? watch(\"PDBranchId\") : userInfoglobal?.userType === \"companyBranch\"\n                                  ? userInfoglobal?._id\n                                  : userInfoglobal?.branchId,\n                              })\n                            );\n                          }}\n                          {...register(`heads[${index}].subHeadId`, { required: \"Expence Head is required\" })}\n                          defaultValue={item.subHeadId}\n                          className={` ${inputClassName} ${errors?.heads?.[index]?.subHeadId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        >\n                          <option className=\"text-xs\" value=\"\">\n                            Select Expence Head\n                          </option>\n                          {expenseTypeList?.map((elment, index) => (\n                            <option value={elment?._id}>{elment?.name}</option>\n                          ))}\n                        </select>\n                        {errors?.heads?.[index]?.subHeadId && (\n                          <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.subHeadId?.message}</p>\n                        )}\n                      </div>\n\n                      <div className=\"col-span-2 my-2\">\n                        <div className={`grid ${watch(`heads[${index}].type`) === \"Yearly\" ? \"grid-cols-1 md:grid-cols-2\" : watch(`heads[${index}].type`) ? \"grid-cols-1 md:grid-cols-3\" : \"grid-cols-1 md:grid-cols-2\"} space-x-4`}>\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Financial Year <span className=\"text-red-600\">*</span>\n                            </label>\n                            <select\n                            defaultValue={getDefaultFinacialYear()}\n                              {...register(`heads[${index}].financialYear`, {\n                                required: \"Financial year is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.financialYear ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Financial Year</option>\n                              {financialYears.map((year, index) => (\n                                <option key={index} value={year}>\n                                  {year}\n                                </option>\n                              ))}\n                            </select>\n                            {errors?.heads?.[index]?.financialYear && (\n                              <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.financialYear.message}</p>\n                            )}\n                          </div>\n\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Type <span className=\"text-red-600\">*</span>\n                            </label>\n                            <select\n                              {...register(`heads[${index}].type`, {\n                                required: \"Type is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.type ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Type</option>\n                              <option value=\"Quaterly\">Quaterly</option>\n                              <option value=\"Monthly\">Monthly</option>\n                              <option value=\"Yearly\">Yearly</option>\n                            </select>\n                            {errors?.heads?.[index]?.type && (\n                              <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.type.message}</p>\n                            )}\n                          </div>\n\n                          {watch(`heads[${index}].type`) === \"Quaterly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Quarter <span className=\"text-red-600\">*</span>\n                              </label>\n                              <select\n                                {...register(`heads[${index}].monthQuaters`, {\n                                  required: \"Reset Month is required\",\n                                })}\n                                className={`${inputClassName} ${errors?.heads?.[index]?.monthQuaters ? \"border-[1px] \" : \"border-gray-300\"}`}\n                              >\n                                <option value=\"\">Select Quarter</option>\n                                {quarter.map((qtr) => (\n                                  <option key={qtr} value={qtr}>\n                                    {qtr}\n                                  </option>\n                                ))}\n                              </select>\n                              {errors?.heads?.[index]?.monthQuaters && (\n                                <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.monthQuaters.message}</p>\n                              )}\n                            </div>\n                          )}\n\n                          {watch(`heads[${index}].type`) === \"Monthly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Month <span className=\"text-red-600\">*</span>\n                              </label>\n                              <select\n                                {...register(`heads[${index}].monthName`, {\n                                  required: \"Month is required\",\n                                })}\n                                className={`${inputClassName} ${errors?.heads?.[index]?.monthName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                              >\n                                <option value=\"\">Select Month</option>\n                                {months.map((month) => (\n                                  <option key={month} value={month}>\n                                    {month}\n                                  </option>\n                                ))}\n                              </select>\n                              {errors?.heads?.[index]?.monthName && (\n                                <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.monthName.message}</p>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                  {watch(`heads[${index}].headType`) === \"invoice\" && (\n\n                    <div>\n                      <label className={`${inputLabelClassName}`}>Invoice ID</label>\n                      <select\n                        {...register(`heads[${index}].invoiceId`, { required: \"Invoice ID is required\" })}\n                        onFocus={() => {\n                          getinvoicerequest()\n                        }}\n                        onChange={(e) => {\n                          if (watch(`heads[${index}].headType`) === \"invoice\") {\n                            setValue(`heads[${index}].amount`, invoiceListData?.find(elment => elment?._id === e.target.value)?.grandTotal)\n                            const total = fields.reduce((sum, field, i) => {\n                              return sum + (parseFloat(watch(`heads[${i}].amount`)) || 0);\n                            }, 0);\n                            setValue('totalAmount', total)\n                          }\n                        }}\n                        className={` ${inputClassName} ${errors?.heads?.[index]?.invoiceId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Client\n                        </option>\n                        {invoiceListData?.map((elment, index) => (\n                          <option value={elment?._id}>{elment?.clientName}({elment?.invoiceNumber})</option>\n                        ))}\n                      </select>\n                      {errors?.heads?.[index]?.invoiceId && (\n                        <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.invoiceId?.message}</p>\n                      )}\n                    </div>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Description</label>\n                    <input\n                      {...register(`heads[${index}].description`, { required: \"Description is required\" })}\n                      defaultValue={item.description}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.description ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    />\n                    {errors?.heads?.[index]?.description && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.description?.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Amount</label>\n                    <input\n                      type=\"number\"\n                       step=\"0.01\"\n                      disabled={watch(`heads[${index}].headType`) === \"invoice\"}\n                      {...register(`heads[${index}].amount`, { required: \"Amount is required\" })}\n                      onChange={(e) => {\n                        const updatedAmount = parseFloat(e.target.value) || 0;\n                        setValue(`heads[${index}].amount`, updatedAmount);\n\n\n                        const total = fields.reduce((sum, field, i) => {\n                          return sum + (parseFloat(watch(`heads[${i}].amount`)) || 0);\n                        }, 0);\n                        setValue('totalAmount', total)\n\n                      }}\n\n                      className={` ${watch(`heads[${index}].headType`) === \"invoice\" ? inputDisabledClassName : inputClassName} ${errors?.heads?.[index]?.amount ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    />\n                    {errors?.heads?.[index]?.amount && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.amount?.message}</p>\n                    )}\n                  </div>\n                </div>\n\n\n              </div>\n            ))}\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => append({ headType: \"invoice\" })}\n            className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n          >\n            Add more\n          </button>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 md:gap-8 md:my-1 px-3 md:mt-4\">\n            {watch(\"grandTotal\") > 0 && <div className=\"\">\n              <div className=\" flex items-center gap-4\">\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"cash\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Cash\n                </label>\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"cheque\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Cheque\n                </label>\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"bank\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Bank\n                </label>\n              </div>\n\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.type.message}\n                </p>\n              )}\n            </div>}\n\n\n            {watch(\"grandTotal\") > 0 && watch(\"type\") !== \"cash\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Sender Bank<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n\n                {...register(\"bankId\",)}\n                className={`${inputClassName}  ${errors.bankId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                onFocus={() => {\n                  dispatch(getBranchDetails({\n                    _id: clientExpenceDetails?.branchId\n                  }))\n                }}\n              >\n\n                <option value=''>\n                  select bank\n                </option>\n                {\n                  branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                  branchDetailsData.data.bankData.map((type) => (\n                    <option key={type._id} value={type._id}>\n                      {`${type.bankName} (${type.branchName})`}\n                    </option>\n                  ))\n                }\n              </select>\n              {errors.bankId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.bankId.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cash\" && <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Employee</label>\n              <Controller\n                name=\"employeeId\"\n                control={control}\n                rules={{ required: \"Employee is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    {...field}\n                    onFocus={() => dispatch(employeSearch({\n                      text: \"\",\n                      status: true,\n                      sort: true,\n                      isTL: \"\",\n                      isHR: \"\",\n                      isPagination: false,\n                      departmentId: '',\n                      designationId: '',\n                      companyId: clientExpenceDetails?.companyId,\n                      branchId: clientExpenceDetails?.branchId,\n                    }))}\n                    options={employeList?.map((employee) => ({\n                      value: employee?._id,\n                      label: employee?.fullName,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.employeeId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Employee\"\n                  />\n                )}\n              />\n              {errors.employeeId && <p className=\"text-red-500 text-sm\">{errors.employeeId.message}</p>}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cheque\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Cheque No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"chequeNo\", {\n                  required: \"chequeNo is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.chequeNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Cheque no\"\n              />\n              {errors.chequeNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.chequeNo.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"bank\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Transaction No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"transactionNo\", {\n                  required: \"transaction No is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.transactionNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Cheque no\"\n              />\n              {errors.transactionNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.transactionNo.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration<span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.naration ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Date<span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name={`date`}\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker field={field} errors={errors} />\n                )}\n              />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.date.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n\n          <div className=\"w-full flex flex-row items-end justify-end\">\n            <div className=\"\">\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Grand Total\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"grandTotal\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"grandTotal\"\n                  disabled\n                // value={totalAmount - discount}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div >\n    </GlobalLayout >\n  );\n};\n\nexport default EditClientExpence;\n"],"names":["EditClientExpence","_branchDetailsData$da","_branchDetailsData$da2","register","handleSubmit","control","watch","formState","errors","setValue","useForm","defaultValues","clientExpenceDetails","useSelector","state","clientExpence","clientExpenceIdEnc","useParams","clientExpenceId","decrypt","dispatch","useDispatch","navigate","useNavigate","companyList","company","branchList","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","clientList","client","CompanyId","useWatch","name","defaultValue","BranchId","officeAddressListData","officeAddress","branchDetailsData","employeList","employe","clientGroupList","clientGroup","invoiceListData","invoice","expenseTypeList","expenceHead","fields","append","remove","useFieldArray","useEffect","async","_mainData$payload","mainData","getclientExpenceDetails","_id","error","payload","data","_mainData$payload2","naration","moment","date","chequeNo","transactionNo","paymentMode","groupData","clientGrpSearch","companyId","branchId","isPagination","text","sort","status","groupId","clientGroupId","clientData","clientSearch","clientId","paymentmode","branchData","getBranchDetails","bankAccId","_employeeData$payload","_employeeData$payload2","_employeeData$payload3","employeeData","employeSearch","selectedEmployee","docs","find","employee","employeId","value","label","fullName","deptData","expenseTypeSearch","_data$heads","_data$heads$filter","_data$heads2","_data$heads2$filter","heads","filter","item","headType","map","subHeadId","headId","amount","financialYear","type","monthName","monthQuaters","description","others","console","fetchData","financialYears","generateFinancialYears","year","push","months","quarter","selectedHeads","totalAmount","reduce","total","task","Number","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_data$heads3","_data$heads3$filter","_data$heads4","_data$heads4$filter","_data$employeeId","clientHeads","invoiceHeads","finalPayload","directorId","groupName","employeeId","bankId","grandTotal","updateclientExpence","then","inputLabelClassName","_objectSpread","required","inputClassName","onFocus","onChange","e","_clientGroupList$find","target","advancedBalance","elment","index","message","_errors$heads","_errors$heads$index","_errors$heads2","_errors$heads2$index","_errors$heads3","_errors$heads3$index","_errors$heads3$index$","_errors$heads4","_errors$heads4$index","_errors$heads5","_errors$heads5$index","_errors$heads6","_errors$heads6$index","_errors$heads6$index$","_errors$heads7","_errors$heads7$index","_errors$heads8","_errors$heads8$index","_errors$heads9","_errors$heads9$index","_errors$heads0","_errors$heads0$index","_errors$heads1","_errors$heads1$index","_errors$heads10","_errors$heads10$index","_errors$heads11","_errors$heads11$index","_errors$heads12","_errors$heads12$index","_errors$heads13","_errors$heads13$index","_errors$heads14","_errors$heads14$index","_errors$heads15","_errors$heads15$index","_errors$heads16","_errors$heads16$index","_errors$heads17","_errors$heads17$index","_errors$heads18","_errors$heads18$index","_errors$heads19","_errors$heads19$index","_errors$heads19$index2","_errors$heads20","_errors$heads20$index","_errors$heads21","_errors$heads21$index","_errors$heads22","_errors$heads22$index","_errors$heads22$index2","_errors$heads23","_errors$heads23$index","_errors$heads24","_errors$heads24$index","_errors$heads25","_errors$heads25$index","_errors$heads25$index2","size","onClick","MdDelete","_Fragment","userType","getDefaultFinacialYear","qtr","month","getinvoicerequest","invoiceSearch","_invoiceListData$find","sum","field","i","parseFloat","invoiceId","clientName","invoiceNumber","step","disabled","updatedAmount","inputDisabledClassName","id","bankData","length","bankName","branchName","Controller","rules","render","_ref","ReactSelect","isTL","isHR","departmentId","designationId","options","classNamePrefix","inputLabelClassNameReactSelect","placeholder","_ref2","CustomDatePicker"],"sourceRoot":""}