{"version":3,"file":"static/js/7133.ca3d3f7a.chunk.js","mappings":"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","sources":["pages/global/other/dynamicPage/EditDynamicPage.js"],"sourcesContent":["import { useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport { inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport { updateDynamicPage, getDynamicPageById } from \"./DynamicPageFeatures/dynamic_page_reducers\";\n\nfunction EditDynamicPage() {\n\n  const { register, handleSubmit, setValue, formState: { errors } } = useForm();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { pageIdEnc } = useParams();\n  const pageId = decrypt(pageIdEnc)\n\n  const { dynamicPageByIdData } = useSelector(state => state.dynamicPage);\n\n  useEffect(() => {\n    let reqData = {\n      _id: pageId,\n    };\n\n    dispatch(getDynamicPageById(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (dynamicPageByIdData && dynamicPageByIdData?.data) {\n      setValue(\"name\", dynamicPageByIdData?.data?.name);\n      setValue(\"slug\", dynamicPageByIdData?.data?.slug);\n      setValue(\"status\", dynamicPageByIdData?.data?.status);\n    }\n  }, [dynamicPageByIdData]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: pageId,\n      \"name\": data?.name,\n      \"slug\": data?.slug,\n      \"status\": data?.status\n    };\n\n    dispatch(updateDynamicPage(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/dynamic-page\");\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n\n            {/* Name Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"name\", { required: \"Name is required\" })}\n                className={`${errors.name ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n                placeholder=\"Enter Page Name\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\n              )}\n            </div>\n\n            <div>\n              <label className={`${inputLabelClassName}`}>Slug <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"slug\", { required: \"Name is required\" })}\n                className={`${errors.slug ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n                placeholder=\"Enter Page Name\"\n              />\n              {errors.slug && (\n                <p className=\"text-red-500 text-sm\">{errors.slug.message}</p>\n              )}\n            </div>\n\n            {/* Status Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n              >\n                <option value=\"\">Select Status</option>\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n\n    </GlobalLayout>\n  );\n}\n\nexport default EditDynamicPage;\n"],"names":["register","handleSubmit","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","pageIdEnc","useParams","pageId","decrypt","dynamicPageByIdData","useSelector","state","dynamicPage","useEffect","reqData","_id","getDynamicPageById","_dynamicPageByIdData$","_dynamicPageByIdData$2","_dynamicPageByIdData$3","data","name","slug","status","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","finalPayload","updateDynamicPage","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","value"],"sourceRoot":""}