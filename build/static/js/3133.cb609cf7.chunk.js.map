{"version":3,"file":"static/js/3133.cb609cf7.chunk.js","mappings":"+NA6FA,QAtFA,WAEE,MAAM,SAAEA,EAAQ,aAAEC,EAAcC,WAAW,OAAEC,KAAaC,EAAAA,EAAAA,MAEpDC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAajB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,UACXF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,QAAOD,UACpBE,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMF,UAAU,eAAeG,SAAUd,EAdhDe,IAChB,MAAMC,EAAe,CACnB,KAAQD,EAAKE,KACb,aAAgB,GAChBC,OAAQH,EAAKG,QAEfd,GAASe,EAAAA,EAAAA,IAAkBH,IAAeI,KAAML,KAC7CA,EAAKM,OAASf,EAAS,2BAO6DI,SAAA,EACjFE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gDAA+CD,SAAA,EAE5DE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAW,OAAKC,EAAAA,IAAsBb,SAAA,CAAC,SACrCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEtCF,EAAAA,EAAAA,KAAA,SAAAgB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,QACD1B,EAAS,OAAQ,CAAE2B,SAAU,sBAAqB,IACtDf,UAAS,GAAAW,OAAKpB,EAAOe,KAAO,gBAAkB,kBAAiB,KAAAK,OACzDK,EAAAA,IACNC,YAAY,qBAEb1B,EAAOe,OACNT,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAER,EAAOe,KAAKY,cAGrDjB,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAW,OAAKC,EAAAA,IAAsBb,SAAA,CAAC,SACrCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEtCF,EAAAA,EAAAA,KAAA,SAAAgB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,QACD1B,EAAS,OAAQ,CAAE2B,SAAU,sBAAqB,IACtDf,UAAS,GAAAW,OAAKpB,EAAO4B,KAAO,gBAAkB,kBAAiB,KAAAR,OACzDK,EAAAA,IACNC,YAAY,gBAEb1B,EAAO4B,OACNtB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAER,EAAO4B,KAAKD,cAGrDjB,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAAW,OAAKC,EAAAA,IAAsBb,SAAA,CAAC,WACnCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAExCE,EAAAA,EAAAA,MAAA,UAAAY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMzB,EAAS,SAAU,CAAE2B,SAAU,wBAAuB,IAC1Df,UAAS,YAAAW,OAAcpB,EAAOgB,OAAS,gBAAkB,kBAAiB,KAAAI,OACpEK,EAAAA,IAAiBjB,SAAA,EAEvBF,EAAAA,EAAAA,KAAA,UAAQuB,MAAM,GAAErB,SAAC,mBACjBF,EAAAA,EAAAA,KAAA,UAAQuB,OAAO,EAAKrB,SAAC,YACrBF,EAAAA,EAAAA,KAAA,UAAQuB,OAAO,EAAMrB,SAAC,iBAEvBR,EAAOgB,SACNV,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAER,EAAOgB,OAAOW,iBAIzDrB,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmBD,UAChCF,EAAAA,EAAAA,KAAA,UACEiB,KAAK,SACLd,UAAU,6CAA4CD,SACvD,mBAQb,C","sources":["pages/global/other/dynamicPage/CreateDynamicPage.js"],"sourcesContent":["import { useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport { createDynamicPage } from \"./DynamicPageFeatures/dynamic_page_reducers\";\n\nfunction CreateDynamicPage() {\n\n  const { register, handleSubmit, formState: { errors } } = useForm();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      \"name\": data.name,\n      \"parentPageId\": \"\",\n      status: data.status,\n    };\n    dispatch(createDynamicPage(finalPayload)).then((data) => {\n      !data.error && navigate(\"/admin/dynamic-page\");\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            {/* Name Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"name\", { required: \"Name is required\" })}\n                className={`${errors.name ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n                placeholder=\"Enter Page Name\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Slug <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"slug\", { required: \"Slug is required\" })}\n                className={`${errors.slug ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n                placeholder=\"Enter Slug\"\n              />\n              {errors.slug && (\n                <p className=\"text-red-500 text-sm\">{errors.slug.message}</p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n              >\n                <option value=\"\">Select Status</option>\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default CreateDynamicPage;\n"],"names":["register","handleSubmit","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","name","status","createDynamicPage","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","slug","value"],"sourceRoot":""}