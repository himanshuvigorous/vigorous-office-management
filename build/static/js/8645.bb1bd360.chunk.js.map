{"version":3,"file":"static/js/8645.bb1bd360.chunk.js","mappings":"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","sources":["pages/Project management/ProjecttaskMagement/ProjectTaskList.js","global_layouts/Loader/Loader.js","pages/Project management/ProjecttaskMagement/UpdateProjectTask.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\"\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useEffect, useState } from \"react\";\nimport Swal from \"sweetalert2\"\nimport { encrypt } from \"../../../config/Encryption\"\nimport { FaPlus, FaPenToSquare } from \"react-icons/fa6\"\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { domainName, inputAntdSelectClassNameFilter, ProjectmanagementStatus, ProjectTaskStatus, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport CustomPagination from \"../../../component/CustomPagination/CustomPagination\"\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport Loader from \"../../../global_layouts/Loader/Loader\";\nimport { Select, Tooltip } from \"antd\";\nimport usePermissions from \"../../../config/usePermissions\";\nimport Loader2 from \"../../../global_layouts/Loader/Loader2\";\nimport dayjs from \"dayjs\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { deleteProjectTaskFunc, getProjectTaskList, statusProjectTaskFunc } from \"./ProjecttaskFeatures/_project_task_reducers\";\nimport CreateProjectTask from \"./CreateProjectTask\";\nimport UpdateProjectTask from \"./UpdateProjectTask\";\nimport { BsEye } from \"react-icons/bs\";\nimport LogsProjectTaskView from \"./LogsProjectTaskView\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport StatusDropdown from \"./StatusDropDown\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\n\nfunction ProjectTaskList() {\n    const { register, control, setValue, formState: { errors } } = useForm();\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n    const { companyList } = useSelector((state) => state.company);\n    const { branchList, loading: branchSearchLoading } = useSelector((state) => state.branch);\n    const { projectTaskList, totalProjectTaskCount, loading } = useSelector(state => state.projectTask)\n    const { employeList, laoding: employeelistLoading } = useSelector((state) => state.employe);\n\n    const [searchText, setSearchText] = useState(\"\");\n    const [openCreateModal, setOpenCreateModal] = useState({\n        isOpen: false,\n        data: null\n    })\n    const [openUpdateModal, setOpenUpdateModal] = useState({\n        isOpen: false,\n        data: null\n    })\n    const [openLogsModal, setOpenLogsModal] = useState({\n        isOpen: false,\n        data: null\n    })\n\n    const [currentPage, setCurrentPage] = useState(1);\n\n    const CompanyId = useWatch({\n        control,\n        name: \"PDCompanyId\",\n        defaultValue: \"\",\n    });\n    const BranchId = useWatch({\n        control,\n        name: \"PDBranchId\",\n        defaultValue: \"\",\n    });\n\n    const status = useWatch({\n        control,\n        name: 'status',\n        defaultValue: ''\n    });\n    const startDate = useWatch({\n        control,\n        name: \"startDate\",\n        defaultValue: dayjs(),\n    });\n\n    const endDate = useWatch({\n        control,\n        name: \"endDate\",\n        defaultValue: dayjs(),\n    });\n    const employeeId = useWatch({\n        control,\n        name: \"employeeId\",\n        defaultValue: \"\",\n    });\n    const limit = 10;\n\n    const onPaginationChange = (page) => {\n        setCurrentPage(page);\n    };\n\n\n    const filters = [CompanyId, BranchId, status, searchText, startDate, endDate, employeeId].join(\"-\");\n    const [isFirstRender, setisFirstRender] = useState(false)\n\n    useEffect(() => {\n        if (!isFirstRender) {\n            setisFirstRender(state => true);\n            return;\n        }\n        if (currentPage === 1) {\n            fetchProjectTaskList();\n        } else {\n            setCurrentPage(1);\n        }\n    }, [filters])\n\n    useEffect(() => {\n        fetchProjectTaskList()\n    }, [currentPage])\n\n\n    const fetchProjectTaskList = () => {\n        const reqData = {\n            page: currentPage,\n            limit: limit,\n            reqPayload: {\n                companyId:\n                    userInfoglobal?.userType === \"admin\"\n                        ? CompanyId\n                        :\n                        userInfoglobal?.userType === \"company\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.companyId,\n                branchId:\n                    userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\"\n                        ? userInfoglobal?._id\n                        : userInfoglobal?.branchId,\n                directorId: \"\",\n                text: searchText,\n                sort: true,\n                status: status,\n                isPagination: true,\n                \"projectId\": \"\",\n                \"taskId\": \"\",\n                \"assignedTo\": employeeId,\n                \"departmentId\": '',\n                \"creatorId\": \"\",\n                \"followerIds\": [],\n                startDate: startDate ? dayjs(startDate).format('YYYY-MM-DD') : '',\n                endDate: endDate ? dayjs(endDate).format('YYYY-MM-DD') : '',\n\n\n            }\n        }\n        dispatch(getProjectTaskList(reqData))\n    }\n\n    const handleDelete = (id) => {\n        let reqData = {\n            _id: id,\n        }\n        Swal.fire({\n            title: \"Warning\",\n            text: \"Are you sure you want to delete!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            cancelButtonText: \"No\",\n        }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteProjectTaskFunc(reqData)).then((data) => {\n                    // fetchVendorList()\n\n                    if (currentPage > 1 && projectTaskList?.length == 1) {\n                        setCurrentPage(Number(currentPage - 1));\n\n                    } else {\n                        fetchProjectTaskList();\n                    }\n                })\n            }\n        });\n    };\n\n    useEffect(() => {\n        if (\n            CompanyId ||\n            userInfoglobal?.userType === \"company\" ||\n            userInfoglobal?.userType === \"companyDirector\"\n        ) {\n            dispatch(\n                branchSearch({\n                    text: \"\",\n                    sort: true,\n                    status: true,\n                    isPagination: false,\n                    companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n                })\n            );\n        }\n    }, [CompanyId])\n\n    useEffect(() => {\n        if (userInfoglobal?.userType === \"admin\") {\n            dispatch(\n                companySearch({\n                    text: \"\",\n                    sort: true,\n                    status: true,\n                    isPagination: false,\n                })\n            );\n        }\n    }, []);\n    const handleEmployeeFocus = () => {\n        dispatch(\n            employeSearch({\n                companyId: userInfoglobal?.userType === \"company\"\n                    ? userInfoglobal?._id\n                    : userInfoglobal?.companyId,\n                branchId:\n                    [\"admin\", \"company\", \"companyDirector\"].includes(userInfoglobal?.userType)\n                        ? BranchId\n                        : userInfoglobal?.userType === \"companyBranch\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.branchId,\n                departmentId: '',\n                directorId: \"\",\n                text: \"\",\n                sort: true,\n                status: true,\n                isPagination: false,\n                isBranch: true,\n                isDirector: false,\n            })\n        )\n    }\n\n    const handleStatusChange = (status, id) => {\n        dispatch(statusProjectTaskFunc({\n\n            \"_id\": id,\n            \"status\": status\n\n        })).then((res) => {\n            if (!res.error) {\n                fetchProjectTaskList()\n            }\n        })\n    }\n    const { canCreate, canRead, canUpdate, canDelete } = usePermissions();\n\n    const onChange = (e) => {\n\n        setSearchText(e);\n    };\n\n    return (\n        <GlobalLayout onChange={onChange}>\n\n            <section>\n                <div className=\"\">\n\n                    <div className=\"grid grid-cols-1 sm:flex  gap-2 items-center justify-start py-1 text-[14px] rounded-md w-full\">\n                        {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n\n\n                            <Controller\n                                control={control}\n                                name=\"PDCompanyId\"\n                                rules={{ required: \"Company is required\" }}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        defaultValue={\"\"}\n\n                                        className={`${inputAntdSelectClassNameFilter} `}\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n                                    >\n                                        <Select.Option value=\"\">Select Company</Select.Option>\n                                        {companyList?.map((type) => (\n                                            <Select.Option key={type?._id} value={type?._id}>\n                                                {type?.fullName}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            />\n                            {errors.PDCompanyId && (\n                                <p className=\"text-red-500 text-sm\">\n                                    {errors.PDCompanyId.message}\n                                </p>\n                            )}\n                        </div>}\n                        {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n\n\n\n                            <Controller\n                                control={control}\n                                name=\"PDBranchId\"\n                                rules={{ required: \"Branch is required\" }}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        defaultValue={\"\"}\n\n                                        className={`${inputAntdSelectClassNameFilter} `}\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n                                    >\n                                        <Select.Option value=\"\">Select Branch</Select.Option>\n                                        {branchSearchLoading ? (\n                                            <Select.Option disabled>\n                                                <ListLoader />\n                                            </Select.Option>\n                                        ) : (\n                                            sortByPropertyAlphabetically(branchList)?.map((type) => (\n                                                <Select.Option key={type?._id} value={type?._id}>\n                                                    {type?.fullName}\n                                                </Select.Option>\n                                            ))\n                                        )}\n                                    </Select>\n                                )}\n                            />\n                            {errors.PDBranchId && (\n                                <p className=\"text-red-500 text-sm\">\n                                    {errors.PDBranchId.message}\n                                </p>\n                            )}\n                        </div>}\n\n                        <div >\n                            <Controller\n                                name=\"employeeId\"\n                                control={control}\n                                render={({ field }) => (\n                                    <Select\n                                        allowClear\n                                        className={`inputAntdSelectClassNameFilterReport`}\n                                        disabled={loading}\n                                        placeholder=\"Select Employee\"\n                                        onFocus={handleEmployeeFocus}\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n\n                                        value={field.value || []}\n                                        onChange={(val) => field.onChange(val)}\n                                    >\n                                        <Select.Option value=\"\">Select Employee</Select.Option>\n                                        {employeelistLoading ? (<Select.Option disabled>\n                                            <ListLoader />\n                                        </Select.Option>) : (sortByPropertyAlphabetically(employeList, 'fullName')?.map((type) => (\n                                            <Select.Option key={type?._id} value={type?._id}>\n                                                {type?.fullName}\n                                            </Select.Option>\n                                        )))}\n                                    </Select>\n                                )}\n                            />\n                        </div>\n                        <div >\n                            <Controller\n                                name=\"status\"\n                                control={control}\n                                rules={{}}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        className={`capitalize w-32 ${inputAntdSelectClassNameFilter} ${errors.status\n                                            ? \"border-[1px] \"\n                                            : \"border-gray-300\"\n                                            }`}\n                                        placeholder=\"Select Status\"\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n                                    >\n                                        <Select.Option value=\"\">Select Status</Select.Option>\n                                        {ProjectTaskStatus?.map(data =>\n\n\n                                            <Select.Option className=\"capitalize\" key={data} value={data}> {data} </Select.Option>)}\n\n                                    </Select>\n                                )}\n                            />\n                        </div>\n                        <div >\n                            <Controller\n                                name=\"startDate\"\n                                control={control}\n                                defaultValue={dayjs()}\n                                render={({ field }) => (\n                                    <CustomDatePicker\n                                        report={true}\n                                        disabled={loading}\n                                        placeholder=\"Start date\"\n                                        size={\"middle\"} field={field} errors={errors} />\n                                )}\n                            />\n                        </div>\n                        <div >\n                            <Controller\n                                name=\"endDate\"\n                                report={true}\n                                control={control}\n                                defaultValue={dayjs()}\n                                render={({ field }) => (\n                                    <CustomDatePicker size={\"middle\"}\n                                        disabled={loading}\n                                        placeholder=\"Start date\"\n                                        report={true} field={field} errors={errors} />\n                                )}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"flex justify-end items-center gap-2 my-1\">\n                        <button\n                            onClick={() => {\n                                setValue(\"status\", \"\");\n                                setValue(\"PDBranchId\", '');\n                                setValue(\"PdCompanyId\", \"\");\n                                setValue(\"startDate\", dayjs());\n                                setValue(\"endDate\", dayjs());\n                                // setValue(\"PdDepartmentId\", \"\");\n                            }}\n                            className=\"bg-header   py-[5px]  rounded-md  flex px-5 justify-center items-center  text-white\">\n                            <span className=\"text-[12px]\">Reset</span>\n                        </button>\n                        {canCreate &&\n                            <Tooltip placement=\"topLeft\" title='Add task'>\n                                <button\n                                    onClick={() => {\n                                        // navigate(\"/admin/project-task/create\");\n                                        setOpenCreateModal({\n                                            isOpen: true,\n                                            data: null\n                                        })\n                                    }}\n                                    className=\"bg-header px-2 py-1.5 rounded-md flex justify-center items-center space-x-2 text-white\"\n                                >\n                                    <FaPlus />\n                                    <span className=\"text-[12px]\">Add task</span>\n                                </button>\n                            </Tooltip>}\n                    </div>\n                </div>\n                <div className=\"bg-[#ffffff] w-full overflow-x-auto mt-1 rounded-xl\">\n                    {(canRead) && <table className=\"w-full max-w-full rounded-xl overflow-x-auto\">\n                        <thead className=''>\n                            <tr className='border-b-[1px] border-[#DDDDDD] capitalize text-[12px] bg-header text-white font-[500] h-[40px]'>\n                                <th className='border-none p-2 whitespace-nowrap w-[5%]'>\n                                    S.No.\n                                </th>\n\n                                <th className='border-none p-2 whitespace-nowrap w-[20%]'>\n                                    Title\n                                </th>\n                                <th className='border-none p-2 whitespace-nowrap w-[15%]'>\n                                    Assigned To\n                                </th>\n                                <th className='border-none p-2 whitespace-nowrap w-[10%]'>\n                                    Department\n                                </th>\n                                <th className='border-none p-2 whitespace-nowrap w-[10%]'>\n                                    Time Spent\n                                </th>\n                                <th className='border-none p-2 whitespace-nowrap w-[15%]'>\n                                    Created By\n                                </th>\n                                <th className='border-none p-2 whitespace-nowrap w-[15%]'>\n                                    Created At\n                                </th>\n                                <th className='border-none p-2 whitespace-nowrap w-[10%]'>\n                                    Priority\n                                </th>\n                                <th className='border-none p-2 whitespace-nowrap w-[10%]'>\n                                    Status\n                                </th>\n                                {(canDelete || canUpdate) && <th className='border-none p-2 whitespace-nowrap w-[10%]'>\n                                    Action\n                                </th>}\n                            </tr>\n                        </thead>\n                        {loading ? <tr className=\"bg-white bg-opacity-5 \">\n                            <td\n                                colSpan={10}\n                                className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\"\n                            >\n                                <Loader2 />\n                            </td>\n                        </tr> :\n                            <tbody>\n                                {projectTaskList && projectTaskList?.length > 0 ?\n                                    projectTaskList?.map((element, index) => (\n                                        <tr className={`border-b-[1px] border-[#DDDDDD] ${index % 2 === 0 ? 'bg-[#e9ecef]/80' : 'bg-white'} text-[#374151] text-[14px]`}>\n                                            <td className='whitespace-nowrap border-none p-2 text-center'>\n                                                {index + 1 + ((currentPage - 1) * limit)}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {element?.title ?? \"-\"}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {element?.assignedToData?.fullName ?? \"-\"}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {element?.departmentName ?? \"-\"}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none text-teal-600 p-2'>\n                                                {element?.totalTimeSpentInMin !== undefined\n                                                    ? `${Math.floor(element.totalTimeSpentInMin / 60)}h ${element.totalTimeSpentInMin % 60}m`\n                                                    : \"-\"}\n                                            </td>\n\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {element?.createdBy ?? \"-\"}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                {dayjs(element?.createdAt).format('DD-MM-YYYY hh:mm a') ?? \"-\"}\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                <span className={`px-2 py-1 rounded-lg text-white text-[12px] ${element?.priority === 'high' ? 'bg-red-500' :\n                                                    element?.priority === 'medium' ? 'bg-yellow-500' :\n                                                        'bg-green-500'\n                                                    }`}>\n                                                    {element?.priority ? element.priority.charAt(0).toUpperCase() + element.priority.slice(1) : \"-\"}\n                                                </span>\n                                            </td>\n                                            <td className='whitespace-nowrap border-none p-2 '>\n                                                <StatusDropdown element={element} handleStatusChange={handleStatusChange} />\n\n\n                                            </td>\n                                            {(canDelete || canUpdate) && <td className='whitespace-nowrap border-none p-2'>\n                                                <span className=\"py-1.5 flex justify-start items-center space-x-2\">\n                                                    {canUpdate &&\n                                                        <Tooltip placement=\"topLeft\" title='view'>\n                                                            <button\n                                                                onClick={() => {\n                                                                    setOpenLogsModal({\n                                                                        isOpen: true,\n                                                                        data: element\n\n                                                                    })\n\n                                                                }}\n                                                                className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\" type=\"button\">\n                                                                <BsEye className=' hover:text-[#337ab7] text-[#3c8dbc]' size={16} />\n                                                            </button>\n                                                        </Tooltip>\n                                                    }\n                                                    {canUpdate && (\n                                                        <Tooltip\n                                                            placement=\"topLeft\"\n                                                            title={\n                                                                element?.status === \"done\" || element?.status === \"rejected\"\n                                                                    ? \"Edit not allowed for Done/Rejected\"\n                                                                    : \"Edit\"\n                                                            }\n                                                        >\n                                                            <button\n                                                                onClick={() => {\n                                                                    if (element?.status === \"done\" || element?.status === \"rejected\") return;\n                                                                    setOpenUpdateModal({\n                                                                        isOpen: true,\n                                                                        data: element,\n                                                                    });\n                                                                }}\n                                                                disabled={element?.status === \"done\" || element?.status === \"rejected\"}\n                                                                className={`px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted transition ${element?.status === \"done\" || element?.status === \"rejected\"\n                                                                    ? \"opacity-50 cursor-not-allowed\"\n                                                                    : \"hover:border-[#337ab7]\"\n                                                                    }`}\n                                                                type=\"button\"\n                                                            >\n                                                                <FaPenToSquare\n                                                                    className={`${element?.status === \"done\" || element?.status === \"rejected\"\n                                                                        ? \"text-gray-400\"\n                                                                        : \"text-[#3c8dbc] hover:text-[#337ab7]\"\n                                                                        }`}\n                                                                    size={16}\n                                                                />\n                                                            </button>\n                                                        </Tooltip>\n                                                    )}\n\n                                                    {canDelete && (\n                                                        <Tooltip\n                                                            placement=\"topLeft\"\n                                                            title={\n                                                                element?.status === \"done\" || element?.status === \"rejected\"\n                                                                    ? \"Delete not allowed for Done/Rejected\"\n                                                                    : \"Delete\"\n                                                            }\n                                                        >\n                                                            <button\n                                                                onClick={() => {\n                                                                    if (element?.status === \"done\" || element?.status === \"rejected\") return;\n                                                                    handleDelete(element?._id);\n                                                                }}\n                                                                disabled={element?.status === \"done\" || element?.status === \"rejected\"}\n                                                                className={`px-2 py-1.5 rounded-md bg-transparent border border-muted transition ${element?.status === \"done\" || element?.status === \"rejected\"\n                                                                    ? \"opacity-50 cursor-not-allowed\"\n                                                                    : \"hover:border-red-400\"\n                                                                    }`}\n                                                                type=\"button\"\n                                                            >\n                                                                <RiDeleteBin5Line\n                                                                    className={`${element?.status === \"done\" || element?.status === \"rejected\"\n                                                                        ? \"text-gray-400\"\n                                                                        : \"text-red-600 hover:text-red-500\"\n                                                                        }`}\n                                                                    size={16}\n                                                                />\n                                                            </button>\n                                                        </Tooltip>\n                                                    )}\n\n                                                </span>\n                                            </td>}\n                                        </tr>\n                                    ))\n                                    : (<tr className=\"bg-white bg-opacity-5 \" >\n                                        <td colSpan={10} className=\"px-6 py-2 whitespace-nowrap font-[600] text-center text-sm text-gray-500\">No Tasks Found</td>\n                                    </tr>)}\n                            </tbody>}\n                    </table>}\n                </div>\n\n                <CustomPagination\n                    totalCount={totalProjectTaskCount}\n                    pageSize={limit}\n                    currentPage={currentPage}\n                    onChange={onPaginationChange}\n                />\n\n                <CreateProjectTask isOpen={openCreateModal?.isOpen} data={openCreateModal?.data} fetchListAfterSuccess={fetchProjectTaskList} closeModalFunc={() => setOpenCreateModal({\n                    isOpen: false,\n                    data: null\n                })} isDirector={true} />\n                <UpdateProjectTask isOpen={openUpdateModal?.isOpen} data={openUpdateModal?.data} fetchListAfterSuccess={fetchProjectTaskList} closeModalFunc={() => setOpenUpdateModal({\n                    isOpen: false,\n                    data: null\n                })} />\n                <LogsProjectTaskView isOpen={openLogsModal?.isOpen} data={openLogsModal?.data} fetchListAfterSuccess={fetchProjectTaskList} closeModalFunc={() => {\n                    setOpenLogsModal({\n                        isOpen: false,\n                        data: null\n                    })\n                    fetchProjectTaskList()\n                }\n                } />\n            </section>\n\n        </GlobalLayout>\n    )\n}\nexport default ProjectTaskList","import { Spin } from \"antd\"\n\nfunction Loader() {\n    return (\n       <div className=\"flex justify-center items-center h-[80vh]\">\n         {/* <div class=\"loader\"></div> */} \n         <Spin size=\"large\" />\n       </div>\n    )\n}\n\nexport default Loader\n","import { useEffect, useState } from \"react\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport { Modal, Select, Button, Space } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport getUserIds from '../../../constents/getUserIds';\nimport { domainName, inputAntdSelectClassName, inputClassName, inputDisabledClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../constents/global\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\nimport { getProjectTaskDetails, projectTaskreset, updateProjectTaskFunc } from \"./ProjecttaskFeatures/_project_task_reducers\";\nimport { projectmanagementSearch } from \"../ProjectManagement/ProjectManagementFeatures/_ProjectManagement_reducers\";\nimport { FaRegFile, FaTimes } from \"react-icons/fa\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\n\nfunction UpdateProjectTask({ isOpen, data, fetchListAfterSuccess, closeModalFunc }) {\n  const { loading: projectTaskListLoading } = useSelector(state => state.projectTask);\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const projectTaskId = data?._id;\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch();\n  const [attachment, setAttachment] = useState([]);\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { employeList, loading: employeeLoading } = useSelector((state) => state.employe);\n  const { projectmanagementList } = useSelector((state) => state.projectManagement);\n  const { projectTaskDetails } = useSelector((state) => state.projectTask);\n\n  const relatedTo = useWatch({\n    control,\n    name: \"relatedTo\",\n    defaultValue: \"\",\n  });\n\n  const employeeId = useWatch({\n    control,\n    name: \"employee\",\n    defaultValue: \"\",\n  });\n\n  const reportingperson = employeList?.find(data => data?._id === employeeId)?.reportingperson;\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const reqData = {\n      filePath: file,\n      isVideo: false,\n      isMultiple: false,\n    };\n\n    dispatch(fileUploadFunc(reqData)).then((res) => {\n      if (res?.payload?.data) {\n        setAttachment((prev) => [...prev, res?.payload?.data]);\n      }\n    });\n  };\n\n  const handleRemoveFile = (index) => {\n    setAttachment((prev) => prev?.filter((_, i) => i !== index));\n  };\n\n  // Get dropdown container for select elements to work properly in modal\n  const getPopupContainer = (triggerNode) => {\n    return triggerNode.parentNode;\n  };\n\n  // Fetch task details when modal opens\n  useEffect(() => {\n    if (isOpen && projectTaskId) {\n      dispatch(getProjectTaskDetails({ _id: projectTaskId }));\n    }\n  }, [isOpen, projectTaskId]);\n\n  // Set form values when details are loaded\n  useEffect(() => {\n    const fetchData = async () => {\n      if (isOpen && projectTaskDetails) {\n        try {\n          await Promise.all([\n            dispatch(projectmanagementSearch({\n              directorId: \"\",\n              companyId: projectTaskDetails?.companyId,\n              branchId: projectTaskDetails?.branchId,\n              text: '',\n              sort: true,\n              status: '',\n              isPagination: false,\n            })),\n\n          ]);\n\n          // Set form values\n          reset({\n            name: projectTaskDetails?.title,\n            projectId: projectTaskDetails?.projectId,\n            descriptions: projectTaskDetails?.description,\n            employee: projectTaskDetails?.assignedTo,\n            assignedPersonname: projectTaskDetails?.assignedToData?.fullName,\n            checkInTime: projectTaskDetails?.startDateTime ? dayjs(projectTaskDetails?.startDateTime) : null,\n            checkOutTime: projectTaskDetails?.endDateTime ? dayjs(projectTaskDetails?.endDateTime) : null,\n            relatedTo: projectTaskDetails?.relatedTo,\n            taskPriority: projectTaskDetails?.priority,\n\n          });\n\n          setAttachment(projectTaskDetails?.attachment || []);\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      }\n    };\n\n    fetchData();\n  }, [isOpen, projectTaskDetails]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      dispatch(projectTaskreset());\n    };\n  }, []);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: projectTaskId, // Include ID for update\n      companyId: projectTaskDetails?.companyId,\n      directorId: \"\",\n      branchId: projectTaskDetails?.branchId,\n      title: data?.name,\n      projectId: data?.relatedTo === \"project\" ? data?.projectId : null,\n      description: data?.descriptions,\n      followerIds: [],\n      assignedTo: data?.employee,\n      startDateTime: data?.checkInTime,\n      endDateTime: data?.checkOutTime,\n      relatedTo: data?.relatedTo,\n      priority: data?.taskPriority,\n      attachment: attachment,\n      estimatedHours: null,\n      tags: [],\n    };\n\n    dispatch(updateProjectTaskFunc(finalPayload)).then((result) => {\n      if (!result.error) {\n        reset();\n        setAttachment([]);\n        closeModalFunc();\n        fetchListAfterSuccess(); // Refresh the parent list\n      }\n    });\n  };\n\n  const handleCancel = () => {\n    reset();\n    setAttachment([]);\n    closeModalFunc();\n  };\n\n  return (\n    <Modal\n      title=\"Update Project Task\"\n      open={isOpen}\n      onCancel={handleCancel}\n      footer={null}\n      width={800}\n      centered\n      destroyOnClose\n      className=\"antmodalclassName\"\n    >\n      <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 my-4\">\n          <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n              Task Title <span className=\"text-red-600\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              {...register(\"name\", {\n                required: \"Task Title is required\",\n              })}\n              className={`${inputClassName} ${errors.name ? \"border-red-500\" : \"border-gray-300\"}`}\n              placeholder=\"Enter Task Title\"\n            />\n            {errors.name && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.name.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"\">\n            <label className={`${inputLabelClassName}`}>\n              Assign To <span className=\"text-red-600\">*</span>\n            </label>\n            <div className=\"\">\n\n              <input\n                type=\"text\"\n                {...register(\"assignedPersonname\")}\n                disabled\n                className={`${inputDisabledClassName} ${errors.name ? \"border-red-500\" : \"border-gray-300\"}`}\n                placeholder=\"Assigned To \"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.name.message}\n                </p>\n              )}\n            </div>\n\n          </div>\n\n          <div className=\"w-full\">\n            <label className={`${inputLabelClassName}`}>\n              Task Priority <span className=\"text-red-600\">*</span>\n            </label>\n            <Controller\n              control={control}\n              name=\"taskPriority\"\n              rules={{ required: \"Task Priority is required\" }}\n              render={({ field }) => (\n                <Select\n                  {...field}\n                  placeholder=\"Select Task Priority\"\n                  className={`${inputAntdSelectClassName} ${errors.taskPriority ? \"border-red-500\" : \"border-gray-300\"}`}\n                  getPopupContainer={getPopupContainer}\n                >\n                  <Select.Option value=\"\">Select Task Priority</Select.Option>\n                  {['low', 'medium', 'high', 'urgent']?.map(data =>\n                    <Select.Option key={data} value={data}>{data}</Select.Option>\n                  )}\n                </Select>\n              )}\n            />\n            {errors.taskPriority && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.taskPriority.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"w-full\">\n            <label className={`${inputLabelClassName}`}>\n              Related To <span className=\"text-red-600\">*</span>\n            </label>\n            <Controller\n              control={control}\n              name=\"relatedTo\"\n              rules={{ required: \"Related To is required\" }}\n              render={({ field }) => (\n                <Select\n                  {...field}\n                  placeholder=\"Select Related To\"\n                  className={`${inputAntdSelectClassName} ${errors.relatedTo ? \"border-red-500\" : \"border-gray-300\"}`}\n                  getPopupContainer={getPopupContainer}\n                >\n                  <Select.Option value=\"\">Select Related To</Select.Option>\n                  {['project', 'other']?.map(data =>\n                    <Select.Option key={data} value={data}>{data}</Select.Option>\n                  )}\n                </Select>\n              )}\n            />\n            {errors.relatedTo && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.relatedTo.message}\n              </p>\n            )}\n          </div>\n\n          {relatedTo === \"project\" && (\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Project <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                control={control}\n                name=\"projectId\"\n                rules={{ required: \"Project is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    placeholder=\"Select Project\"\n                    className={`${inputAntdSelectClassName} ${errors.projectId ? \"border-red-500\" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    getPopupContainer={getPopupContainer}\n                  >\n                    <Select.Option value=\"\">Select Project</Select.Option>\n                    {projectmanagementList?.map((data, index) =>\n                      <Select.Option key={index} value={data?._id}>{data?.title}</Select.Option>\n                    )}\n                  </Select>\n                )}\n              />\n              {errors.projectId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.projectId.message}\n                </p>\n              )}\n            </div>\n          )}\n\n          <div>\n            <label className={`${inputLabelClassName}`}>\n              Start Time <span className=\"text-red-600\">*</span>\n            </label>\n            <Controller\n              name=\"checkInTime\"\n              control={control}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <CustomDatePicker\n                  field={field}\n                  showTime={true}\n                  format=\"DD/MM/YYYY HH:mm\"\n                  errors={errors}\n                  disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }}\n                />\n              )}\n            />\n            {errors.checkInTime && (\n              <p className=\"text-red-500 text-sm\">Start Time is required</p>\n            )}\n          </div>\n\n          <div>\n            <label className={`${inputLabelClassName}`}>\n              End Time <span className=\"text-red-600\">*</span>\n            </label>\n            <Controller\n              name=\"checkOutTime\"\n              control={control}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <CustomDatePicker\n                  field={field}\n                  showTime={true}\n                  format=\"DD/MM/YYYY HH:mm\"\n                  errors={errors}\n                  disabledDate={(current) => {\n                    return current && current.isBefore(moment().endOf('day'), 'day');\n                  }}\n                />\n              )}\n            />\n            {errors.checkOutTime && (\n              <p className=\"text-red-500 text-sm\">End Time is required</p>\n            )}\n          </div>\n\n          <div className=\"col-span-2\">\n            <label className={`${inputLabelClassName}`}>\n              Description <span className=\"text-red-600\">*</span>\n            </label>\n            <textarea\n              {...register(\"descriptions\", {\n                required: \"Description is required\",\n              })}\n              className={`${inputClassName} ${errors.descriptions ? \"border-red-500\" : \"border-gray-300\"} h-24`}\n              placeholder=\"Enter description\"\n            />\n            {errors.descriptions && (\n              <p className=\"text-red-500 text-sm\">\n                {errors.descriptions.message}\n              </p>\n            )}\n          </div>\n\n          <div className=\"col-span-2 space-y-4\">\n            <input\n              type=\"file\"\n              onChange={handleFileChange}\n              className=\"hidden\"\n              id=\"file-upload\"\n            />\n            <label\n              htmlFor=\"file-upload\"\n              className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white cursor-pointer hover:bg-gray-50\"\n            >\n              <FaRegFile className=\"mr-2\" /> Add Attachments\n            </label>\n\n            <div className=\"space-y-2\">\n              {attachment?.map((file, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\"\n                >\n                  <a\n                    href={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${file}`}\n                    className=\"flex items-center space-x-2\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <FaRegFile className=\"text-gray-500\" />\n                    <span className=\"text-sm text-gray-600\">\n                      {file}\n                    </span>\n                  </a>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveFile(index)}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <FaTimes />\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-4 mt-6\">\n          <Button onClick={handleCancel} disabled={projectTaskListLoading}>\n            Cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            disabled={projectTaskListLoading}\n            loading={projectTaskListLoading}\n          >\n            {projectTaskListLoading ? 'Updating...' : 'Update'}\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nexport default UpdateProjectTask;"],"names":["register","control","setValue","formState","errors","useForm","dispatch","useNavigate","useDispatch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","useSelector","state","company","branchList","loading","branchSearchLoading","branch","projectTaskList","totalProjectTaskCount","projectTask","employeList","laoding","employeelistLoading","employe","searchText","setSearchText","useState","openCreateModal","setOpenCreateModal","isOpen","data","openUpdateModal","setOpenUpdateModal","openLogsModal","setOpenLogsModal","currentPage","setCurrentPage","CompanyId","useWatch","name","defaultValue","BranchId","status","startDate","dayjs","endDate","employeeId","filters","join","isFirstRender","setisFirstRender","useEffect","fetchProjectTaskList","reqData","page","limit","reqPayload","companyId","userType","_id","branchId","directorId","text","sort","isPagination","format","getProjectTaskList","branchSearch","companySearch","handleEmployeeFocus","employeSearch","includes","departmentId","isBranch","isDirector","handleStatusChange","id","statusProjectTaskFunc","then","res","error","canCreate","canRead","canUpdate","canDelete","usePermissions","_jsx","GlobalLayout","onChange","e","children","_jsxs","className","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassNameFilter","showSearch","filterOption","input","option","String","toLowerCase","Option","value","map","type","fullName","PDCompanyId","message","_ref2","_sortByPropertyAlphab","disabled","ListLoader","sortByPropertyAlphabetically","PDBranchId","_ref3","_sortByPropertyAlphab2","allowClear","placeholder","onFocus","val","_ref4","ProjectTaskStatus","_ref5","CustomDatePicker","report","size","_ref6","onClick","Tooltip","placement","title","FaPlus","colSpan","Loader2","length","element","index","_element$title","_element$assignedToDa","_element$assignedToDa2","_element$departmentNa","_element$createdBy","_dayjs$format","assignedToData","departmentName","undefined","totalTimeSpentInMin","Math","floor","createdBy","createdAt","priority","charAt","toUpperCase","slice","StatusDropdown","BsEye","FaPenToSquare","Swal","icon","showCancelButton","cancelButtonText","result","isConfirmed","deleteProjectTaskFunc","Number","handleDelete","RiDeleteBin5Line","CustomPagination","totalCount","pageSize","CreateProjectTask","fetchListAfterSuccess","closeModalFunc","UpdateProjectTask","LogsProjectTaskView","Spin","_employeList$find","projectTaskListLoading","handleSubmit","watch","reset","projectTaskId","userCompanyId","userDirectorId","userBranchId","getUserIds","attachment","setAttachment","employeeLoading","projectmanagementList","projectManagement","projectTaskDetails","relatedTo","getPopupContainer","find","reportingperson","triggerNode","parentNode","getProjectTaskDetails","async","_projectTaskDetails$a","Promise","all","projectmanagementSearch","projectId","descriptions","description","employee","assignedTo","assignedPersonname","checkInTime","startDateTime","checkOutTime","endDateTime","taskPriority","console","fetchData","projectTaskreset","handleCancel","Modal","open","onCancel","footer","width","centered","destroyOnClose","autoComplete","onSubmit","finalPayload","followerIds","estimatedHours","tags","updateProjectTaskFunc","inputLabelClassName","inputClassName","inputDisabledClassName","inputAntdSelectClassName","_ref7","showTime","disabledDate","current","isBefore","moment","endOf","_ref8","file","target","files","filePath","isVideo","isMultiple","fileUploadFunc","_res$payload","payload","prev","_res$payload2","htmlFor","FaRegFile","href","process","rel","filter","_","i","handleRemoveFile","FaTimes","Button","htmlType"],"sourceRoot":""}