{"version":3,"file":"static/js/6322.912e4bd9.chunk.js","mappings":"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","sources":["pages/DyanmicSidebar/EditDynamicSidebar.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport { inputClassName, inputLabelClassName } from \"../../constents/global\";\nimport { dynamicPageUpdate, getsidebarById } from \"./DyanmicSidebarFeatures/_dyanmicSidebar_reducers\";\nimport { slugData } from \"./sidebarjson\";\nimport { iconData } from \"./dynamicSidebarIcon\";\n\n\n\nfunction EditDynamicSidebar() {\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue, // Use setValue from useForm hook here\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { SidebarIdEnc } = useParams();\n  const sidebarId = decrypt(SidebarIdEnc);\n  const { sidebarDetailsData, loading } = useSelector((state) => state.dynamicSidebar);\n  useEffect(() => {\n    let reqData = {\n      _id: sidebarId,\n    };\n    dispatch(getsidebarById(reqData));\n  }, []);\n  useEffect(() => {\n\n    if (sidebarDetailsData && sidebarDetailsData?.data) {\n      setValue(\"title\", sidebarDetailsData?.data?.name);\n      setValue(\"status\", sidebarDetailsData?.data?.status);\n      setValue(\"iconClass\", sidebarDetailsData?.data?.icon);\n      setValue(\"slug\", sidebarDetailsData?.data?.slug);\n      setSelectedIconClass(sidebarDetailsData?.data?.icon);\n    }\n  }, [sidebarDetailsData]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: sidebarId,\n      name: data?.title,\n      icon: sidebarDetailsData?.data?.parentPageId ? null : data?.iconClass,\n      slug: data?.slug,\n      status: true,\n      parentPageId:sidebarDetailsData?.data?.parentPageId,\n    };\n\n    dispatch(dynamicPageUpdate(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/dynamic-sidebar\");\n    });\n  };\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIcon, setSelectedIcon] = useState(\"Select an icon\");\n  const [selectedIconClass, setSelectedIconClass] = useState(\"\");\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleIconSelect = (iconClass, label) => {\n    setSelectedIcon(label);\n    setSelectedIconClass(iconClass);\n    setIsOpen(false);\n\n    // Correctly set the value in the form using setValue from useForm hook\n    setValue(\"iconClass\", iconClass); // This updates the form state\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {/* Title Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Title <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"title\", {\n                  required: \"Title is required\",\n                })}\n                className={`${inputClassName} ${\n                  errors.title ? \"border-[1px] \" : \"border-gray-300\"\n                } `}\n                placeholder=\"Enter Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n\n            {/* Slug Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Slug</label>\n              <select\n                {...register(\"slug\")}\n                className={` ${inputClassName} ${\n                  errors.slug ? \"border-[1px] \" : \"border-gray-300\"\n                } `}\n              >\n                <option value=\"\">Select Slug</option>\n                {slugData.map((item, index) => (\n                  <option key={index} value={item?.slug}>\n                    {item?.sidebarName}\n                  </option>\n                ))}\n              </select>\n              {errors.slug && (\n                <p className=\"text-red-500 text-sm\">{errors.slug.message}</p>\n              )}\n            </div>\n\n    \n            {/* <div>\n              <label className={`${inputLabelClassName}`}>Status</label>\n              <select\n                {...register(\"status\", {\n                  required: \"Status is required\",\n                })}\n                className={` ${inputClassName} ${\n                  errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                } `}\n              >\n                <option value=\"\">Select Status</option>\n                <option value={true}>Active</option>\n                <option value={false}>Not Active</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n           {! sidebarDetailsData?.data?.parentPageId &&  <div className=\"relative w-full \">\n            <label className={`${inputLabelClassName}`}>Icon <span className=\"text-red-600\">*</span></label>\n            <div\n              className={`${inputClassName} flex justify-between items-center`}\n              onClick={toggleDropdown}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <span\n                  className=\"text-gray-700\"\n                  dangerouslySetInnerHTML={{ __html: selectedIcon }}\n                />\n              </div>\n              <div className=\"text-sm text-gray-500\">{isOpen ? \"▲\" : \"▼\"}</div>\n            </div>\n\n            {/* Dropdown options */}\n            {isOpen && (\n              <div className=\"flex flex-wrap absolute left-0 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-10 max-h-60 overflow-y-auto\">\n                {iconData.map((icon, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center p-3 cursor-pointer hover:bg-gray-100\"\n                    onClick={() => {\n                      handleIconSelect(icon.iconClass, icon.label);\n                    }}\n                    dangerouslySetInnerHTML={{ __html: icon.label }}\n                  />\n                ))}\n              </div>\n            )}\n\n            {/* Hidden form control for selected icon */}\n            <Controller\n              name=\"iconClass\"\n              control={control}\n              // defaultValue={selectedIconClass}\n              render={({ field }) => (\n                <input {...field} type=\"hidden\" value={selectedIconClass} />\n              )}\n            />\n          </div>}\n          </div>\n\n      \n          <div className=\"flex justify-end mt-4\">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default EditDynamicSidebar;\n"],"names":["_sidebarDetailsData$d8","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","SidebarIdEnc","useParams","sidebarId","decrypt","sidebarDetailsData","loading","useSelector","state","dynamicSidebar","useEffect","reqData","_id","getsidebarById","_sidebarDetailsData$d","_sidebarDetailsData$d2","_sidebarDetailsData$d3","_sidebarDetailsData$d4","_sidebarDetailsData$d5","data","name","status","icon","slug","setSelectedIconClass","isOpen","setIsOpen","useState","selectedIcon","setSelectedIcon","selectedIconClass","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_sidebarDetailsData$d6","_sidebarDetailsData$d7","finalPayload","title","parentPageId","iconClass","dynamicPageUpdate","then","error","concat","inputLabelClassName","_objectSpread","type","required","inputClassName","placeholder","message","value","slugData","map","item","index","sidebarName","onClick","toggleDropdown","dangerouslySetInnerHTML","__html","iconData","handleIconSelect","label","Controller","render","_ref","field"],"sourceRoot":""}