{"version":3,"file":"static/js/7138.793c8ece.chunk.js","mappings":"qTA6OA,QA3NA,WACG,MAAOA,QAAQC,IAA+BC,EAAAA,EAAAA,IAAYC,GAASA,EAAMC,uBACpE,SACJC,EAAQ,aACRC,EAAY,SACZC,EAAQ,QACRC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,OAEE,cACJC,EAAa,eACbC,EAAc,aACdC,EAAY,SACZC,IACEC,EAAAA,EAAAA,KAEEC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAiBC,KAAKC,MAC1BC,aAAaC,QAAQ,aAADC,OAAcC,EAAAA,OAG9B,YAAEC,EAAW,mBAAEC,IAAsB3B,EAAAA,EAAAA,IAAaC,GAAUA,EAAM2B,UAClE,gBAAEC,IAAoB7B,EAAAA,EAAAA,IAAaC,GAAUA,EAAM6B,UACnD,WAAEC,EAAU,kBAAEC,IAAsBhC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMgC,QAGjEC,GAAYC,EAAAA,EAAAA,IAAS,CACzB7B,UACA8B,KAAM,cACNC,aAAc3B,IAGV4B,GAAWH,EAAAA,EAAAA,IAAS,CACxB7B,UACA8B,KAAM,aACNC,aAAczB,IAyDhB,OAtDA2B,EAAAA,EAAAA,WAAU,KACRlC,EAAS,eAAgB,QACxB,CAACwB,KAEJU,EAAAA,EAAAA,WAAU,KACyB,WAAf,OAAdpB,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,WAClBE,GACEyB,EAAAA,EAAAA,IAAc,CACZC,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRC,cAAc,MAInB,KAEHL,EAAAA,EAAAA,WAAU,MAENL,GAC6B,aAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,WACa,qBAAf,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,YAEhBE,GACE8B,EAAAA,EAAAA,IAAa,CACXJ,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRC,cAAa,EACbV,UAAwC,WAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,UAAuBqB,EAAyC,aAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,UAAuC,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgB2B,IAAoB,OAAd3B,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,cAIlJ,CAACA,KAsBFa,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,UACXF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,QAAOD,UACpBE,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMF,UAAU,OAAOG,SAAUjD,EAtBxCkD,IAChB,MAAMC,EAAe,CACnBrB,UAAwC,WAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,UAAuBqB,EACnB,aAAf,OAAdf,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,UAAuC,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgB2B,IACzC,OAAd3B,QAAc,IAAdA,OAAc,EAAdA,EAAgBe,UAEpB,WAAc,GACdI,SAAuC,aAAf,OAAdnB,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,WAAuD,WAAf,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,WAAqD,qBAAf,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,UAAiCyB,EAC9G,mBAAf,OAAdnB,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,UAA6C,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgB2B,IAC/C,OAAd3B,QAAc,IAAdA,OAAc,EAAdA,EAAgBmB,SACpBF,KAAU,OAAJkB,QAAI,IAAJA,OAAI,EAAJA,EAAMlB,MAEdrB,GAASyC,EAAAA,EAAAA,IAA2BD,IAAeE,KAAMH,IAClDA,EAAKI,OACRzC,GAAU,OAQiEgC,SAAA,EACzEE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gDAA+CD,SAAA,CAC9B,WAAf,OAAd9B,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,YACfsC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA1B,OAAKmC,EAAAA,IAAsBV,SAAA,CAAC,YAClCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAkBvCF,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACXtD,QAASA,EACT8B,KAAK,cACLyB,MAAO,CAAEC,SAAU,uBACnBC,OAAQC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAChBb,EAAAA,EAAAA,MAACe,EAAAA,GAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDF,GAAK,IACT5B,aAAc,GACda,UAAS,GAAA1B,OAAK4C,EAAAA,GAAwB,KAAInB,SAAA,EAE1CF,EAAAA,EAAAA,KAACmB,EAAAA,EAAOG,OAAM,CAACC,MAAM,GAAErB,SAAC,mBACvBtB,GAAqBoB,EAAAA,EAAAA,KAACmB,EAAAA,EAAOG,OAAM,CAACE,UAAQ,EAAAtB,UACzCF,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,MACgB,OAAX9C,QAAW,IAAXA,OAAW,EAAXA,EAAa+C,IAAKC,IACpC3B,EAAAA,EAAAA,KAACmB,EAAAA,EAAOG,OAAM,CAAiBC,MAAW,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,IAAIG,SACzC,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAMC,UADe,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,aAOjCtC,EAAOoE,cACN7B,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCzC,EAAOoE,YAAYC,cAKG,WAAf,OAAd1D,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,WAAqD,aAAf,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,WAAuD,qBAAf,OAAdM,QAAc,IAAdA,OAAc,EAAdA,EAAgBN,aAClGsC,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA1B,OAAKmC,EAAAA,IAAsBV,SAAA,CAAC,WACnCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAExCF,EAAAA,EAAAA,KAACa,EAAAA,GAAU,CACTxB,KAAK,aACL9B,QAASA,EACTuD,MAAO,CAAEC,SAAU,sBACnBC,OAAQe,IAAA,IAAC,MAAEb,GAAOa,EAAA,OAChB3B,EAAAA,EAAAA,MAACe,EAAAA,GAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDF,GAAK,IACTf,UAAS,GAAA1B,OAAK4C,EAAAA,GAAwB,KAAA5C,OAAIhB,EAAOuE,WAAa,gBAAkB,mBAChFC,YAAY,gBAAe/B,SAAA,EAE3BF,EAAAA,EAAAA,KAACmB,EAAAA,EAAOG,OAAM,CAACC,MAAM,GAAErB,SAAC,kBACvBjB,GAAqBe,EAAAA,EAAAA,KAACmB,EAAAA,EAAOG,OAAM,CAACE,UAAQ,EAAAtB,UACzCF,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,MACiB,OAAVzC,QAAU,IAAVA,OAAU,EAAVA,EAAY0C,IAAKC,IACrC3B,EAAAA,EAAAA,KAACmB,EAAAA,EAAOG,OAAM,CAAiBC,MAAW,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,IAAIG,SACzC,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAMC,UADe,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,aAOjCtC,EAAOuE,aAAchC,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAEzC,EAAOuE,WAAWF,cAIjF1B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA1B,OAAKmC,EAAAA,IAAsBV,SAAA,CAAC,SACrCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEtCF,EAAAA,EAAAA,KAAA,SAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEO,KAAK,QACDvE,EAAS,OAAQ,CACnB2D,SAAU,sBACV,IACFZ,UAAS,gBAAA1B,OAAkByD,EAAAA,GAAc,KAAAzD,OAAIhB,EAAO4B,KAChD,gBACA,mBAEJ4C,YAAY,kCAEbxE,EAAO4B,OACNW,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCzC,EAAO4B,KAAKyC,iBAKrB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mDAGfH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmBD,UAClCF,EAAAA,EAAAA,KAAA,UACe2B,KAAK,SACLH,SAAUxE,EACVmD,UAAS,GAAA1B,OAAKzB,EAA8B,cAAe,YAAW,gCAAgCkD,SAEvGlD,GAA8BgD,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,IAAM,mBAOnE,C","sources":["pages/clientService/CreateDigitalSignatureType.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport getUserIds from \"../../constents/getUserIds\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../constents/global\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { createClientService } from \"../client/clientService/clientServiceFeatures/_client_service_reducers\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { Select } from \"antd\";\nimport { createDigitalSignatureType } from \"./sigantureServiceFeatures/_digital_signature_type_reducers\";\nimport Loader from \"../../global_layouts/Loader\";\nimport ListLoader from \"../../global_layouts/ListLoader\";\n\n\n\nfunction CreateDigitalSignatureType() {\n   const {loading:digitalSignatureTypeLoading} = useSelector(state => state.digitalSignatureType)\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n\n  const { companyList ,companyListLoading} = useSelector((state) => state.company);\n  const { countryListData } = useSelector((state) => state.country);\n  const { branchList ,branchListloading } = useSelector((state) => state.branch);\n\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  useEffect(() => {\n    setValue(\"PDMobileCode\", \"+91\");\n  }, [countryListData]);\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination:false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n\n      \"directorId\": \"\",\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      name: data?.name,\n    };\n    dispatch(createDigitalSignatureType(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                {/* <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select> */}\n                  <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option>: companyList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  name=\"PDBranchId\"\n                  control={control}\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      placeholder=\"Select Branch\"\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchListloading ?  <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option> : (branchList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      )))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.name\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Digital Signature Type\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.name.message}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n\n          </div>\n          <div className=\"flex justify-end \">\n          <button\n                         type=\"submit\"\n                         disabled={digitalSignatureTypeLoading}\n                         className={`${digitalSignatureTypeLoading ? 'bg-gray-400': 'bg-header' } text-white p-2 px-4 rounded`}\n                       >\n                       {digitalSignatureTypeLoading ? <Loader /> : 'Submit'}\n                       </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  )\n}\n\nexport default CreateDigitalSignatureType\n"],"names":["loading","digitalSignatureTypeLoading","useSelector","state","digitalSignatureType","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","countryListData","country","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","companySearch","text","sort","status","isPagination","branchSearch","_id","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","createDigitalSignatureType","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","Option","value","disabled","ListLoader","map","type","fullName","PDCompanyId","message","_ref2","PDBranchId","placeholder","inputClassName","Loader"],"sourceRoot":""}