{"version":3,"file":"static/js/646.bc6bf965.chunk.js","mappings":"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","sources":["pages/global/address/city/UpdateCity.js"],"sourcesContent":["// import { useForm } from \"react-hook-form\";\n// import GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { useNavigate, useParams } from \"react-router-dom\";\n// import { decrypt } from \"../../config/Encryption\";\n// import { useEffect } from \"react\";\n// import { getCityById, updateCityData } from \"../../redux/_reducers/_city_reducers\";\n// import { getCountryListFunc } from \"../../redux/_reducers/_country_reducers\";\n// import { getStateList } from \"../../redux/_reducers/_state_reducers\";\n\n\n// function UpdateCity() {\n//   const { register, handleSubmit, setValue, formState: { errors } } = useForm();\n\n//   const { countryListData } = useSelector((state) => state.country);\n//   const { stateListData } = useSelector((state) => state.state);\n\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n\n//   const { cityEnc } = useParams();\n//   const cityId = decrypt(cityEnc);\n//   const { cityByIdData } = useSelector((state) => state.city);\n\n\n\n//   useEffect(() => {\n//     let reqData = {\n//       id: cityId,\n//     };\n//     dispatch(getCityById(reqData));\n//     dispatch(getCountryListFunc(reqData));\n//   }, []);\n\n//   useEffect(() => {\n//     if (cityByIdData) {\n//       setValue(\"countryName\", cityByIdData?.countryName);\n//       setValue(\"countryId\", cityByIdData?.countryId);\n//       setValue(\"stateName\", cityByIdData?.stateName);\n//       setValue(\"stateId\", cityByIdData?.stateId);\n//       setValue(\"cityName\", cityByIdData?.cityName);\n//     }\n//   }, [cityByIdData, setValue]);\n\n//   const onSubmit = (data) => {\n//     const finalPayload = {\n//       \"id\": cityId,\n//       \"stateName\": data?.stateName,\n//       \"stateCode\": data?.stateCode,\n//       \"countryName\": data?.countryName,\n//       \"countryId\": data?.countryId,\n//       \"igstStatus\": false,\n//       \"gstStatus\": false,\n//       \"isActive\": false\n//     }\n\n//     dispatch(updateCityData(finalPayload)).then((data) => {\n//       if (!data.error) navigate(\"/admin/cityList\");\n//     });\n//   };\n\n//   const handleSelectCountry = (event) => {\n\n\n//     if (!event.target.value || !event.target.value.includes(\"-\")) {\n//       console.error(\"Invalid value format:\", event.target.value);\n//       return;\n//     }\n\n//     const [countryId, countryName] = event.target.value.split(\"-\");\n\n\n//     setValue(\"countryId\", countryId);\n//     setValue(\"countryName\", countryName);\n\n//     setValue(\"stateId\", \"\");\n//     setValue(\"stateName\", \"\");\n//     dispatch(getStateList({ countryId }));\n//   };\n\n//   const handleSelectState = (event) => {\n\n\n//     if (!event.target.value || !event.target.value.includes(\"-\")) {\n//       console.error(\"Invalid value format:\", event.target.value);\n//       return;\n//     }\n\n//     const [stateId, stateName] = event.target.value.split(\"-\");\n\n\n//     setValue(\"stateId\", stateId);\n//     setValue(\"stateName\", stateName);\n//   };\n\n//   return (\n//     <GlobalLayout>\n//       <div className=\"gap-4\">\n//         <h2 className=\"text-2xl font-bold mb-4 col-span-2\">\n//           Update States: {cityByIdData?.cityName}\n//         </h2>\n//         <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n//           <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n//             <div>\n//               <label className=\"block text-sm font-medium\">Country ID</label>\n//               <select\n//                 {...register(\"countryName\", { required: \"CountryId is required\" })}\n//                 onChange={handleSelectCountry}\n//                 className={`mt-1 block w-full border ${errors._id ? \"border-[1px] \" : \"border-gray-300\"} p-2 rounded`}\n//               >\n//                 <option value=\"\">{cityByIdData.countryName}</option>\n//                 {countryListData && countryListData.length > 0 ? (\n//                   countryListData.map((element, index) => (\n//                     <option key={index} value={`${element._id}-${element.countryName}`}>{element.countryName}</option>\n//                   ))\n//                 ) : null}\n//               </select>\n//               {errors._id && (\n//                 <p className=\"text-red-500 text-sm\">\n//                   {errors._id.message}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n\n//               <label className=\"block text-sm font-medium\">State ID</label>\n//               <select\n//                 {...register(\"stateName\", { required: \"StateId is required\" })}\n//                 onChange={handleSelectState}\n//                 className={`mt-1 block w-full border ${errors.stateId ? \"border-[1px] \" : \"border-gray-300\"} p-2 rounded`}\n//               >\n//                 <option value=\"\" className=\"text-red-900\">{cityByIdData?.stateName}</option>\n//                 {stateListData && stateListData.length > 0 ? (\n//                   stateListData.map((element, index) => (\n//                     <option key={index} value={`${element?._id}-${element?.stateName}`}>{element?.stateName}</option>))\n//                 ) : null}\n//               </select>\n//               {errors._id && (\n//                 <p className=\"text-red-500 text-sm\">\n//                   {errors._id.message}\n//                 </p>\n//               )}\n//             </div>\n//             <div className=\"\">\n//               <label className=\"block text-sm font-medium\">Name</label>\n//               <input\n//                 type=\"text\"\n//                 {...register(\"cityName\", {\n//                   required: \"City Name is required\",\n//                 })}\n//                 className={`mt-1 block w-full border ${errors.cityName ? \"border-[1px] \" : \"border-gray-300\"\n//                   } p-2 rounded`}\n//                 placeholder=\"Enter City Name\"\n//               />\n//               {errors.cityName && (\n//                 <p className=\"text-red-500 text-sm\">\n//                   {errors.cityName.message}\n//                 </p>\n//               )}\n//             </div>\n//             <div>\n//               <label className=\"block text-sm font-medium\">Status</label>\n//               <select\n//                 {...register(\"isActive\", {\n//                   required: \"Status is required\",\n//                 })}\n//                 className={`mt-1 block w-full border bg-white ${errors.isActive ? \"border-[1px] \" : \"border-gray-300\"\n//                   } p-2 rounded`}\n//               >\n//                 <option value=\"Active\">Active</option>\n//                 <option value=\"Not Active\">Not Active</option>\n//                 <option value=\"Deleted\">Deleted</option>\n//               </select>\n//               {errors.isActive && (\n//                 <p className=\"text-red-500 text-sm\">\n//                   {errors.isActive.message}\n//                 </p>\n//               )}\n//             </div>\n//           </div>\n//           <div className=\"flex justify-end \">\n//             <button\n//               type=\"submit\"\n//               className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n//             >\n//               Submit\n//             </button>\n//           </div>\n//         </form>\n//       </div>\n//     </GlobalLayout>\n//   );\n// }\n\n// export default UpdateCity;\n\n\n\nimport { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport { getCityById, updateCityData } from \"./CityFeatures/_city_reducers\";\nimport { countrySearch, getCountryListFunc } from \"../country/CountryFeatures/_country_reducers\";\nimport { getStateList, stateSearch } from \"../state/featureStates/_state_reducers\";\nimport { inputAntdSelectClassName, inputClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../../constents/global\";\nimport { Input, Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\nfunction UpdateCity() {\n  const { register, handleSubmit, setValue, control, formState: { errors } } = useForm();\n  const { loading: cityLoading } = useSelector(state => state.city)\n  const { countryListData, companyListLoading } = useSelector((state) => state.country);\n  const { stateListData, loading: stateListLoading } = useSelector((state) => state.states);\n  const { cityByIdData } = useSelector((state) => state.city);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { cityEnc } = useParams();\n  const cityId = decrypt(cityEnc);\n\n  useEffect(() => {\n    const countryReqData = {\n      text: \"\",\n      sort: true,\n      status: true,\n      isPagination: false\n    };\n    dispatch(countrySearch(countryReqData)).then((data) => {\n      if (!data.error) dispatch(getCityById({ _id: cityId }));\n    });\n\n  }, [cityId, dispatch]);\n\n  useEffect(() => {\n    if (cityByIdData) {\n      setValue(\"countryName\", cityByIdData?.countryName);\n      setValue(\"countryId\", cityByIdData?.countryId);\n      // setValue(\"stateName\", cityByIdData?.stateName);\n      setValue(\"stateId\", cityByIdData?.stateId);\n      setValue(\"cityName\", cityByIdData?.name);\n      setValue(\"status\", cityByIdData?.status);\n    }\n\n    const stateReqData = {\n      \"text\": \"\",\n      \"sort\": true,\n      \"status\": true,\n      countryId: cityByIdData?.countryId,\n      isPagination: false\n    };\n    dispatch(stateSearch(stateReqData));\n  }, [cityByIdData]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: cityId,\n      name: data.cityName,\n      stateId: data.stateId,\n      countryId: data.countryId,\n      status: data?.status\n    };\n\n    dispatch(updateCityData(finalPayload)).then((result) => {\n      if (!result.error) navigate(-1);\n    });\n  };\n\n  const handleSelectCountry = (event) => {\n    setValue(\"countryId\", event.target.value);\n    setValue(\"countryName\", countryListData?.docs.find(element => element._id === event.target.value)?.name);\n    setValue(\"stateId\", \"\");\n    setValue(\"stateName\", \"\");\n    handleCountryChange(event)\n  };\n\n  const handleCountryChange = async (event) => {\n    const selectedCountryId = event.target.value;\n    const stateReqData = {\n      \"text\": \"\",\n      \"sort\": true,\n      \"status\": true,\n      limit: \"\",\n      page: 1,\n      countryId: selectedCountryId\n    };\n\n    const response = await dispatch(getStateList(stateReqData));\n    if (response?.payload?.length > 0) {\n      const firstState = response.payload[0];\n      setValue(\"stateId\", firstState.stateId);\n      setValue(\"stateName\", firstState.stateName);\n    } else {\n      setValue(\"stateId\", \"\");\n      setValue(\"stateName\", \"\");\n    }\n  };\n\n  const handleSelectState = (event) => {\n    setValue(\"stateId\", event.target.value);\n    setValue(\"stateName\", stateListData?.docs?.find(element => element._id === event.target.value)?.name);\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-0\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:my-2 capitalize\">\n            {/* <div>\n              <label className=\"block text-sm font-medium\">Country ID</label>\n              <select\n                {...register(\"countryId\", { required: \"Country Name is required\" })}\n                onChange={handleSelectCountry}\n                className={`mt-1 block w-full border ${errors.countryName ? \"border-[1px] \" : \"border-gray-300\"} p-2 rounded`}\n              >\n                {countryListData?.docs?.map((element) => (\n                  <option key={element._id} value={element._id}>\n                    {element.name}\n                  </option>\n                ))}\n              </select>\n              {errors.countryName && (\n                <p className=\"text-red-500 text-sm\">{errors.countryName.message}</p>\n              )}\n            </div> */}\n\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                Country Name <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"countryId\"\n                control={control}\n                rules={{ required: \"Country Name is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors._id ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Country Name\"\n                  >\n                    {countryListData?.docs?.length > 0 &&\n                      companyListLoading ? <Select.Option disabled>\n                      <ListLoader /> </Select.Option> :\n                      (sortByPropertyAlphabetically(countryListData?.docs).map((element) => (\n                        <Select.Option key={element._id} value={element._id}>{element?.name}</Select.Option>\n                      )))}\n                  </Select>\n                )}\n              />\n              {errors._id && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors._id.message}\n                </p>\n              )}\n            </div>\n\n\n\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>\n                State Name <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"stateId\"\n                control={control}\n                rules={{ required: \"Country Name is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors._id ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Country Name\"\n                  >\n                    {stateListData?.docs?.length > 0 &&\n                      stateListLoading ? <Select.Option disabled>\n                      <ListLoader /> </Select.Option> : (sortByPropertyAlphabetically(stateListData?.docs).map((element) => (\n                        <Select.Option key={element._id} value={element._id}>{element.name}</Select.Option>\n                      )))}\n                  </Select>\n                )}\n              />\n              {errors._id && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors._id.message}\n                </p>\n              )}\n            </div>\n\n            {/* <div>\n              <label className=\"block text-sm font-medium\">State ID</label>\n              <select\n                {...register(\"stateId\", { required: \"State Name is required\" })}\n                onChange={handleSelectState}\n                className={`mt-1 block w-full border ${errors.stateName ? \"border-[1px] \" : \"border-gray-300\"} p-2 rounded`}\n              >\n\n                {stateListData?.docs?.map((element) => (\n                  <option key={element._id} value={element._id}>\n                    {element.name}\n                  </option>\n                ))}\n              </select>\n              {errors.stateName && (\n                <p className=\"text-red-500 text-sm\">{errors.stateName.message}</p>\n              )}\n            </div> */}\n\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>City Name <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"cityName\"\n                control={control}\n                rules={{ required: \"City Name is required\" }}\n                render={({ field }) => (\n                  <input\n                    {...field}\n                    className={`${errors.cityName ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n                    placeholder=\"Enter City Name\"\n                  />\n                )}\n              />\n              {errors.cityName && (\n                <p className=\"text-red-500 text-sm\">{errors.cityName.message}</p>\n              )}\n            </div>\n\n            {/* <div>\n              <label className=\"block text-sm font-medium\">City Name</label>\n              <input\n                type=\"text\"\n                {...register(\"cityName\", { required: \"City Name is required\" })}\n                className={`mt-1 block w-full border ${errors.cityName ? \"border-[1px] \" : \"border-gray-300\"} p-2 rounded`}\n                placeholder=\"Enter City Name\"\n              />\n              {errors.cityName && (\n                <p className=\"text-red-500 text-sm\">{errors.cityName.message}</p>\n              )}\n            </div> */}\n\n\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Status\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>Not Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n\n\n\n\n          </div>\n\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={cityLoading}\n              className={`${cityLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n            >\n              {cityLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\n\nexport default UpdateCity;\n"],"names":["register","handleSubmit","setValue","control","formState","errors","useForm","loading","cityLoading","useSelector","state","city","countryListData","companyListLoading","country","stateListData","stateListLoading","states","cityByIdData","dispatch","useDispatch","navigate","useNavigate","cityEnc","useParams","cityId","decrypt","useEffect","countrySearch","text","sort","status","isPagination","then","data","error","getCityById","_id","countryName","countryId","stateId","name","stateReqData","stateSearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","finalPayload","cityName","updateCityData","result","concat","inputLabelClassName","Controller","rules","required","render","_ref","_countryListData$docs2","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","placeholder","docs","length","Option","disabled","ListLoader","sortByPropertyAlphabetically","map","element","value","message","_ref2","_stateListData$docs2","_ref3","inputClassName","_ref4","type","Loader"],"sourceRoot":""}