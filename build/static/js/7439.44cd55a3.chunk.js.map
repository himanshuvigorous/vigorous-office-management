{"version":3,"file":"static/js/7439.44cd55a3.chunk.js","mappings":"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","sources":["pages/clientService/UpdateDigitalSignatureType.js"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../global_layouts/GlobalLayout/GlobalLayout\";\nimport getUserIds from \"../../constents/getUserIds\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../constents/global\";\nimport { decrypt } from \"../../config/Encryption\";\nimport { branchSearch } from \"../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../company/companyManagement/companyFeatures/_company_reducers\";\nimport { getClientServiceDetails, updateClientService } from \"../client/clientService/clientServiceFeatures/_client_service_reducers\";\nimport { Select } from \"antd\";\nimport { getDigitalSignDetails, updateDigitalSign } from \"../client/digitalSignature/digitalSignatureFeatures/_digital_sign_reducers\";\nimport { getDigitalSignatureTypeDetails, updateDigitalSignatureType } from \"./sigantureServiceFeatures/_digital_signature_type_reducers\";\nimport Loader from \"../../global_layouts/Loader\";\n\n\nfunction UpdateDigitalSignatureType() {\n  const { loading: digitalSignatureTypeLoading } = useSelector(state => state.digitalSignatureType)\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userType\n  } = getUserIds();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { digitalSignIdEnc } = useParams();\n  const digitalSignatureTypeId = decrypt(digitalSignIdEnc);\n  const { DigitalSignatureTypeDetails, loading } = useSelector(state => state.digitalSignatureType)\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { clientServiceDetails } = useSelector((state) => state.clientService);\n\n  const { companyList } = useSelector((state) => state.company);\n  const { countryListData } = useSelector((state) => state.country);\n  const { branchList } = useSelector((state) => state.branch);\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? companyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId])\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    let reqData = {\n      _id: digitalSignatureTypeId,\n    };\n    dispatch(getDigitalSignatureTypeDetails(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (DigitalSignatureTypeDetails) {\n      setValue(\"PDCompanyId\", DigitalSignatureTypeDetails?.companyId);\n      setValue(\"PDBranchId\", DigitalSignatureTypeDetails?.branchId);\n      setValue(\"name\", DigitalSignatureTypeDetails?.name);\n      setValue(\"status\", DigitalSignatureTypeDetails?.status);\n    }\n  }, [DigitalSignatureTypeDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: digitalSignatureTypeId,\n      companyId: userInfoglobal?.userType === \"admin\" ? companyId :\n        userInfoglobal?.userType === \"company\" ? userInfoglobal?._id :\n          userInfoglobal?.companyId,\n\n      \"directorId\": \"\",\n      branchId: userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? branchId :\n        userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id :\n          userInfoglobal?.branchId,\n      name: data?.name,\n      status: data?.status,\n    };\n    dispatch(updateDigitalSignatureType(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  }\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-5\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                <select\n                  {...register(\"PDCompanyId\", {\n                    required: \"company is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.PDCompanyId\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                >\n                  <option className=\"\" value=\"\">\n                    Select Company\n                  </option>\n                  {companyList?.map((type) => (\n                    <option value={type?._id}>{type?.fullName}</option>\n                  ))}\n                </select>\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>)}\n\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n              <div>\n                <label className={`${inputLabelClassName}`}>\n                  Branch <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  disabled\n                  name=\"PDBranchId\"\n                  control={control}\n                  rules={{ required: \"Branch is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      showSearch\n                      filterOption={(input, option) =>\n                    String(option?.children).toLowerCase().includes(input.toLowerCase())\n                  }\n                      placeholder=\"Select Branch\"\n                    >\n                      <Select.Option value=\"\">Select Branch</Select.Option>\n                      {branchList?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n                {errors.PDBranchId && <p className=\"text-red-500 text-sm\">{errors.PDBranchId.message}</p>}\n              </div>\n            )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.name\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.name.message}\n                </p>\n              )}\n            </div>\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                  } ${inputClassName}`}\n              >\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Status\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={digitalSignatureTypeLoading}\n              className={`${digitalSignatureTypeLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n            >\n              {digitalSignatureTypeLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default UpdateDigitalSignatureType;"],"names":["loading","digitalSignatureTypeLoading","useSelector","state","digitalSignatureType","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","digitalSignIdEnc","useParams","digitalSignatureTypeId","decrypt","DigitalSignatureTypeDetails","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","clientServiceDetails","clientService","companyList","company","countryListData","country","branchList","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","branchSearch","text","sort","status","isPagination","_id","companySearch","reqData","getDigitalSignatureTypeDetails","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","updateDigitalSignatureType","then","error","inputLabelClassName","_objectSpread","required","inputClassName","PDCompanyId","showSearch","filterOption","input","option","String","toLowerCase","includes","value","map","type","fullName","message","Controller","disabled","rules","render","_ref","field","Select","inputAntdSelectClassName","PDBranchId","placeholder","Option","_ref2","Loader"],"sourceRoot":""}