{"version":3,"file":"static/js/2887.974db14b.chunk.js","mappings":"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","sources":["pages/hr/RecruitmentProcess/Interview/EditInterview.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\n\nimport { getInterviewDetails, updateInterview } from \"./InterviewFeatures/_interview_reducers\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { domainName, inputAntdSelectClassName, inputClassName, inputDisabledClassName, inputLabelClassName, inputLabelClassNameReactSelect } from \"../../../../constents/global\";\nimport getUserIds from '../../../../constents/getUserIds';\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { deptSearch } from \"../../../department/departmentFeatures/_department_reducers\";\nimport { designationSearch } from \"../../../designation/designationFeatures/_designation_reducers\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../../Director/director/DirectorFeatures/_director_reducers\";\nimport { jobPostSearch } from \"../JobPost/JobPostFeatures/_job_post_reducers\";\nimport { applicationSearch } from \"../../../applicationManagement/applicationFeatures/_application_reducers\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport ReactSelect from \"react-select\";\nimport dayjs from \"dayjs\";\nimport { Select } from \"antd\";\nimport CustomDatePicker from \"../../../../global_layouts/DatePicker/CustomDatePicker\";\nimport { getInterviewRoundList } from \"../../../global/other/interviewRoundName/InterviewRoundFeatures/_interviewRound_type_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\nimport Loader2 from \"../../../../global_layouts/Loader/Loader2\";\n\nconst EditInterview = () => {\n  const { register, handleSubmit, control, setValue, formState: { errors } } = useForm();\n  const { interviewIdEnc } = useParams();\n  const interviewId = decrypt(interviewIdEnc);\n  const { interviewDetails } = useSelector((state) => state.interview);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [editPageLoader,setEditPageLoader]=useState(true);\n  const {  interviewRoundListData } = useSelector((state) => state.interviewRound);\n\n  const {\n    userCompanyId,\n    userBranchId,\n    userDepartmentId,\n    userDesignationId,\n  } = getUserIds();\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { employeList ,loading:employeeLoading} = useSelector((state) => state.employe);\n  const fullName = useWatch({\n    control,\n    name: \"fullName\",\n    defaultValue: \"\",\n  }); \n   const inteviewType = useWatch({\n    control,\n    name: \"type\",\n    defaultValue: \"\",\n  });\n\n\n  useEffect(() => {\n    if (interviewId) {\n      dispatch(getInterviewDetails({ _id: interviewId })).then(()=>{\n        setEditPageLoader(false)\n      })\n    }\n  }, [dispatch, interviewId]);\n\n\n  const {  loading:interviewLoading } = useSelector(\n    (state) => state.interview\n  );\n  useEffect(() => {\n    if (interviewDetails) {\n      dispatch(getInterviewRoundList({\n        directorId: \"\",\n        companyId: interviewDetails?.companyId,\n        branchId: interviewDetails?.branchId,\n        \"text\": \"\",\n        \"sort\": true,\n        \"status\": \"\",\n        \"isPagination\": false,\n      }))\n      setValue(\"interviewerName\", interviewDetails?.interviewerName);\n      setValue(\"interviewerPosition\", interviewDetails?.interviewerPosition);\n      setValue(\"fullName\", interviewDetails?.interviewerId);\n      setValue(\"feedback\", interviewDetails?.feedback);\n      setValue(\"jobId\", interviewDetails?.jobId);\n      setValue(\"date\", dayjs(interviewDetails?.date))\n      setValue(\"type\", interviewDetails?.type);\n      setValue(\"roundName\", interviewDetails?.roundName);\n      setValue(\"roundNumber\", interviewDetails?.roundNumber);\n      setValue(\"candidateName\", interviewDetails?.applicationData?.fullName);\n      setValue(\"position\", interviewDetails?.applicationData?.designationData?.name);\n      setValue(\"status\", interviewDetails?.status);\n      setValue(\"meetingLink\", interviewDetails?.meetingUrl);\n      setValue(\"location\", interviewDetails?.location);\n      \n      dispatch(employeSearch({\n         companyId: interviewDetails?.companyId,\n        branchId: interviewDetails?.branchId,\n        designationId: \"\",\n        text: \"\",\n        sort: true,\n        status: true,\n        isPagination: false,\n        isTL: \"\",\n          isBranch: true,\n      isDirector: true,\n      })).then((data) => {\n       if(!data?.error){\n        const selectedEmployee = data?.payload?.data?.docs?.find(employee => employee._id === interviewDetails?.interviewerId);\n        if (selectedEmployee) {setValue('employee', {value: selectedEmployee._id,label: selectedEmployee.fullName})}\n       }\n      });\n    }\n  }, [interviewDetails, setValue])\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: interviewId,\n      interviewerId: data?.fullName,\n      applicationId: interviewDetails?.applicationId,\n      directorId: interviewDetails?.directorId,\n      companyId: interviewDetails?.companyId,\n      departmentId: interviewDetails?.departmentId,\n      designationId: interviewDetails?.designationId,\n      branchId: interviewDetails?.branchId,\n      interviewerName:employeList?.find(element => element?._id ===  data?.fullName)?.fullName,\n      interviewerPosition:employeList?.find(element => element?._id ===  data?.fullName)?.designationData?.name,\n      feedback: data?.feedback,\n      type: data?.type,\n      roundName: data?.roundName,\n      date: data?.date,\n      meetingUrl: data?.type === \"online\" ? data?.meetingLink : null,\n      location: data?.type === \"online\" ? null : data?.location,\n    };\n    dispatch(updateInterview(finalPayload)).then((data) => {\n      if (!data.error) navigate(\"/admin/interview\");\n    });\n  };\n\n\n\n\n  return (\n    <GlobalLayout>\n    \n        {editPageLoader ? <div className=\"h-screen w-full flex justify-center items-center\"><Loader2/></div> : <div>\n          <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)} className=\"\">\n            <div className=\"grid grid-col-1 md:grid-cols-2 gap-4\">\n\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Interviewer Name <span className=\"text-red-600\">*</span>\n                </label>\n                \n\n                <Controller\n                      name=\"fullName\"\n                      control={control}\n                      rules={{\n                        required: \"InterViewr Name is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.fullName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          popupClassName={'!z-[1580]'}\n                          placeholder=\"Select Interviewr\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                          >\n                          <Select.Option value=\"\">Select Interviewr</Select.Option>\n                          {employeeLoading ? <Select.Option disabled><ListLoader /></Select.Option> : (employeList?.map((item) => (\n                      <Select.Option key={item._id} value={item._id}>\n                        {item.userName}({item.fullName})\n                      </Select.Option>\n                    )))}\n                        </Select>\n                      )}\n                    />\n\n                {errors.fullName && (\n                  <p className=\"text-red-500 text-sm\">{errors.fullName.message}</p>\n                )}\n\n                {errors.employee && <p className=\"text-red-500 text-sm\">{errors.employee.message}</p>}\n              </div>\n\n              <div className=\"w-full \">\n                <label className={`${inputLabelClassName}`}>Interviewer Designation</label>\n                <input\n                  type=\"text\"\n                  value={employeList?.find(element => element?._id === fullName)?.designationData?.name}\n                  readOnly\n                  {...register(\"interviewerPosition\",)}\n                  className={` ${inputDisabledClassName} text-gray-700 ${errors.interviewerPosition ? \"border-[1px] \" : \"border-gray-300\"\n                    } `}\n                  placeholder=\"Enter interviewer position\"\n                />\n              </div>\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Date <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                      name=\"date\"\n                      control={control}\n                      rules={{\n                        required:'Date is required'\n                      }}\n                      render={({ field }) => (\n                        <CustomDatePicker\n                          field={field}\n                          showTime={true} \n                          format = \"DD/MM/YYYY hh:mm\"\n                          errors={errors}\n                          disabledDate={(current) => {\n                            return (\n                              current &&\n                              current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                            );\n                          }}\n                        />\n                      )}\n                    />\n                {/* <input\n                  type=\"datetime-local\"\n                  min={new Date().toISOString().slice(0, 16)}\n                  {...register(\"date\", {\n                    required: \"Date is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.date ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Date of Birth\"\n                /> */}\n\n                {errors.date && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.date.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Type <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                      name=\"type\"\n                      control={control}\n                      rules={{\n                        required: \"Type is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.fullName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          popupClassName={'!z-[1580]'}\n                          placeholder=\"Select Type\"\n                          showSearch >\n                           <Select.Option className=\"\" value=\"\">Select type</Select.Option>\n                  <Select.Option value=\"online\">Online</Select.Option>\n                  <Select.Option value=\"offline\">Ofline</Select.Option>\n               \n                        </Select>\n                      )}\n                    />\n                {/* <select\n                  {...register(\"type\", {\n                    required: \"Type is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.type\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                >\n                  <option className=\"\" value=\"\">Select type</option>\n                  <option value=\"online\">Online</option>\n                  <option value=\"offline\">Ofline</option>\n                </select> */}\n                {errors.type && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.type.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Round Name <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                      name=\"roundName\"\n                      control={control}\n                      rules={{\n                        required: \"Round is required\",\n                      }}\n                      render={({ field }) => (\n                        <Select\n                          {...field}\n                          className={` ${inputAntdSelectClassName} ${errors.fullName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                          popupClassName={'!z-[1580]'}\n                          placeholder=\"Select Round Name\"\n                          showSearch\n                          filterOption={(input, option) =>\n                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                          }\n                          >\n                          <Select.Option value=\"\">Select Round Name</Select.Option>\n                          {interviewRoundListData?.map((item) => (\n                      <Select.Option key={item.name} value={item.name}>\n                        {item.name}\n                      </Select.Option>\n                    ))}\n                        </Select>\n                      )}\n                    />\n                \n                \n                {errors.roundName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.roundName.message}\n                  </p>\n                )}\n              </div>\n\n              {inteviewType === \"offline\" && <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Location <span className=\"text-red-600\">*</span>\n                </label>\n                <input \n                  type=\"text\"\n                  {...register(\"location\", {\n                    required: \"Location is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.location ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter location\"\n                />\n                {errors.location && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.location.message}\n                  </p>\n                )}\n              </div> }\n              {inteviewType === \"online\" && <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Meeting Link <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"meetingLink\", {\n                    required: \"Meeting Link is required\",\n                  })}\n                  className={` ${inputClassName} ${errors.meetingLink ? \"border-[1px] \" : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Meeting Link\"\n                />\n                {errors.meetingLink && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.meetingLink.message}\n                  </p>\n                )}\n              </div> }\n\n            </div>\n            <div className=\"flex justify-end mt-4\">\n            <button\n              type=\"submit\"\n              disabled={interviewLoading}\n              className={`${interviewLoading ? 'bg-gray-400': 'bg-header' } text-white p-2 px-4 rounded`}\n            >\n            {interviewLoading ? <Loader/> : 'Submit'}\n            </button>\n\n          </div>\n          </form>\n        </div>}\n      \n    </GlobalLayout>\n  );\n};\n\nexport default EditInterview;"],"names":["EditInterview","_employeList$find3","_employeList$find3$de","register","handleSubmit","control","setValue","formState","errors","useForm","interviewIdEnc","useParams","interviewId","decrypt","interviewDetails","useSelector","state","interview","dispatch","useDispatch","navigate","useNavigate","editPageLoader","setEditPageLoader","useState","interviewRoundListData","interviewRound","userCompanyId","userBranchId","userDepartmentId","userDesignationId","getUserIds","employeList","loading","employeeLoading","JSON","parse","localStorage","getItem","concat","domainName","employe","fullName","useWatch","name","defaultValue","inteviewType","useEffect","getInterviewDetails","_id","then","interviewLoading","_interviewDetails$app","_interviewDetails$app2","_interviewDetails$app3","getInterviewRoundList","directorId","companyId","branchId","interviewerName","interviewerPosition","interviewerId","feedback","jobId","dayjs","date","type","roundName","roundNumber","applicationData","designationData","status","meetingUrl","location","employeSearch","designationId","text","sort","isPagination","isTL","isBranch","isDirector","data","error","_data$payload","_data$payload$data","_data$payload$data$do","selectedEmployee","payload","docs","find","employee","value","label","_jsx","GlobalLayout","children","className","Loader2","_jsxs","autoComplete","onSubmit","_employeList$find","_employeList$find2","_employeList$find2$de","finalPayload","applicationId","departmentId","element","meetingLink","updateInterview","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","popupClassName","placeholder","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","disabled","ListLoader","map","item","userName","message","readOnly","inputDisabledClassName","_ref2","CustomDatePicker","showTime","format","disabledDate","current","isBefore","endOf","_ref3","_ref4","inputClassName","Loader"],"sourceRoot":""}