{"version":3,"file":"static/js/9364.07182b23.chunk.js","mappings":"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","sources":["pages/global/other/employeeDocument/CreateEmployeeDocuments.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { domainName, inputAntdSelectClassName, inputClassName, inputLabelClassName, sortByPropertyAlphabetically } from \"../../../../constents/global\";\nimport { createEmployeeDoc } from \"./EmployeeDocumentFeatures/_emp_document_reducers\";\nimport { useEffect } from \"react\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\nconst CreateEmployeeDocuments = () => {\n    const { loading:employeeDocumentLoading } = useSelector(\n      (state) => state.employeeDocument\n    );\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { companyList,companyListLoading } = useSelector((state) => state.company);\n  const onSubmit = (data) => {\n    const finalPayload = {\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      name: data?.employeeDocumentName,\n      status: true,\n      type: data?.type\n    };\n    dispatch(createEmployeeDoc(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Compny \n              </label>\n              <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? <Select.Option disabled>\n                          <ListLoader />\n                        </Select.Option>: sortByPropertyAlphabetically(companyList,'fullName')?.map((type) => (\n                        <Select.Option key={type?._id} value={type?._id}>\n                          {type?.fullName}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  )}\n                />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Type <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"type\"\n                control={control}\n                rules={{ required: \"Type is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.type ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Type\"\n                    showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                    \n                  >\n                    <Select.Option value=\"\">Select Type</Select.Option>\n                    <Select.Option value=\"Financial\">Financial</Select.Option>\n                    <Select.Option value=\"General\">General</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.type && <p className=\"text-red-500 text-sm\">{errors.type.message}</p>}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"employeeDocumentName\", {\n                  required: \"Employee document is required\",\n                })}\n                className={` ${inputClassName} ${errors.employeeDocumentName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Employee document Name\"\n              />\n              {errors.employeeDocumentName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.employeeDocumentName.message}\n                </p>\n              )}\n            </div>\n            {/* <div>\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${\n                  errors.status ? \"border-[1px] \" : \"border-gray-300\"\n                } ${inputClassName}`}\n              >\n                <option value=\"\">Select Status</option>\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select>\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div> */}\n          </div>\n          <div className=\"flex justify-end \">\n          <button\n              type=\"submit\"\n              disabled={employeeDocumentLoading}\n              className={`${employeeDocumentLoading ? 'bg-gray-400': 'bg-header' } text-white p-2 px-4 rounded`}\n            >\n            {employeeDocumentLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default CreateEmployeeDocuments;\n"],"names":["CreateEmployeeDocuments","loading","employeeDocumentLoading","useSelector","state","employeeDocument","register","handleSubmit","control","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","companyList","companyListLoading","company","useEffect","userType","companySearch","text","sort","status","isPagination","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","companyId","PDCompanyId","_id","name","employeeDocumentName","type","createEmployeeDoc","then","error","inputLabelClassName","Controller","render","_ref","_sortByPropertyAlphab","field","Select","_objectSpread","defaultValue","inputAntdSelectClassName","Option","value","disabled","ListLoader","sortByPropertyAlphabetically","map","fullName","message","rules","required","_ref2","placeholder","showSearch","filterOption","input","option","String","toLowerCase","includes","inputClassName","Loader"],"sourceRoot":""}