{"version":3,"file":"static/js/6770.627d6daa.chunk.js","mappings":"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","sources":["pages/visitorManagement/employee_visitor_list/EmployeeVisitorList.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\"\nimport { PiPaypalLogoThin } from \"react-icons/pi\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useEffect, useState } from \"react\"\nimport Swal from \"sweetalert2\"\nimport { Controller, set, useForm, useWatch } from \"react-hook-form\";\nimport ReactSelect from \"react-select\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\"\nimport { domainName, inputAntdSelectClassNameFilter, inputClassName, inputLabelClassName, inputLabelClassNameReactSelect } from \"../../../constents/global\"\nimport { FaPlus, FaTimes } from \"react-icons/fa\"\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { FaCheck, FaPenToSquare, FaRegFile } from \"react-icons/fa6\";\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\nimport { encrypt } from \"../../../config/Encryption\";\nimport CustomPagination from \"../../../component/CustomPagination/CustomPagination\";\nimport getUserIds from \"../../../constents/getUserIds\";\nimport { Button, Modal, Select, Tooltip } from \"antd\";\nimport usePermissions from \"../../../config/usePermissions\";\nimport Loader2 from \"../../../global_layouts/Loader/Loader2\";\nimport moment from \"moment\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { deleteGeneralVisitor, deleteVisitor, getGeneralVisitorList, getVisitorList, updateGeneralVisitor, updateVisitor, visitorSearch } from \"../visitor/visitorFeatures/_visitor_reducers\";\nimport CustomDatePicker from \"../../../global_layouts/DatePicker/CustomDatePicker\";\nimport dayjs from \"dayjs\";\nimport { createcashbook } from \"../../financeManagement/cashbook/cashbookFeature/_cashbook_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { expenseTypeSearch } from \"../../global/other/ExpenseHead/expenseTypeFeature/_expenseType_reducers\";\nimport Loader from \"../../../global_layouts/Loader\";\nimport ListLoader from \"../../../global_layouts/ListLoader\";\n\nfunction EmployeeVisitorList() {\n\n \n     const { control, handleSubmit, setValue,formState:{errors},reset,register,watch } = useForm({shouldUnregister: true});\n    \n     const {\n    userCompanyId,\n    userDirectorId,\n    userBranchId,\n    userEmployeId,\n    userDepartmentId,\n    userDesignationId,\n    userType,\n  } = getUserIds();\n    const { visitorList, totalVisitorCount,visitorGeneralList, loading } = useSelector(state => state.visitor);\n    const { departmentListData } = useSelector((state) => state.department);\n    const { branchList } = useSelector((state) => state.branch);\n    const userInfoglobal = JSON.parse(\n        localStorage.getItem(`user_info_${domainName}`)\n    );\n    const { employeList } = useSelector((state) => state.employe);\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const [searchText, setSearchText] = useState(\"\");\n    const companyId = useWatch({\n        control,\n        name: \"PDCompanyId\",\n        defaultValue: userCompanyId,\n    });\n    const branchId = useWatch({\n        control,\n        name: \"PDBranchId\",\n        defaultValue: userBranchId,\n    });\n    const departmentId = useWatch({\n        control,\n        name: \"PdDepartmentId\",\n        defaultValue: '',\n    });\n    const employee = useWatch({\n        control,\n        name: \"employee\",\n        defaultValue: '',\n    });\n\n     const checkin = useWatch({\n        control,\n        name: \"startTime\",\n        defaultValue: null,\n    });\n     const checkout = useWatch({\n        control,\n        name: \"endTime\",\n        defaultValue: null,\n    });\n    const km = useWatch({\n        control,\n        name: \"km\",\n        defaultValue: 0,\n    });\n\n\n    const category = useWatch({\n        control,\n        name: \"category\",\n        defaultValue: '',\n    });\n\n     const expenseHead = useWatch({\n        control,\n        name: \"expencehead\",\n        defaultValue: '',\n    });\n\n     const amount = useWatch({\n        control,\n        name: \"amount\",\n        defaultValue: '',\n    });\n\n    const naration = useWatch({\n        control,\n        name: \"naration\",\n        defaultValue: '',\n    });\n\n     const date = useWatch({\n        control,\n        name: \"date\",\n        defaultValue: '',\n    });\n    const [cashBookModal,setCashBookModal]=useState(false)\n    useEffect(() => {\n        if (userType === \"admin\") {\n            dispatch(companySearch({\n                text: \"\",\n                sort: true,\n                status: true,\n                isPagination: false,\n            }));\n        }\n    }, []);\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const onPaginationChange = (page) => {\n        setCurrentPage(page);\n    };\n\n    const limit = 10;\n\n    useEffect(() => {\n        fetchVisitorCatList();\n    }, [currentPage, branchId, employee, departmentId, category, searchText])\n\n    const fetchVisitorCatList = () => {\n        const reqListData = {\n            page: currentPage,\n            limit: limit,\n            reqPayload: {\n                companyId: companyId,\n                branchId: branchId,\n                \"directorId\": \"\",\n                employeId: userEmployeId,\n                category:category,\n                departmentId: '',\n                text: searchText,\n                sort: true,\n                status: \"\",\n                isPagination: true,\n              \n            }\n        }\n        dispatch(getGeneralVisitorList(reqListData));\n    }\n\n\n  \n\n\n      const { expenseTypeList } = useSelector((state) => state.expenceHead);\n      const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n      const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n      const { loading: cashbookLoading } = useSelector(\n        (state) => state.cashbook\n      );\n    \n      const [isPreview, setIsPreview] = useState(false);\n      const [formData, setFormData] = useState({\n        attachment: []\n      });\n    \n      const handleCashBookFunc = () => {\n       \n        const finalPayload = {\n          companyId: userInfoglobal?.companyId,\n          directorId: userInfoglobal?.directorId,\n          branchId: userInfoglobal?.branchId,\n          \"employeId\": userInfoglobal?.userType === \"employee\" ? userInfoglobal?._id : null,\n          \"expenseTypeId\": expenseHead?.value,\n          \"expenseFor\": 'Employe',\n          \"amount\": + amount,\n          \"naration\": naration,\n          // \"attachment\": data?.fileUploadLink,\n          \"GSTamount\": 0,\n          //\"totalAmount\": + data?.amount,\n          date: date,\n          status: \"Pending\",\n          //attachment: formData?.attachment,\n        };\n        dispatch(createcashbook(finalPayload)).then((data) => {\n            fetchVisitorCatList()\n          setCashBookModal(false)\n          setValue('amount',0)\n          setValue('naration',null)\n          setValue('expencehead', { value: '', label: '' });\n          setValue('date',null)\n        });\n      };\n    const onError = (errors) => {\n\n};\n    \n      useEffect(() => {\n        if (\n          CompanyId ||\n          userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n        ) {\n          dispatch(\n            branchSearch({\n              text: \"\",\n              sort: true,\n              status: true,\n              isPagination: false,\n              companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n            })\n          );\n        }\n      }, [CompanyId])\n      useEffect(() => {\n        if (userInfoglobal?.userType === \"admin\") {\n          dispatch(\n            companySearch({\n              text: \"\",\n              sort: true,\n              status: true,\n              isPagination: false,\n            })\n          );\n        }\n      }, []);\n    \n      // const handleFileChange = (file) => {\n      //   dispatch(\n      //     fileUploadFunc({\n      //       filePath: file,\n      //       isVideo: false,\n      //       isMultiple: false,\n      //     })\n      //   ).then((data) => {\n      //     if (!data.error) {\n      //       setValue('fileUploadLink', data?.payload?.data)\n      //     }\n      //   });\n      // };\n    \n      const handleFileChange = (e) => {\n        const file = e.target.files[0];\n        const reqData = {\n          filePath: file,\n          isVideo: false,\n          isMultiple: false,\n        };\n        dispatch(fileUploadFunc(reqData)).then((res) => {\n          if (res?.payload?.data) {\n            setFormData(prev => ({\n              ...prev,\n              attachment: [...prev.attachment, res.payload?.data]\n            }));\n          }\n        });\n      };\n    \n      const handleRemoveFile = (index) => {\n        setFormData(prev => {\n          const updatedAttachments = prev.attachment.filter((_, i) => i !== index);\n          return { ...prev, attachment: updatedAttachments };\n        });\n      };\n    \n      useEffect(() => {\n        setValue('totalAmount', Number(watch('amount')) + Number(watch('gstAmount')))\n      }, [watch('amount'), watch('gstAmount')])\n    \n\n\n    const handleDelete = (id) => {\n        let reqData = {\n            _id: id\n        }\n        Swal.fire({\n            title: \"Warning\",\n            text: \"Are you sure you want to delete!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            cancelButtonText: \"No\",\n        }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(deleteGeneralVisitor(reqData)).then((data) => {\n                    !data.error && fetchVisitorCatList();\n                })\n            }\n        });\n    };\n\n    const handleCheckOut = (element) => {\n        let reqData = {\n            ...element,\n\n            _id: element?._id,\n            checkOutTime: moment(),\n\n        }\n        Swal.fire({\n            title: \"Warning\",\n            text: \"Are you sure you want to checkout!\",\n            icon: \"warning\",\n            showCancelButton: true,\n            cancelButtonText: \"No\",\n        }).then((result) => {\n            if (result.isConfirmed) {\n                dispatch(updateVisitor(reqData)).then((data) => {\n                    !data.error && fetchVisitorCatList();\n                })\n            }\n        });\n    };\n    const handleOnChange = async (event) => {\n        const searchValue = event.target.value;\n        setValue(\"category\", searchValue);\n        if (searchValue.trim().length > 0) {\n            const reqListData = {\n                companyId: companyId,\n                branchId: branchId,\n                \"directorId\": \"\",\n                text: \"\",\n                sort: true,\n                status: \"\",\n                isPagination: false,\n                category: searchValue\n            }\n            dispatch(visitorSearch(reqListData));\n        }\n    };\n      const [visitorData,setVisitorData]=useState({});\n      const [visitorModal,setVisitorModal]=useState(false);\n      const handleVisitors =(data)=>{\n        setVisitorData(data);\n        setVisitorModal(true);\n      }\n\n\n      const handleCashBook =()=>{\n        // setVisitorData(data);\n        setCashBookModal(true);\n      }\n    \n\n    \n      const handleVisitorCheckin = () => {\n        const finalPayload = {\n       \n    \n        ...visitorData,\n    \n             checkInTime:checkin,\n          checkOutTime:checkout,\n          kilometer:Number(km),\n        };\n    \n        dispatch(updateGeneralVisitor(finalPayload)).then((data) => {\n          if (!data.error) fetchVisitorCatList();\n          setValue('startTime',null)\n          setValue('endTime',null)\n          setValue('date',null)\n          setVisitorModal(false)\n        });\n      };\n    \n\n\n    const fetchEmployeListData = () => {\n        const reqPayload = {\n            text: \"\",\n            status: true,\n            sort: true,\n            isTL: \"\",\n            isHR: \"\",\n\n            isPagination: false,\n            designationId: '',\n            departmentId: '',\n            companyId: companyId,\n            branchId: branchId,\n        };\n\n        dispatch(employeSearch(reqPayload));\n    };\n\n    const onChange = (e) => {\n        \n        setSearchText(e);\n    };\nif (userInfoglobal?.userType !== \"employee\") {\n    return (\n      <GlobalLayout>\n        <div className=\"bg-red-100 text-red-800 p-4 rounded-md mt-2\">\n          <p className=\"text-center font-semibold\">\n            You are not an employee. This page is viewable for employees only.\n          </p>\n        </div>\n      </GlobalLayout>\n    );\n  }\n    return (\n        <GlobalLayout onChange={onChange}>\n\n            <div className=''>\n                <div class=\"xl:flex justify-between items-center py-1 xl:space-y-0 space-y-2 overflow-y-auto\">\n                    <div className=\"grid sm:grid-cols-2 grid-cols-1 xl:grid-cols-4 lg:grid-cols-4 md:grid-cols-3 sm:gap-3 gap-1\">\n                        {/* <div className=\"\">\n                            <Controller\n                                control={control}\n                                name=\"category\"\n                                rules={{ required: \"category is required\" }}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        defaultValue={\"\"}\n                                        className={` ${inputAntdSelectClassNameFilter} `}\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n                                    >\n                                        <Select.Option className=\"\" value=\"\">Select Category</Select.Option>\n                                        <Select.Option value=\"general\">General Visitor</Select.Option>\n                                        <Select.Option value=\"client\"> Client Visitor</Select.Option>\n                                  \n                                    </Select>\n                                )}\n                            />\n                        </div> */}\n                        {/* {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && (\n                            <div className=\"\">\n                                <Controller\n                                    control={control}\n                                    name=\"PDBranchId\"\n                                    rules={{ required: \"Branch is required\" }}\n                                    render={({ field }) => (\n                                        <Select\n                                            {...field}\n                                            defaultValue={\"\"}\n                                            onFocus={() => {\n                                                dispatch(\n                                                    branchSearch({\n                                                        text: \"\",\n                                                        sort: true,\n                                                        status: true,\n                                                        isPagination: false,\n                                                        companyId:\n                                                            userInfoglobal?.userType === \"admin\"\n                                                                ? companyId\n                                                                : userInfoglobal?.userType === \"company\"\n                                                                    ? userInfoglobal?._id\n                                                                    : userInfoglobal?.companyId,\n                                                    }))\n                                            }}\n                                            className={`${inputAntdSelectClassNameFilter} `}\n                                            showSearch\n                                            filterOption={(input, option) =>\n                                                String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                            }\n                                        >\n                                            <Select.Option value=\"\">Select Branch</Select.Option>\n                                            {branchList?.map((type) => (\n                                                <Select.Option key={type?._id} value={type?._id}>\n                                                    {type?.fullName}\n                                                </Select.Option>\n                                            ))}\n                                        </Select>\n                                    )}\n                                />\n                            </div>\n                        )} */}\n\n                        {/* <div className=\"\">\n                            <Controller\n                                control={control}\n                                name=\"PdDepartmentId\"\n                                rules={{ required: \"Department is required\" }}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        defaultValue={\"\"}\n                                        onFocus={() => {\n                                            dispatch(\n                                                deptSearch({\n                                                    text: \"\",\n                                                    sort: true,\n                                                    status: true,\n                                                    companyId:\n                                                        userInfoglobal?.userType === \"admin\"\n                                                            ? companyId\n                                                            : userInfoglobal?.userType === \"company\"\n                                                                ? userInfoglobal?._id\n                                                                : userInfoglobal?.companyId,\n                                                    branchId: branchId,\n                                                    isPagination: false\n                                                })\n                                            );\n                                        }}\n                                        className={`${inputAntdSelectClassNameFilter} `}\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n                                    >\n                                        <Select.Option value=\"\">Select Department</Select.Option>\n                                        {departmentListData?.map((type) => (\n                                            <Select.Option key={type?._id} value={type?._id}>\n                                                {type?.name}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            />\n                        </div> */}\n                        {/* <div className=\"\">\n                            <Controller\n                                name=\"employee\"\n                                control={control}\n                                render={({ field }) => (\n                                    <Select\n                                        {...field}\n                                        className={` ${inputAntdSelectClassNameFilter} `}\n                                        popupClassName={'!z-[1580]'}\n                                        placeholder=\"Select Employee\"\n                                        showSearch\n                                        filterOption={(input, option) =>\n                                            String(option?.children).toLowerCase().includes(input.toLowerCase())\n                                        }\n                                        optionLabelProp=\"children\"\n                                        onFocus={() => fetchEmployeListData()}\n                                    >\n                                        <Select.Option value=\"\">Select Employee</Select.Option>\n                                        {employeList?.map((item) => (\n                                            <Select.Option key={item._id} value={item._id}>\n                                                {item.fullName}\n                                            </Select.Option>\n                                        ))}\n                                    </Select>\n                                )}\n                            />\n                        </div> */}\n                    </div>\n                    <div className=\"flex justify-end items-center gap-2 \">\n                        {/* <button\n                            onClick={() => {\n                                setValue(\"employee\", \"\");\n                                setValue(\"PDBranchId\", '');\n                                setValue(\"PdDepartmentId\", '');\n                                setValue(\"category\", \"\");\n                                setValue(\"PdCompanyId\", \"\");\n                            }}\n                            className=\"bg-header   py-[6px]  rounded-md  flex px-5 justify-center items-center  text-white\">\n                            <span className=\"text-[12px]\">Reset</span>\n                        </button> */}\n                        {/* {canCreate &&\n                            <Tooltip placement=\"topLeft\"  title='Add Visitor'>\n                                <button onClick={() => { navigate(\"/admin/client-visitor/create\") }} className='bg-header p-2 rounded-md flex justify-center items-center space-x-2 text-white'>\n                                    <FaPlus />\n                                    <span className='text-[12px] text-nowrap tracking-wide'>Add Visitor</span>\n                                </button>\n                            </Tooltip>} */}\n                    </div>\n                </div>\n            </div>\n            <div className=\"bg-[#ffffff]  w-full overflow-x-auto mt-1 rounded-xl\">\n                <table className=\"w-full max-w-full rounded-xl overflow-x-auto \">\n                    <thead className=''>\n                        <tr className='border-b-[1px] border-[#DDDDDD] capitalize text-[12px] bg-header text-white font-[500] h-[40px]'>\n                            <th className='border-none p-2 whitespace-nowrap w-[8%]'>\n                                S.no.\n                            </th>\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Visitor Name\n                            </th>\n                            {/* <th className='border-none p-2 whitespace-nowrap'>\n                                Client Name\n                            </th> */}\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Category type\n                            </th>\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Mobile Number\n                            </th>\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Employees\n                            </th>\n                            {/* <th className='border-none p-2 whitespace-nowrap'>\n                                Employe Name\n                            </th> */}\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Reason\n                            </th>\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Start Time\n                            </th>\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                End Time\n                            </th>\n                             <th className='border-none p-2 whitespace-nowrap'>\n                                Check In Time\n                            </th>\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Check Out Time\n                            </th>\n                            {/* <th className='border-none p-2 whitespace-nowrap w-[20%]'>\n                                Category\n                            </th> */}\n                            <th className='border-none p-2 whitespace-nowrap'>\n                                Created By\n                            </th>\n                            {/* <th className='border-none p-2 whitespace-nowrap'>\n                                Status\n                            </th> */}\n                           <th className='border-none p-2 whitespace-nowrap w-[8%]'>\n                                Action\n                            </th>\n                        </tr>\n                    </thead>\n                    {loading ? <tr className=\"bg-white bg-opacity-5 \">\n                        <td\n                            colSpan={10}\n                            className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\"\n                        >\n                            <Loader2 />\n                        </td>\n                    </tr> :\n                        <tbody>\n                            {visitorGeneralList && visitorGeneralList?.length > 0 ?\n                                visitorGeneralList?.map((element, index) => (\n                                    <tr className={`border-b-[1px] border-[#DDDDDD] ${index % 2 === 0 ? 'bg-[#e9ecef]/80' : 'bg-white'} text-[#374151] text-[14px]`}>\n                                        <td className='whitespace-nowrap border-none p-2 '>\n                                            {index + 1 + ((currentPage - 1) * limit)}\n                                        </td>\n                                        <td className='whitespace-nowrap border-none p-2 '>{element?.name ?? \"-\"}</td>\n                                        {/* <td className='whitespace-nowrap border-none p-2 '>{element?.clientName ?? \"-\"}</td> */}\n                                        <td className='whitespace-nowrap border-none p-2 '>{element?.category ?? \"-\"}</td>\n                                        <td className=\"whitespace-nowrap border-none p-2\">\n                                            {element?.mobile?.code + \" \" + element?.mobile?.number || '-'}\n                                        </td>\n                                        <td className='whitespace-nowrap border-none p-2 '>\n                                            <div className={`  flex items-center justify-center`}>\n                                            {element?.employeData?.map((element,index)=>{\n                                                return (\n\n                                    <Tooltip placement=\"topLeft\"  title={element?.fullName}>\n\n                                        <img\n                                        key={index}\n                                          alt=\"\"\n                                          src={`${process.env.REACT_APP_BACKEND_DOMAIN_NAME}/public/${element.profileImage}`}\n                                          className={`w-10 h-10 ${index > 0 ? ' -ml-2' : '0'} rounded-full bg-gray-500 flex items-center justify-center`}\n                                        />\n                                        </Tooltip>\n                                      ) \n                                               \n\n                                            },[])}\n                                            </div>\n                                            \n                                            </td>\n                                        {/* <td className='whitespace-nowrap border-none p-2 '>{element?.employeName ?? \"-\"}</td> */}\n                                        <td className='whitespace-nowrap border-none p-2 '>{element?.reason ?? \"-\"}</td>\n                                        <td className='whitespace-nowrap border-none p-2 '>{element?.timeDurationStart ? moment(element?.timeDurationStart).format('DD-MM-YYYY hh:mm a') : \"-\"}</td>\n                                        <td className='whitespace-nowrap border-none p-2 '>{element?.timeDurationEnd ? moment(element?.timeDurationEnd).format('DD-MM-YYYY hh:mm a') : '-' } </td>\n                                        <td className='whitespace-nowrap border-none p-2 '>{element?.checkInTime ? moment(element?.checkInTime).format('DD-MM-YYYY hh:mm a') : '-' } </td>\n                                        <td className='whitespace-nowrap border-none p-2 '>{element?.checkOutTime ? moment(element?.checkOutTime).format('DD-MM-YYYY hh:mm a') : '-' } </td>\n                                        {/* <td className='whitespace-nowrap border-none p-2 '>{element?.category ?? \"-\"}</td> */}\n                                        <td className=\"whitespace-nowrap border-none px-2 py-3\">\n                                            {element?.createdBy || \"-\"}\n                                        </td>\n                                        {/* <td className='whitespace-nowrap border-none p-2 '>{element?.createdBy ?? \"-\"}</td> */}\n                                        {/* <td className='whitespace-nowrap border-none p-2 '>\n                                        <span className={`${element?.status ? 'bg-[#E0FFBE] border-green-500' : 'bg-red-200 '\n                                            } border-[1px] px-2 py-1.5 rounded-lg text-black text-[12px]`}>\n                                            {element?.status ? 'Active' : 'Inactive' ?? \"-\"}\n                                        </span>\n                                    </td> */}\n                                        {/* {(canDelete || canUpdate) && <td className='whitespace-nowrap border-none p-2'>\n                                            <span className=\"py-1.5 flex justify-start items-center space-x-2\">\n                                                {canUpdate &&\n                                                    <Tooltip placement=\"topLeft\"  title='Edit'>\n                                                        <button onClick={() => { navigate(`/admin/client-visitor/edit/${encrypt(element?._id)}`) }} className=\"px-2 py-1.5 text-xs rounded-md bg-transparent border border-muted\" type=\"button\">\n                                                            <FaPenToSquare className=' hover:text-[#337ab7] text-[#3c8dbc]' size={16} />\n                                                        </button>\n                                                    </Tooltip>}\n                                                {canDelete && <Tooltip placement=\"topLeft\"  title='Delete'>\n                                                    <button onClick={() => handleDelete(element?._id)} className=\"px-2 py-1.5 rounded-md bg-transparent border border-muted\" type=\"button\">\n                                                        <RiDeleteBin5Line className='text-red-600 hover:text-red-500' size={16} />\n                                                    </button>\n                                                </Tooltip>}\n                                            </span>\n                                        </td>} */}\n<td className='whitespace-nowrap gap-2 flex  border-none p-2'>\n                                         <button\n                                                                          onClick={() => handleVisitors(element)}\n                                                                          className=\"px-2 py-1.5 rounded-md bg-transparent border border-muted\"\n                                                                          type=\"button\"\n                                                                          \n                                                                        >\n                                                                          <FaCheck\n                                                                            // className={` ${\"text-green-600 hover:text-green-500\"}`}\n                                                                            className={`text-green-600 hover:text-green-500`}\n                                                                            size={16}\n                                                                          />\n                                        \n                                                                        </button>\n\n                                                                        <button\n                                                                          onClick={() => handleCashBook()}\n                                                                          className=\"px-2 py-1.5 rounded-md bg-transparent border border-muted\"\n                                                                          type=\"button\"\n                                                                          \n                                                                        >\n                                                                          <PiPaypalLogoThin\n                                                                            // className={` ${\"text-green-600 hover:text-green-500\"}`}\n                                                                            className={`text-green-600 hover:text-green-500`}\n                                                                            size={16}\n                                                                          />\n                                        \n                                                                        </button>\n                                                                        </td>\n                                    </tr>\n                                ))\n                                : (<tr className=\"bg-white bg-opacity-5 \" >\n                                    <td colSpan={4} className=\"px-6 py-2 whitespace-nowrap font-[600] text-sm text-gray-500\">Record Not Found</td>\n                                </tr>)}\n                        </tbody>}\n                </table>\n\n\n                <Modal   \n                              className=\"antmodalclassName\"\n                              \n                              title=\"Visitor Request\"\n                              width={600}\n                              height={400}\n                              open={visitorModal}\n                              onCancel={()=>{\n                                setValue('startTime',null)\n                                setValue('endTime',null)\n                                setValue('km',0)\n                                setVisitorModal(false)\n                                \n                                reset()\n                            }}\n                              footer={[\n                    \n                  ]}\n                            >\n                              <div>\n                                \n                                  <div className=\"grid grid-col-1  gap-4\">\n                                   \n                  \n                               \n                        \n                        \n                                     <div className=\"\">\n                                                  {/* Start Time Input Field */}\n                                                  <label className={`${inputLabelClassName}`}>\n                                                    Check IN Time <span className=\"text-red-600\">*</span>\n                                                  </label>\n                                                 \n                                                  <Controller\n                                                    name=\"startTime\"\n                                                    control={control}\n                                                    showTime={true}\n                                                    rules={{\n                                                      required: \"Check IN Time  is required\",\n                                                    }}\n                                                    format=\"DD/MM/YYYY HH:mm\"\n                                                    render={({ field }) => (\n                                                      <CustomDatePicker\n                                                        field={field}\n                                                        showTime={true}\n                                                        format=\"DD/MM/YYYY HH:mm\"\n                                                       errors={errors}\n                                                        disabledDate={(current) => {\n                                                          return (\n                                                            current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                                                          );\n                                                        }}\n                                                      />\n                                                    )}\n                                                  />\n                                    \n                                                  {errors.startTime && (\n                                                    <p className=\"text-red-500 text-sm\">\n                                                      {errors.startTime.message}\n                                                    </p>\n                                                  )}\n                                                </div>\n                                    \n                                                 <div className=\"\">\n                                                  {/* Start Time Input Field */}\n                                                  <label className={`${inputLabelClassName}`}>\n                                                    Check out Time <span className=\"text-red-600\">*</span>\n                                                  </label>\n                                                 \n                                                  <Controller\n                                                    name=\"endTime\"\n                                                    control={control}\n                                                    showTime={true}\n                                                    rules={{\n                                                      required: \"Check out Time  is required\",\n                                                    }}\n                                                    format=\"DD/MM/YYYY HH:mm\"\n                                                    render={({ field }) => (\n                                                      <CustomDatePicker\n                                                        field={field}\n                                                        showTime={true}\n                                                        format=\"DD/MM/YYYY HH:mm\"\n                                                       errors={errors}\n                                                        disabledDate={(current) => {\n                                                          return (\n                                                            current && current.isBefore(dayjs().endOf(\"day\"), \"day\")\n                                                          );\n                                                        }}\n                                                      />\n                                                    )}\n                                                  />\n                                    \n                                                  {errors.endTime && (\n                                                    <p className=\"text-red-500 text-sm\">\n                                                      {errors.endTime.message}\n                                                    </p>\n                                                  )}\n                                                </div>\n                                    \n                                    \n                                                 <div className=\"\">\n                                               \n                                                  <label className={`${inputLabelClassName}`}>\n                                                    Km <span className=\"text-red-600\">*</span>\n                                                  </label>\n                                                 \n                                              \n                                                    \n                                                   \n                                                       <input\n                                                                      type=\"number\"\n                                                                      {...register(\"km\", {\n                                                                        required: \"km is required\",\n                                                                      })}\n                                                                      className={`placeholder: ${inputClassName} ${errors.km\n                                                                        ? \"border-[1px] \"\n                                                                        : \"border-gray-300\"\n                                                                        }`}\n                                                                      placeholder=\"Enter Km\"\n                                                                    />                                  \n                                              \n                                    \n                                                  {errors.km && (\n                                                    <p className=\"text-red-500 text-sm\">\n                                                      {errors.km.message}\n                                                    </p>\n                                                  )}\n                                                </div>\n                        <div className=\"flex justify-end items-center m-2\">\n                        <Button key=\"checkin\"  type=\"primary\" onClick={()=>{handleVisitorCheckin()}} >\n                      Check In\n                    </Button>\n                    </div>\n                                    \n                    \n                                 \n                                  </div>\n                                  <div className=\"flex justify-end space-x-2 mt-4\">\n                                    \n                                  </div>\n                              \n                              </div>\n                            </Modal>\n\n\n\n                            <Modal   \n                              className=\"antmodalclassName\"\n                              \n                              title=\"Visitor Request\"\n                              width={600}\n                              height={400}\n                              open={cashBookModal}\n                              onCancel={()=>{\n                                \n                                setCashBookModal(false)\n                                setValue('amount',0)\n          setValue('naration','')\n          setValue('expencehead', { value: '', label: '' });\n          setValue('date',null)\n                                reset()\n                            }}\n                              footer={null}\n                            >\n\n\n                               \n      \n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-4 gap-2 md:my-1 px-3 md:mt-4\">\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Expence Head</label>\n              <Controller\n                name=\"expencehead\"\n                control={control}\n                rules={{ required: \"Expence Head is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    onFocus={() => {\n                      const reqPayload = {\n                        directorId: \"\",\n                        companyId: userInfoglobal?.userType === \"admin\"\n                          ? CompanyId\n                          : userInfoglobal?.userType === \"company\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.companyId,\n                        branchId: userInfoglobal?.userType === \"company\" ||\n                          userInfoglobal?.userType === \"admin\" ||\n                          userInfoglobal?.userType === \"companyDirector\"\n                          ? BranchId\n                          : userInfoglobal?.userType === \"companyBranch\"\n                            ? userInfoglobal?._id\n                            : userInfoglobal?.branchId,\n                        text: \"\",\n                        sort: true,\n                        status: \"\",\n                        isPagination: true,\n                      }\n                      dispatch(expenseTypeSearch(reqPayload));\n                    }} // API call triggers only when focused\n                    {...field}\n                    options={expenseTypeList?.map((expence) => ({\n                      value: expence?._id,\n                      label: expence?.name,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.expencehead ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Expence Head\"\n                  />\n                )}\n              />\n              {errors.expencehead && <p className=\"text-red-500 text-sm\">{errors.expencehead.message}</p>}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Amount <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"number\"\n                {...register(\"amount\", {\n                  required: \"Amount is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.amount ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Amount\"\n              />\n              {errors.amount && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.amount.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration <span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.naration ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>Bill Date</label>\n              <Controller\n                name=\"date\"\n                control={control}\n                render={({ field }) => (\n                  <CustomDatePicker\n                    field={field}\n                    errors={errors}\n                    // disabledDate={(current) => {\n                    //   if (!current) return true;\n\n                    //   const today = dayjs(\"05-02-2025\").startOf('day');\n                    //   const currentDate = current.startOf('day');\n                    //   const dayOfMonth = today.date();\n\n                    //   if (dayOfMonth <= 5) {\n                    //     // --- Last 5 days of previous month ---\n                    //     const prevMonth = today.subtract(1, 'month');\n                    //     const endOfPrevMonth = prevMonth.endOf('month').startOf('day');\n                    //     const startOfLast5PrevMonth = prevMonth\n                    //       .date(endOfPrevMonth.date() - 4)\n                    //       .startOf('day');\n\n                    //     const isInLast5PrevMonth =\n                    //       (currentDate.isAfter(startOfLast5PrevMonth) || currentDate.isSame(startOfLast5PrevMonth)) &&\n                    //       (currentDate.isBefore(endOfPrevMonth) || currentDate.isSame(endOfPrevMonth));\n\n                    //     // --- Current month: 1st to today ---\n                    //     const startOfCurrentMonth = today.startOf('month');\n                    //     const isFromStartToToday =\n                    //       (currentDate.isAfter(startOfCurrentMonth) || currentDate.isSame(startOfCurrentMonth)) &&\n                    //       (currentDate.isBefore(today) || currentDate.isSame(today));\n\n                    //     return !(isInLast5PrevMonth || isFromStartToToday);\n                    //   } else {\n                    //     // After 5th of month: allow only past dates in current month\n                    //     const startOfCurrentMonth = today.startOf('month');\n\n                    //     const isInCurrentMonth =\n                    //       (currentDate.isAfter(startOfCurrentMonth) || currentDate.isSame(startOfCurrentMonth)) &&\n                    //       (currentDate.isBefore(today) || currentDate.isSame(today));\n\n                    //     return !isInCurrentMonth;\n                    //   }\n                    // }}\n                  />\n                )}\n              />\n              {errors.date && <p className=\"text-red-500 text-sm\">Date is required</p>}\n            </div>\n            \n\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"button\"\n              disabled={cashbookLoading}\n              className={`${cashbookLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded`}\n              onClick={()=>{handleCashBookFunc()}}\n            >\n              {cashbookLoading ? <ListLoader /> : 'Submit'}\n            </button>\n          </div>\n        \n   \n                            </Modal>\n            </div>\n            {visitorList?.length > 0 &&\n                <CustomPagination\n                    totalCount={totalVisitorCount}\n                    pageSize={limit}\n                    currentPage={currentPage}\n                    onChange={onPaginationChange}\n                />}\n        </GlobalLayout>\n    )\n}\nexport default EmployeeVisitorList"],"names":["control","handleSubmit","setValue","formState","errors","reset","register","watch","useForm","shouldUnregister","userCompanyId","userDirectorId","userBranchId","userEmployeId","userDepartmentId","userDesignationId","userType","getUserIds","visitorList","totalVisitorCount","visitorGeneralList","loading","useSelector","state","visitor","departmentListData","department","branchList","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","employeList","employe","dispatch","useNavigate","useDispatch","searchText","setSearchText","useState","companyId","useWatch","name","defaultValue","branchId","departmentId","employee","checkin","checkout","km","category","expenseHead","amount","naration","date","cashBookModal","setCashBookModal","useEffect","companySearch","text","sort","status","isPagination","currentPage","setCurrentPage","fetchVisitorCatList","reqListData","page","limit","reqPayload","employeId","getGeneralVisitorList","expenseTypeList","expenceHead","CompanyId","BranchId","cashbookLoading","cashbook","isPreview","setIsPreview","formData","setFormData","attachment","branchSearch","_id","Number","visitorData","setVisitorData","visitorModal","setVisitorModal","_jsx","GlobalLayout","children","className","_jsxs","onChange","e","class","colSpan","Loader2","length","map","element","index","_element$name","_element$category","_element$mobile","_element$mobile2","_element$employeData","_element$reason","mobile","code","number","employeData","Tooltip","placement","title","fullName","alt","src","process","profileImage","reason","timeDurationStart","moment","format","timeDurationEnd","checkInTime","checkOutTime","createdBy","onClick","type","FaCheck","size","PiPaypalLogoThin","Modal","width","height","open","onCancel","footer","inputLabelClassName","Controller","showTime","rules","required","render","_ref","field","CustomDatePicker","disabledDate","current","isBefore","dayjs","endOf","startTime","message","_ref2","endTime","_objectSpread","inputClassName","placeholder","Button","handleVisitorCheckin","finalPayload","kilometer","updateGeneralVisitor","then","data","error","value","label","_ref3","ReactSelect","onFocus","directorId","expenseTypeSearch","options","expence","classNamePrefix","inputLabelClassNameReactSelect","expencehead","_ref4","disabled","handleCashBookFunc","createcashbook","ListLoader","CustomPagination","totalCount","pageSize"],"sourceRoot":""}