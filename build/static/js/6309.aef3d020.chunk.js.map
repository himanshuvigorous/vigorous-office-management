{"version":3,"file":"static/js/6309.aef3d020.chunk.js","mappings":"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","sources":["pages/global/other/workType/EditWorkType.js"],"sourcesContent":["import { Controller, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect } from \"react\";\nimport {\n  domainName,\n  inputAntdSelectClassName,\n  inputClassName,\n  inputLabelClassName,\n} from \"../../../../constents/global\";\nimport { employeSearch } from \"../../../employeManagement/employeFeatures/_employe_reducers\";\nimport { branchSearch } from \"../../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { getWorkTypeDetails, updateWorkType } from \"./WorkTypeFeatures/_work_type_reducers\";\nimport { Select } from \"antd\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ListLoader from \"../../../../global_layouts/ListLoader\";\n\n\nconst EditWorkType = () => {\n  const { loading: workTypeLoading } = useSelector((state) => state.workType);\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { workTypeEnc } = useParams();\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const workTypeId = decrypt(workTypeEnc);\n  const { workTypeDetails } = useSelector((state) => state.workType);\n  const { companyList, companyListLoading } = useSelector((state) => state.company);\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n  // useEffect(() => {\n  //   dispatch(employeSearch());\n  // }, []);\n\n  useEffect(() => {\n    let reqData = {\n      _id: workTypeId,\n    };\n    dispatch(getWorkTypeDetails(reqData));\n  }, []);\n\n  const CompanyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: \"\",\n  });\n\n  useEffect(() => {\n    if (workTypeDetails) {\n      setValue(\"PDCompanyId\", workTypeDetails?.companyId);\n      setValue(\"PDBranchId\", workTypeDetails?.branchId);\n      setValue(\"name\", workTypeDetails?.name);\n      setValue(\"status\", workTypeDetails?.status);\n    }\n  }, [workTypeDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: workTypeId,\n      companyId: userInfoglobal?.userType === \"admin\" ? data?.PDCompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n      directorId: userInfoglobal?.userType === \"companyDirector\" ? userInfoglobal?._id : userInfoglobal?.directorId,\n      branchId: (userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" || userInfoglobal?.userType === \"company\") ? data?.PDBranchId : userInfoglobal?.userType === \"companyBranch\" ? userInfoglobal?._id : userInfoglobal?.branchId,\n      name: data?.name,\n      status: typeof data?.status === 'string' ? JSON.parse(data?.status) : data?.status,\n      isDeleted: false,\n    };\n    dispatch(updateWorkType(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  };\n  useEffect(() => {\n    if (\n      CompanyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId: userInfoglobal?.userType === \"admin\" ? CompanyId : userInfoglobal?.userType === \"company\" ? userInfoglobal?._id : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [CompanyId])\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Company Name <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"PDCompanyId\", {\n                  required: \"company is required\",\n                })}\n                className={` ${inputClassName} ${errors.PDCompanyId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n              >\n                <option className=\"\" value=\"\">\n                  Select Company\n                </option>\n                {companyList?.map((type) => (\n                  <option value={type?._id}>{type?.fullName}</option>\n                ))}\n              </select> */}\n              <Controller\n                control={control}\n                name=\"PDCompanyId\"\n                rules={{ required: \"Company is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                  >\n                    <Select.Option value=\"\">Select Company</Select.Option>\n                    {companyListLoading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : companyList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                )}\n              />\n              {errors.PDCompanyId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDCompanyId.message}\n                </p>\n              )}\n            </div>}\n            {(userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"companyDirector\") && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Branch Name <span className=\"text-red-600\">*</span>\n              </label>\n              <Controller\n                name=\"PDBranchId\"\n                control={control}\n                rules={{ required: \"Branch is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.PDBranchId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Branch\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Branch</Select.Option>\n                    {branchListloading ? <Select.Option disabled>\n                      <ListLoader />\n                    </Select.Option> : (branchList?.map((type) => (\n                      <Select.Option key={type?._id} value={type?._id}>\n                        {type?.fullName}\n                      </Select.Option>\n                    )))}\n                  </Select>\n                )}\n              />\n              {errors.PDBranchId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.PDBranchId.message}\n                </p>\n              )}\n            </div>}\n\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>Work Type Name <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: \"Work Type is required\",\n                })}\n                className={`${inputClassName} ${errors.name ? \"border-[1px] \" : \"border-gray-300\"}`}\n                placeholder=\"Enter Work Type\"\n              />\n              {errors.name && (\n                <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\n              )}\n            </div>\n\n            <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              <Controller\n                name=\"status\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`${inputAntdSelectClassName} ${errors.status ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Status\"\n                    showSearch\n                    filterOption={(input, option) =>\n                      String(option?.children).toLowerCase().includes(input.toLowerCase())\n                    }\n                  >\n                    <Select.Option value=\"\">Select Status</Select.Option>\n                    <Select.Option value={true}>Active</Select.Option>\n                    <Select.Option value={false}>In Active</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && <p className=\"text-red-500 text-sm\">{errors.status.message}</p>}\n            </div>\n\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              disabled={workTypeLoading}\n              className={`${workTypeLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n            >\n              {workTypeLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n};\n\nexport default EditWorkType;\n"],"names":["EditWorkType","loading","workTypeLoading","useSelector","state","workType","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","workTypeEnc","useParams","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","workTypeId","decrypt","workTypeDetails","companyList","companyListLoading","company","branchList","branchListloading","branch","useEffect","reqData","_id","getWorkTypeDetails","CompanyId","useWatch","name","defaultValue","companyId","branchId","status","userType","branchSearch","text","sort","isPagination","companySearch","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","finalPayload","PDCompanyId","directorId","PDBranchId","isDeleted","updateWorkType","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","Option","value","disabled","ListLoader","map","type","fullName","message","_ref2","placeholder","showSearch","filterOption","input","option","String","toLowerCase","includes","inputClassName","_ref3","Loader"],"sourceRoot":""}