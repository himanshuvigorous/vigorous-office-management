{"version":3,"file":"static/js/1374.8f25b711.chunk.js","mappings":"yYAyBA,MAuhCA,EAvhCoBA,KAAO,IAADC,EAAAC,EACxB,MAAM,SACJC,EAAQ,aACRC,EAAY,QACZC,EAAO,MACPC,EACAC,WAAW,OAAEC,GAAQ,SACrBC,IACEC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAEf,KAEI,eAAEC,IAAmBC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMC,UAClD,aAAEC,IAAiBC,EAAAA,EAAAA,KACnBC,GAAYC,EAAAA,EAAAA,IAAQH,GACpBI,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,YAAEC,IAAgBX,EAAAA,EAAAA,IAAaC,GAAUA,EAAMW,UAC/C,WAAEC,IAAeb,EAAAA,EAAAA,IAAaC,GAAUA,EAAMa,QAC9CC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,aAADC,OAAcC,EAAAA,OAC9D,WAAEC,IAAetB,EAAAA,EAAAA,IAAaC,GAAUA,EAAMsB,QAC9CC,GAAYC,EAAAA,EAAAA,IAAS,CAAEjC,UAASkC,KAAM,cAAeC,aAAc,KACnEC,GAAWH,EAAAA,EAAAA,IAAS,CAAEjC,UAASkC,KAAM,aAAcC,aAAc,MACjE,sBAAEE,IAA0B7B,EAAAA,EAAAA,IAAaC,GAAUA,EAAM6B,gBACzD,kBAAEC,IAAsB/B,EAAAA,EAAAA,IAAaC,GAAUA,EAAMa,SACrD,YAAEkB,IAAgBhC,EAAAA,EAAAA,IACrBC,GAAUA,EAAMgC,UAEb,gBAAEC,IAAoBlC,EAAAA,EAAAA,IAAYC,GAASA,EAAMkC,cACjD,gBAAEC,IAAoBpC,EAAAA,EAAAA,IACzBC,GAAUA,EAAMoC,UAEb,mBAAEC,IAAuBtC,EAAAA,EAAAA,IAAaC,GAAUA,EAAMsC,aACtD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,IAAWC,EAAAA,EAAAA,IAAc,CAC/CnD,UACAkC,KAAM,WAERkB,EAAAA,EAAAA,WAAU,KACUC,WAChB,GAAIxC,EAAW,CACbT,EAAS,QAAS,IAElB,IAAK,IAADkD,EAEF,MAAMC,QAAiBxC,GAASyC,EAAAA,EAAAA,GAAkB,CAAEC,IAAK5C,KAEzD,IAAK0C,EAASG,OAAiB,OAARH,QAAQ,IAARA,GAAiB,QAATD,EAARC,EAAUI,eAAO,IAAAL,GAAjBA,EAAmBM,KAAM,CAAC,IAADC,EAAAC,EAC9C,MAAMF,EAAe,OAARL,QAAQ,IAARA,GAAiB,QAATM,EAARN,EAAUI,eAAO,IAAAE,OAAT,EAARA,EAAmBD,KAEhCxD,EAAS,WAAYwD,EAAKG,UAC1B3D,EAAS,OAAQ4D,IAAOJ,EAAKK,MAAMC,OAAO,eAC1C9D,EAAS,QAASwD,EAAKO,OACvB/D,EAAS,OAAQwD,EAAKQ,WACtBhE,EAAS,uBAAwBwD,EAAKS,YACtCjE,EAAS,YAAawD,EAAKU,gBAC3BlE,EAAS,YAAawD,EAAKW,YAC3BnE,EAAS,cAAewD,EAAKY,mBAC7BpE,EAAS,WAAYwD,EAAKa,gBAC1BrE,EAAS,cAAewD,EAAKc,gBAC7BtE,EAAS,OAAQwD,EAAKe,aACtBvE,EAAS,WAAYwD,EAAKgB,cAC1BxE,EAAS,gBAAiBwD,EAAKiB,mBAG/B,MAAMC,QAAkB/D,GACtBgE,EAAAA,EAAAA,IAAgB,CACdC,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,SACfC,cAAc,EACdC,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRC,QAAS,MAGC,OAATR,QAAS,IAATA,GAAAA,EAAWpB,OACdtD,EAAS,YAAawD,EAAK0B,SAI7B,MAAMC,QAAmBxE,GACvByE,EAAAA,EAAAA,IAAa,CACXR,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,SACfK,QAAS1B,EAAK0B,QACdJ,cAAc,EACdE,MAAM,EACNC,QAAQ,KAGa,IAADI,EAAxB,GAAe,OAAVF,QAAU,IAAVA,IAAAA,EAAY7B,MACftD,EAAS,SAAuB,QAAfqF,EAAE7B,EAAK8B,gBAAQ,IAAAD,OAAA,EAAbA,EAAehC,KAIpC,MAAMkC,QAAmB5E,GACvB6E,EAAAA,EAAAA,IAAoB,CAClBC,WAAY,GACZb,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,SACfE,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRS,KAAM,UACNZ,cAAc,KAQlB,GALe,OAAVS,QAAU,IAAVA,GAAAA,EAAYjC,OACftD,EAAS,gBAAiBwD,EAAKmC,iBAIR,SAArBnC,EAAKe,YAAwB,CAC/B,MAAMqB,QAAmBjF,GAASkF,EAAAA,EAAAA,IAAiB,CAAExC,IAAKG,EAAKqB,YAChD,OAAVe,QAAU,IAAVA,GAAAA,EAAYtC,OACftD,EAAS,SAAUwD,EAAKsC,UAE5B,CAGA,GAAyB,SAArBtC,EAAKe,YAAwB,CAAC,IAADwB,EAAAC,EAAAC,EAC/B,MAAMC,QAAqBvF,GACzBwF,EAAAA,EAAAA,IAAc,CACZpB,KAAM,GACNE,QAAQ,EACRD,MAAM,EACNF,cAAc,EACdF,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,YAGbuB,EAA+B,OAAZF,QAAY,IAAZA,GAAqB,QAATH,EAAZG,EAAc3C,eAAO,IAAAwC,GAAM,QAANC,EAArBD,EAAuBvC,YAAI,IAAAwC,GAAM,QAANC,EAA3BD,EAA6BK,YAAI,IAAAJ,OAArB,EAAZA,EAAmCK,KACzDC,IAAqB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUlD,OAAQG,EAAKgD,WAEtB,OAAZN,QAAY,IAAZA,GAAAA,EAAc5C,OACjBtD,EAAS,aAAc,CAAEyG,MAAuB,OAAhBL,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB/C,IAAKqD,MAAuB,OAAhBN,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBO,UAEpF,CAGA,MAAMC,QAAoBjG,GACxBkG,EAAAA,EAAAA,IAAc,CACZpB,WAAY,GACZb,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,SACfS,SAAuB,QAAf5B,EAAEF,EAAK8B,gBAAQ,IAAA5B,OAAA,EAAbA,EAAeL,IACzB0B,KAAM,GACNC,MAAM,EACNC,OAAQ,OACRH,cAAc,KAGlB,GAAgB,OAAX8B,QAAW,IAAXA,IAAAA,EAAatD,MAAO,CAAC,IAADwD,EAAAC,EACvB,MAAMC,EAAmB,OAAJxD,QAAI,IAAJA,GAAW,QAAPsD,EAAJtD,EAAMyD,aAAK,IAAAH,GACkB,QADlBC,EAAXD,EACjBI,OAAQC,GAA4B,aAAf,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,kBAAuB,IAAAL,OADzB,EAAJA,EAEjBM,IAAKF,IAAI,CACTC,SAAU,UACVE,UAAe,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMG,UACjBC,UAAW,KACXC,SAAa,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMK,QACfC,cAAe,IACf/B,KAAM,GACNgC,UAAW,GACXC,aAAc,MAEdX,GACFnE,EAAOmE,EAEX,CAGA,MAAMY,QAAiBjH,GACrBkH,EAAAA,EAAAA,IAAW,CACT9C,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRH,cAAc,EACdF,UAAWpB,EAAKoB,UAChBC,SAAUrB,EAAKqB,YAGnB,GAAa,OAAR+C,QAAQ,IAARA,IAAAA,EAAUtE,MAAO,CAAC,IAADwE,EAAAC,EACpB,MAAMC,EAAkB,OAAJxE,QAAI,IAAJA,GAAW,QAAPsE,EAAJtE,EAAMyD,aAAK,IAAAa,GACkB,QADlBC,EAAXD,EAChBZ,OAAQC,GAA4B,YAAf,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,kBAAsB,IAAAW,OADzB,EAAJA,EAEhBV,IAAKF,IAAI,CACTC,SAAU,SACVE,UAAW,KACXC,UAAe,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMI,UACjBC,SAAa,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMK,QACfC,cAAmB,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMM,cACrB/B,KAAU,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAMzB,KACZgC,UAAe,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMO,UACjBC,aAAkB,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,gBAEpBK,GACFnF,EAAOmF,EAEX,CACF,CACF,CAAE,MAAO1E,GACP2E,QAAQ3E,MAAM,sBAAuBA,EACvC,CACF,GAGF4E,IACC,CAACzH,IAMJ,MA2FM0H,EATyBC,MAC7B,MAEMD,EAAiB,GACvB,IAAK,IAAIE,EAHS,KAGSA,GAFX,KAE4BA,IAC1CF,EAAeG,KAAK,GAAD9G,OAAI6G,EAAI,KAAA7G,OAAI6G,EAAO,IAExC,OAAOF,GAEcC,GACjBG,EAAS,CACb,UAAW,WAAY,QAAS,QAAS,MACzC,OAAQ,OAAQ,SAAU,YAAa,UACvC,WAAY,YAERC,EAAU,CAAC,UAAW,UAAW,WAAY,WAG7CC,EAAc5I,EAAM,gBAAkB,EACtC6I,EAAW7I,EAAM,aAAe,EAChC8I,EAAM9I,EAAM,QAAU,EACtB+I,GAAU/I,EAAM,YAAc,EAC9BgJ,GAAuBhJ,EAAM,wBAC7BkE,GAAQlE,EAAM,SACdiJ,GAAYjJ,EAAM,aAClBkJ,GAAalJ,EAAM,eAAiB,EA+B1C,OA7BAmD,EAAAA,EAAAA,WAAU,KAER,IAAIgG,EAAkBP,EAGlBI,KACFG,GAAmBN,GAIjB3E,KACFiF,GAAmBL,GAGrB3I,EAAS,mBAAoBgJ,GAEzBF,KAEFE,GAAmBJ,IAKrB5I,EAAS,aAAcgJ,IACtB,CAACP,EAAaC,EAAUC,EAAKC,GAASC,GAAsB9E,GAAO+E,GAAWC,GAAY/I,KAM3FiJ,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAAAC,UACXF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,QAAOD,UACpBE,EAAAA,EAAAA,MAAA,QAAMC,aAAa,MAAMF,UAAU,eAAeG,SAAU5J,EA7IhD6D,IAAU,IAADgG,EAAAC,EAAAC,EAAAC,EAAAC,EAEzB,MAAM5C,EAAmB,OAAJxD,QAAI,IAAJA,GAAW,QAAPgG,EAAJhG,EAAMyD,aAAK,IAAAuC,GAAgD,QAAhDC,EAAXD,EAAatC,OAAQC,GAA4B,aAAf,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,kBAAuB,IAAAqC,OAAvD,EAAJA,EAA6DpC,IAAKF,IAAI,CACzF,SAAY,UACZ,UAAiB,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMG,UACnB,UAAa,KAEb,SAAgB,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMK,QAClB,cAAiB,IACjB,KAAQ,GACR,UAAa,GACb,aAAgB,MAEZQ,EAAkB,OAAJxE,QAAI,IAAJA,GAAW,QAAPkG,EAAJlG,EAAMyD,aAAK,IAAAyC,GAA+C,QAA/CC,EAAXD,EAAaxC,OAAQC,GAA4B,YAAf,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,kBAAsB,IAAAuC,OAAtD,EAAJA,EAA4DtC,IAAKF,IAAI,CACvF,SAAY,SACZ,UAAa,KACb,UAAiB,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMI,UAEnB,SAAgB,OAAJJ,QAAI,IAAJA,OAAI,EAAJA,EAAMK,QAClB,cAAqB,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMM,cACvB,KAAY,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMzB,KACd,UAAiB,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAMO,UACnB,aAAoB,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,gBAGlBkC,EAAe,CACnBxG,IAAK5C,EACLmE,UAAyB,OAAdzE,QAAc,IAAdA,OAAc,EAAdA,EAAgByE,UAC3Ba,WAA0B,OAAdtF,QAAc,IAAdA,OAAc,EAAdA,EAAgBsF,WAC5BZ,SAAwB,OAAd1E,QAAc,IAAdA,OAAc,EAAdA,EAAgB0E,SAC1B,gBAAuB,OAAJrB,QAAI,IAAJA,OAAI,EAAJA,EAAMsG,cACzB,SAAgB,OAAJtG,QAAI,IAAJA,OAAI,EAAJA,EAAM7B,OAClB,QAAe,OAAJ6B,QAAI,IAAJA,OAAI,EAAJA,EAAMuG,UACjB,UAA4B,UAAX,OAAJvG,QAAI,IAAJA,OAAI,EAAJA,EAAMkC,MAAsB,OAAJlC,QAAI,IAAJA,GAAgB,QAAZoG,EAAJpG,EAAMwG,kBAAU,IAAAJ,OAAZ,EAAJA,EAAkBnD,MAAQ,GAC/D,UAA4B,UAAX,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMkC,MAAsB,OAAJlC,QAAI,IAAJA,OAAI,EAAJA,EAAMyG,OAAS,GACpD,oBAAuB,GACvB,MAAS,IAAIjC,KAAgBhB,GAC7B,SAAgB,OAAJxD,QAAI,IAAJA,OAAI,EAAJA,EAAMG,SAClB,KAAY,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAMK,KACd,eAAsB,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMiF,YACxB,MAAa,OAAJjF,QAAI,IAAJA,OAAI,EAAJA,EAAMO,MACf,YAAmB,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMmF,KACrB,WAAkB,OAAJnF,QAAI,IAAJA,OAAI,EAAJA,EAAMqF,qBACpB,iBAAwB,OAAJrF,QAAI,IAAJA,OAAI,EAAJA,EAAMkF,UAC1B,kBAAyB,OAAJlF,QAAI,IAAJA,OAAI,EAAJA,EAAMuF,WAC3B,WAAkB,OAAJvF,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,UACpB,iBAAwB,OAAJtF,QAAI,IAAJA,OAAI,EAAJA,EAAMoF,SAC1B,YAAmB,OAAJpF,QAAI,IAAJA,OAAI,EAAJA,EAAM0G,iBACrB,iBAAwB,OAAJ1G,QAAI,IAAJA,OAAI,EAAJA,EAAM2G,WAC1B,YAAmB,OAAJ3G,QAAI,IAAJA,OAAI,EAAJA,EAAMkC,KACrB,aAA+B,YAAX,OAAJlC,QAAI,IAAJA,OAAI,EAAJA,EAAMkC,MAAwB,OAAJlC,QAAI,IAAJA,OAAI,EAAJA,EAAM4G,SAAW,GAC3D,kBAAoC,UAAX,OAAJ5G,QAAI,IAAJA,OAAI,EAAJA,EAAMkC,MAAsB,OAAJlC,QAAI,IAAJA,OAAI,EAAJA,EAAM6G,cAAgB,IAErE1J,GAAS2J,EAAAA,EAAAA,IAAcT,IAAeU,KAAM/G,IACrCA,EAAKF,OAAOzC,GAAU,OAuF0DsI,SAAA,EAEjFE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gEAA+DD,SAAA,EAC5EE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,eAC/BF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAE5CE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,YAAa,CACxBgL,SAAU,mCACV,IACFtB,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAIzB,EAAOgK,UACpC,gBACA,mBAEJa,QAASA,KACPjK,GACEgE,EAAAA,EAAAA,IAAgB,CACdC,UAAyB,OAAdzE,QAAc,IAAdA,OAAc,EAAdA,EAAgByE,UAC3BC,SAAwB,OAAd1E,QAAc,IAAdA,OAAc,EAAdA,EAAgB0E,SAC1BC,cAAc,EACdC,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRC,QAAS,OAIf2F,SAAWC,IAAO,IAADC,EACf/K,EAAS,aAA6B,OAAfsC,QAAe,IAAfA,GAAiE,QAAlDyI,EAAfzI,EAAiBgE,KAAM3E,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQ0B,OAAQyH,EAAEE,OAAOvE,cAAM,IAAAsE,OAAlD,EAAfA,EAAmEE,kBAC1F9B,SAAA,EAEFF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,UAAU3C,MAAM,GAAE0C,SAAC,sBAGrB,OAAf7G,QAAe,IAAfA,OAAe,EAAfA,EAAiB+E,IAAI,CAAC6D,EAAQC,KAC7B9B,EAAAA,EAAAA,MAAA,UAAQ5C,MAAa,OAANyE,QAAM,IAANA,OAAM,EAANA,EAAQ7H,IAAI8F,SAAA,CAAQ,OAAN+B,QAAM,IAANA,OAAM,EAANA,EAAQvE,SAAS,IAAQ,OAANuE,QAAM,IAANA,OAAM,EAANA,EAAQnB,UAAU,YAGrEhK,EAAOgK,YACNd,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAOgK,UAAUqB,cAKxB/B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,WACnCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAExCE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,SAAU,CACrBgL,SAAU,wBACV,IACFE,QAASA,KACPjK,GAASyE,EAAAA,EAAAA,IAAa,CACpBR,UAAyB,OAAdzE,QAAc,IAAdA,OAAc,EAAdA,EAAgByE,UAC3BC,SAAwB,OAAd1E,QAAc,IAAdA,OAAc,EAAdA,EAAgB0E,SAC1B,WAAc,GACd,eAAkB,GAClB,WAAc,GACdK,QAASrF,EAAM,aACf,KAAQ,GACR,MAAQ,EACR,QAAU,EACV,cAAgB,MAGpBuJ,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAIzB,EAAO4B,OACpC,gBACA,mBACCwH,SAAA,EAGLF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,UAAU3C,MAAM,GAAE0C,SAAC,kBAG1B,OAAVzH,QAAU,IAAVA,OAAU,EAAVA,EAAY2F,IAAI,CAAC6D,EAAQC,KACxBlC,EAAAA,EAAAA,KAAA,UAAQxC,MAAa,OAANyE,QAAM,IAANA,OAAM,EAANA,EAAQ7H,IAAI8F,SAAQ,OAAN+B,QAAM,IAANA,OAAM,EAANA,EAAQvE,gBAGxC5G,EAAO4B,SACNsH,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAO4B,OAAOyJ,cAIrB/B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,aAAYD,SAAA,EACzBE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,oBAC1BF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEjDE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,gBAAiB,CAC5BgL,SAAU,iCACV,IACFtB,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAIzB,EAAO+J,cAAgB,gBAAkB,mBAE1Ec,QAASA,KACPjK,GACE6E,EAAAA,EAAAA,IAAoB,CAClBZ,UAAyB,OAAdzE,QAAc,IAAdA,OAAc,EAAdA,EAAgByE,UAC3BC,SAAwB,OAAd1E,QAAc,IAAdA,OAAc,EAAdA,EAAgB0E,SAC1BY,WAAY,GACZV,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRS,KAAM,UACNZ,cAAc,EACduG,cAAe,GACfC,aAAc,OAGlBnC,SAAA,EAEFF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,GAAG3C,MAAM,GAAE0C,SAAC,kBAIR,OAArBlH,QAAqB,IAArBA,OAAqB,EAArBA,EAAuBoF,IAAKkE,IAC3BtC,EAAAA,EAAAA,KAAA,UAAQxC,MAAc,OAAP8E,QAAO,IAAPA,OAAO,EAAPA,EAASlI,IAAI8F,SAAS,OAAPoC,QAAO,IAAPA,OAAO,EAAPA,EAASC,gBAG1CzL,EAAO+J,gBACNb,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAO+J,cAAcsB,iBAM9BnC,EAAAA,EAAAA,KAAA,OAAAE,SACGvG,EAAOyE,IAAI,CAACF,EAAMgE,KAAK,IAAAM,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAA,OACtBvF,EAAAA,EAAAA,MAAA,OAAmBD,UAAU,yCAAwCD,SAAA,EACnEF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,8CAA6CD,UAC1DF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,aAAayF,KAAM,GAAInJ,KAAK,SAASoJ,QAASA,IAAMhM,EAAOqI,GAAOhC,UAClFF,EAAAA,EAAAA,KAAC8F,EAAAA,IAAQ,SAGb1F,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gEAA+DD,SAAA,EAC5EE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,eAC5CE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,SAAD8B,OAAU2J,EAAK,cAAc,CAAET,SAAU,2BAA0B,IAC/E3I,aAAcoF,EAAKC,SACnBgC,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAP0L,EAAN1L,EAAQkH,aAAK,IAAAwE,GAAS,QAATC,EAAbD,EAAgBN,UAAM,IAAAO,GAAtBA,EAAwBtE,SAAW,gBAAkB,mBACtFyD,SAAWC,IAET9K,EAAS,SAADwB,OAAU2J,EAAK,cAAcL,EAAEE,OAAOvE,OAC9CzG,EAAS,SAADwB,OAAU2J,EAAK,YAAY,GACnCnL,EAAS,SAADwB,OAAU2J,EAAK,eAAe,IACtCnL,EAAS,SAADwB,OAAU2J,EAAK,eAAe,KAEtChC,SAAA,EAEFF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,UAAS0C,SAAC,aACxBF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,SAAQ0C,SAAC,wBAElB,OAANpJ,QAAM,IAANA,GAAa,QAAP4L,EAAN5L,EAAQkH,aAAK,IAAA0E,GAAS,QAATC,EAAbD,EAAgBR,UAAM,IAAAS,OAAhB,EAANA,EAAwBxE,YACvB6B,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAP8L,EAAN9L,EAAQkH,aAAK,IAAA4E,GAAS,QAATC,EAAbD,EAAgBV,UAAM,IAAAW,GAAU,QAAVC,EAAtBD,EAAwB1E,gBAAQ,IAAA2E,OAA1B,EAANA,EAAkCX,aAIpC,WAAtCvL,EAAM,SAAD2B,OAAU2J,EAAK,iBACnB9B,EAAAA,EAAAA,MAAA2F,EAAAA,SAAA,CAAA7F,SAAA,EAEEE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,iBAC5CE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEG,QAASA,KACPjK,GACEkH,EAAAA,EAAAA,IAAW,CACT9C,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRH,cAAc,EACdF,UAAyB,OAAdzE,QAAc,IAAdA,OAAc,EAAdA,EAAgByE,UAC3BC,SAAwB,OAAd1E,QAAc,IAAdA,OAAc,EAAdA,EAAgB0E,cAK5BnF,EAAS,SAAD8B,OAAU2J,EAAK,eAAe,CAAET,SAAU,6BAA4B,IAClF3I,aAAcoF,EAAKI,UACnB6B,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAPiM,EAANjM,EAAQkH,aAAK,IAAA+E,GAAS,QAATC,EAAbD,EAAgBb,UAAM,IAAAc,GAAtBA,EAAwB1E,UAAY,gBAAkB,mBAAoB4B,SAAA,EAE3GF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,UAAU3C,MAAM,GAAE0C,SAAC,oBAGlB,OAAlBzG,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB2E,IAAI,CAAC6D,EAAQC,KAChClC,EAAAA,EAAAA,KAAA,UAAQxC,MAAa,OAANyE,QAAM,IAANA,OAAM,EAANA,EAAQ7H,IAAI8F,SAAQ,OAAN+B,QAAM,IAANA,OAAM,EAANA,EAAQpJ,aAGlC,OAAN/B,QAAM,IAANA,GAAa,QAAPmM,EAANnM,EAAQkH,aAAK,IAAAiF,GAAS,QAATC,EAAbD,EAAgBf,UAAM,IAAAgB,OAAhB,EAANA,EAAwB5E,aACvB0B,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAPqM,EAANrM,EAAQkH,aAAK,IAAAmF,GAAS,QAATC,EAAbD,EAAgBjB,UAAM,IAAAkB,GAAW,QAAXC,EAAtBD,EAAwB9E,iBAAS,IAAA+E,OAA3B,EAANA,EAAmClB,cAM5EnC,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBAAiBD,UAC9BE,EAAAA,EAAAA,MAAA,OAAKD,UAAS,QAAA5H,OAA4C,WAAlC3B,EAAM,SAAD2B,OAAU2J,EAAK,WAAyB,6BAA+BtL,EAAM,SAAD2B,OAAU2J,EAAK,WAAY,6BAA+B,6BAA4B,cAAahC,SAAA,EAC1ME,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,mBAC3BF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEhDE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACA1I,cAAckN,EAAAA,EAAAA,OACRvP,EAAS,SAAD8B,OAAU2J,EAAK,mBAAmB,CAC5CT,SAAU,gCACV,IACFtB,UAAS,GAAA5H,OAAKmJ,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAPwM,EAANxM,EAAQkH,aAAK,IAAAsF,GAAS,QAATC,EAAbD,EAAgBpB,UAAM,IAAAqB,GAAtBA,EAAwB/E,cAAgB,gBAAkB,mBAAoB0B,SAAA,EAE9GF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,GAAE0C,SAAC,0BAChBhB,EAAed,IAAI,CAACgB,EAAM8C,KACzBlC,EAAAA,EAAAA,KAAA,UAAoBxC,MAAO4B,EAAKc,SAC7Bd,GADU8C,SAKV,OAANpL,QAAM,IAANA,GAAa,QAAP0M,EAAN1M,EAAQkH,aAAK,IAAAwF,GAAS,QAATC,EAAbD,EAAgBtB,UAAM,IAAAuB,OAAhB,EAANA,EAAwBjF,iBACvBwB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAP4M,EAAN5M,EAAQkH,aAAK,IAAA0F,GAAS,QAATC,EAAbD,EAAgBxB,UAAM,IAAAyB,OAAhB,EAANA,EAAwBnF,cAAc2D,cAI/E/B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,SACrCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEtCE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,SAAD8B,OAAU2J,EAAK,UAAU,CACnCT,SAAU,sBACV,IACFtB,UAAS,GAAA5H,OAAKmJ,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAP8M,EAAN9M,EAAQkH,aAAK,IAAA4F,GAAS,QAATC,EAAbD,EAAgB1B,UAAM,IAAA2B,GAAtBA,EAAwBpH,KAAO,gBAAkB,mBAAoByD,SAAA,EAErGF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,GAAE0C,SAAC,iBACjBF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,WAAU0C,SAAC,cACzBF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,UAAS0C,SAAC,aACxBF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,SAAQ0C,SAAC,gBAElB,OAANpJ,QAAM,IAANA,GAAa,QAAPgN,EAANhN,EAAQkH,aAAK,IAAA8F,GAAS,QAATC,EAAbD,EAAgB5B,UAAM,IAAA6B,OAAhB,EAANA,EAAwBtH,QACvBuD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAPkN,EAANlN,EAAQkH,aAAK,IAAAgG,GAAS,QAATC,EAAbD,EAAgB9B,UAAM,IAAA+B,OAAhB,EAANA,EAAwBxH,KAAK0F,aAInC,aAAlCvL,EAAM,SAAD2B,OAAU2J,EAAK,aACnB9B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,YAClCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEzCE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,SAAD8B,OAAU2J,EAAK,kBAAkB,CAC3CT,SAAU,6BACV,IACFtB,UAAS,GAAA5H,OAAKmJ,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAPoN,EAANpN,EAAQkH,aAAK,IAAAkG,GAAS,QAATC,EAAbD,EAAgBhC,UAAM,IAAAiC,GAAtBA,EAAwBzF,aAAe,gBAAkB,mBAAoBwB,SAAA,EAE7GF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,GAAE0C,SAAC,mBAChBX,EAAQnB,IAAK6H,IACZjG,EAAAA,EAAAA,KAAA,UAAkBxC,MAAOyI,EAAI/F,SAC1B+F,GADUA,SAKV,OAANnP,QAAM,IAANA,GAAa,QAAPsN,EAANtN,EAAQkH,aAAK,IAAAoG,GAAS,QAATC,EAAbD,EAAgBlC,UAAM,IAAAmC,OAAhB,EAANA,EAAwB3F,gBACvBsB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAPwN,GAANxN,EAAQkH,aAAK,IAAAsG,IAAS,QAATC,GAAbD,GAAgBpC,UAAM,IAAAqC,QAAhB,EAANA,GAAwB7F,aAAayD,aAK7C,YAAlCvL,EAAM,SAAD2B,OAAU2J,EAAK,aACnB9B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,UACpCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEvCE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,SAAD8B,OAAU2J,EAAK,eAAe,CACxCT,SAAU,uBACV,IACFtB,UAAS,GAAA5H,OAAKmJ,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAP0N,GAAN1N,EAAQkH,aAAK,IAAAwG,IAAS,QAATC,GAAbD,GAAgBtC,UAAM,IAAAuC,IAAtBA,GAAwBhG,UAAY,gBAAkB,mBAAoByB,SAAA,EAE1GF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,GAAE0C,SAAC,iBAChBZ,EAAOlB,IAAK8H,IACXlG,EAAAA,EAAAA,KAAA,UAAoBxC,MAAO0I,EAAMhG,SAC9BgG,GADUA,SAKV,OAANpP,QAAM,IAANA,GAAa,QAAP4N,GAAN5N,EAAQkH,aAAK,IAAA0G,IAAS,QAATC,GAAbD,GAAgBxC,UAAM,IAAAyC,QAAhB,EAANA,GAAwBlG,aACvBuB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAP8N,GAAN9N,EAAQkH,aAAK,IAAA4G,IAAS,QAATC,GAAbD,GAAgB1C,UAAM,IAAA2C,QAAhB,EAANA,GAAwBpG,UAAU0D,qBAQ9C,YAAtCvL,EAAM,SAAD2B,OAAU2J,EAAK,iBAEnB9B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,gBAC5CE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM/K,EAAS,SAAD8B,OAAU2J,EAAK,eAAe,CAAET,SAAU,4BAA2B,IACjFE,QAASA,KA7XLwE,MACxB,MAAM5L,EAAO,CACXiC,WAAY,GACZb,UAC+B,WAAf,OAAdzD,QAAc,IAAdA,OAAc,EAAdA,EAAgBkO,UACZzN,EAC2B,aAAf,OAAdT,QAAc,IAAdA,OAAc,EAAdA,EAAgBkO,UACE,OAAdlO,QAAc,IAAdA,OAAc,EAAdA,EAAgBkC,IACF,OAAdlC,QAAc,IAAdA,OAAc,EAAdA,EAAgByD,UACxBC,SAC+B,aAAf,OAAd1D,QAAc,IAAdA,OAAc,EAAdA,EAAgBkO,WAAuD,WAAf,OAAdlO,QAAc,IAAdA,OAAc,EAAdA,EAAgBkO,WAAqD,qBAAf,OAAdlO,QAAc,IAAdA,OAAc,EAAdA,EAAgBkO,UAAiCrN,EAAwC,mBAAf,OAAdb,QAAc,IAAdA,OAAc,EAAdA,EAAgBkO,UAC5I,OAAdlO,QAAc,IAAdA,OAAc,EAAdA,EAAgBkC,IACF,OAAdlC,QAAc,IAAdA,OAAc,EAAdA,EAAgB0D,SACtBS,SAAUzF,EAAM,UAChB,KAAQ,GACR,MAAQ,EACR,OAAU,OACV,cAAgB,GAElBc,GAASkG,EAAAA,EAAAA,IAAcrD,KA2WD4L,IAEFvE,SAAWC,IACT,GAA0C,YAAtCjL,EAAM,SAAD2B,OAAU2J,EAAK,eAA6B,CAAC,IAADmE,EACnDtP,EAAS,SAADwB,OAAU2J,EAAK,YAA2B,OAAf3I,QAAe,IAAfA,GAA+D,QAAhD8M,EAAf9M,EAAiB8D,KAAK4E,IAAgB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQ7H,OAAQyH,EAAEE,OAAOvE,cAAM,IAAA6I,OAAhD,EAAfA,EAAiEnF,YACpG,MAAMoF,EAAQ3M,EAAO4M,OAAO,CAACC,EAAKC,EAAOC,IAChCF,GAAOG,WAAW/P,EAAM,SAAD2B,OAAUmO,EAAC,eAAgB,GACxD,GACH3P,EAAS,cAAeuP,EAC1B,GAEFnG,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAPgO,GAANhO,EAAQkH,aAAK,IAAA8G,IAAS,QAATC,GAAbD,GAAgB5C,UAAM,IAAA6C,IAAtBA,GAAwB1G,UAAY,gBAAkB,mBAAoB6B,SAAA,EAE3GF,EAAAA,EAAAA,KAAA,UAAQG,UAAU,UAAU3C,MAAM,GAAE0C,SAAC,kBAGrB,OAAf3G,QAAe,IAAfA,OAAe,EAAfA,EAAiB6E,IAAI,CAAC6D,EAAQC,KAC7B9B,EAAAA,EAAAA,MAAA,UAAQ5C,MAAa,OAANyE,QAAM,IAANA,OAAM,EAANA,EAAQ7H,IAAI8F,SAAA,CAAQ,OAAN+B,QAAM,IAANA,OAAM,EAANA,EAAQ2E,WAAW,IAAQ,OAAN3E,QAAM,IAANA,OAAM,EAANA,EAAQ4E,cAAc,aAGrE,OAAN/P,QAAM,IAANA,GAAa,QAAPkO,GAANlO,EAAQkH,aAAK,IAAAgH,IAAS,QAATC,GAAbD,GAAgB9C,UAAM,IAAA+C,QAAhB,EAANA,GAAwB5G,aACvB2B,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAPoO,GAANpO,EAAQkH,aAAK,IAAAkH,IAAS,QAATC,GAAbD,GAAgBhD,UAAM,IAAAiD,IAAW,QAAXC,GAAtBD,GAAwB9G,iBAAS,IAAA+G,QAA3B,EAANA,GAAmCjD,iBAKhFnC,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gEAA+DD,UAY5EE,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,YAC5CF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,SACJqK,KAAK,OACNC,SAAgD,YAAtCnQ,EAAM,SAAD2B,OAAU2J,EAAK,gBAC1BzL,EAAS,SAAD8B,OAAU2J,EAAK,YAAY,CAAET,SAAU,wBAAuB,IAC1EG,SAAWC,IACT,MAAMmF,EAAgBL,WAAW9E,EAAEE,OAAOvE,QAAU,EACpDzG,EAAS,SAADwB,OAAU2J,EAAK,YAAY8E,GAGnC,MAAMV,EAAQ3M,EAAO4M,OAAO,CAACC,EAAKC,EAAOC,IAChCF,GAAOG,WAAW/P,EAAM,SAAD2B,OAAUmO,EAAC,eAAgB,GACxD,GACH3P,EAAS,cAAeuP,IAI1BnG,UAAS,IAAA5H,OAA4C,YAAtC3B,EAAM,SAAD2B,OAAU2J,EAAK,eAA8B+E,EAAAA,GAAyBvF,EAAAA,GAAc,KAAAnJ,OAAU,OAANzB,QAAM,IAANA,GAAa,QAAPuO,GAANvO,EAAQkH,aAAK,IAAAqH,IAAS,QAATC,GAAbD,GAAgBnD,UAAM,IAAAoD,IAAtBA,GAAwB/G,OAAS,gBAAkB,uBAE1J,OAANzH,QAAM,IAANA,GAAa,QAAPyO,GAANzO,EAAQkH,aAAK,IAAAuH,IAAS,QAATC,GAAbD,GAAgBrD,UAAM,IAAAsD,QAAhB,EAANA,GAAwBjH,UACvByB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAQ,OAANpJ,QAAM,IAANA,GAAa,QAAP2O,GAAN3O,EAAQkH,aAAK,IAAAyH,IAAS,QAATC,GAAbD,GAAgBvD,UAAM,IAAAwD,IAAQ,QAARC,GAAtBD,GAAwBnH,cAAM,IAAAoH,QAAxB,EAANA,GAAgCxD,iBAtOnEjE,EAAKgJ,SA+OnBlH,EAAAA,EAAAA,KAAA,UACEvD,KAAK,SACLoJ,QAASA,IAAMjM,EAAO,CAAEuE,SAAU,YAClCgC,UAAU,6CAA4CD,SACvD,cAGDE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gEAA+DD,SAAA,CAC3EtJ,EAAM,cAAgB,IAAKwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EAC3CE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,2BAA0BD,SAAA,EACvCE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,EACzCF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACLe,MAAM,QACF/G,EAAS,OAAQ,CACnBgL,SAAU,sBACV,IACFtB,UAAU,UACV,WAGJC,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,EACzCF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACLe,MAAM,UACF/G,EAAS,OAAQ,CACnBgL,SAAU,sBACV,IACFtB,UAAU,UACV,aAGJC,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,EACzCF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACLe,MAAM,QACF/G,EAAS,OAAQ,CACnBgL,SAAU,sBACV,IACFtB,UAAU,UACV,aAKLrJ,EAAO2F,OACNuD,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAO2F,KAAK0F,aAMlBvL,EAAM,cAAgB,GAAuB,SAAlBA,EAAM,UAAsBwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACvEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,eAC/BF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAE5CE,EAAAA,EAAAA,MAAA,UAAAoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEM/K,EAAS,WAAU,IACvB0J,UAAS,GAAA5H,OAAKmJ,EAAAA,GAAc,MAAAnJ,OAAKzB,EAAOkK,OACpC,gBACA,kBAAiB,KAErBW,QAASA,KACPjK,GAASkF,EAAAA,EAAAA,IAAiB,CACxBxC,IAAmB,OAAdlD,QAAc,IAAdA,OAAc,EAAdA,EAAgB0E,aAEvBsE,SAAA,EAGFF,EAAAA,EAAAA,KAAA,UAAQxC,MAAM,GAAE0C,SAAC,iBAIE,OAAjBhH,QAAiB,IAAjBA,GAAuB,QAAN3C,EAAjB2C,EAAmBqB,YAAI,IAAAhE,OAAN,EAAjBA,EAAyB4Q,YAA6B,OAAjBjO,QAAiB,IAAjBA,GAAuB,QAAN1C,EAAjB0C,EAAmBqB,YAAI,IAAA/D,OAAN,EAAjBA,EAAyB2Q,SAASC,QAAS,GAChFlO,EAAkBqB,KAAK4M,SAAS/I,IAAK3B,IACnCuD,EAAAA,EAAAA,KAAA,UAAuBxC,MAAOf,EAAKrC,IAAI8F,SAAA,GAAA3H,OACjCkE,EAAK4K,SAAQ,MAAA9O,OAAKkE,EAAK6K,WAAU,MAD1B7K,EAAKrC,UAMvBtD,EAAOkK,SACNhB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAOkK,OAAOmB,aAIpBvL,EAAM,cAAgB,GAAuB,SAAlBA,EAAM,UAAsBwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,SAAQD,SAAA,EAC7EF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,cAC5CF,EAAAA,EAAAA,KAACuH,EAAAA,GAAU,CACT1O,KAAK,aACLlC,QAASA,EACT6Q,MAAO,CAAE/F,SAAU,wBACnBgG,OAAQC,IAAA,IAAC,MAAEjB,GAAOiB,EAAA,OAChB1H,EAAAA,EAAAA,KAAC2H,EAAAA,IAAWnG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACNiF,GAAK,IACT9E,QAASA,IAAMjK,GAASwF,EAAAA,EAAAA,IAAc,CACpCpB,KAAM,GACNE,QAAQ,EACRD,MAAM,EACN6L,KAAM,GACNC,KAAM,GACNhM,cAAc,EACdiM,aAAc,GACdC,cAAe,GACfpM,UAAyB,OAAdzE,QAAc,IAAdA,OAAc,EAAdA,EAAgByE,UAC3BC,SAAwB,OAAd1E,QAAc,IAAdA,OAAc,EAAdA,EAAgB0E,YAE5BoM,QAAoB,OAAX7O,QAAW,IAAXA,OAAW,EAAXA,EAAaiF,IAAKd,IAAQ,CACjCE,MAAe,OAARF,QAAQ,IAARA,OAAQ,EAARA,EAAUlD,IACjBqD,MAAe,OAARH,QAAQ,IAARA,OAAQ,EAARA,EAAUI,YAEnBuK,gBAAgB,eAChB9H,UAAS,GAAA5H,OAAK2P,EAAAA,GAA8B,KAAA3P,OAAIzB,EAAOiK,WAAa,gBAAkB,mBACtFoH,YAAY,wBAIjBrR,EAAOiK,aAAcf,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAAEpJ,EAAOiK,WAAWoB,aAE9EvL,EAAM,cAAgB,GAAuB,WAAlBA,EAAM,UAAwBwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACzEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,aAE1CF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEjCF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACDhG,EAAS,WAAY,CACvBgL,SAAU,0BAEV,IACFtB,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAIzB,EAAOqK,SAAW,gBAAkB,mBAErEgH,YAAY,qBAEbrR,EAAOqK,WACNnB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAOqK,SAASgB,aAItBvL,EAAM,cAAgB,GAAuB,SAAlBA,EAAM,UAAsBwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACvEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,kBAE1CF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEjCF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACDhG,EAAS,gBAAiB,CAC5BgL,SAAU,gCAEV,IACFtB,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAIzB,EAAOsK,cAAgB,gBAAkB,mBAE1E+G,YAAY,qBAEbrR,EAAOsK,gBACNpB,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAOsK,cAAce,cAI5B/B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,YAClCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAEzCF,EAAAA,EAAAA,KAAA,YAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEM/K,EAAS,WAAY,CACvBgL,SAAU,0BAEV,IACFtB,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAIzB,EAAO4D,SAAW,gBAAkB,mBAErEyN,YAAY,oBAEbrR,EAAO4D,WACNsF,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAO4D,SAASyH,cAIvB/B,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAA,CAAC,QACtCF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAcD,SAAC,UAErCF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACDhG,EAAS,OAAQ,CACnBgL,SAAU,sBACV,IACFtB,UAAS,IAAA5H,OAAMmJ,EAAAA,GAAc,KAAAnJ,OAAIzB,EAAO8D,KAAO,gBAAkB,mBAEjEuN,YAAY,gBAEbrR,EAAO8D,OACNoF,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAO8D,KAAKuH,iBAMrB/B,EAAAA,EAAAA,MAAA,OAAAF,SAAA,EACEE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,GAAmB,sBAAqBrB,SAAA,EAC3DF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,GAAA,CAAO/E,KAAK,YAAehG,EAAS,2BACpCuJ,EAAAA,EAAAA,KAAA,QAAMG,UAAS,mBAAqBD,SAAC,oBAEvCE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,GAAmB,sBAAqBrB,SAAA,EAC3DF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,GAAA,CAAO/E,KAAK,YAAehG,EAAS,YACpCuJ,EAAAA,EAAAA,KAAA,QAAMG,UAAS,mBAAqBD,SAAC,eAEvCE,EAAAA,EAAAA,MAAA,SAAOD,UAAS,GAAA5H,OAAKgJ,EAAAA,GAAmB,sBAAqBrB,SAAA,EAC3DF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,GAAA,CAAO/E,KAAK,YAAehG,EAAS,gBACpCuJ,EAAAA,EAAAA,KAAA,QAAMG,UAAS,mBAAqBD,SAAC,sBAGzCF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,6CAA4CD,UACzDE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,sBAG5CF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACDhG,EAAS,cAAe,CAAC,IAAE,IAC/B0J,UAAS,GAAA5H,OAAKmJ,EAAAA,IACdyG,YAAY,cACZpB,UAAQ,KAETjQ,EAAOsR,kBACNpI,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBD,SAChCpJ,EAAOyH,OAAO4D,aAIpBvL,EAAM,0BACLwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,cAC5CF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,SACJqK,KAAK,QACFrQ,EAAS,WAAY,CAAC,IAAE,IAC5B0J,UAAS,GAAA5H,OAAKmJ,EAAAA,IACdyG,YAAY,iBAIjBvR,EAAM,WACLwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,SAC5CF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,SAASqK,KAAK,QACfrQ,EAAS,MAAO,CAAC,IAAE,IACvB0J,UAAS,GAAA5H,OAAKmJ,EAAAA,IACdyG,YAAY,aAIlB/H,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,kBAG5CF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACDhG,EAAS,mBAAoB,CAAC,IAAE,IACpC0J,UAAS,GAAA5H,OAAKmJ,EAAAA,IACdyG,YAAY,QACZpB,UAAQ,QAIXnQ,EAAM,eACLwJ,EAAAA,EAAAA,MAAA2F,EAAAA,SAAA,CAAA7F,SAAA,EACEE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,aAC5CF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,SACJqK,KAAK,QACFrQ,EAAS,UAAW,CACtB4R,UAAWzR,EAAM,cAAgBA,EAAM,cAAgB,QACvD,IACF0R,IAAK1R,EAAM,cAAgBA,EAAM,cAAgB,KACjDuJ,UAAS,GAAA5H,OAAKmJ,EAAAA,IACdyG,YAAY,iBAGhB/H,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAeD,SAAA,CAAC,IAAEtJ,EAAM,eAAkB,mBAAqBA,EAAM,qBAIxFwJ,EAAAA,EAAAA,MAAA,OAAKD,UAAU,GAAED,SAAA,EACfF,EAAAA,EAAAA,KAAA,SAAOG,UAAS,GAAA5H,OAAKgJ,EAAAA,IAAsBrB,SAAC,iBAG5CF,EAAAA,EAAAA,KAAA,SAAAwB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACE/E,KAAK,QACDhG,EAAS,aAAc,CAAC,IAAE,IAC9B0J,UAAS,GAAA5H,OAAKmJ,EAAAA,IACdyG,YAAY,aACZpB,UAAQ,cAMhB/G,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mBAAkBD,UAC/BF,EAAAA,EAAAA,KAAA,UACEvD,KAAK,SACL0D,UAAU,6CAA4CD,SACvD,oB","sources":["pages/financeManagement/reciept/EditReceipt.js"],"sourcesContent":["import { Controller, useFieldArray, useForm, useWatch } from \"react-hook-form\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { domainName, getDefaultFinacialYear, inputClassName, inputDisabledClassName, inputLabelClassName, inputLabelClassNameReactSelect } from \"../../../constents/global\";\nimport { branchSearch, getBranchDetails } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\n\nimport ReactSelect from \"react-select\";\nimport { employeSearch } from \"../../employeManagement/employeFeatures/_employe_reducers\";\nimport { expenseTypeSearch } from \"../../global/other/ExpenseHead/expenseTypeFeature/_expenseType_reducers\";\nimport { fileUploadFunc } from \"../../global/other/fileManagement/FileManagementFeatures/_file_management_reducers\";\nimport { createreceipt, getreceiptDetails, updatereceipt } from \"./receiptFeature/_receipt_reducers\";\nimport { clientSearch } from \"../../client/clientManagement/clientFeatures/_client_reducers\";\nimport { clientGrpSearch } from \"../../client/clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport { officeAddressSearch } from \"../../global/other/officeAddressManagement/officeAddressFeature/_office_address_reducers\";\nimport { Select } from \"antd\";\nimport { getinvoiceList, invoiceSearch } from \"../invoice/invoiceFeature/_invoice_reducers\";\nimport { deptSearch } from \"../../department/departmentFeatures/_department_reducers\";\nimport { MdDelete } from \"react-icons/md\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport moment from \"moment\";\n\n\nconst EditReceipt = () => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    defaultValues: {\n\n    }\n  });\n  const { receiptDetails } = useSelector((state) => state.receipt);\n  const { receiptIdEnc } = useParams()\n  const receiptId = decrypt(receiptIdEnc)\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { companyList } = useSelector((state) => state.company);\n  const { branchList } = useSelector((state) => state.branch);\n  const userInfoglobal = JSON.parse(localStorage.getItem(`user_info_${domainName}`));\n  const { clientList } = useSelector((state) => state.client);\n  const CompanyId = useWatch({ control, name: \"PDCompanyId\", defaultValue: \"\" });\n  const BranchId = useWatch({ control, name: \"PDBranchId\", defaultValue: \"\" });\n  const { officeAddressListData } = useSelector((state) => state.officeAddress);\n  const { branchDetailsData } = useSelector((state) => state.branch);\n  const { employeList } = useSelector(\n    (state) => state.employe\n  );\n  const { clientGroupList } = useSelector(state => state.clientGroup);\n  const { invoiceListData } = useSelector(\n    (state) => state.invoice\n  );\n  const { departmentListData } = useSelector((state) => state.department);\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: \"heads\",\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      if (receiptId) {\n        setValue(\"heads\", []);\n\n        try {\n          // Fetch receipt details\n          const mainData = await dispatch(getreceiptDetails({ _id: receiptId }));\n\n          if (!mainData.error && mainData?.payload?.data) {\n            const data = mainData?.payload?.data;\n\n            setValue(\"naration\", data.naration);\n            setValue(\"date\", moment(data.date).format(\"YYYY-MM-DD\"));\n            setValue(\"isTDS\", data.isTDS);\n            setValue(\"tds\", +data.TDSAmount);\n            setValue(\"isDiscountApplicable\", data.isDiscount);\n            setValue(\"discount\", +data.discountAmount);\n            setValue(\"isAdvance\", data.isAdvanced);\n            setValue(\"maxAdvance\", +data.advancedAvailable);\n            setValue(\"advance\", +data.advancedAdjust);\n            setValue(\"totalAmount\", data.subTotalAmount);\n            setValue(\"type\", data.paymentmode);\n            setValue(\"chequeNo\", data.chequeNumber);\n            setValue(\"transactionNo\", data.transectionNumber);\n\n            // Fetch group name\n            const groupData = await dispatch(\n              clientGrpSearch({\n                companyId: data.companyId,\n                branchId: data.branchId,\n                isPagination: false,\n                text: \"\",\n                sort: true,\n                status: true,\n                groupId: \"\",\n              })\n            );\n            if (!groupData?.error) {\n              setValue(\"groupName\", data.groupId);\n            }\n\n            // Fetch client ID\n            const clientData = await dispatch(\n              clientSearch({\n                companyId: data.companyId,\n                branchId: data.branchId,\n                groupId: data.groupId,\n                isPagination: false,\n                sort: true,\n                status: true,\n              })\n            );\n            if (!clientData?.error) {\n              setValue(\"client\", data.clientId?._id);\n            }\n\n            // Fetch office address\n            const officeData = await dispatch(\n              officeAddressSearch({\n                directorId: \"\",\n                companyId: data.companyId,\n                branchId: data.branchId,\n                text: \"\",\n                sort: true,\n                status: true,\n                type: \"invoice\",\n                isPagination: false,\n              })\n            );\n            if (!officeData?.error) {\n              setValue(\"invoiceLayout\", data.receiptLayoutId);\n            }\n\n            // Fetch bank details if payment is not cash\n            if (data.paymentmode !== \"cash\") {\n              const branchData = await dispatch(getBranchDetails({ _id: data.branchId }));\n              if (!branchData?.error) {\n                setValue(\"bankId\", data.bankAccId);\n              }\n            }\n\n            // Fetch employee if payment mode is cash\n            if (data.paymentmode === \"cash\") {\n              const employeeData = await dispatch(\n                employeSearch({\n                  text: \"\",\n                  status: true,\n                  sort: true,\n                  isPagination: false,\n                  companyId: data.companyId,\n                  branchId: data.branchId,\n                })\n              );\n              const selectedEmployee = employeeData?.payload?.data?.docs?.find(\n                (employee) => employee?._id === data.employeId\n              );\n              if (!employeeData?.error) {\n                setValue(\"employeeId\", { value: selectedEmployee?._id, label: selectedEmployee?.fullName });\n              }\n            }\n\n            // Fetch invoice details\n            const invoiceData = await dispatch(\n              invoiceSearch({\n                directorId: \"\",\n                companyId: data.companyId,\n                branchId: data.branchId,\n                clientId: data.clientId?._id,\n                text: \"\",\n                sort: true,\n                status: \"Paid\",\n                isPagination: true,\n              })\n            );\n            if (!invoiceData?.error) {\n              const invoiceHeads = data?.heads\n                ?.filter((item) => item?.headType === \"invoice\")\n                ?.map((item) => ({\n                  headType: \"invoice\",\n                  invoiceId: item?.invoiceId,\n                  subHeadId: null,\n                  amount: +item?.amount,\n                  financialYear: \"-\",\n                  type: \"\",\n                  monthName: \"\",\n                  monthQuaters: \"\",\n                }));\n              if (invoiceHeads) {\n                append(invoiceHeads);\n              }\n            }\n\n            // Fetch department data\n            const deptData = await dispatch(\n              deptSearch({\n                text: \"\",\n                sort: true,\n                status: true,\n                isPagination: false,\n                companyId: data.companyId,\n                branchId: data.branchId,\n              })\n            );\n            if (!deptData?.error) {\n              const clientHeads = data?.heads\n                ?.filter((item) => item?.headType === \"client\")\n                ?.map((item) => ({\n                  headType: \"client\",\n                  invoiceId: null,\n                  subHeadId: item?.subHeadId,\n                  amount: +item?.amount,\n                  financialYear: item?.financialYear,\n                  type: item?.type,\n                  monthName: item?.monthName,\n                  monthQuaters: item?.monthQuaters,\n                }));\n              if (clientHeads) {\n                append(clientHeads);\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching data\", error);\n        }\n      }\n    };\n\n    fetchData();\n  }, [receiptId]);\n\n\n\n\n\n  const onSubmit = (data) => {\n\n    const invoiceHeads = data?.heads?.filter((item) => item?.headType === \"invoice\")?.map((item) => ({\n      \"headType\": \"invoice\",\n      \"invoiceId\": item?.invoiceId,\n      \"subHeadId\": null,\n      // \"description\": item?.description,\n      \"amount\": + item?.amount,\n      \"financialYear\": \"-\",\n      \"type\": \"\",\n      \"monthName\": \"\",\n      \"monthQuaters\": \"\"\n    }))\n    const clientHeads = data?.heads?.filter((item) => item?.headType === \"client\")?.map((item) => ({\n      \"headType\": \"client\",\n      \"invoiceId\": null,\n      \"subHeadId\": item?.subHeadId,\n      // \"description\": item?.description,\n      \"amount\": + item?.amount,\n      \"financialYear\": item?.financialYear,\n      \"type\": item?.type,\n      \"monthName\": item?.monthName,\n      \"monthQuaters\": item?.monthQuaters\n    }))\n\n    const finalPayload = {\n      _id: receiptId,\n      companyId: receiptDetails?.companyId,\n      directorId: receiptDetails?.directorId,\n      branchId: receiptDetails?.branchId,\n      \"receiptLayoutId\": data?.invoiceLayout,\n      \"clientId\": data?.client,\n      \"groupId\": data?.groupName,\n      \"employeId\": data?.type === 'cash' ? data?.employeeId?.value : '',\n      \"bankAccId\": data?.type !== 'cash' ? data?.bankId : '',\n      \"advancedAvailableId\": \"\",\n      \"heads\": [...clientHeads, ...invoiceHeads],\n      \"naration\": data?.naration,\n      \"date\": data?.date,\n      \"subTotalAmount\": data?.totalAmount,\n      \"isTDS\": data?.isTDS,\n      \"TDSAmount\": + data?.tds,\n      \"isDiscount\": data?.isDiscountApplicable,\n      \"discountAmount\": + data?.discount,\n      \"advancedAvailable\": data?.maxAdvance,\n      \"isAdvanced\": data?.isAdvance,\n      \"advancedAdjust\": + data?.advance,\n      \"totalAmount\": data?.totalBeforeGrand,\n      \"grandTotalAmount\": data?.grandTotal,\n      \"paymentmode\": data?.type,\n      \"chequeNumber\": data?.type === 'cheque' ? data?.chequeNo : '',\n      \"transectionNumber\": data?.type === 'bank' ? data?.transactionNo : '',\n    }\n    dispatch(updatereceipt(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n\n  };\n\n\n\n  const getinvoicerequest = () => {\n    const data = {\n      directorId: \"\",\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? CompanyId :\n          userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      branchId:\n        userInfoglobal?.userType === \"company\" || userInfoglobal?.userType === \"admin\" || userInfoglobal?.userType === \"companyDirector\" ? BranchId : userInfoglobal?.userType === \"companyBranch\"\n          ? userInfoglobal?._id\n          : userInfoglobal?.branchId,\n      clientId: watch(\"client\"),\n      \"text\": \"\",\n      \"sort\": true,\n      \"status\": \"Paid\",\n      \"isPagination\": true,\n    };\n    dispatch(invoiceSearch(data));\n  };\n  const generateFinancialYears = () => {\n    const startYear = 2005;\n    const endYear = 2034;\n    const financialYears = [];\n    for (let year = startYear; year <= endYear; year++) {\n      financialYears.push(`${year}-${year + 1}`);\n    }\n    return financialYears;\n  };\n  const financialYears = generateFinancialYears();\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\",\n    \"June\", \"July\", \"August\", \"September\", \"October\",\n    \"November\", \"December\"\n  ];\n  const quarter = [\"Jan-Mar\", \"Apr-Jun\", \"Jul-Sept\", \"Oct-Dec\"];\n\n\n  const totalAmount = watch(\"totalAmount\") || 0;\n  const discount = watch(\"discount\") || 0;\n  const tds = watch(\"tds\") || 0;\n  const advance = watch(\"advance\") || 0;\n  const isDiscountApplicable = watch(\"isDiscountApplicable\");\n  const isTDS = watch(\"isTDS\");\n  const isAdvance = watch(\"isAdvance\");\n  const maxAdvance = watch(\"maxAdvance\") || 0;\n\n  useEffect(() => {\n    // Calculate the grand total when values change\n    let calculatedTotal = totalAmount;\n\n    // Apply discount if applicable\n    if (isDiscountApplicable) {\n      calculatedTotal -= discount;\n    }\n\n    // Apply TDS if applicable\n    if (isTDS) {\n      calculatedTotal -= tds;\n    }\n\n    setValue(\"totalBeforeGrand\", calculatedTotal);\n    // Apply advance if applicable, ensuring it's not higher than maxAdvance\n    if (isAdvance) {\n\n      calculatedTotal -= advance;\n    }\n\n\n    // Set the grand total\n    setValue(\"grandTotal\", calculatedTotal);\n  }, [totalAmount, discount, tds, advance, isDiscountApplicable, isTDS, isAdvance, maxAdvance, setValue]);\n\n\n\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Group Type <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"groupName\", {\n                  required: \"Organization type is required\",\n                })}\n                className={` ${inputClassName} ${errors.groupName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                onFocus={() => {\n                  dispatch(\n                    clientGrpSearch({\n                      companyId: receiptDetails?.companyId,\n                      branchId: receiptDetails?.branchId,\n                      isPagination: false,\n                      text: \"\",\n                      sort: true,\n                      status: true,\n                      groupId: \"\",\n                    })\n                  )\n                }}\n                onChange={(e) => {\n                  setValue(\"maxAdvance\", clientGroupList?.find((client) => client?._id === e.target.value)?.advancedBalance)\n                }}\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Group Type\n                </option>\n                {clientGroupList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}({elment?.groupName})</option>\n                ))}\n              </select>\n              {errors.groupName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.groupName.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Client <span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"client\", {\n                  required: \"Client is required\",\n                })}\n                onFocus={() => {\n                  dispatch(clientSearch({\n                    companyId: receiptDetails?.companyId,\n                    branchId: receiptDetails?.branchId,\n                    \"directorId\": \"\",\n                    \"organizationId\": \"\",\n                    \"industryId\": \"\",\n                    groupId: watch(\"groupName\"),\n                    \"text\": \"\",\n                    \"sort\": true,\n                    \"status\": true,\n                    \"isPagination\": false,\n                  }))\n                }}\n                className={` ${inputClassName} ${errors.client\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n\n              >\n                <option className=\"text-xs\" value=\"\">\n                  Select Client\n                </option>\n                {clientList?.map((elment, index) => (\n                  <option value={elment?._id}>{elment?.fullName}</option>\n                ))}\n              </select>\n              {errors.client && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.client.message}\n                </p>\n              )}\n            </div>\n            <div className=\"col-span-2\">\n              <label className={`${inputLabelClassName}`}>\n                Firm Layout Name<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n                {...register(\"invoiceLayout\", {\n                  required: \"Invoice layout  is required\",\n                })}\n                className={` ${inputClassName} ${errors.invoiceLayout ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                onFocus={() => {\n                  dispatch(\n                    officeAddressSearch({\n                      companyId: receiptDetails?.companyId,\n                      branchId: receiptDetails?.branchId,\n                      directorId: \"\",\n                      text: \"\",\n                      sort: true,\n                      status: true,\n                      type: \"invoice\",\n                      isPagination: false,\n                      bankAccountId: \"\",\n                      isGSTEnabled: \"\",\n                    })\n                  );\n                }}\n              >\n                <option className=\"\" value=\"\">\n                  Select Layout\n                </option>\n\n                {officeAddressListData?.map((element) => (\n                  <option value={element?._id}>{element?.firmName}</option>\n                ))}\n              </select>\n              {errors.invoiceLayout && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.invoiceLayout.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div >\n            {fields.map((item, index) => (\n              <div key={item.id} className=\"border border-gray-300 rounded-md my-2\" >\n                <div className=\"flex justify-end bg-header rounded-t-md p-2\">\n                  <button className=\"text-white\" size={20} type=\"button\" onClick={() => remove(index)}>\n                    <MdDelete />\n                  </button>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Head Type</label>\n                    <select\n                      {...register(`heads[${index}].headType`, { required: \"Head type is required\" })}\n                      defaultValue={item.headType}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.headType ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      onChange={(e) => {\n\n                        setValue(`heads[${index}].headType`, e.target.value)\n                        setValue(`heads[${index}].amount`, 0)\n                        setValue(`heads[${index}].subHeadId`, \"\")\n                        setValue(`heads[${index}].invoiceId`, \"\")\n\n                      }}\n                    >\n                      <option value=\"invoice\">Invoice</option>\n                      <option value=\"client\">Client Expense</option>\n                    </select>\n                    {errors?.heads?.[index]?.headType && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.headType?.message}</p>\n                    )}\n                  </div>\n\n                  {watch(`heads[${index}].headType`) === \"client\" && (\n                    < >\n\n                      <div>\n                        <label className={`${inputLabelClassName}`}>Sub Head ID</label>\n                        <select\n                          onFocus={() => {\n                            dispatch(\n                              deptSearch({\n                                text: \"\",\n                                sort: true,\n                                status: true,\n                                isPagination: false,\n                                companyId: receiptDetails?.companyId,\n                                branchId: receiptDetails?.branchId,\n\n                              })\n                            );\n                          }}\n                          {...register(`heads[${index}].subHeadId`, { required: \"Sub Head ID is required\" })}\n                          defaultValue={item.subHeadId}\n                          className={` ${inputClassName} ${errors?.heads?.[index]?.subHeadId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                        >\n                          <option className=\"text-xs\" value=\"\">\n                            Select Sub Head\n                          </option>\n                          {departmentListData?.map((elment, index) => (\n                            <option value={elment?._id}>{elment?.name}</option>\n                          ))}\n                        </select>\n                        {errors?.heads?.[index]?.subHeadId && (\n                          <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.subHeadId?.message}</p>\n                        )}\n\n\n                      </div>\n\n                      <div className=\"col-span-2 my-2\">\n                        <div className={`grid ${watch(`heads[${index}].type`) === \"Yearly\" ? \"grid-cols-1 md:grid-cols-2\" : watch(`heads[${index}].type`) ? \"grid-cols-1 md:grid-cols-3\" : \"grid-cols-1 md:grid-cols-2\"} space-x-4`}>\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Financial Year <span className=\"text-red-600\">*</span>\n                            </label>\n                            <select\n                            defaultValue={getDefaultFinacialYear()}\n                              {...register(`heads[${index}].financialYear`, {\n                                required: \"Financial year is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.financialYear ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Financial Year</option>\n                              {financialYears.map((year, index) => (\n                                <option key={index} value={year}>\n                                  {year}\n                                </option>\n                              ))}\n                            </select>\n                            {errors?.heads?.[index]?.financialYear && (\n                              <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.financialYear.message}</p>\n                            )}\n                          </div>\n\n                          <div>\n                            <label className={`${inputLabelClassName}`}>\n                              Type <span className=\"text-red-600\">*</span>\n                            </label>\n                            <select\n                              {...register(`heads[${index}].type`, {\n                                required: \"Type is required\",\n                              })}\n                              className={`${inputClassName} ${errors?.heads?.[index]?.type ? \"border-[1px] \" : \"border-gray-300\"}`}\n                            >\n                              <option value=\"\">Select Type</option>\n                              <option value=\"Quaterly\">Quaterly</option>\n                              <option value=\"Monthly\">Monthly</option>\n                              <option value=\"Yearly\">Yearly</option>\n                            </select>\n                            {errors?.heads?.[index]?.type && (\n                              <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.type.message}</p>\n                            )}\n                          </div>\n\n                          {watch(`heads[${index}].type`) === \"Quaterly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Quarter <span className=\"text-red-600\">*</span>\n                              </label>\n                              <select\n                                {...register(`heads[${index}].monthQuaters`, {\n                                  required: \"Reset Month is required\",\n                                })}\n                                className={`${inputClassName} ${errors?.heads?.[index]?.monthQuaters ? \"border-[1px] \" : \"border-gray-300\"}`}\n                              >\n                                <option value=\"\">Select Quarter</option>\n                                {quarter.map((qtr) => (\n                                  <option key={qtr} value={qtr}>\n                                    {qtr}\n                                  </option>\n                                ))}\n                              </select>\n                              {errors?.heads?.[index]?.monthQuaters && (\n                                <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.monthQuaters.message}</p>\n                              )}\n                            </div>\n                          )}\n\n                          {watch(`heads[${index}].type`) === \"Monthly\" && (\n                            <div>\n                              <label className={`${inputLabelClassName}`}>\n                                Month <span className=\"text-red-600\">*</span>\n                              </label>\n                              <select\n                                {...register(`heads[${index}].monthName`, {\n                                  required: \"Month is required\",\n                                })}\n                                className={`${inputClassName} ${errors?.heads?.[index]?.monthName ? \"border-[1px] \" : \"border-gray-300\"}`}\n                              >\n                                <option value=\"\">Select Month</option>\n                                {months.map((month) => (\n                                  <option key={month} value={month}>\n                                    {month}\n                                  </option>\n                                ))}\n                              </select>\n                              {errors?.heads?.[index]?.monthName && (\n                                <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.monthName.message}</p>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </>\n                  )}\n                  {watch(`heads[${index}].headType`) === \"invoice\" && (\n\n                    <div>\n                      <label className={`${inputLabelClassName}`}>Invoice ID</label>\n                      <select\n                        {...register(`heads[${index}].invoiceId`, { required: \"Invoice ID is required\" })}\n                        onFocus={() => {\n                          getinvoicerequest()\n                        }}\n                        onChange={(e) => {\n                          if (watch(`heads[${index}].headType`) === \"invoice\") {\n                            setValue(`heads[${index}].amount`, invoiceListData?.find(elment => elment?._id === e.target.value)?.grandTotal)\n                            const total = fields.reduce((sum, field, i) => {\n                              return sum + (parseFloat(watch(`heads[${i}].amount`)) || 0);\n                            }, 0);\n                            setValue('totalAmount', total)\n                          }\n                        }}\n                        className={` ${inputClassName} ${errors?.heads?.[index]?.invoiceId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                      >\n                        <option className=\"text-xs\" value=\"\">\n                          Select Client\n                        </option>\n                        {invoiceListData?.map((elment, index) => (\n                          <option value={elment?._id}>{elment?.clientName}({elment?.invoiceNumber})</option>\n                        ))}\n                      </select>\n                      {errors?.heads?.[index]?.invoiceId && (\n                        <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.invoiceId?.message}</p>\n                      )}\n                    </div>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 md:gap-8 md:my-1 px-3 md:mt-4\">\n                  {/* <div>\n                    <label className={`${inputLabelClassName}`}>Description</label>\n                    <input\n                      {...register(`heads[${index}].description`, { required: \"Description is required\" })}\n                      defaultValue={item.description}\n                      className={` ${inputClassName} ${errors?.heads?.[index]?.description ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    />\n                    {errors?.heads?.[index]?.description && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.description?.message}</p>\n                    )}\n                  </div> */}\n                  <div>\n                    <label className={`${inputLabelClassName}`}>Amount</label>\n                    <input\n                      type=\"number\"\n                       step=\"0.01\"\n                      disabled={watch(`heads[${index}].headType`) === \"invoice\"}\n                      {...register(`heads[${index}].amount`, { required: \"Amount is required\" })}\n                      onChange={(e) => {\n                        const updatedAmount = parseFloat(e.target.value) || 0;\n                        setValue(`heads[${index}].amount`, updatedAmount);\n\n\n                        const total = fields.reduce((sum, field, i) => {\n                          return sum + (parseFloat(watch(`heads[${i}].amount`)) || 0);\n                        }, 0);\n                        setValue('totalAmount', total)\n\n                      }}\n\n                      className={` ${watch(`heads[${index}].headType`) === \"invoice\" ? inputDisabledClassName : inputClassName} ${errors?.heads?.[index]?.amount ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    />\n                    {errors?.heads?.[index]?.amount && (\n                      <p className=\"text-red-500 text-sm\">{errors?.heads?.[index]?.amount?.message}</p>\n                    )}\n                  </div>\n                </div>\n\n\n              </div>\n            ))}\n          </div>\n          <button\n            type=\"button\"\n            onClick={() => append({ headType: \"invoice\" })}\n            className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n          >\n            Add more\n          </button>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 md:gap-8 md:my-1 px-3 md:mt-4\">\n            {watch(\"grandTotal\") > 0 && <div className=\"\">\n              <div className=\" flex items-center gap-4\">\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"cash\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Cash\n                </label>\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"cheque\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Cheque\n                </label>\n                <label className={`${inputLabelClassName}`}>\n                  <input\n                    type=\"radio\"\n                    value=\"bank\"\n                    {...register(\"type\", {\n                      required: \"Type is required\"\n                    })}\n                    className=\"mr-2\"\n                  />\n                  Bank\n                </label>\n              </div>\n\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.type.message}\n                </p>\n              )}\n            </div>}\n\n\n            {watch(\"grandTotal\") > 0 && watch(\"type\") !== \"cash\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Sender Bank<span className=\"text-red-600\">*</span>\n              </label>\n              <select\n\n                {...register(\"bankId\",)}\n                className={`${inputClassName}  ${errors.bankId\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                onFocus={() => {\n                  dispatch(getBranchDetails({\n                    _id: receiptDetails?.branchId\n                  }))\n                }}\n              >\n\n                <option value=''>\n                  select bank\n                </option>\n                {\n                  branchDetailsData?.data?.bankData && branchDetailsData?.data?.bankData.length > 0 &&\n                  branchDetailsData.data.bankData.map((type) => (\n                    <option key={type._id} value={type._id}>\n                      {`${type.bankName} (${type.branchName})`}\n                    </option>\n                  ))\n                }\n              </select>\n              {errors.bankId && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.bankId.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cash\" && <div className=\"w-full\">\n              <label className={`${inputLabelClassName}`}>Employee</label>\n              <Controller\n                name=\"employeeId\"\n                control={control}\n                rules={{ required: \"Employee is required\" }}\n                render={({ field }) => (\n                  <ReactSelect\n                    {...field}\n                    onFocus={() => dispatch(employeSearch({\n                      text: \"\",\n                      status: true,\n                      sort: true,\n                      isTL: \"\",\n                      isHR: \"\",\n                      isPagination: false,\n                      departmentId: '',\n                      designationId: '',\n                      companyId: receiptDetails?.companyId,\n                      branchId: receiptDetails?.branchId,\n                    }))}\n                    options={employeList?.map((employee) => ({\n                      value: employee?._id,\n                      label: employee?.fullName,\n                    }))}\n                    classNamePrefix=\"react-select\"\n                    className={`${inputLabelClassNameReactSelect} ${errors.employeeId ? \"border-[1px] \" : \"border-gray-300\"}`}\n                    placeholder=\"Select Employee\"\n                  />\n                )}\n              />\n              {errors.employeeId && <p className=\"text-red-500 text-sm\">{errors.employeeId.message}</p>}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"cheque\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Cheque No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"chequeNo\", {\n                  required: \"chequeNo is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.chequeNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Cheque no\"\n              />\n              {errors.chequeNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.chequeNo.message}\n                </p>\n              )}\n            </div>}\n            {watch(\"grandTotal\") > 0 && watch(\"type\") === \"bank\" && <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Transaction No\n                <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"transactionNo\", {\n                  required: \"transaction No is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.transactionNo ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Cheque no\"\n              />\n              {errors.transactionNo && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.transactionNo.message}\n                </p>\n              )}\n            </div>}\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Naration<span className=\"text-red-600\">*</span>\n              </label>\n              <textarea\n\n                {...register(\"naration\", {\n                  required: \"Naration is required\",\n\n                })}\n                className={` ${inputClassName} ${errors.naration ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Naration\"\n              ></textarea>\n              {errors.naration && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.naration.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Date<span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"date\"\n                {...register(\"date\", {\n                  required: \"Date is required\",\n                })}\n                className={` ${inputClassName} ${errors.date ? \"border-[1px] \" : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Date\"\n              />\n              {errors.date && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.date.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label className={`${inputLabelClassName} flex items-center`}>\n              <input type=\"checkbox\" {...register(\"isDiscountApplicable\")} />\n              <span className={`mx-2 text-[15px]`}>Is Discount</span>\n            </label>\n            <label className={`${inputLabelClassName} flex items-center`}>\n              <input type=\"checkbox\" {...register(\"isTDS\")} />\n              <span className={`mx-2 text-[15px]`}>Is TDS</span>\n            </label>\n            <label className={`${inputLabelClassName} flex items-center`}>\n              <input type=\"checkbox\" {...register(\"isAdvance\")} />\n              <span className={`mx-2 text-[15px]`}>Is Advance</span>\n            </label>\n          </div>\n          <div className=\"w-full flex flex-row items-end justify-end\">\n            <div className=\"\">\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Sub Total Amount\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"totalAmount\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"totalAmount\"\n                  disabled\n                />\n                {errors.designationName && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.amount.message}\n                  </p>\n                )}\n              </div>\n              {watch(\"isDiscountApplicable\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>Discount</label>\n                  <input\n                    type=\"number\"\n                     step=\"0.01\"\n                    {...register(\"discount\", {})}\n                    className={`${inputClassName}`}\n                    placeholder=\"Discount\"\n                  />\n                </div>\n              )}\n              {watch(\"isTDS\") && (\n                <div className=\"\">\n                  <label className={`${inputLabelClassName}`}>TDS</label>\n                  <input\n                    type=\"number\" step=\"0.01\"\n                    {...register(\"tds\", {})}\n                    className={`${inputClassName}`}\n                    placeholder=\"TDS\"\n                  />\n                </div>\n              )}\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Total Amount\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"totalBeforeGrand\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"total\"\n                  disabled\n                // value={totalAmount - discount}\n                />\n              </div>\n              {watch(\"isAdvance\") && (\n                <>\n                  <div className=\"\">\n                    <label className={`${inputLabelClassName}`}>Advance</label>\n                    <input\n                      type=\"number\"\n                       step=\"0.01\"\n                      {...register(\"advance\", {\n                        maxLength: watch(\"maxAdvance\") ? watch(\"maxAdvance\") : null,\n                      })}\n                      max={watch(\"maxAdvance\") ? watch(\"maxAdvance\") : null}\n                      className={`${inputClassName}`}\n                      placeholder=\"Advance\"\n                    />\n                  </div>\n                  <div className=\"text-red-800 \"> {watch(\"maxAdvance\") && (\"max available : \" + watch(\"maxAdvance\"))}</div>\n                </>\n              )}\n\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Grand Total\n                </label>\n                <input\n                  type=\"text\"\n                  {...register(\"grandTotal\", {})}\n                  className={`${inputClassName}`}\n                  placeholder=\"grandTotal\"\n                  disabled\n                // value={totalAmount - discount}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              type=\"submit\"\n              className=\"bg-header text-white p-2 px-4 rounded mt-4\"\n            >\n              Submit\n            </button>\n          </div>\n        </form>\n      </div >\n    </GlobalLayout >\n  );\n};\n\nexport default EditReceipt;\n"],"names":["EditReceipt","_branchDetailsData$da","_branchDetailsData$da2","register","handleSubmit","control","watch","formState","errors","setValue","useForm","defaultValues","receiptDetails","useSelector","state","receipt","receiptIdEnc","useParams","receiptId","decrypt","dispatch","useDispatch","navigate","useNavigate","companyList","company","branchList","branch","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","clientList","client","CompanyId","useWatch","name","defaultValue","BranchId","officeAddressListData","officeAddress","branchDetailsData","employeList","employe","clientGroupList","clientGroup","invoiceListData","invoice","departmentListData","department","fields","append","remove","useFieldArray","useEffect","async","_mainData$payload","mainData","getreceiptDetails","_id","error","payload","data","_mainData$payload2","_data$clientId2","naration","moment","date","format","isTDS","TDSAmount","isDiscount","discountAmount","isAdvanced","advancedAvailable","advancedAdjust","subTotalAmount","paymentmode","chequeNumber","transectionNumber","groupData","clientGrpSearch","companyId","branchId","isPagination","text","sort","status","groupId","clientData","clientSearch","_data$clientId","clientId","officeData","officeAddressSearch","directorId","type","receiptLayoutId","branchData","getBranchDetails","bankAccId","_employeeData$payload","_employeeData$payload2","_employeeData$payload3","employeeData","employeSearch","selectedEmployee","docs","find","employee","employeId","value","label","fullName","invoiceData","invoiceSearch","_data$heads","_data$heads$filter","invoiceHeads","heads","filter","item","headType","map","invoiceId","subHeadId","amount","financialYear","monthName","monthQuaters","deptData","deptSearch","_data$heads2","_data$heads2$filter","clientHeads","console","fetchData","financialYears","generateFinancialYears","year","push","months","quarter","totalAmount","discount","tds","advance","isDiscountApplicable","isAdvance","maxAdvance","calculatedTotal","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_data$heads3","_data$heads3$filter","_data$heads4","_data$heads4$filter","_data$employeeId","finalPayload","invoiceLayout","groupName","employeeId","bankId","totalBeforeGrand","grandTotal","chequeNo","transactionNo","updatereceipt","then","inputLabelClassName","_objectSpread","required","inputClassName","onFocus","onChange","e","_clientGroupList$find","target","advancedBalance","elment","index","message","bankAccountId","isGSTEnabled","element","firmName","_errors$heads","_errors$heads$index","_errors$heads2","_errors$heads2$index","_errors$heads3","_errors$heads3$index","_errors$heads3$index$","_errors$heads4","_errors$heads4$index","_errors$heads5","_errors$heads5$index","_errors$heads6","_errors$heads6$index","_errors$heads6$index$","_errors$heads7","_errors$heads7$index","_errors$heads8","_errors$heads8$index","_errors$heads9","_errors$heads9$index","_errors$heads0","_errors$heads0$index","_errors$heads1","_errors$heads1$index","_errors$heads10","_errors$heads10$index","_errors$heads11","_errors$heads11$index","_errors$heads12","_errors$heads12$index","_errors$heads13","_errors$heads13$index","_errors$heads14","_errors$heads14$index","_errors$heads15","_errors$heads15$index","_errors$heads16","_errors$heads16$index","_errors$heads17","_errors$heads17$index","_errors$heads18","_errors$heads18$index","_errors$heads19","_errors$heads19$index","_errors$heads19$index2","_errors$heads20","_errors$heads20$index","_errors$heads21","_errors$heads21$index","_errors$heads22","_errors$heads22$index","_errors$heads22$index2","size","onClick","MdDelete","_Fragment","getDefaultFinacialYear","qtr","month","getinvoicerequest","userType","_invoiceListData$find","total","reduce","sum","field","i","parseFloat","clientName","invoiceNumber","step","disabled","updatedAmount","inputDisabledClassName","id","bankData","length","bankName","branchName","Controller","rules","render","_ref","ReactSelect","isTL","isHR","departmentId","designationId","options","classNamePrefix","inputLabelClassNameReactSelect","placeholder","designationName","maxLength","max"],"sourceRoot":""}