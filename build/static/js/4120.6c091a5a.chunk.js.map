{"version":3,"file":"static/js/4120.6c091a5a.chunk.js","mappings":"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","sources":["pages/client/clientGroup/UpdateClientGroup.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport GlobalLayout from \"../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useForm, Controller, useWatch } from \"react-hook-form\";\nimport { decrypt } from \"../../../config/Encryption\";\nimport getUserIds from \"../../../constents/getUserIds\";\nimport {\n  inputClassName,\n  inputLabelClassName,\n  domainName,\n  inputAntdSelectClassName,\n  sortByPropertyAlphabetically,\n} from \"../../../constents/global\";\nimport { countrySearch } from \"../../global/address/country/CountryFeatures/_country_reducers\";\nimport { AutoComplete, Input, Select } from \"antd\";\nimport { companySearch } from \"../../company/companyManagement/companyFeatures/_company_reducers\";\nimport { branchSearch } from \"../../branch/branchManagement/branchFeatures/_branch_reducers\";\nimport { directorSearch } from \"../../Director/director/DirectorFeatures/_director_reducers\";\nimport {\n  getClientGrpDetails,\n  updateClientGroup,\n} from \"../clientGroup/clientGroupFeatures/_client_group_reducers\";\nimport CustomMobileCodePicker from \"../../../global_layouts/MobileCode/MobileCodePicker\";\nimport Loader from \"../../../global_layouts/Loader\";\n\nfunction UpdateClientGroup() {\n  const { loading: clientGroupLoading } = useSelector(state => state.clientGroup)\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    control,\n    formState: { errors },\n  } = useForm();\n\n  const { userCompanyId, userDirectorId, userBranchId, userType } =\n    getUserIds();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { clientGrpIdEnc } = useParams();\n  const clientGrpId = decrypt(clientGrpIdEnc);\n\n  const userInfoglobal = JSON.parse(\n    localStorage.getItem(`user_info_${domainName}`)\n  );\n  const { clientGroupDetails } = useSelector((state) => state.clientGroup);\n\n  const { companyList } = useSelector((state) => state.company);\n  const { countryListData, companyListLoading } = useSelector(\n    (state) => state.country\n  );\n  const { branchList, branchListloading } = useSelector(\n    (state) => state.branch\n  );\n\n  const companyId = useWatch({\n    control,\n    name: \"PDCompanyId\",\n    defaultValue: userCompanyId,\n  });\n\n  const directorId = useWatch({\n    control,\n    name: \"directorId\",\n    defaultValue: userDirectorId,\n  });\n\n  const branchId = useWatch({\n    control,\n    name: \"PDBranchId\",\n    defaultValue: userBranchId,\n  });\n\n  // useEffect(() => {\n  //   setValue(\"PDMobileCode\", \"+91\");\n  // }, [countryListData]);\n\n  useEffect(() => {\n    if (\n      companyId ||\n      userInfoglobal?.userType === \"company\" ||\n      userInfoglobal?.userType === \"companyDirector\"\n    ) {\n      dispatch(\n        branchSearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n          companyId:\n            userInfoglobal?.userType === \"admin\"\n              ? companyId\n              : userInfoglobal?.userType === \"company\"\n                ? userInfoglobal?._id\n                : userInfoglobal?.companyId,\n        })\n      );\n    }\n  }, [companyId]);\n\n  useEffect(() => {\n    if (userInfoglobal?.userType === \"admin\") {\n      dispatch(\n        companySearch({\n          text: \"\",\n          sort: true,\n          status: true,\n          isPagination: false,\n        })\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    let reqData = {\n      _id: clientGrpId,\n    };\n    dispatch(getClientGrpDetails(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (clientGroupDetails) {\n      setValue(\"PDCompanyId\", clientGroupDetails?.companyId);\n      setValue(\"PDBranchId\", clientGroupDetails?.branchId);\n      setValue(\"fullName\", clientGroupDetails?.fullName);\n      setValue(\"email\", clientGroupDetails?.email);\n      setValue(\"password\", clientGroupDetails?.password);\n      setValue(\"PDCode\", clientGroupDetails?.mobile?.code);\n      setValue(\"openingBalance\", clientGroupDetails?.openingBalance);\n      setValue(\"PDNumber\", clientGroupDetails?.mobile?.number);\n      setValue(\"status\", clientGroupDetails?.status ? \"true\" : \"false\");\n    }\n  }, [clientGroupDetails]);\n\n  const onSubmit = (data) => {\n    const finalPayload = {\n      _id: clientGrpId,\n      companyId:\n        userInfoglobal?.userType === \"admin\"\n          ? companyId\n          : userInfoglobal?.userType === \"company\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.companyId,\n      directorId: \"\",\n      branchId:\n        userInfoglobal?.userType === \"company\" ||\n          userInfoglobal?.userType === \"admin\" ||\n          userInfoglobal?.userType === \"companyDirector\"\n          ? branchId\n          : userInfoglobal?.userType === \"companyBranch\"\n            ? userInfoglobal?._id\n            : userInfoglobal?.branchId,\n      fullName: data?.fullName,\n      openingBalance: +data?.openingBalance,\n      email: data?.email?.toLowerCase(),\n      userType: \"clientGroup\",\n      mobile: {\n        code: data?.PDCode,\n        number: data?.PDNumber,\n      },\n      status: data?.status === \"true\" ? true : false,\n    };\n    dispatch(updateClientGroup(finalPayload)).then((data) => {\n      if (!data.error) {\n        navigate(-1);\n      }\n    });\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n        <form\n          autoComplete=\"off\"\n          className=\"mt-3\"\n          onSubmit={handleSubmit(onSubmit)}\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:my-2\">\n            {userInfoglobal?.userType === \"admin\" && (\n              <div className=\"\">\n                <label className={`${inputLabelClassName}`}>\n                  Company <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDCompanyId\"\n                  rules={{ required: \"Company is required\" }}\n                  render={({ field }) => (\n                    <Select\n                      {...field}\n                      defaultValue={\"\"}\n                      className={`${inputAntdSelectClassName} `}\n                      showSearch\n                      filterOption={(input, option) =>\n                        String(option?.children).toLowerCase().includes(input.toLowerCase())\n                      }\n                    >\n                      <Select.Option value=\"\">Select Company</Select.Option>\n                      {companyListLoading ? (\n                        <Select.Option disabled>\n                          <Loader />\n                        </Select.Option>\n                      ) : (\n                        companyList?.map((type) => (\n                          <Select.Option key={type?._id} value={type?._id}>\n                            {type?.fullName}\n                          </Select.Option>\n                        ))\n                      )}\n                    </Select>\n                  )}\n                />\n                {errors.PDCompanyId && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors.PDCompanyId.message}\n                  </p>\n                )}\n              </div>\n            )}\n            {(userInfoglobal?.userType === \"admin\" ||\n              userInfoglobal?.userType === \"company\" ||\n              userInfoglobal?.userType === \"companyDirector\") && (\n                <div>\n                  <label className={`${inputLabelClassName}`}>\n                    Branch <span className=\"text-red-600\">*</span>\n                  </label>\n\n                  <Controller\n                    control={control}\n                    name=\"PDBranchId\"\n                    rules={{ required: \"Branch is required\" }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        defaultValue={\"\"}\n                        className={`${inputAntdSelectClassName} `}\n                        showSearch\n                        filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                      >\n                        <Select.Option value=\"\">Select Branch</Select.Option>\n                        {branchListloading ? (\n                          <Select.Option disabled>\n                            <Loader />\n                          </Select.Option>\n                        ) : (\n                          sortByPropertyAlphabetically(branchList, 'fullName')?.map((type) => (\n                            <Select.Option key={type?._id} value={type?._id}>\n                              {type?.fullName}\n                            </Select.Option>\n                          ))\n                        )}\n                      </Select>\n                    )}\n                  />\n                  {errors.PDBranchId && (\n                    <p className=\"text-red-500 text-sm\">\n                      {errors.PDBranchId.message}\n                    </p>\n                  )}\n                </div>\n              )}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 md:my-2\">\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Name <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"fullName\", {\n                  required: \"Name is required\",\n                })}\n                className={`placeholder: ${inputClassName} ${errors.fullName\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Name\"\n              />\n              {errors.fullName && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.fullName.message}\n                </p>\n              )}\n            </div>\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Email <span className=\"text-red-600\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                {...register(\"email\", {\n                  required: \"Email is required\",\n                  pattern: {\n                    value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n                    message: \"Please enter a valid email address\",\n                  },\n                })}\n                className={` ${inputClassName} ${errors.email\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  }`}\n                placeholder=\"Enter Email\"\n                style={{ textTransform: \"lowercase\" }}\n              />\n              {errors.email && (\n                <p className=\"text-red-500 text-sm\">{errors.email.message}</p>\n              )}\n            </div>\n            <div className=\"flex gap-3\">\n              <div className=\"w-[150px]\">\n                <label className={`${inputLabelClassName}`}>\n                  Code <span className=\"text-red-600\">*</span>\n                </label>\n                <Controller\n                  control={control}\n                  name=\"PDCode\"\n                  rules={{ required: \"code is required\" }}\n                  render={({ field }) => (\n                    <CustomMobileCodePicker field={field} errors={errors} />\n                  )}\n                />\n                {errors[`PDCode`] && (\n                  <p className=\"text-red-500 text-sm mt-2\">\n                    {errors[`PDCode`].message}\n                  </p>\n                )}\n              </div>\n              <div className=\"w-full\">\n                <label className={`${inputLabelClassName}`}>\n                  Mobile No <span className=\"text-red-600\">*</span>\n                </label>\n                <input\n                  type=\"number\"\n                  {...register(`PDNumber`, {\n                    required: \"Mobile No is required\",\n                    minLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                    maxLength: {\n                      value: 10,\n                      message: \"Must be exactly 10 digits\",\n                    },\n                  })}\n                  className={` ${inputClassName} ${errors[`PDNumber`]\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                    }`}\n                  placeholder=\"Enter Mobile No\"\n                  maxLength={10}\n                  onInput={(e) => {\n                    if (e.target.value.length > 10) {\n                      e.target.value = e.target.value.slice(0, 10);\n                    }\n                  }}\n                />\n                {errors[`PDNumber`] && (\n                  <p className=\"text-red-500 text-sm\">\n                    {errors[`PDNumber`].message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"\">\n              <label className={`${inputLabelClassName}`}>\n                Opening Balance\n              </label>\n              <input\n                type=\"number\"\n                step=\"any\"\n                {...register(\"openingBalance\", {\n\n\n                })}\n                disabled={clientGroupDetails?.openingBalance}\n                className={` ${inputClassName} ${errors.openingBalance\n                  ? \"border-[1px] \"\n                  : \"border-gray-300\"\n                  } `}\n                placeholder=\"Enter Opening Balance\"\n\n              />\n              {errors.openingBalance && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.openingBalance.message}\n                </p>\n              )}\n            </div>\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Status <span className=\"text-red-600\">*</span>\n              </label>\n              {/* <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${\n                  errors.status\n                    ? \"border-[1px] \"\n                    : \"border-gray-300\"\n                } ${inputClassName}`}\n              >\n                <option value={\"true\"}>Active</option>\n                <option value={\"false\"}>Inactive</option>\n              </select> */}\n              <Controller\n                control={control}\n                name=\"status\"\n                rules={{ required: \"status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    defaultValue={\"\"}\n                    className={`${inputAntdSelectClassName} `}\n                  >\n                    <Select.Option value=\"\">Select status</Select.Option>\n                    <Select.Option value={\"true\"}>Active</Select.Option>\n                    <Select.Option value={\"false\"}>Inactive</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={clientGroupLoading}\n              className={`${clientGroupLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 mt-3 rounded`}\n            >\n              {clientGroupLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </GlobalLayout>\n  );\n}\nexport default UpdateClientGroup;\n"],"names":["loading","clientGroupLoading","useSelector","state","clientGroup","register","handleSubmit","setValue","control","formState","errors","useForm","userCompanyId","userDirectorId","userBranchId","userType","getUserIds","dispatch","useDispatch","navigate","useNavigate","clientGrpIdEnc","useParams","clientGrpId","decrypt","userInfoglobal","JSON","parse","localStorage","getItem","concat","domainName","clientGroupDetails","companyList","company","countryListData","companyListLoading","country","branchList","branchListloading","branch","companyId","useWatch","name","defaultValue","branchId","useEffect","branchSearch","text","sort","status","isPagination","_id","companySearch","reqData","getClientGrpDetails","_clientGroupDetails$m","_clientGroupDetails$m2","fullName","email","password","mobile","code","openingBalance","number","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","data","_data$email","finalPayload","directorId","toLowerCase","PDCode","PDNumber","updateClientGroup","then","error","inputLabelClassName","Controller","rules","required","render","_ref","field","Select","_objectSpread","inputAntdSelectClassName","showSearch","filterOption","input","option","String","includes","Option","value","disabled","Loader","map","type","PDCompanyId","message","_ref2","_sortByPropertyAlphab","sortByPropertyAlphabetically","PDBranchId","inputClassName","placeholder","pattern","style","textTransform","_ref3","CustomMobileCodePicker","minLength","maxLength","onInput","e","target","length","slice","step","_ref4"],"sourceRoot":""}