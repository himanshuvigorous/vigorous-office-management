{"version":3,"file":"static/js/5169.4f6f9239.chunk.js","mappings":"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","sources":["pages/global/other/companyPage/EditCompanyPage.js"],"sourcesContent":["import { Controller, useForm } from \"react-hook-form\";\nimport GlobalLayout from \"../../../../global_layouts/GlobalLayout/GlobalLayout\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { decrypt } from \"../../../../config/Encryption\";\nimport { useEffect, useState } from \"react\";\nimport { inputAntdSelectClassName, inputClassName, inputLabelClassName } from \"../../../../constents/global\";\nimport { companyPageUpdate, getCompanyPageById } from \"./CompanyPageFeatures/_companyPage_reducers\";\nimport Loader from \"../../../../global_layouts/Loader\";\nimport ReactQuill from \"react-quill\";\nimport { Select } from \"antd\";\nimport { Option } from \"antd/es/mentions\";\n// import { getCountryByIdFunc, updateCountryFunc } from \"../../redux/_reducers/_country_reducers\";\n\n\nfunction EditCompanyPage() {\n  const { loading: pageLoading } = useSelector((state) => state.page);\n  const {\n    register,\n    handleSubmit,\n    control,\n    setValue,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { pageIdEnc } = useParams();\n  const pageId = decrypt(pageIdEnc)\n  const [editorValue, setEditorValue] = useState(``);\n  const { companyPageByIdData } = useSelector(state => state.page)\n  useEffect(() => {\n    let reqData = {\n      _id: pageId,\n    };\n    dispatch(getCompanyPageById(reqData));\n  }, []);\n\n  useEffect(() => {\n    if (companyPageByIdData && companyPageByIdData?.data) {\n\n      setValue(\"title\", companyPageByIdData?.data?.title);\n      // setValue(\"content\", companyPageByIdData?.data?.content);\n      setEditorValue(companyPageByIdData?.data?.content);\n      setValue(\"metatitle\", companyPageByIdData?.data?.metaData.title);\n      setValue(\"metadescription\", companyPageByIdData?.data?.metaData.description);\n      setValue(\"metakeywords\", companyPageByIdData?.data?.metaData?.keywords?.join(\", \"));\n      setValue(\"status\", companyPageByIdData?.data?.status ? 'true':'false');\n      setValue(\"type\", companyPageByIdData?.data?.type);\n\n    }\n  }, [companyPageByIdData]);\n\n  const onSubmit = (data) => {\n\n    const finalPayload = {\n      _id: pageId,\n      \"title\": data?.title,\n      // \"content\": data?.content,\n      \"content\": editorValue,\n      \"metaData\": {\n        \"title\": data.metatitle,\n        \"description\": data.metadescription,\n        \"keywords\": data?.metakeywords\n          ?.split(\",\") // Split the string by commas\n          ?.map((keyword) => keyword.trim())\n      },\n      status: data?.status == \"true\" ? true : false,\n      type: data?.type,\n    };\n\n    dispatch(companyPageUpdate(finalPayload)).then((data) => {\n      if (!data.error) navigate(-1);\n    });\n  }\n\n  const handleEditorChange = (value) => {\n    setEditorValue(value);\n  };\n\n  return (\n    <GlobalLayout>\n      <div className=\"gap-4\">\n\n        <form autoComplete=\"off\" className=\"mt-2 md:px-1\" onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            {/* Title Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Title <span className=\"text-red-600\">*</span></label>\n              <input\n                type=\"text\"\n                {...register(\"title\", { required: \"Title is required\" })}\n                className={`${errors.title ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n                placeholder=\"Enter Page Title\"\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm\">{errors.title.message}</p>\n              )}\n            </div>\n            {/* Content Field */}\n            {/* <div>\n           <label className={`${inputLabelClassName}`}>Content <span className=\"text-red-600\">*</span></label>\n           <textarea\n             {...register(\"content\", { required: \"Content is required\" })}\n             className={`${errors.content ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n             placeholder=\"Enter Page Content\"\n           />\n           {errors.content && (\n             <p className=\"text-red-500 text-sm\">{errors.content.message}</p>\n           )}\n         </div> */}\n\n          </div>\n\n          <div className=\"mt-2 col-span-2\">\n            <label className={`${inputLabelClassName}`}>\n              Content <span className=\"text-red-600\">*</span>\n            </label>\n            <ReactQuill\n              value={editorValue}\n              onChange={handleEditorChange}\n              placeholder=\"Write Your page view here\"\n              modules={{\n                toolbar: [\n                  [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],\n                  [{ 'list': 'ordered' }, { 'list': 'bullet' }],\n                  ['bold', 'italic', 'underline', 'strike'],\n                  [{ 'align': [] }],\n                  ['link', 'image', 'video'],\n                  ['blockquote', 'code-block'],\n                  ['clean']\n                ],\n              }}\n              formats={['header', 'font', 'list', 'bold', 'italic', 'underline', 'link', 'align', 'clean']}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-1 gap-2 md:my-2\">\n            {/* Meta Title Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Meta Title</label>\n              <input\n                type=\"text\"\n                {...register(\"metatitle\", { required: \"Meta Title is required\" })}\n                className={`${errors.metatitle ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n                placeholder=\"Enter Meta Title\"\n              />\n              {errors.metatitle && (\n                <p className=\"text-red-500 text-sm\">{errors.metatitle.message}</p>\n              )}\n            </div>\n            {/* Meta Description Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Meta Description</label>\n              <textarea\n                {...register(\"metadescription\", { required: \"Meta Description is required\" })}\n                className={`${errors.metadescription ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n                placeholder=\"Enter Meta Description\"\n              />\n              {errors.metadescription && (\n                <p className=\"text-red-500 text-sm\">{errors.metadescription.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 md:my-2\">\n            {/* Meta Keywords Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Meta Keywords</label>\n              <input\n                type=\"text\"\n                {...register(\"metakeywords\", { required: \"Meta Keywords is required\" })}\n                className={`${errors.metakeywords ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n                placeholder=\"Enter Meta Keywords (comma separated)\"\n              />\n              {errors.metakeywords && (\n                <p className=\"text-red-500 text-sm\">{errors.metakeywords.message}</p>\n              )}\n            </div>\n\n            <div>\n              <label className={`${inputLabelClassName}`}>\n                Type <span className=\"text-red-600\">*</span>\n              </label>\n\n              <Controller\n                name=\"type\"\n                control={control}\n                rules={{ required: \"Type is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`mt-0 ${inputAntdSelectClassName} ${errors.type ? '' : 'border-gray-300'}`}\n                    placeholder=\"Select Type\"\n                     showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                  >\n                    <Option value=\"\">Select Type</Option>\n                    <Option value=\"lendingPage\">Lending Page</Option>\n                    <Option value=\"page\">page</Option>\n                  </Select>\n                )}\n              />\n\n              {errors.type && (\n                <p className=\"text-red-500 text-sm\">\n                  {errors.type.message}\n                </p>\n              )}\n            </div>\n\n            {/* Status Field */}\n            <div>\n              <label className={`${inputLabelClassName}`}>Status <span className=\"text-red-600\">*</span></label>\n              {/* <select\n                {...register(\"status\", { required: \"Status is required\" })}\n                className={`bg-white ${errors.status ? \"border-[1px] \" : \"border-gray-300\"} ${inputClassName}`}\n              >\n                <option value=\"\">Select Status</option>\n                <option value={true}>Active</option>\n                <option value={false}>Inactive</option>\n              </select> */}\n\n               <Controller\n                name=\"status\"\n                control={control}\n                rules={{ required: \"Status is required\" }}\n                render={({ field }) => (\n                  <Select\n                    {...field}\n                    className={`mt-0 ${inputAntdSelectClassName} ${errors.status ? '' : 'border-gray-300'}`}\n                    placeholder=\"Select Status\"\n                     showSearch\n                  filterOption={(input, option) =>\n                          String(option?.children).toLowerCase().includes(input.toLowerCase())\n                        }\n                  >\n                    <Select.Option value=\"\">Select Status</Select.Option>\n                    <Select.Option value=\"true\">Active</Select.Option>\n                    <Select.Option value=\"false\">Inactive</Select.Option>\n                  </Select>\n                )}\n              />\n              {errors.status && (\n                <p className=\"text-red-500 text-sm\">{errors.status.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end \">\n            <button\n              type=\"submit\"\n              disabled={pageLoading}\n              className={`${pageLoading ? 'bg-gray-400' : 'bg-header'} text-white p-2 px-4 rounded mt-3`}\n            >\n              {pageLoading ? <Loader /> : 'Submit'}\n            </button>\n          </div>\n        </form>\n      </div>\n\n    </GlobalLayout>\n  );\n}\n\nexport default EditCompanyPage;\n"],"names":["loading","pageLoading","useSelector","state","page","register","handleSubmit","control","setValue","formState","errors","useForm","dispatch","useDispatch","navigate","useNavigate","pageIdEnc","useParams","pageId","decrypt","editorValue","setEditorValue","useState","companyPageByIdData","useEffect","reqData","_id","getCompanyPageById","_companyPageByIdData$","_companyPageByIdData$2","_companyPageByIdData$3","_companyPageByIdData$4","_companyPageByIdData$5","_companyPageByIdData$6","_companyPageByIdData$7","_companyPageByIdData$8","_companyPageByIdData$9","data","title","content","metaData","description","keywords","join","status","type","_jsx","GlobalLayout","children","className","_jsxs","autoComplete","onSubmit","_data$metakeywords","_data$metakeywords$sp","finalPayload","metatitle","metadescription","metakeywords","split","map","keyword","trim","companyPageUpdate","then","error","concat","inputLabelClassName","_objectSpread","required","inputClassName","placeholder","message","ReactQuill","value","onChange","modules","toolbar","formats","Controller","name","rules","render","_ref","field","Select","inputAntdSelectClassName","showSearch","filterOption","input","option","String","toLowerCase","includes","Option","_ref2","disabled","Loader"],"sourceRoot":""}